

Microchip Technology PIC PRO Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 28 18:29:19 2017

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text24,local,class=CODE,merge=1,delta=2
    21                           	psect	text30,local,class=CODE,merge=1,delta=2
    22                           	psect	text31,local,class=CODE,merge=1,delta=2
    23                           	psect	text32,local,class=CODE,merge=1,delta=2
    24                           	psect	text42,local,class=CODE,merge=1,delta=2
    25                           	psect	text43,local,class=CODE,merge=1,delta=2
    26                           	psect	text45,local,class=CODE,merge=1,delta=2
    27                           	psect	text56,local,class=CODE,merge=1,delta=2
    28                           	psect	text57,local,class=CODE,merge=1,delta=2
    29                           	psect	text59,local,class=CODE,merge=1,delta=2
    30                           	psect	text61,local,class=CODE,merge=1,delta=2
    31                           	psect	text64,local,class=CODE,merge=1,delta=2
    32                           	psect	text65,local,class=CODE,merge=1,delta=2
    33                           	psect	text66,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	pa_nodes,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     	;# 
    38  0001                     	;# 
    39  0002                     	;# 
    40  0003                     	;# 
    41  0004                     	;# 
    42  0005                     	;# 
    43  0006                     	;# 
    44  0007                     	;# 
    45  0009                     	;# 
    46  000A                     	;# 
    47  000B                     	;# 
    48  000C                     	;# 
    49  000D                     	;# 
    50  000E                     	;# 
    51  000E                     	;# 
    52  000F                     	;# 
    53  0010                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0013                     	;# 
    57  0014                     	;# 
    58  0015                     	;# 
    59  0015                     	;# 
    60  0016                     	;# 
    61  0017                     	;# 
    62  0018                     	;# 
    63  0019                     	;# 
    64  001A                     	;# 
    65  001B                     	;# 
    66  001B                     	;# 
    67  001C                     	;# 
    68  001D                     	;# 
    69  001E                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0086                     	;# 
    74  0087                     	;# 
    75  0089                     	;# 
    76  008C                     	;# 
    77  008D                     	;# 
    78  008E                     	;# 
    79  008F                     	;# 
    80  0090                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0093                     	;# 
    84  0093                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0095                     	;# 
    88  0096                     	;# 
    89  0097                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  0105                     	;# 
    99  0107                     	;# 
   100  0108                     	;# 
   101  0109                     	;# 
   102  010C                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  0185                     	;# 
   108  0187                     	;# 
   109  0188                     	;# 
   110  0189                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0093                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0095                     	;# 
   164  0096                     	;# 
   165  0097                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  0105                     	;# 
   175  0107                     	;# 
   176  0108                     	;# 
   177  0109                     	;# 
   178  010C                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  0185                     	;# 
   184  0187                     	;# 
   185  0188                     	;# 
   186  0189                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0009                     	;# 
   198  000A                     	;# 
   199  000B                     	;# 
   200  000C                     	;# 
   201  000D                     	;# 
   202  000E                     	;# 
   203  000E                     	;# 
   204  000F                     	;# 
   205  0010                     	;# 
   206  0011                     	;# 
   207  0012                     	;# 
   208  0013                     	;# 
   209  0014                     	;# 
   210  0015                     	;# 
   211  0015                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  001A                     	;# 
   217  001B                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001D                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  0081                     	;# 
   224  0085                     	;# 
   225  0086                     	;# 
   226  0087                     	;# 
   227  0089                     	;# 
   228  008C                     	;# 
   229  008D                     	;# 
   230  008E                     	;# 
   231  008F                     	;# 
   232  0090                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0093                     	;# 
   236  0093                     	;# 
   237  0093                     	;# 
   238  0094                     	;# 
   239  0095                     	;# 
   240  0096                     	;# 
   241  0097                     	;# 
   242  0098                     	;# 
   243  0099                     	;# 
   244  009A                     	;# 
   245  009B                     	;# 
   246  009C                     	;# 
   247  009D                     	;# 
   248  009E                     	;# 
   249  009F                     	;# 
   250  0105                     	;# 
   251  0107                     	;# 
   252  0108                     	;# 
   253  0109                     	;# 
   254  010C                     	;# 
   255  010C                     	;# 
   256  010D                     	;# 
   257  010E                     	;# 
   258  010F                     	;# 
   259  0185                     	;# 
   260  0187                     	;# 
   261  0188                     	;# 
   262  0189                     	;# 
   263  018C                     	;# 
   264  018D                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  000E                     	;# 
   280  000F                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0013                     	;# 
   285  0014                     	;# 
   286  0015                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0017                     	;# 
   290  0018                     	;# 
   291  0019                     	;# 
   292  001A                     	;# 
   293  001B                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001D                     	;# 
   297  001E                     	;# 
   298  001F                     	;# 
   299  0081                     	;# 
   300  0085                     	;# 
   301  0086                     	;# 
   302  0087                     	;# 
   303  0089                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  008F                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0093                     	;# 
   312  0093                     	;# 
   313  0093                     	;# 
   314  0094                     	;# 
   315  0095                     	;# 
   316  0096                     	;# 
   317  0097                     	;# 
   318  0098                     	;# 
   319  0099                     	;# 
   320  009A                     	;# 
   321  009B                     	;# 
   322  009C                     	;# 
   323  009D                     	;# 
   324  009E                     	;# 
   325  009F                     	;# 
   326  0105                     	;# 
   327  0107                     	;# 
   328  0108                     	;# 
   329  0109                     	;# 
   330  010C                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  010F                     	;# 
   335  0185                     	;# 
   336  0187                     	;# 
   337  0188                     	;# 
   338  0189                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0089                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  008F                     	;# 
   384  0090                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0093                     	;# 
   389  0093                     	;# 
   390  0094                     	;# 
   391  0095                     	;# 
   392  0096                     	;# 
   393  0097                     	;# 
   394  0098                     	;# 
   395  0099                     	;# 
   396  009A                     	;# 
   397  009B                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  0105                     	;# 
   403  0107                     	;# 
   404  0108                     	;# 
   405  0109                     	;# 
   406  010C                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010E                     	;# 
   410  010F                     	;# 
   411  0185                     	;# 
   412  0187                     	;# 
   413  0188                     	;# 
   414  0189                     	;# 
   415  018C                     	;# 
   416  018D                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000D                     	;# 
   430  000E                     	;# 
   431  000E                     	;# 
   432  000F                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0015                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001B                     	;# 
   447  001C                     	;# 
   448  001D                     	;# 
   449  001E                     	;# 
   450  001F                     	;# 
   451  0081                     	;# 
   452  0085                     	;# 
   453  0086                     	;# 
   454  0087                     	;# 
   455  0089                     	;# 
   456  008C                     	;# 
   457  008D                     	;# 
   458  008E                     	;# 
   459  008F                     	;# 
   460  0090                     	;# 
   461  0091                     	;# 
   462  0092                     	;# 
   463  0093                     	;# 
   464  0093                     	;# 
   465  0093                     	;# 
   466  0094                     	;# 
   467  0095                     	;# 
   468  0096                     	;# 
   469  0097                     	;# 
   470  0098                     	;# 
   471  0099                     	;# 
   472  009A                     	;# 
   473  009B                     	;# 
   474  009C                     	;# 
   475  009D                     	;# 
   476  009E                     	;# 
   477  009F                     	;# 
   478  0105                     	;# 
   479  0107                     	;# 
   480  0108                     	;# 
   481  0109                     	;# 
   482  010C                     	;# 
   483  010C                     	;# 
   484  010D                     	;# 
   485  010E                     	;# 
   486  010F                     	;# 
   487  0185                     	;# 
   488  0187                     	;# 
   489  0188                     	;# 
   490  0189                     	;# 
   491  018C                     	;# 
   492  018D                     	;# 
   493                           
   494                           	psect	stringtext
   495  1800                     __pstringtext:	
   496  1800                     stringtab:	
   497  1800                     __stringtab:	
   498                           
   499                           ;	String table - string pointers are 2 bytes each
   500  1800  1BFF               	btfsc	btemp+1,7
   501  1801  280A               	ljmp	stringcode
   502  1802  1383               	bcf	3,7
   503  1803  187F               	btfsc	btemp+1,0
   504  1804  1783               	bsf	3,7
   505  1805  0800               	movf	0,w
   506  1806  0A84               	incf	4,f
   507  1807  1903               	skipnz
   508  1808  0AFF               	incf	btemp+1,f
   509  1809  0008               	return
   510  180A                     stringcode:	
   511  180A  087F               	movf	btemp+1,w
   512  180B  397F               	andlw	127
   513  180C  008A               	movwf	10
   514  180D  0804               	movf	4,w
   515  180E  0A84               	incf	4,f
   516  180F  1903               	skipnz
   517  1810  0AFF               	incf	btemp+1,f
   518  1811  0082               	movwf	2
   519  1812                     __stringbase:	
   520  1812                     __end_of__stringtab:	
   521  1812                     __npowers_:	
   522  1812  3400               	retlw	0
   523  1813  3480               	retlw	128
   524  1814  343F               	retlw	63
   525  1815  34CD               	retlw	205
   526  1816  34CC               	retlw	204
   527  1817  343D               	retlw	61
   528  1818  34D7               	retlw	215
   529  1819  3423               	retlw	35
   530  181A  343C               	retlw	60
   531  181B  3412               	retlw	18
   532  181C  3483               	retlw	131
   533  181D  343A               	retlw	58
   534  181E  34B7               	retlw	183
   535  181F  34D1               	retlw	209
   536  1820  3438               	retlw	56
   537  1821  34C6               	retlw	198
   538  1822  3427               	retlw	39
   539  1823  3437               	retlw	55
   540  1824  3438               	retlw	56
   541  1825  3486               	retlw	134
   542  1826  3435               	retlw	53
   543  1827  34C0               	retlw	192
   544  1828  34D6               	retlw	214
   545  1829  3433               	retlw	51
   546  182A  34CC               	retlw	204
   547  182B  342B               	retlw	43
   548  182C  3432               	retlw	50
   549  182D  3470               	retlw	112
   550  182E  3489               	retlw	137
   551  182F  3430               	retlw	48
   552  1830  34E7               	retlw	231
   553  1831  34DB               	retlw	219
   554  1832  342E               	retlw	46
   555  1833  34E5               	retlw	229
   556  1834  343C               	retlw	60
   557  1835  341E               	retlw	30
   558  1836  3442               	retlw	66
   559  1837  34A2               	retlw	162
   560  1838  340D               	retlw	13
   561  1839                     __end_of__npowers_:	
   562  1839                     __powers_:	
   563  1839  3400               	retlw	0
   564  183A  3480               	retlw	128
   565  183B  343F               	retlw	63
   566  183C  3400               	retlw	0
   567  183D  3420               	retlw	32
   568  183E  3441               	retlw	65
   569  183F  3400               	retlw	0
   570  1840  34C8               	retlw	200
   571  1841  3442               	retlw	66
   572  1842  3400               	retlw	0
   573  1843  347A               	retlw	122
   574  1844  3444               	retlw	68
   575  1845  3440               	retlw	64
   576  1846  341C               	retlw	28
   577  1847  3446               	retlw	70
   578  1848  3450               	retlw	80
   579  1849  34C3               	retlw	195
   580  184A  3447               	retlw	71
   581  184B  3424               	retlw	36
   582  184C  3474               	retlw	116
   583  184D  3449               	retlw	73
   584  184E  3497               	retlw	151
   585  184F  3418               	retlw	24
   586  1850  344B               	retlw	75
   587  1851  34BC               	retlw	188
   588  1852  34BE               	retlw	190
   589  1853  344C               	retlw	76
   590  1854  346B               	retlw	107
   591  1855  346E               	retlw	110
   592  1856  344E               	retlw	78
   593  1857  3403               	retlw	3
   594  1858  3415               	retlw	21
   595  1859  3450               	retlw	80
   596  185A  3479               	retlw	121
   597  185B  34AD               	retlw	173
   598  185C  3460               	retlw	96
   599  185D  34F3               	retlw	243
   600  185E  3449               	retlw	73
   601  185F  3471               	retlw	113
   602  1860                     __end_of__powers_:	
   603  1860                     _dpowers:	
   604  1860  3401               	retlw	1
   605  1861  3400               	retlw	0
   606  1862  3400               	retlw	0
   607  1863  3400               	retlw	0
   608  1864  340A               	retlw	10
   609  1865  3400               	retlw	0
   610  1866  3400               	retlw	0
   611  1867  3400               	retlw	0
   612  1868  3464               	retlw	100
   613  1869  3400               	retlw	0
   614  186A  3400               	retlw	0
   615  186B  3400               	retlw	0
   616  186C  34E8               	retlw	232
   617  186D  3403               	retlw	3
   618  186E  3400               	retlw	0
   619  186F  3400               	retlw	0
   620  1870  3410               	retlw	16
   621  1871  3427               	retlw	39
   622  1872  3400               	retlw	0
   623  1873  3400               	retlw	0
   624  1874  34A0               	retlw	160
   625  1875  3486               	retlw	134
   626  1876  3401               	retlw	1
   627  1877  3400               	retlw	0
   628  1878  3440               	retlw	64
   629  1879  3442               	retlw	66
   630  187A  340F               	retlw	15
   631  187B  3400               	retlw	0
   632  187C  3480               	retlw	128
   633  187D  3496               	retlw	150
   634  187E  3498               	retlw	152
   635  187F  3400               	retlw	0
   636  1880  3400               	retlw	0
   637  1881  34E1               	retlw	225
   638  1882  34F5               	retlw	245
   639  1883  3405               	retlw	5
   640  1884  3400               	retlw	0
   641  1885  34CA               	retlw	202
   642  1886  349A               	retlw	154
   643  1887  343B               	retlw	59
   644  1888                     __end_of_dpowers:	
   645  001F                     _ADCON0	set	31
   646  001F                     _ADCON0bits	set	31
   647  001E                     _ADRESH	set	30
   648  000B                     _INTCON	set	11
   649  000B                     _INTCONbits	set	11
   650  0001                     _TMR0	set	1
   651  0018                     _CARRY	set	24
   652  00C4                     _CREN	set	196
   653  005F                     _GIE	set	95
   654  0029                     _RA1	set	41
   655  002A                     _RA2	set	42
   656  002B                     _RA3	set	43
   657  002C                     _RA4	set	44
   658  002D                     _RA5	set	45
   659  0030                     _RB0	set	48
   660  0031                     _RB1	set	49
   661  0032                     _RB2	set	50
   662  0033                     _RB3	set	51
   663  0034                     _RB4	set	52
   664  0035                     _RB5	set	53
   665  0036                     _RB6	set	54
   666  0037                     _RB7	set	55
   667  0038                     _RC0	set	56
   668  0039                     _RC1	set	57
   669  003B                     _RC3	set	59
   670  003C                     _RC4	set	60
   671  003D                     _RC5	set	61
   672  00C7                     _SPEN	set	199
   673  009F                     _ADCON1	set	159
   674  009E                     _ADRESL	set	158
   675  0081                     _OPTION_REG	set	129
   676  0081                     _OPTION_REGbits	set	129
   677  008C                     _PIE1bits	set	140
   678  0099                     _SPBRG	set	153
   679  009A                     _SPBRGH	set	154
   680  0085                     _TRISA	set	133
   681  0086                     _TRISB	set	134
   682  0086                     _TRISBbits	set	134
   683  0087                     _TRISC	set	135
   684  0087                     _TRISCbits	set	135
   685  04C2                     _BRGH	set	1218
   686  04C4                     _SYNC	set	1220
   687  04C5                     _TXEN	set	1221
   688  010D                     _EEADR	set	269
   689  010C                     _EEDATA	set	268
   690  0188                     _ANSEL	set	392
   691  0189                     _ANSELH	set	393
   692  018C                     _EECON1	set	396
   693  018D                     _EECON2	set	397
   694  0C3B                     _BRG16	set	3131
   695  0C60                     _RD	set	3168
   696  0C61                     _WR	set	3169
   697  0C62                     _WREN	set	3170
   698  1888                     STR_6:	
   699  1888  3441               	retlw	65	;'A'
   700  1889  3469               	retlw	105	;'i'
   701  188A  3472               	retlw	114	;'r'
   702  188B  3420               	retlw	32	;' '
   703  188C  346D               	retlw	109	;'m'
   704  188D  346F               	retlw	111	;'o'
   705  188E  3469               	retlw	105	;'i'
   706  188F  3473               	retlw	115	;'s'
   707  1890  3474               	retlw	116	;'t'
   708  1891  3420               	retlw	32	;' '
   709  1892  3420               	retlw	32	;' '
   710  1893  3420               	retlw	32	;' '
   711  1894  3420               	retlw	32	;' '
   712  1895  3420               	retlw	32	;' '
   713  1896  3420               	retlw	32	;' '
   714  1897  3420               	retlw	32	;' '
   715  1898  3400               	retlw	0
   716  1899                     STR_8:	
   717  1899  3443               	retlw	67	;'C'
   718  189A  344F               	retlw	79	;'O'
   719  189B  3432               	retlw	50	;'2'
   720  189C  3420               	retlw	32	;' '
   721  189D  3469               	retlw	105	;'i'
   722  189E  346E               	retlw	110	;'n'
   723  189F  3420               	retlw	32	;' '
   724  18A0  3461               	retlw	97	;'a'
   725  18A1  3469               	retlw	105	;'i'
   726  18A2  3472               	retlw	114	;'r'
   727  18A3  3420               	retlw	32	;' '
   728  18A4  3420               	retlw	32	;' '
   729  18A5  3420               	retlw	32	;' '
   730  18A6  3420               	retlw	32	;' '
   731  18A7  3420               	retlw	32	;' '
   732  18A8  3420               	retlw	32	;' '
   733  18A9  3400               	retlw	0
   734  18AA                     STR_10:	
   735  18AA  344D               	retlw	77	;'M'
   736  18AB  3465               	retlw	101	;'e'
   737  18AC  3461               	retlw	97	;'a'
   738  18AD  3473               	retlw	115	;'s'
   739  18AE  3475               	retlw	117	;'u'
   740  18AF  3472               	retlw	114	;'r'
   741  18B0  3469               	retlw	105	;'i'
   742  18B1  346E               	retlw	110	;'n'
   743  18B2  3467               	retlw	103	;'g'
   744  18B3  342E               	retlw	46	;'.'
   745  18B4  342E               	retlw	46	;'.'
   746  18B5  342E               	retlw	46	;'.'
   747  18B6  3420               	retlw	32	;' '
   748  18B7  3420               	retlw	32	;' '
   749  18B8  3420               	retlw	32	;' '
   750  18B9  3420               	retlw	32	;' '
   751  18BA  3400               	retlw	0
   752  18BB                     STR_23:	
   753  18BB  3453               	retlw	83	;'S'
   754  18BC  3465               	retlw	101	;'e'
   755  18BD  3474               	retlw	116	;'t'
   756  18BE  3420               	retlw	32	;' '
   757  18BF  3461               	retlw	97	;'a'
   758  18C0  3469               	retlw	105	;'i'
   759  18C1  3472               	retlw	114	;'r'
   760  18C2  3420               	retlw	32	;' '
   761  18C3  3474               	retlw	116	;'t'
   762  18C4  3465               	retlw	101	;'e'
   763  18C5  346D               	retlw	109	;'m'
   764  18C6  3470               	retlw	112	;'p'
   765  18C7  342E               	retlw	46	;'.'
   766  18C8  3420               	retlw	32	;' '
   767  18C9  3420               	retlw	32	;' '
   768  18CA  3420               	retlw	32	;' '
   769  18CB  3400               	retlw	0
   770  18CC                     STR_18:	
   771  18CC  3453               	retlw	83	;'S'
   772  18CD  3465               	retlw	101	;'e'
   773  18CE  3474               	retlw	116	;'t'
   774  18CF  3420               	retlw	32	;' '
   775  18D0  3461               	retlw	97	;'a'
   776  18D1  3469               	retlw	105	;'i'
   777  18D2  3472               	retlw	114	;'r'
   778  18D3  3420               	retlw	32	;' '
   779  18D4  346D               	retlw	109	;'m'
   780  18D5  346F               	retlw	111	;'o'
   781  18D6  3469               	retlw	105	;'i'
   782  18D7  3473               	retlw	115	;'s'
   783  18D8  3474               	retlw	116	;'t'
   784  18D9  3420               	retlw	32	;' '
   785  18DA  3420               	retlw	32	;' '
   786  18DB  3420               	retlw	32	;' '
   787  18DC  3400               	retlw	0
   788  18DD                     STR_14:	
   789  18DD  3453               	retlw	83	;'S'
   790  18DE  3465               	retlw	101	;'e'
   791  18DF  3474               	retlw	116	;'t'
   792  18E0  3420               	retlw	32	;' '
   793  18E1  3443               	retlw	67	;'C'
   794  18E2  344F               	retlw	79	;'O'
   795  18E3  3432               	retlw	50	;'2'
   796  18E4  3420               	retlw	32	;' '
   797  18E5  3469               	retlw	105	;'i'
   798  18E6  346E               	retlw	110	;'n'
   799  18E7  3420               	retlw	32	;' '
   800  18E8  3461               	retlw	97	;'a'
   801  18E9  3469               	retlw	105	;'i'
   802  18EA  3472               	retlw	114	;'r'
   803  18EB  3420               	retlw	32	;' '
   804  18EC  3420               	retlw	32	;' '
   805  18ED  3400               	retlw	0
   806  18EE                     STR_3:	
   807  18EE  3441               	retlw	65	;'A'
   808  18EF  3469               	retlw	105	;'i'
   809  18F0  3472               	retlw	114	;'r'
   810  18F1  3420               	retlw	32	;' '
   811  18F2  3474               	retlw	116	;'t'
   812  18F3  3465               	retlw	101	;'e'
   813  18F4  346D               	retlw	109	;'m'
   814  18F5  3470               	retlw	112	;'p'
   815  18F6  3465               	retlw	101	;'e'
   816  18F7  3472               	retlw	114	;'r'
   817  18F8  3461               	retlw	97	;'a'
   818  18F9  3474               	retlw	116	;'t'
   819  18FA  3475               	retlw	117	;'u'
   820  18FB  3472               	retlw	114	;'r'
   821  18FC  3465               	retlw	101	;'e'
   822  18FD  3420               	retlw	32	;' '
   823  18FE  3400               	retlw	0
   824  18FF                     STR_12:	
   825  18FF  3453               	retlw	83	;'S'
   826  1900  346F               	retlw	111	;'o'
   827  1901  3469               	retlw	105	;'i'
   828  1902  346C               	retlw	108	;'l'
   829  1903  3420               	retlw	32	;' '
   830  1904  3474               	retlw	116	;'t'
   831  1905  3465               	retlw	101	;'e'
   832  1906  346D               	retlw	109	;'m'
   833  1907  3470               	retlw	112	;'p'
   834  1908  3465               	retlw	101	;'e'
   835  1909  3472               	retlw	114	;'r'
   836  190A  3461               	retlw	97	;'a'
   837  190B  3474               	retlw	116	;'t'
   838  190C  3475               	retlw	117	;'u'
   839  190D  3472               	retlw	114	;'r'
   840  190E  3465               	retlw	101	;'e'
   841  190F  3400               	retlw	0
   842  1910                     STR_1:	
   843  1910  3447               	retlw	71	;'G'
   844  1911  3472               	retlw	114	;'r'
   845  1912  3465               	retlw	101	;'e'
   846  1913  3473               	retlw	115	;'s'
   847  1914  346B               	retlw	107	;'k'
   848  1915  3461               	retlw	97	;'a'
   849  1916  3420               	retlw	32	;' '
   850  1917  3453               	retlw	83	;'S'
   851  1918  3448               	retlw	72	;'H'
   852  1919  3454               	retlw	84	;'T'
   853  191A  3437               	retlw	55	;'7'
   854  191B  3431               	retlw	49	;'1'
   855  191C  3421               	retlw	33	;'!'
   856  191D  3400               	retlw	0
   857  191E                     STR_7:	
   858  191E  3420               	retlw	32	;' '
   859  191F  3425               	retlw	37	;'%'
   860  1920  3420               	retlw	32	;' '
   861  1921  3420               	retlw	32	;' '
   862  1922  3420               	retlw	32	;' '
   863  1923  3420               	retlw	32	;' '
   864  1924  3420               	retlw	32	;' '
   865  1925  3420               	retlw	32	;' '
   866  1926  3420               	retlw	32	;' '
   867  1927  3420               	retlw	32	;' '
   868  1928  3420               	retlw	32	;' '
   869  1929  3420               	retlw	32	;' '
   870  192A  3400               	retlw	0
   871  192B                     STR_4:	
   872  192B  3420               	retlw	32	;' '
   873  192C  3464               	retlw	100	;'d'
   874  192D  3465               	retlw	101	;'e'
   875  192E  3467               	retlw	103	;'g'
   876  192F  3420               	retlw	32	;' '
   877  1930  3420               	retlw	32	;' '
   878  1931  3420               	retlw	32	;' '
   879  1932  3420               	retlw	32	;' '
   880  1933  3420               	retlw	32	;' '
   881  1934  3420               	retlw	32	;' '
   882  1935  3420               	retlw	32	;' '
   883  1936  3420               	retlw	32	;' '
   884  1937  3400               	retlw	0
   885  1938                     STR_9:	
   886  1938  3420               	retlw	32	;' '
   887  1939  3470               	retlw	112	;'p'
   888  193A  3470               	retlw	112	;'p'
   889  193B  346D               	retlw	109	;'m'
   890  193C  3420               	retlw	32	;' '
   891  193D  3420               	retlw	32	;' '
   892  193E  3420               	retlw	32	;' '
   893  193F  3420               	retlw	32	;' '
   894  1940  3420               	retlw	32	;' '
   895  1941  3420               	retlw	32	;' '
   896  1942  3420               	retlw	32	;' '
   897  1943  3420               	retlw	32	;' '
   898  1944  3400               	retlw	0
   899  1945                     STR_2:	
   900  1945  3420               	retlw	32	;' '
   901  1946  3425               	retlw	37	;'%'
   902  1947  342E               	retlw	46	;'.'
   903  1948  3431               	retlw	49	;'1'
   904  1949  3466               	retlw	102	;'f'
   905  194A  3400               	retlw	0
   906  194B                     STR_11:	
   907  194B  3425               	retlw	37	;'%'
   908  194C  3464               	retlw	100	;'d'
   909  194D  3400               	retlw	0
   910  1922                     
   911                           ; #config settings
   912  0000                     
   913                           	psect	cinit
   914  07F3                     start_initialization:	
   915  07F3                     __initialization:	
   916  07F3  30A0               	movlw	low __pbssBANK1
   917                           
   918                           ; Clear objects allocated to COMMON
   919  07F4  01FA               	clrf	__pbssCOMMON& (0+127)
   920  07F5  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   921                           
   922                           ; Clear objects allocated to BANK1
   923  07F6  1383               	bcf	3,7	;select IRP bank0
   924  07F7  0084               	movwf	4
   925  07F8  30CA               	movlw	low (__pbssBANK1+42)
   926  07F9  160A  158A  2334   	fcall	clear_ram0
   927  07FC                     end_of_initialization:	
   928                           ;End of C runtime variable initialization code
   929                           
   930  07FC                     __end_of__initialization:	
   931  07FC  0183               	clrf	3
   932  07FD  120A  158A  281D   	ljmp	_main	;jump to C main() function
   933                           
   934                           	psect	bssEEDATA
   935  0000                     __pbssEEDATA:	
   936  0000                     _test:	
   937  0000  0000               	db	0
   938  0001  0000               	db	0
   939                           
   940                           	psect	bssCOMMON
   941  007A                     __pbssCOMMON:	
   942  007A                     _zeljena_co2:	
   943  007A                     	ds	2
   944                           
   945                           	psect	bssBANK1
   946  00A0                     __pbssBANK1:	
   947  00A0                     _tempervalue:	
   948  00A0                     	ds	4
   949  00A4                     _t:	
   950  00A4                     	ds	3
   951  00A7                     _zeljena_temperatura:	
   952  00A7                     	ds	3
   953  00AA                     _zeljena_vlaznost:	
   954  00AA                     	ds	3
   955  00AD                     _co2:	
   956  00AD                     	ds	2
   957  00AF                     _disp:	
   958  00AF                     	ds	1
   959  00B0                     _disp_count:	
   960  00B0                     	ds	1
   961  00B1                     _measure:	
   962  00B1                     	ds	1
   963  00B2                     _measure_co2:	
   964  00B2                     	ds	1
   965  00B3                     _menu_flag:	
   966  00B3                     	ds	1
   967  00B4                     _minus_flag:	
   968  00B4                     	ds	1
   969  00B5                     _ok_flag:	
   970  00B5                     	ds	1
   971  00B6                     _ok_flag_co2:	
   972  00B6                     	ds	1
   973  00B7                     _ok_flag_humi:	
   974  00B7                     	ds	1
   975  00B8                     _plus_flag:	
   976  00B8                     	ds	1
   977  00B9                     _tmr_count:	
   978  00B9                     	ds	1
   979  00BA                     _humidity:	
   980  00BA                     	ds	5
   981  00BF                     _temperature:	
   982  00BF                     	ds	5
   983  00C4                     _humi:	
   984  00C4                     	ds	3
   985  00C7                     _temp:	
   986  00C7                     	ds	3
   987                           
   988                           	psect	clrtext
   989  1B34                     clear_ram0:	
   990                           ;	Called with FSR containing the base address, and
   991                           ;	W with the last address+1
   992                           
   993  1B34  0064               	clrwdt	;clear the watchdog before getting into this loop
   994  1B35                     clrloop0:	
   995  1B35  0180               	clrf	0	;clear RAM location pointed to by FSR
   996  1B36  0A84               	incf	4,f	;increment pointer
   997  1B37  0604               	xorwf	4,w	;XOR with final address
   998  1B38  1903               	btfsc	3,2	;have we reached the end yet?
   999  1B39  3400               	retlw	0	;all done for this memory range, return
  1000  1B3A  0604               	xorwf	4,w	;XOR again to restore value
  1001  1B3B  2B35               	goto	clrloop0	;do the next byte
  1002                           
  1003                           	psect	cstackBANK1
  1004  00CA                     __pcstackBANK1:	
  1005  00CA                     ??_getResSHT71:	
  1006  00CA                     _sprintf$1130:	
  1007                           ; 0 bytes @ 0x0
  1008                           
  1009                           
  1010                           ; 3 bytes @ 0x0
  1011  00CA                     	ds	3
  1012  00CD                     getResSHT71@inp:	
  1013  00CD                     sprintf@ap:	
  1014                           ; 1 bytes @ 0x3
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x3
  1018  00CD                     	ds	1
  1019  00CE                     getResSHT71@p_temp:	
  1020  00CE                     sprintf@flag:	
  1021                           ; 1 bytes @ 0x4
  1022                           
  1023                           
  1024                           ; 2 bytes @ 0x4
  1025  00CE                     	ds	1
  1026  00CF                     getResSHT71@error:	
  1027                           
  1028                           ; 1 bytes @ 0x5
  1029  00CF                     	ds	1
  1030  00D0                     getResSHT71@humi_val:	
  1031  00D0                     sprintf@tmpval:	
  1032                           ; 3 bytes @ 0x6
  1033                           
  1034                           
  1035                           ; 4 bytes @ 0x6
  1036  00D0                     	ds	3
  1037  00D3                     getResSHT71@checksum:	
  1038                           
  1039                           ; 1 bytes @ 0x9
  1040  00D3                     	ds	1
  1041  00D4                     getResSHT71@temp_val:	
  1042  00D4                     sprintf@val:	
  1043                           ; 3 bytes @ 0xA
  1044                           
  1045                           
  1046                           ; 4 bytes @ 0xA
  1047  00D4                     	ds	4
  1048  00D8                     sprintf@exp:	
  1049                           
  1050                           ; 2 bytes @ 0xE
  1051  00D8                     	ds	2
  1052  00DA                     sprintf@prec:	
  1053                           
  1054                           ; 2 bytes @ 0x10
  1055  00DA                     	ds	2
  1056  00DC                     sprintf@fval:	
  1057                           
  1058                           ; 3 bytes @ 0x12
  1059  00DC                     	ds	3
  1060  00DF                     sprintf@sp:	
  1061                           
  1062                           ; 1 bytes @ 0x15
  1063  00DF                     	ds	1
  1064  00E0                     sprintf@c:	
  1065                           
  1066                           ; 1 bytes @ 0x16
  1067  00E0                     	ds	1
  1068                           
  1069                           	psect	cstackCOMMON
  1070  0071                     __pcstackCOMMON:	
  1071  0071                     ?_isdigit:	
  1072  0071                     ?_writeDS18B20:	
  1073                           ; 1 bit 
  1074                           
  1075  0071                     ?_LcdPort:	
  1076                           ; 0 bytes @ 0x0
  1077                           
  1078  0071                     ?_LcdCmd:	
  1079                           ; 0 bytes @ 0x0
  1080                           
  1081  0071                     ?_LcdInit:	
  1082                           ; 0 bytes @ 0x0
  1083                           
  1084  0071                     ?_LcdWriteChar:	
  1085                           ; 0 bytes @ 0x0
  1086                           
  1087  0071                     ?_initSHT71:	
  1088                           ; 0 bytes @ 0x0
  1089                           
  1090  0071                     ?_tranStartSHT71:	
  1091                           ; 0 bytes @ 0x0
  1092                           
  1093  0071                     ?_connectionResetSHT71:	
  1094                           ; 0 bytes @ 0x0
  1095                           
  1096  0071                     ?_adcInit:	
  1097                           ; 0 bytes @ 0x0
  1098                           
  1099  0071                     ?_isr:	
  1100                           ; 0 bytes @ 0x0
  1101                           
  1102  0071                     ??_isr:	
  1103                           ; 0 bytes @ 0x0
  1104                           
  1105  0071                     ?_IOPinsConfig:	
  1106                           ; 0 bytes @ 0x0
  1107                           
  1108  0071                     ?_IOPinsInit:	
  1109                           ; 0 bytes @ 0x0
  1110                           
  1111  0071                     ?_resetValues:	
  1112                           ; 0 bytes @ 0x0
  1113                           
  1114  0071                     ?_initTimer0:	
  1115                           ; 0 bytes @ 0x0
  1116                           
  1117  0071                     ?_regulacija:	
  1118                           ; 0 bytes @ 0x0
  1119                           
  1120  0071                     ?_manage_buttons:	
  1121                           ; 0 bytes @ 0x0
  1122                           
  1123  0071                     ?_menuCO2:	
  1124                           ; 0 bytes @ 0x0
  1125                           
  1126  0071                     ?_menuHumi:	
  1127                           ; 0 bytes @ 0x0
  1128                           
  1129  0071                     ?_menu:	
  1130                           ; 0 bytes @ 0x0
  1131                           
  1132  0071                     ?_main:	
  1133                           ; 0 bytes @ 0x0
  1134                           
  1135  0071                     ?_writeByteSHT71:	
  1136                           ; 0 bytes @ 0x0
  1137                           
  1138  0071                     ?_readByteSHT71:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0071                     ?_resetDS18B20:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0071                     ?_readDS18B20:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147                           
  1148                           ; 1 bytes @ 0x0
  1149  0071                     	ds	2
  1150  0073                     ??_writeByteSHT71:	
  1151  0073                     ??_readByteSHT71:	
  1152                           ; 0 bytes @ 0x2
  1153                           
  1154  0073                     ??_isdigit:	
  1155                           ; 0 bytes @ 0x2
  1156                           
  1157  0073                     ??_resetDS18B20:	
  1158                           ; 0 bytes @ 0x2
  1159                           
  1160  0073                     ??_writeDS18B20:	
  1161                           ; 0 bytes @ 0x2
  1162                           
  1163  0073                     ??_readDS18B20:	
  1164                           ; 0 bytes @ 0x2
  1165                           
  1166  0073                     ??_LcdPort:	
  1167                           ; 0 bytes @ 0x2
  1168                           
  1169  0073                     ??_initSHT71:	
  1170                           ; 0 bytes @ 0x2
  1171                           
  1172  0073                     ??_tranStartSHT71:	
  1173                           ; 0 bytes @ 0x2
  1174                           
  1175  0073                     ??_connectionResetSHT71:	
  1176                           ; 0 bytes @ 0x2
  1177                           
  1178  0073                     ??_adcInit:	
  1179                           ; 0 bytes @ 0x2
  1180                           
  1181  0073                     ??_IOPinsConfig:	
  1182                           ; 0 bytes @ 0x2
  1183                           
  1184  0073                     ??_IOPinsInit:	
  1185                           ; 0 bytes @ 0x2
  1186                           
  1187  0073                     ??_resetValues:	
  1188                           ; 0 bytes @ 0x2
  1189                           
  1190  0073                     ??_initTimer0:	
  1191                           ; 0 bytes @ 0x2
  1192                           
  1193  0073                     ??_manage_buttons:	
  1194                           ; 0 bytes @ 0x2
  1195                           
  1196  0073                     ?_eecpymem:	
  1197                           ; 0 bytes @ 0x2
  1198                           
  1199  0073                     ?_memcpyee:	
  1200                           ; 0 bytes @ 0x2
  1201                           
  1202  0073                     ??___lldiv:	
  1203                           ; 0 bytes @ 0x2
  1204                           
  1205  0073                     ?___lbmod:	
  1206                           ; 0 bytes @ 0x2
  1207                           
  1208  0073                     ?_adcRead:	
  1209                           ; 1 bytes @ 0x2
  1210                           
  1211  0073                     ?___wmul:	
  1212                           ; 2 bytes @ 0x2
  1213                           
  1214  0073                     ?___awmod:	
  1215                           ; 2 bytes @ 0x2
  1216                           
  1217  0073                     ?___lwdiv:	
  1218                           ; 2 bytes @ 0x2
  1219                           
  1220  0073                     ?___ftpack:	
  1221                           ; 2 bytes @ 0x2
  1222                           
  1223  0073                     ?___ftneg:	
  1224                           ; 3 bytes @ 0x2
  1225                           
  1226  0073                     ?__tdiv_to_l_:	
  1227                           ; 3 bytes @ 0x2
  1228                           
  1229  0073                     ?__div_to_l_:	
  1230                           ; 4 bytes @ 0x2
  1231                           
  1232  0073                     LcdPort@a:	
  1233                           ; 4 bytes @ 0x2
  1234                           
  1235  0073                     connectionResetSHT71@i:	
  1236                           ; 1 bytes @ 0x2
  1237                           
  1238  0073                     eecpymem@from:	
  1239                           ; 1 bytes @ 0x2
  1240                           
  1241  0073                     memcpyee@from:	
  1242                           ; 1 bytes @ 0x2
  1243                           
  1244  0073                     _isdigit$829:	
  1245                           ; 1 bytes @ 0x2
  1246                           
  1247  0073                     ___lbmod@divisor:	
  1248                           ; 1 bytes @ 0x2
  1249                           
  1250  0073                     ___wmul@multiplier:	
  1251                           ; 1 bytes @ 0x2
  1252                           
  1253  0073                     ___awmod@divisor:	
  1254                           ; 2 bytes @ 0x2
  1255                           
  1256  0073                     ___lwdiv@divisor:	
  1257                           ; 2 bytes @ 0x2
  1258                           
  1259  0073                     __div_to_l_@f1:	
  1260                           ; 2 bytes @ 0x2
  1261                           
  1262  0073                     ___ftpack@arg:	
  1263                           ; 3 bytes @ 0x2
  1264                           
  1265  0073                     __tdiv_to_l_@f1:	
  1266                           ; 3 bytes @ 0x2
  1267                           
  1268  0073                     ___ftneg@f1:	
  1269                           ; 3 bytes @ 0x2
  1270                           
  1271  0073                     ___lldiv@quotient:	
  1272                           ; 3 bytes @ 0x2
  1273                           
  1274                           
  1275                           ; 4 bytes @ 0x2
  1276  0073                     	ds	1
  1277  0074                     ??_LcdCmd:	
  1278  0074                     ??_LcdWriteChar:	
  1279                           ; 0 bytes @ 0x3
  1280                           
  1281  0074                     ??___lbmod:	
  1282                           ; 0 bytes @ 0x3
  1283                           
  1284  0074                     writeDS18B20@Cmd:	
  1285                           ; 0 bytes @ 0x3
  1286                           
  1287  0074                     readDS18B20@result:	
  1288                           ; 1 bytes @ 0x3
  1289                           
  1290  0074                     readByteSHT71@ack:	
  1291                           ; 1 bytes @ 0x3
  1292                           
  1293  0074                     writeByteSHT71@cmd:	
  1294                           ; 1 bytes @ 0x3
  1295                           
  1296  0074                     eecpymem@size:	
  1297                           ; 1 bytes @ 0x3
  1298                           
  1299  0074                     memcpyee@size:	
  1300                           ; 1 bytes @ 0x3
  1301                           
  1302  0074                     isdigit@c:	
  1303                           ; 1 bytes @ 0x3
  1304                           
  1305                           
  1306                           ; 1 bytes @ 0x3
  1307  0074                     	ds	1
  1308  0075                     ??_adcRead:	
  1309  0075                     ??_eecpymem:	
  1310                           ; 0 bytes @ 0x4
  1311                           
  1312  0075                     ??_memcpyee:	
  1313                           ; 0 bytes @ 0x4
  1314                           
  1315  0075                     writeDS18B20@i:	
  1316                           ; 0 bytes @ 0x4
  1317                           
  1318  0075                     readDS18B20@i:	
  1319                           ; 1 bytes @ 0x4
  1320                           
  1321  0075                     LcdWriteChar@temp:	
  1322                           ; 1 bytes @ 0x4
  1323                           
  1324  0075                     readByteSHT71@res:	
  1325                           ; 1 bytes @ 0x4
  1326                           
  1327  0075                     writeByteSHT71@error:	
  1328                           ; 1 bytes @ 0x4
  1329                           
  1330  0075                     eecpymem@cp:	
  1331                           ; 1 bytes @ 0x4
  1332                           
  1333  0075                     memcpyee@ptr:	
  1334                           ; 1 bytes @ 0x4
  1335                           
  1336  0075                     ___lbmod@dividend:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339  0075                     ___wmul@multiplicand:	
  1340                           ; 1 bytes @ 0x4
  1341                           
  1342  0075                     ___awmod@dividend:	
  1343                           ; 2 bytes @ 0x4
  1344                           
  1345  0075                     ___lwdiv@dividend:	
  1346                           ; 2 bytes @ 0x4
  1347                           
  1348                           
  1349                           ; 2 bytes @ 0x4
  1350  0075                     	ds	1
  1351  0076                     ??___ftneg:	
  1352  0076                     LcdCmd@a:	
  1353                           ; 0 bytes @ 0x5
  1354                           
  1355  0076                     LcdWriteChar@y:	
  1356                           ; 1 bytes @ 0x5
  1357                           
  1358  0076                     readByteSHT71@i:	
  1359                           ; 1 bytes @ 0x5
  1360                           
  1361  0076                     writeByteSHT71@i:	
  1362                           ; 1 bytes @ 0x5
  1363                           
  1364  0076                     eecpymem@to:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367  0076                     memcpyee@to:	
  1368                           ; 1 bytes @ 0x5
  1369                           
  1370  0076                     ___ftpack@exp:	
  1371                           ; 1 bytes @ 0x5
  1372                           
  1373  0076                     ___lbmod@counter:	
  1374                           ; 1 bytes @ 0x5
  1375                           
  1376  0076                     __div_to_l_@f2:	
  1377                           ; 1 bytes @ 0x5
  1378                           
  1379  0076                     __tdiv_to_l_@f2:	
  1380                           ; 3 bytes @ 0x5
  1381                           
  1382                           
  1383                           ; 3 bytes @ 0x5
  1384  0076                     	ds	1
  1385  0077                     ?_LcdSetCursor:	
  1386  0077                     ??_LcdInit:	
  1387                           ; 0 bytes @ 0x6
  1388                           
  1389  0077                     ??___wmul:	
  1390                           ; 0 bytes @ 0x6
  1391                           
  1392  0077                     ??___awmod:	
  1393                           ; 0 bytes @ 0x6
  1394                           
  1395  0077                     ??___lwdiv:	
  1396                           ; 0 bytes @ 0x6
  1397                           
  1398  0077                     ?_measureSHT71:	
  1399                           ; 0 bytes @ 0x6
  1400                           
  1401  0077                     ?_readStatusRegSHT71:	
  1402                           ; 1 bytes @ 0x6
  1403                           
  1404  0077                     ?___eetoi:	
  1405                           ; 1 bytes @ 0x6
  1406                           
  1407  0077                     LcdSetCursor@b:	
  1408                           ; 2 bytes @ 0x6
  1409                           
  1410  0077                     LcdWriteChar@a:	
  1411                           ; 1 bytes @ 0x6
  1412                           
  1413  0077                     measureSHT71@p_checksum:	
  1414                           ; 1 bytes @ 0x6
  1415                           
  1416  0077                     readStatusRegSHT71@p_checksum:	
  1417                           ; 1 bytes @ 0x6
  1418                           
  1419  0077                     ___awmod@counter:	
  1420                           ; 1 bytes @ 0x6
  1421                           
  1422  0077                     ___ftpack@sign:	
  1423                           ; 1 bytes @ 0x6
  1424                           
  1425  0077                     ___lbmod@rem:	
  1426                           ; 1 bytes @ 0x6
  1427                           
  1428  0077                     ___lldiv@counter:	
  1429                           ; 1 bytes @ 0x6
  1430                           
  1431  0077                     ___wmul@product:	
  1432                           ; 1 bytes @ 0x6
  1433                           
  1434  0077                     ___lwdiv@quotient:	
  1435                           ; 2 bytes @ 0x6
  1436                           
  1437                           
  1438                           ; 2 bytes @ 0x6
  1439  0077                     	ds	1
  1440  0078                     ??_UARTInit:	
  1441  0078                     ??_LcdSetCursor:	
  1442                           ; 0 bytes @ 0x7
  1443                           
  1444  0078                     ?_LcdWriteString:	
  1445                           ; 0 bytes @ 0x7
  1446                           
  1447  0078                     ??_readStatusRegSHT71:	
  1448                           ; 0 bytes @ 0x7
  1449                           
  1450  0078                     ??___llmod:	
  1451                           ; 0 bytes @ 0x7
  1452                           
  1453  0078                     ??___lltoft:	
  1454                           ; 0 bytes @ 0x7
  1455                           
  1456  0078                     ??___lwtoft:	
  1457                           ; 0 bytes @ 0x7
  1458                           
  1459  0078                     ?___lbdiv:	
  1460                           ; 0 bytes @ 0x7
  1461                           
  1462  0078                     measureSHT71@mode:	
  1463                           ; 1 bytes @ 0x7
  1464                           
  1465  0078                     readStatusRegSHT71@p_value:	
  1466                           ; 1 bytes @ 0x7
  1467                           
  1468  0078                     ___awmod@sign:	
  1469                           ; 1 bytes @ 0x7
  1470                           
  1471  0078                     ___lbdiv@divisor:	
  1472                           ; 1 bytes @ 0x7
  1473                           
  1474  0078                     ___llmod@counter:	
  1475                           ; 1 bytes @ 0x7
  1476                           
  1477  0078                     ___lltoft@exp:	
  1478                           ; 1 bytes @ 0x7
  1479                           
  1480  0078                     LcdWriteString@a:	
  1481                           ; 1 bytes @ 0x7
  1482                           
  1483                           
  1484                           ; 2 bytes @ 0x7
  1485  0078                     	ds	1
  1486  0079                     ??_measureSHT71:	
  1487  0079                     ??_calcSHT71:	
  1488                           ; 0 bytes @ 0x8
  1489                           
  1490  0079                     ??_fround:	
  1491                           ; 0 bytes @ 0x8
  1492                           
  1493  0079                     ??___bmul:	
  1494                           ; 0 bytes @ 0x8
  1495                           
  1496  0079                     ??___awdiv:	
  1497                           ; 0 bytes @ 0x8
  1498                           
  1499  0079                     ??___ftge:	
  1500                           ; 0 bytes @ 0x8
  1501                           
  1502  0079                     ??___ftsub:	
  1503                           ; 0 bytes @ 0x8
  1504                           
  1505  0079                     ??___lbdiv:	
  1506                           ; 0 bytes @ 0x8
  1507                           
  1508  0079                     readStatusRegSHT71@error:	
  1509                           ; 0 bytes @ 0x8
  1510                           
  1511  0079                     ___lwdiv@counter:	
  1512                           ; 1 bytes @ 0x8
  1513                           
  1514                           
  1515                           ; 1 bytes @ 0x8
  1516  0079                     	ds	1
  1517  007A                     ??_LcdWriteInt:	
  1518  007A                     ??_displayAirTemp:	
  1519                           ; 0 bytes @ 0x9
  1520                           
  1521  007A                     ??_displayAirMoist:	
  1522                           ; 0 bytes @ 0x9
  1523                           
  1524  007A                     ??_displayCO2:	
  1525                           ; 0 bytes @ 0x9
  1526                           
  1527  007A                     ??_displaySoilTemp:	
  1528                           ; 0 bytes @ 0x9
  1529                           
  1530  007A                     ??_menuCO2:	
  1531                           ; 0 bytes @ 0x9
  1532                           
  1533  007A                     ??_menuHumi:	
  1534                           ; 0 bytes @ 0x9
  1535                           
  1536  007A                     ??_menu:	
  1537                           ; 0 bytes @ 0x9
  1538                           
  1539  007A                     ??___eetoi:	
  1540                           ; 0 bytes @ 0x9
  1541                           
  1542  007A                     ??___itoee:	
  1543                           ; 0 bytes @ 0x9
  1544                           
  1545                           
  1546                           	psect	cstackBANK0
  1547  0020                     __pcstackBANK0:	
  1548                           ; 0 bytes @ 0x9
  1549                           
  1550  0020                     ??__tdiv_to_l_:	
  1551  0020                     ??__div_to_l_:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0020                     ??___ftpack:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0020                     ??_LcdWriteString:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0020                     ?___awdiv:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0020                     ?___lldiv:	
  1564                           ; 2 bytes @ 0x0
  1565                           
  1566  0020                     LcdSetCursor@a:	
  1567                           ; 4 bytes @ 0x0
  1568                           
  1569  0020                     measureSHT71@p_value:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0020                     ___eetoi@addr:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0020                     ___lbdiv@dividend:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0020                     adcRead@tempL:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0020                     ___awdiv@divisor:	
  1582                           ; 2 bytes @ 0x0
  1583                           
  1584  0020                     ___lldiv@divisor:	
  1585                           ; 2 bytes @ 0x0
  1586                           
  1587                           
  1588                           ; 4 bytes @ 0x0
  1589  0020                     	ds	1
  1590  0021                     LcdSetCursor@z:	
  1591  0021                     ___lbdiv@counter:	
  1592                           ; 1 bytes @ 0x1
  1593                           
  1594  0021                     measureSHT71@error:	
  1595                           ; 1 bytes @ 0x1
  1596                           
  1597  0021                     ___eetoi@data:	
  1598                           ; 2 bytes @ 0x1
  1599                           
  1600                           
  1601                           ; 2 bytes @ 0x1
  1602  0021                     	ds	1
  1603  0022                     LcdSetCursor@y:	
  1604  0022                     ___lbdiv@quotient:	
  1605                           ; 1 bytes @ 0x2
  1606                           
  1607  0022                     adcRead@tempH:	
  1608                           ; 1 bytes @ 0x2
  1609                           
  1610  0022                     ___awdiv@dividend:	
  1611                           ; 2 bytes @ 0x2
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x2
  1615  0022                     	ds	1
  1616  0023                     ?___bmul:	
  1617  0023                     ?___itoee:	
  1618                           ; 1 bytes @ 0x3
  1619                           
  1620  0023                     ?___lltoft:	
  1621                           ; 2 bytes @ 0x3
  1622                           
  1623  0023                     ?___lwtoft:	
  1624                           ; 3 bytes @ 0x3
  1625                           
  1626  0023                     LcdSetCursor@temp:	
  1627                           ; 3 bytes @ 0x3
  1628                           
  1629  0023                     ___bmul@multiplicand:	
  1630                           ; 1 bytes @ 0x3
  1631                           
  1632  0023                     LcdWriteString@i:	
  1633                           ; 1 bytes @ 0x3
  1634                           
  1635  0023                     measureSHT71@temp:	
  1636                           ; 2 bytes @ 0x3
  1637                           
  1638  0023                     ___itoee@data:	
  1639                           ; 2 bytes @ 0x3
  1640                           
  1641  0023                     ___lwtoft@c:	
  1642                           ; 2 bytes @ 0x3
  1643                           
  1644  0023                     __tdiv_to_l_@quot:	
  1645                           ; 2 bytes @ 0x3
  1646                           
  1647  0023                     ___lltoft@c:	
  1648                           ; 4 bytes @ 0x3
  1649                           
  1650                           
  1651                           ; 4 bytes @ 0x3
  1652  0023                     	ds	1
  1653  0024                     ?_LcdWriteInt:	
  1654  0024                     ___bmul@product:	
  1655                           ; 0 bytes @ 0x4
  1656                           
  1657  0024                     ___awdiv@counter:	
  1658                           ; 1 bytes @ 0x4
  1659                           
  1660  0024                     LcdWriteInt@i:	
  1661                           ; 1 bytes @ 0x4
  1662                           
  1663  0024                     adcRead@temp:	
  1664                           ; 2 bytes @ 0x4
  1665                           
  1666  0024                     ___lldiv@dividend:	
  1667                           ; 2 bytes @ 0x4
  1668                           
  1669                           
  1670                           ; 4 bytes @ 0x4
  1671  0024                     	ds	1
  1672  0025                     ___itoee@addr:	
  1673  0025                     ___bmul@multiplier:	
  1674                           ; 1 bytes @ 0x5
  1675                           
  1676  0025                     ___awdiv@sign:	
  1677                           ; 1 bytes @ 0x5
  1678                           
  1679                           
  1680                           ; 1 bytes @ 0x5
  1681  0025                     	ds	1
  1682  0026                     ?_measureTGS4161:	
  1683  0026                     LcdWriteInt@row:	
  1684                           ; 2 bytes @ 0x6
  1685                           
  1686  0026                     ___awdiv@quotient:	
  1687                           ; 1 bytes @ 0x6
  1688                           
  1689                           
  1690                           ; 2 bytes @ 0x6
  1691  0026                     	ds	1
  1692  0027                     LcdWriteInt@column:	
  1693  0027                     __tdiv_to_l_@cntr:	
  1694                           ; 1 bytes @ 0x7
  1695                           
  1696                           
  1697                           ; 1 bytes @ 0x7
  1698  0027                     	ds	1
  1699  0028                     ??_measureTGS4161:	
  1700  0028                     ?_UARTInit:	
  1701                           ; 0 bytes @ 0x8
  1702                           
  1703  0028                     ?___ftmul:	
  1704                           ; 1 bytes @ 0x8
  1705                           
  1706  0028                     ?___llmod:	
  1707                           ; 3 bytes @ 0x8
  1708                           
  1709  0028                     LcdWriteInt@ch_manje_100:	
  1710                           ; 4 bytes @ 0x8
  1711                           
  1712  0028                     __tdiv_to_l_@exp1:	
  1713                           ; 1 bytes @ 0x8
  1714                           
  1715  0028                     ___ftmul@f1:	
  1716                           ; 1 bytes @ 0x8
  1717                           
  1718  0028                     UARTInit@baud_rate:	
  1719                           ; 3 bytes @ 0x8
  1720                           
  1721  0028                     __div_to_l_@quot:	
  1722                           ; 4 bytes @ 0x8
  1723                           
  1724  0028                     ___llmod@divisor:	
  1725                           ; 4 bytes @ 0x8
  1726                           
  1727                           
  1728                           ; 4 bytes @ 0x8
  1729  0028                     	ds	1
  1730  0029                     LcdWriteInt@ch_manje_1000:	
  1731                           
  1732                           ; 1 bytes @ 0x9
  1733  0029                     	ds	1
  1734  002A                     LcdWriteInt@ch:	
  1735  002A                     measureTGS4161@krez1:	
  1736                           ; 1 bytes @ 0xA
  1737                           
  1738                           
  1739                           ; 2 bytes @ 0xA
  1740  002A                     	ds	1
  1741  002B                     ?_displayCO2:	
  1742  002B                     displayCO2@co22:	
  1743                           ; 0 bytes @ 0xB
  1744                           
  1745  002B                     ___ftmul@f2:	
  1746                           ; 2 bytes @ 0xB
  1747                           
  1748                           
  1749                           ; 3 bytes @ 0xB
  1750  002B                     	ds	1
  1751  002C                     __div_to_l_@cntr:	
  1752  002C                     measureTGS4161@krez2:	
  1753                           ; 1 bytes @ 0xC
  1754                           
  1755  002C                     ___llmod@dividend:	
  1756                           ; 2 bytes @ 0xC
  1757                           
  1758  002C                     _UARTInit$1126:	
  1759                           ; 4 bytes @ 0xC
  1760                           
  1761                           
  1762                           ; 4 bytes @ 0xC
  1763  002C                     	ds	1
  1764  002D                     __div_to_l_@exp1:	
  1765                           
  1766                           ; 1 bytes @ 0xD
  1767  002D                     	ds	1
  1768  002E                     ??___ftmul:	
  1769  002E                     measureTGS4161@ppm_temp:	
  1770                           ; 0 bytes @ 0xE
  1771                           
  1772                           
  1773                           ; 2 bytes @ 0xE
  1774  002E                     	ds	2
  1775  0030                     measureTGS4161@i:	
  1776                           
  1777                           ; 1 bytes @ 0x10
  1778  0030                     	ds	1
  1779  0031                     ___ftmul@exp:	
  1780  0031                     measureTGS4161@temp:	
  1781                           ; 1 bytes @ 0x11
  1782                           
  1783  0031                     UARTInit@x:	
  1784                           ; 2 bytes @ 0x11
  1785                           
  1786                           
  1787                           ; 2 bytes @ 0x11
  1788  0031                     	ds	1
  1789  0032                     ___ftmul@f3_as_product:	
  1790                           
  1791                           ; 3 bytes @ 0x12
  1792  0032                     	ds	1
  1793  0033                     measureTGS4161@ppm:	
  1794                           
  1795                           ; 2 bytes @ 0x13
  1796  0033                     	ds	2
  1797  0035                     ___ftmul@cntr:	
  1798                           
  1799                           ; 1 bytes @ 0x15
  1800  0035                     	ds	1
  1801  0036                     ___ftmul@sign:	
  1802                           
  1803                           ; 1 bytes @ 0x16
  1804  0036                     	ds	1
  1805  0037                     ?_fround:	
  1806  0037                     ?_scale:	
  1807                           ; 3 bytes @ 0x17
  1808                           
  1809                           
  1810                           ; 3 bytes @ 0x17
  1811  0037                     	ds	3
  1812  003A                     ??_scale:	
  1813                           
  1814                           ; 0 bytes @ 0x1A
  1815  003A                     	ds	1
  1816  003B                     _fround$1128:	
  1817                           
  1818                           ; 3 bytes @ 0x1B
  1819  003B                     	ds	3
  1820  003E                     _fround$1127:	
  1821  003E                     _scale$1129:	
  1822                           ; 3 bytes @ 0x1E
  1823                           
  1824                           
  1825                           ; 3 bytes @ 0x1E
  1826  003E                     	ds	3
  1827  0041                     fround@prec:	
  1828  0041                     scale@scl:	
  1829                           ; 1 bytes @ 0x21
  1830                           
  1831                           
  1832                           ; 1 bytes @ 0x21
  1833  0041                     	ds	1
  1834  0042                     ?___ftadd:	
  1835  0042                     ?___fttol:	
  1836                           ; 3 bytes @ 0x22
  1837                           
  1838  0042                     ___ftadd@f1:	
  1839                           ; 4 bytes @ 0x22
  1840                           
  1841  0042                     ___fttol@f1:	
  1842                           ; 3 bytes @ 0x22
  1843                           
  1844                           
  1845                           ; 3 bytes @ 0x22
  1846  0042                     	ds	3
  1847  0045                     ___ftadd@f2:	
  1848                           
  1849                           ; 3 bytes @ 0x25
  1850  0045                     	ds	1
  1851  0046                     ??___fttol:	
  1852                           
  1853                           ; 0 bytes @ 0x26
  1854  0046                     	ds	2
  1855  0048                     ??___ftadd:	
  1856                           
  1857                           ; 0 bytes @ 0x28
  1858  0048                     	ds	1
  1859  0049                     ___fttol@sign1:	
  1860                           
  1861                           ; 1 bytes @ 0x29
  1862  0049                     	ds	1
  1863  004A                     ___fttol@lval:	
  1864                           
  1865                           ; 4 bytes @ 0x2A
  1866  004A                     	ds	1
  1867  004B                     ___ftadd@sign:	
  1868                           
  1869                           ; 1 bytes @ 0x2B
  1870  004B                     	ds	1
  1871  004C                     ___ftadd@exp2:	
  1872                           
  1873                           ; 1 bytes @ 0x2C
  1874  004C                     	ds	1
  1875  004D                     ___ftadd@exp1:	
  1876                           
  1877                           ; 1 bytes @ 0x2D
  1878  004D                     	ds	1
  1879  004E                     ?___ftge:	
  1880  004E                     ?_getTempDS18B20:	
  1881                           ; 1 bit 
  1882                           
  1883  004E                     ?___ftsub:	
  1884                           ; 3 bytes @ 0x2E
  1885                           
  1886  004E                     ___fttol@exp1:	
  1887                           ; 3 bytes @ 0x2E
  1888                           
  1889  004E                     ___ftge@ff1:	
  1890                           ; 1 bytes @ 0x2E
  1891                           
  1892  004E                     ___ftsub@f2:	
  1893                           ; 3 bytes @ 0x2E
  1894                           
  1895                           
  1896                           ; 3 bytes @ 0x2E
  1897  004E                     	ds	3
  1898  0051                     ??_getTempDS18B20:	
  1899  0051                     ___ftge@ff2:	
  1900                           ; 0 bytes @ 0x31
  1901                           
  1902  0051                     ___ftsub@f1:	
  1903                           ; 3 bytes @ 0x31
  1904                           
  1905                           
  1906                           ; 3 bytes @ 0x31
  1907  0051                     	ds	3
  1908  0054                     ??_regulacija:	
  1909  0054                     ?_sprintf:	
  1910                           ; 0 bytes @ 0x34
  1911                           
  1912  0054                     ?_calcSHT71:	
  1913                           ; 2 bytes @ 0x34
  1914                           
  1915  0054                     sprintf@f:	
  1916                           ; 3 bytes @ 0x34
  1917                           
  1918  0054                     getTempDS18B20@temperatura:	
  1919                           ; 2 bytes @ 0x34
  1920                           
  1921  0054                     calcSHT71@p_humidity:	
  1922                           ; 3 bytes @ 0x34
  1923                           
  1924                           
  1925                           ; 3 bytes @ 0x34
  1926  0054                     	ds	3
  1927  0057                     calcSHT71@p_temperature:	
  1928  0057                     getTempDS18B20@tempL:	
  1929                           ; 1 bytes @ 0x37
  1930                           
  1931                           
  1932                           ; 2 bytes @ 0x37
  1933  0057                     	ds	1
  1934  0058                     calcSHT71@rh_lin:	
  1935                           
  1936                           ; 3 bytes @ 0x38
  1937  0058                     	ds	1
  1938  0059                     ??_sprintf:	
  1939  0059                     getTempDS18B20@tempH:	
  1940                           ; 0 bytes @ 0x39
  1941                           
  1942                           
  1943                           ; 2 bytes @ 0x39
  1944  0059                     	ds	2
  1945  005B                     getTempDS18B20@temp:	
  1946  005B                     calcSHT71@t:	
  1947                           ; 2 bytes @ 0x3B
  1948                           
  1949                           
  1950                           ; 3 bytes @ 0x3B
  1951  005B                     	ds	3
  1952  005E                     ?_displayAirTemp:	
  1953  005E                     ?_displayAirMoist:	
  1954                           ; 0 bytes @ 0x3E
  1955                           
  1956  005E                     ?_displaySoilTemp:	
  1957                           ; 0 bytes @ 0x3E
  1958                           
  1959  005E                     calcSHT71@t_C:	
  1960                           ; 0 bytes @ 0x3E
  1961                           
  1962  005E                     displayAirTemp@temp2:	
  1963                           ; 3 bytes @ 0x3E
  1964                           
  1965  005E                     displayAirMoist@humi2:	
  1966                           ; 3 bytes @ 0x3E
  1967                           
  1968  005E                     displaySoilTemp@t2:	
  1969                           ; 3 bytes @ 0x3E
  1970                           
  1971                           
  1972                           ; 3 bytes @ 0x3E
  1973  005E                     	ds	3
  1974  0061                     _calcSHT71$1124:	
  1975                           
  1976                           ; 3 bytes @ 0x41
  1977  0061                     	ds	3
  1978  0064                     _calcSHT71$1125:	
  1979                           
  1980                           ; 3 bytes @ 0x44
  1981  0064                     	ds	3
  1982  0067                     calcSHT71@rh_true:	
  1983                           
  1984                           ; 3 bytes @ 0x47
  1985  0067                     	ds	3
  1986  006A                     calcSHT71@rh:	
  1987                           
  1988                           ; 3 bytes @ 0x4A
  1989  006A                     	ds	3
  1990  006D                     ?_getResSHT71:	
  1991  006D                     getResSHT71@p_humi:	
  1992                           ; 0 bytes @ 0x4D
  1993                           
  1994                           
  1995                           ; 1 bytes @ 0x4D
  1996  006D                     	ds	1
  1997  006E                     ??_main:	
  1998                           
  1999                           ; 0 bytes @ 0x4E
  2000  006E                     	ds	2
  2001                           
  2002                           	psect	maintext
  2003  081D                     __pmaintext:	
  2004 ;;
  2005 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2006 ;;
  2007 ;; *************** function _main *****************
  2008 ;; Defined at:
  2009 ;;		line 445 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;		None               void
  2016 ;; Registers used:
  2017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : B00/0
  2020 ;;		On exit  : 200/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2023 ;;      Params:         0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0
  2025 ;;      Temps:          0       2       0       0       0
  2026 ;;      Totals:         0       2       0       0       0
  2027 ;;Total ram usage:        2 bytes
  2028 ;; Hardware stack levels required when called:    8
  2029 ;; This function calls:
  2030 ;;		_IOPinsConfig
  2031 ;;		_IOPinsInit
  2032 ;;		_LcdInit
  2033 ;;		_UARTInit
  2034 ;;		___eetoi
  2035 ;;		___itoee
  2036 ;;		_adcInit
  2037 ;;		_displayAirMoist
  2038 ;;		_displayAirTemp
  2039 ;;		_displayCO2
  2040 ;;		_displaySoilTemp
  2041 ;;		_getResSHT71
  2042 ;;		_getTempDS18B20
  2043 ;;		_initSHT71
  2044 ;;		_initTimer0
  2045 ;;		_measureTGS4161
  2046 ;;		_menu
  2047 ;;		_regulacija
  2048 ;;		_resetDS18B20
  2049 ;;		_resetValues
  2050 ;; This function is called by:
  2051 ;;		Startup code after reset
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _main
  2057  081D                     _main:	
  2058                           
  2059                           ;main.c: 447: LcdInit();
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2063  081D  160A  158A  23AE  120A  158A  	fcall	_LcdInit
  2064                           
  2065                           ;main.c: 448: initSHT71();
  2066  0822  120A  118A  2011  120A  158A  	fcall	_initSHT71
  2067                           
  2068                           ;main.c: 449: resetDS18B20();
  2069  0827  120A  118A  20DE  120A  158A  	fcall	_resetDS18B20
  2070                           
  2071                           ;main.c: 450: adcInit();
  2072  082C  160A  158A  2351  120A  158A  	fcall	_adcInit
  2073                           
  2074                           ;main.c: 451: UARTInit(9600);
  2075  0831  3000               	movlw	0
  2076  0832  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0833  00AB               	movwf	UARTInit@baud_rate+3
  2078  0834  00AA               	movwf	UARTInit@baud_rate+2
  2079  0835  3025               	movlw	37
  2080  0836  00A9               	movwf	UARTInit@baud_rate+1
  2081  0837  3080               	movlw	128
  2082  0838  00A8               	movwf	UARTInit@baud_rate
  2083  0839  160A  158A  24F4  120A  158A  	fcall	_UARTInit
  2084                           
  2085                           ;main.c: 452: IOPinsConfig();
  2086  083E  160A  158A  2345  120A  158A  	fcall	_IOPinsConfig
  2087                           
  2088                           ;main.c: 453: IOPinsInit();
  2089  0843  160A  158A  232D  120A  158A  	fcall	_IOPinsInit
  2090                           
  2091                           ;main.c: 454: resetValues();
  2092  0848  160A  158A  235D  120A  158A  	fcall	_resetValues
  2093                           
  2094                           ;main.c: 455: initTimer0();
  2095  084D  160A  158A  233C  120A  158A  	fcall	_initTimer0
  2096                           
  2097                           ;main.c: 457: getResSHT71(&temp, &humi);
  2098  0852  30C4               	movlw	(low (_humi| 0))& (0+255)
  2099  0853  00ED               	movwf	getResSHT71@p_humi
  2100  0854  30C7               	movlw	(low (_temp| 0))& (0+255)
  2101  0855  120A  118A  22D6  120A  158A  	fcall	_getResSHT71
  2102                           
  2103                           ;main.c: 459: t = getTempDS18B20();
  2104  085A  120A  118A  2015  120A  158A  	fcall	_getTempDS18B20
  2105  085F  084E               	movf	?_getTempDS18B20,w
  2106  0860  1683               	bsf	3,5	;RP0=1, select bank1
  2107  0861  00A4               	movwf	_t^(0+128)
  2108  0862  1283               	bcf	3,5	;RP0=0, select bank0
  2109  0863  084F               	movf	?_getTempDS18B20+1,w
  2110  0864  1683               	bsf	3,5	;RP0=1, select bank1
  2111  0865  00A5               	movwf	(_t+1)^(0+128)
  2112  0866  1283               	bcf	3,5	;RP0=0, select bank0
  2113  0867  0850               	movf	?_getTempDS18B20+2,w
  2114  0868  1683               	bsf	3,5	;RP0=1, select bank1
  2115  0869  00A6               	movwf	(_t+2)^(0+128)
  2116  086A                     l5939:	
  2117                           
  2118                           ;main.c: 462: {
  2119                           ;main.c: 463: if(measure)
  2120  086A  1683               	bsf	3,5	;RP0=1, select bank1
  2121  086B  0831               	movf	_measure^(0+128),w
  2122  086C  1903               	btfsc	3,2
  2123  086D  28A9               	goto	l5951
  2124                           
  2125                           ;main.c: 464: {
  2126                           ;main.c: 465: test++;
  2127  086E  3000               	movlw	(low _test)& (0+255)
  2128  086F  160A  158A  2453  120A  158A  	fcall	___eetoi
  2129  0874  0877               	movf	?___eetoi,w
  2130  0875  3E01               	addlw	1
  2131  0876  00A3               	movwf	___itoee@data
  2132  0877  0878               	movf	?___eetoi+1,w
  2133  0878  1803               	skipnc
  2134  0879  3E01               	addlw	1
  2135  087A  3E00               	addlw	0
  2136  087B  00A4               	movwf	___itoee@data+1
  2137  087C  3000               	movlw	(low _test)& (0+255)
  2138  087D  160A  158A  237C  120A  158A  	fcall	___itoee
  2139                           
  2140                           ;main.c: 466: measure = 0;
  2141  0882  1303               	bcf	3,6	;RP1=0, select bank1
  2142  0883  30C4               	movlw	(low (_humi| 0))& (0+255)
  2143  0884  01B1               	clrf	_measure^(0+128)
  2144                           
  2145                           ;main.c: 467: getResSHT71(&temp, &humi);
  2146  0885  1283               	bcf	3,5	;RP0=0, select bank0
  2147  0886  00ED               	movwf	getResSHT71@p_humi
  2148  0887  30C7               	movlw	(low (_temp| 0))& (0+255)
  2149  0888  120A  118A  22D6  120A  158A  	fcall	_getResSHT71
  2150                           
  2151                           ;main.c: 471: co2 = measureTGS4161();
  2152  088D  160A  158A  257E  120A  158A  	fcall	_measureTGS4161
  2153  0892  0827               	movf	?_measureTGS4161+1,w
  2154  0893  1683               	bsf	3,5	;RP0=1, select bank1
  2155  0894  00AE               	movwf	(_co2+1)^(0+128)
  2156  0895  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0896  0826               	movf	?_measureTGS4161,w
  2158  0897  1683               	bsf	3,5	;RP0=1, select bank1
  2159  0898  00AD               	movwf	_co2^(0+128)
  2160                           
  2161                           ;main.c: 474: t = getTempDS18B20();
  2162  0899  120A  118A  2015  120A  158A  	fcall	_getTempDS18B20
  2163  089E  084E               	movf	?_getTempDS18B20,w
  2164  089F  1683               	bsf	3,5	;RP0=1, select bank1
  2165  08A0  00A4               	movwf	_t^(0+128)
  2166  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  2167  08A2  084F               	movf	?_getTempDS18B20+1,w
  2168  08A3  1683               	bsf	3,5	;RP0=1, select bank1
  2169  08A4  00A5               	movwf	(_t+1)^(0+128)
  2170  08A5  1283               	bcf	3,5	;RP0=0, select bank0
  2171  08A6  0850               	movf	?_getTempDS18B20+2,w
  2172  08A7  1683               	bsf	3,5	;RP0=1, select bank1
  2173  08A8  00A6               	movwf	(_t+2)^(0+128)
  2174  08A9                     l5951:	
  2175                           
  2176                           ;main.c: 475: }
  2177                           ;main.c: 477: if(disp)
  2178  08A9  082F               	movf	_disp^(0+128),w
  2179  08AA  1903               	btfsc	3,2
  2180  08AB  2902               	goto	l5973
  2181                           
  2182                           ;main.c: 478: {
  2183                           ;main.c: 479: disp = 0;
  2184  08AC  01AF               	clrf	_disp^(0+128)
  2185                           
  2186                           ;main.c: 481: switch(disp_count)
  2187  08AD  28EE               	goto	l5965
  2188  08AE                     l5955:	
  2189                           
  2190                           ;main.c: 484: displayAirTemp(temp);
  2191  08AE  0847               	movf	_temp^(0+128),w
  2192  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  2193  08B0  00DE               	movwf	displayAirTemp@temp2
  2194  08B1  1683               	bsf	3,5	;RP0=1, select bank1
  2195  08B2  0848               	movf	(_temp+1)^(0+128),w
  2196  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  2197  08B4  00DF               	movwf	displayAirTemp@temp2+1
  2198  08B5  1683               	bsf	3,5	;RP0=1, select bank1
  2199  08B6  0849               	movf	(_temp+2)^(0+128),w
  2200  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  2201  08B8  00E0               	movwf	displayAirTemp@temp2+2
  2202  08B9  160A  118A  2006  120A  158A  	fcall	_displayAirTemp
  2203                           
  2204                           ;main.c: 485: break;
  2205  08BE  28FC               	goto	l5967
  2206  08BF                     l5957:	
  2207                           
  2208                           ;main.c: 487: displayAirMoist(humi);
  2209  08BF  0844               	movf	_humi^(0+128),w
  2210  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  2211  08C1  00DE               	movwf	displayAirMoist@humi2
  2212  08C2  1683               	bsf	3,5	;RP0=1, select bank1
  2213  08C3  0845               	movf	(_humi+1)^(0+128),w
  2214  08C4  1283               	bcf	3,5	;RP0=0, select bank0
  2215  08C5  00DF               	movwf	displayAirMoist@humi2+1
  2216  08C6  1683               	bsf	3,5	;RP0=1, select bank1
  2217  08C7  0846               	movf	(_humi+2)^(0+128),w
  2218  08C8  1283               	bcf	3,5	;RP0=0, select bank0
  2219  08C9  00E0               	movwf	displayAirMoist@humi2+2
  2220  08CA  120A  118A  2107  120A  158A  	fcall	_displayAirMoist
  2221                           
  2222                           ;main.c: 488: break;
  2223  08CF  28FC               	goto	l5967
  2224  08D0                     l5959:	
  2225                           
  2226                           ;main.c: 490: displayCO2(co2);
  2227  08D0  082E               	movf	(_co2+1)^(0+128),w
  2228  08D1  1283               	bcf	3,5	;RP0=0, select bank0
  2229  08D2  00AC               	movwf	displayCO2@co22+1
  2230  08D3  1683               	bsf	3,5	;RP0=1, select bank1
  2231  08D4  082D               	movf	_co2^(0+128),w
  2232  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  2233  08D6  00AB               	movwf	displayCO2@co22
  2234  08D7  120A  118A  2495  120A  158A  	fcall	_displayCO2
  2235                           
  2236                           ;main.c: 491: break;
  2237  08DC  28FC               	goto	l5967
  2238  08DD                     l5961:	
  2239                           
  2240                           ;main.c: 493: displaySoilTemp(t);
  2241  08DD  0824               	movf	_t^(0+128),w
  2242  08DE  1283               	bcf	3,5	;RP0=0, select bank0
  2243  08DF  00DE               	movwf	displaySoilTemp@t2
  2244  08E0  1683               	bsf	3,5	;RP0=1, select bank1
  2245  08E1  0825               	movf	(_t+1)^(0+128),w
  2246  08E2  1283               	bcf	3,5	;RP0=0, select bank0
  2247  08E3  00DF               	movwf	displaySoilTemp@t2+1
  2248  08E4  1683               	bsf	3,5	;RP0=1, select bank1
  2249  08E5  0826               	movf	(_t+2)^(0+128),w
  2250  08E6  1283               	bcf	3,5	;RP0=0, select bank0
  2251  08E7  00E0               	movwf	displaySoilTemp@t2+2
  2252  08E8  160A  158A  2413  120A  158A  	fcall	_displaySoilTemp
  2253                           
  2254                           ;main.c: 494: break;
  2255  08ED  28FC               	goto	l5967
  2256  08EE                     l5965:	
  2257  08EE  0830               	movf	_disp_count^(0+128),w
  2258                           
  2259                           ; Switch size 1, requested type "space"
  2260                           ; Number of cases is 4, Range of values is 1 to 4
  2261                           ; switch strategies available:
  2262                           ; Name         Instructions Cycles
  2263                           ; simple_byte           13     7 (average)
  2264                           ; direct_byte           23    11 (fixed)
  2265                           ; jumptable            263     9 (fixed)
  2266                           ;	Chosen strategy is simple_byte
  2267  08EF  3A01               	xorlw	1	; case 1
  2268  08F0  1903               	skipnz
  2269  08F1  28AE               	goto	l5955
  2270  08F2  3A03               	xorlw	3	; case 2
  2271  08F3  1903               	skipnz
  2272  08F4  28BF               	goto	l5957
  2273  08F5  3A01               	xorlw	1	; case 3
  2274  08F6  1903               	skipnz
  2275  08F7  28D0               	goto	l5959
  2276  08F8  3A07               	xorlw	7	; case 4
  2277  08F9  1903               	skipnz
  2278  08FA  28DD               	goto	l5961
  2279  08FB  28FC               	goto	l5967
  2280  08FC                     l5967:	
  2281                           
  2282                           ;main.c: 497: disp_count++;
  2283  08FC  1683               	bsf	3,5	;RP0=1, select bank1
  2284  08FD  3005               	movlw	5
  2285  08FE  0AB0               	incf	_disp_count^(0+128),f
  2286                           
  2287                           ;main.c: 498: if(disp_count > 4) disp_count = 0;
  2288  08FF  0230               	subwf	_disp_count^(0+128),w
  2289  0900  1803               	btfsc	3,0
  2290  0901  01B0               	clrf	_disp_count^(0+128)
  2291  0902                     l5973:	
  2292                           
  2293                           ;main.c: 499: }
  2294                           ;main.c: 501: if (RA4)
  2295  0902  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0903  1E05               	btfss	5,4	;volatile
  2297  0904  2921               	goto	l5983
  2298                           
  2299                           ;main.c: 502: {
  2300                           ;main.c: 503: _delay((unsigned long)((20)*(8000000/4000.0)));
  2301  0905  3034               	movlw	52
  2302  0906  00EF               	movwf	??_main+1
  2303  0907  30F1               	movlw	241
  2304  0908  00EE               	movwf	??_main
  2305  0909                     u6847:	
  2306  0909  0BEE               	decfsz	??_main,f
  2307  090A  2909               	goto	u6847
  2308  090B  0BEF               	decfsz	??_main+1,f
  2309  090C  2909               	goto	u6847
  2310  090D  290E               	nop2
  2311                           
  2312                           ;main.c: 504: if(RA4) menu_flag = 1;
  2313  090E  1283               	bcf	3,5	;RP0=0, select bank0
  2314  090F  1303               	bcf	3,6	;RP1=0, select bank0
  2315  0910  1E05               	btfss	5,4	;volatile
  2316  0911  2915               	goto	l432
  2317  0912  1683               	bsf	3,5	;RP0=1, select bank1
  2318  0913  01B3               	clrf	_menu_flag^(0+128)
  2319  0914  0AB3               	incf	_menu_flag^(0+128),f
  2320  0915                     l432:	
  2321  0915  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0916  1A05               	btfsc	5,4	;volatile
  2323  0917  2915               	goto	l432
  2324                           
  2325                           ;main.c: 506: _delay((unsigned long)((20)*(8000000/4000.0)));
  2326  0918  3034               	movlw	52
  2327  0919  00EF               	movwf	??_main+1
  2328  091A  30F1               	movlw	241
  2329  091B  00EE               	movwf	??_main
  2330  091C                     u6857:	
  2331  091C  0BEE               	decfsz	??_main,f
  2332  091D  291C               	goto	u6857
  2333  091E  0BEF               	decfsz	??_main+1,f
  2334  091F  291C               	goto	u6857
  2335  0920  2921               	nop2
  2336  0921                     l5983:	
  2337                           
  2338                           ;main.c: 507: }
  2339                           ;main.c: 508: if(menu_flag)
  2340  0921  1683               	bsf	3,5	;RP0=1, select bank1
  2341  0922  1303               	bcf	3,6	;RP1=0, select bank1
  2342  0923  0833               	movf	_menu_flag^(0+128),w
  2343  0924  1903               	btfsc	3,2
  2344  0925  292E               	goto	l5993
  2345                           
  2346                           ;main.c: 509: {
  2347                           ;main.c: 510: menu_flag = 0;
  2348  0926  01B3               	clrf	_menu_flag^(0+128)
  2349                           
  2350                           ;main.c: 511: INTCONbits.T0IE = 0;
  2351  0927  128B               	bcf	11,5	;volatile
  2352                           
  2353                           ;main.c: 512: menu();
  2354  0928  120A  118A  24C8  120A  158A  	fcall	_menu
  2355                           
  2356                           ;main.c: 513: INTCONbits.T0IE = 1;
  2357  092D  168B               	bsf	11,5	;volatile
  2358  092E                     l5993:	
  2359                           
  2360                           ;main.c: 514: }
  2361                           ;main.c: 516: regulacija();
  2362  092E  160A  118A  2044  120A  158A  	fcall	_regulacija
  2363  0933  286A               	goto	l5939
  2364  0934                     __end_of_main:	
  2365                           
  2366                           	psect	text1
  2367  1B5D                     __ptext1:	
  2368 ;; *************** function _resetValues *****************
  2369 ;; Defined at:
  2370 ;;		line 157 in file "main.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;		None               void
  2377 ;; Registers used:
  2378 ;;		wreg, status,2
  2379 ;; Tracked objects:
  2380 ;;		On entry : 300/0
  2381 ;;		On exit  : 300/100
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2384 ;;      Params:         0       0       0       0       0
  2385 ;;      Locals:         0       0       0       0       0
  2386 ;;      Temps:          0       0       0       0       0
  2387 ;;      Totals:         0       0       0       0       0
  2388 ;;Total ram usage:        0 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    1
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           
  2399                           ;psect for function _resetValues
  2400  1B5D                     _resetValues:	
  2401                           
  2402                           ;main.c: 158: ok_flag = 0;
  2403                           
  2404                           ;incstack = 0
  2405                           ; Regs used in _resetValues: [wreg+status,2]
  2406  1B5D  1683               	bsf	3,5	;RP0=1, select bank1
  2407  1B5E  30C0               	movlw	192
  2408  1B5F  01B5               	clrf	_ok_flag^(0+128)
  2409                           
  2410                           ;main.c: 159: menu_flag = 0;
  2411  1B60  01B3               	clrf	_menu_flag^(0+128)
  2412                           
  2413                           ;main.c: 160: plus_flag = 0;
  2414  1B61  01B8               	clrf	_plus_flag^(0+128)
  2415                           
  2416                           ;main.c: 161: minus_flag = 0;
  2417  1B62  01B4               	clrf	_minus_flag^(0+128)
  2418                           
  2419                           ;main.c: 162: tmr_count = 0;
  2420  1B63  01B9               	clrf	_tmr_count^(0+128)
  2421                           
  2422                           ;main.c: 163: measure = 0;
  2423  1B64  01B1               	clrf	_measure^(0+128)
  2424                           
  2425                           ;main.c: 164: disp_count = 0;
  2426  1B65  01B0               	clrf	_disp_count^(0+128)
  2427                           
  2428                           ;main.c: 165: disp = 1;
  2429  1B66  01AF               	clrf	_disp^(0+128)
  2430  1B67  0AAF               	incf	_disp^(0+128),f
  2431                           
  2432                           ;main.c: 166: zeljena_temperatura = 24;
  2433  1B68  01A7               	clrf	_zeljena_temperatura^(0+128)
  2434  1B69  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  2435  1B6A  3041               	movlw	65
  2436  1B6B  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  2437                           
  2438                           ;main.c: 167: zeljena_vlaznost = 90;
  2439  1B6C  30B4               	movlw	180
  2440  1B6D  01AA               	clrf	_zeljena_vlaznost^(0+128)
  2441  1B6E  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  2442  1B6F  3042               	movlw	66
  2443  1B70  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  2444                           
  2445                           ;main.c: 168: zeljena_co2 = 1000;
  2446  1B71  30E8               	movlw	232
  2447  1B72  00FA               	movwf	_zeljena_co2
  2448  1B73  3003               	movlw	3
  2449  1B74  00FB               	movwf	_zeljena_co2+1
  2450                           
  2451                           ;main.c: 169: ok_flag_humi = 0;
  2452  1B75  01B7               	clrf	_ok_flag_humi^(0+128)
  2453                           
  2454                           ;main.c: 171: tmr_co2 = 0;
  2455  1B76  01B6               	clrf	_ok_flag_co2^(0+128)
  2456                           
  2457                           ;main.c: 172: measure_co2 = 1;
  2458  1B77  01B2               	clrf	_measure_co2^(0+128)
  2459  1B78  0AB2               	incf	_measure_co2^(0+128),f
  2460                           
  2461                           ;main.c: 173: co2 = 0;
  2462  1B79  01AD               	clrf	_co2^(0+128)
  2463  1B7A  01AE               	clrf	(_co2+1)^(0+128)
  2464  1B7B  0008               	return
  2465  1B7C                     __end_of_resetValues:	
  2466                           
  2467                           	psect	text2
  2468  1044                     __ptext2:	
  2469 ;; *************** function _regulacija *****************
  2470 ;; Defined at:
  2471 ;;		line 185 in file "main.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;		None               void
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0, pclath, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 300/100
  2482 ;;		On exit  : 200/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2485 ;;      Params:         0       0       0       0       0
  2486 ;;      Locals:         0       0       0       0       0
  2487 ;;      Temps:          0       2       0       0       0
  2488 ;;      Totals:         0       2       0       0       0
  2489 ;;Total ram usage:        2 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    3
  2492 ;; This function calls:
  2493 ;;		___ftadd
  2494 ;;		___ftge
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           
  2501                           ;psect for function _regulacija
  2502  1044                     _regulacija:	
  2503                           
  2504                           ;main.c: 187: if(RC4)
  2505                           
  2506                           ;incstack = 0
  2507                           ; Regs used in _regulacija: [wreg+status,2+status,0+pclath+cstack]
  2508  1044  1283               	bcf	3,5	;RP0=0, select bank0
  2509  1045  1E07               	btfss	7,4	;volatile
  2510  1046  285C               	goto	l5797
  2511                           
  2512                           ;main.c: 188: {
  2513                           ;main.c: 189: if(temp > zeljena_temperatura)
  2514  1047  1683               	bsf	3,5	;RP0=1, select bank1
  2515  1048  0827               	movf	_zeljena_temperatura^(0+128),w
  2516  1049  1283               	bcf	3,5	;RP0=0, select bank0
  2517  104A  00CE               	movwf	___ftge@ff1
  2518  104B  1683               	bsf	3,5	;RP0=1, select bank1
  2519  104C  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2520  104D  1283               	bcf	3,5	;RP0=0, select bank0
  2521  104E  00CF               	movwf	___ftge@ff1+1
  2522  104F  1683               	bsf	3,5	;RP0=1, select bank1
  2523  1050  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2524  1051  1283               	bcf	3,5	;RP0=0, select bank0
  2525  1052  212D               	fcall	PL26	;call to abstracted procedure
  2526  1053  120A  158A  25E5  160A  118A  	fcall	___ftge
  2527  1058  1803               	btfsc	3,0
  2528  1059  2872               	goto	l351
  2529                           
  2530                           ;main.c: 190: {
  2531                           ;main.c: 191: RC4 = 0;
  2532  105A  1207               	bcf	7,4	;volatile
  2533  105B  2872               	goto	l351
  2534  105C                     l5797:	
  2535                           
  2536                           ;main.c: 194: else if(temp < (zeljena_temperatura - 0.4))
  2537  105C  213B  160A  118A   	fcall	PL40	;call to abstracted procedure
  2538  105F  30CD               	movlw	205
  2539  1060  00C2               	movwf	___ftadd@f1
  2540  1061  30CC               	movlw	204
  2541  1062  00C3               	movwf	___ftadd@f1+1
  2542  1063  30BE               	movlw	190
  2543  1064  211F               	fcall	PL22	;call to abstracted procedure
  2544  1065  160A  118A  263A  160A  118A  	fcall	___ftadd
  2545  106A  214E               	fcall	PL92	;call to abstracted procedure
  2546  106B  120A  158A  25E5  160A  118A  	fcall	___ftge
  2547  1070  1C03               	btfss	3,0
  2548                           
  2549                           ;main.c: 195: {
  2550                           ;main.c: 196: RC4 = 1;
  2551  1071  1607               	bsf	7,4	;volatile
  2552  1072                     l351:	
  2553                           
  2554                           ;main.c: 197: }
  2555                           ;main.c: 199: if(RC3)
  2556  1072  1D87               	btfss	7,3	;volatile
  2557  1073  288A               	goto	l5805
  2558                           
  2559                           ;main.c: 200: {
  2560                           ;main.c: 201: if(temp < zeljena_temperatura)
  2561  1074  213B               	fcall	PL40	;call to abstracted procedure
  2562  1075  1683               	bsf	3,5	;RP0=1, select bank1
  2563  1076  0827               	movf	_zeljena_temperatura^(0+128),w
  2564  1077  1283               	bcf	3,5	;RP0=0, select bank0
  2565  1078  00D1               	movwf	___ftge@ff2
  2566  1079  1683               	bsf	3,5	;RP0=1, select bank1
  2567  107A  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2568  107B  1283               	bcf	3,5	;RP0=0, select bank0
  2569  107C  00D2               	movwf	___ftge@ff2+1
  2570  107D  1683               	bsf	3,5	;RP0=1, select bank1
  2571  107E  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2572  107F  1283               	bcf	3,5	;RP0=0, select bank0
  2573  1080  00D3               	movwf	___ftge@ff2+2
  2574  1081  120A  158A  25E5  160A  118A  	fcall	___ftge
  2575  1086  1803               	btfsc	3,0
  2576  1087  28A0               	goto	l355
  2577                           
  2578                           ;main.c: 202: {
  2579                           ;main.c: 203: RC3 = 0;
  2580  1088  1187               	bcf	7,3	;volatile
  2581  1089  28A0               	goto	l355
  2582  108A                     l5805:	
  2583                           
  2584                           ;main.c: 206: else if(temp > (zeljena_temperatura + 0.4))
  2585  108A  30CD               	movlw	205
  2586  108B  00C2               	movwf	___ftadd@f1
  2587  108C  30CC               	movlw	204
  2588  108D  00C3               	movwf	___ftadd@f1+1
  2589  108E  303E               	movlw	62
  2590  108F  211F               	fcall	PL22	;call to abstracted procedure
  2591  1090  160A  118A  263A  160A  118A  	fcall	___ftadd
  2592  1095  2148  160A  118A   	fcall	PL70	;call to abstracted procedure
  2593  1098  212D               	fcall	PL26	;call to abstracted procedure
  2594  1099  120A  158A  25E5  160A  118A  	fcall	___ftge
  2595  109E  1C03               	btfss	3,0
  2596                           
  2597                           ;main.c: 207: {
  2598                           ;main.c: 208: RC3 = 1;
  2599  109F  1587               	bsf	7,3	;volatile
  2600  10A0                     l355:	
  2601                           
  2602                           ;main.c: 209: }
  2603                           ;main.c: 214: if(RC1)
  2604  10A0  1C87               	btfss	7,1	;volatile
  2605  10A1  28C3               	goto	l5813
  2606                           
  2607                           ;main.c: 215: {
  2608                           ;main.c: 216: if(humi > (zeljena_vlaznost + 2.5))
  2609  10A2  3020               	movlw	32
  2610  10A3  01C2               	clrf	___ftadd@f1
  2611  10A4  00C3               	movwf	___ftadd@f1+1
  2612  10A5  3040               	movlw	64
  2613  10A6  2111               	fcall	PL20	;call to abstracted procedure
  2614  10A7  160A  118A  263A  160A  118A  	fcall	___ftadd
  2615  10AC  2148               	fcall	PL70	;call to abstracted procedure
  2616  10AD  00D0               	movwf	___ftge@ff1+2
  2617  10AE  1683               	bsf	3,5	;RP0=1, select bank1
  2618  10AF  0844               	movf	_humi^(0+128),w
  2619  10B0  1283               	bcf	3,5	;RP0=0, select bank0
  2620  10B1  00D1               	movwf	___ftge@ff2
  2621  10B2  1683               	bsf	3,5	;RP0=1, select bank1
  2622  10B3  0845               	movf	(_humi+1)^(0+128),w
  2623  10B4  1283               	bcf	3,5	;RP0=0, select bank0
  2624  10B5  00D2               	movwf	___ftge@ff2+1
  2625  10B6  1683               	bsf	3,5	;RP0=1, select bank1
  2626  10B7  0846               	movf	(_humi+2)^(0+128),w
  2627  10B8  1283               	bcf	3,5	;RP0=0, select bank0
  2628  10B9  00D3               	movwf	___ftge@ff2+2
  2629  10BA  120A  158A  25E5  160A  118A  	fcall	___ftge
  2630  10BF  1803               	btfsc	3,0
  2631  10C0  28E1               	goto	l5817
  2632                           
  2633                           ;main.c: 217: {
  2634                           ;main.c: 218: RC1 = 0;
  2635  10C1  1087               	bcf	7,1	;volatile
  2636  10C2  28E1               	goto	l5817
  2637  10C3                     l5813:	
  2638                           
  2639                           ;main.c: 222: else if(humi < (zeljena_vlaznost - 2.5))
  2640  10C3  1683               	bsf	3,5	;RP0=1, select bank1
  2641  10C4  0844               	movf	_humi^(0+128),w
  2642  10C5  1283               	bcf	3,5	;RP0=0, select bank0
  2643  10C6  00CE               	movwf	___ftge@ff1
  2644  10C7  1683               	bsf	3,5	;RP0=1, select bank1
  2645  10C8  0845               	movf	(_humi+1)^(0+128),w
  2646  10C9  1283               	bcf	3,5	;RP0=0, select bank0
  2647  10CA  00CF               	movwf	___ftge@ff1+1
  2648  10CB  1683               	bsf	3,5	;RP0=1, select bank1
  2649  10CC  0846               	movf	(_humi+2)^(0+128),w
  2650  10CD  1283               	bcf	3,5	;RP0=0, select bank0
  2651  10CE  00D0               	movwf	___ftge@ff1+2
  2652  10CF  3020               	movlw	32
  2653  10D0  01C2               	clrf	___ftadd@f1
  2654  10D1  00C3               	movwf	___ftadd@f1+1
  2655  10D2  30C0               	movlw	192
  2656  10D3  2111               	fcall	PL20	;call to abstracted procedure
  2657  10D4  160A  118A  263A  160A  118A  	fcall	___ftadd
  2658  10D9  214E               	fcall	PL92	;call to abstracted procedure
  2659  10DA  120A  158A  25E5  160A  118A  	fcall	___ftge
  2660  10DF  1C03               	btfss	3,0
  2661                           
  2662                           ;main.c: 223: {
  2663                           ;main.c: 224: RC1 = 1;
  2664  10E0  1487               	bsf	7,1	;volatile
  2665  10E1                     l5817:	
  2666                           
  2667                           ;main.c: 225: }
  2668                           ;main.c: 229: if(measure_co2)
  2669  10E1  1683               	bsf	3,5	;RP0=1, select bank1
  2670  10E2  0832               	movf	_measure_co2^(0+128),w
  2671  10E3  1903               	btfsc	3,2
  2672  10E4  0008               	return
  2673                           
  2674                           ;main.c: 230: {
  2675                           ;main.c: 231: if (RC0)
  2676  10E5  1283               	bcf	3,5	;RP0=0, select bank0
  2677  10E6  1C07               	btfss	7,0	;volatile
  2678  10E7  28FD               	goto	l5825
  2679                           
  2680                           ;main.c: 232: {
  2681                           ;main.c: 233: if(co2 < (zeljena_co2 - 250))
  2682  10E8  087A               	movf	_zeljena_co2,w
  2683  10E9  3E06               	addlw	6
  2684  10EA  00D4               	movwf	??_regulacija
  2685  10EB  087B               	movf	_zeljena_co2+1,w
  2686  10EC  1803               	skipnc
  2687  10ED  3E01               	addlw	1
  2688  10EE  3EFF               	addlw	255
  2689  10EF  00D5               	movwf	??_regulacija+1
  2690  10F0  1683               	bsf	3,5	;RP0=1, select bank1
  2691  10F1  022E               	subwf	(_co2+1)^(0+128),w
  2692  10F2  1D03               	skipz
  2693  10F3  28F8               	goto	u6665
  2694  10F4  1283               	bcf	3,5	;RP0=0, select bank0
  2695  10F5  0854               	movf	??_regulacija,w
  2696  10F6  1683               	bsf	3,5	;RP0=1, select bank1
  2697  10F7  022D               	subwf	_co2^(0+128),w
  2698  10F8                     u6665:	
  2699  10F8  1803               	skipnc
  2700  10F9  0008               	return
  2701                           
  2702                           ;main.c: 234: {
  2703                           ;main.c: 235: RC0 = 0;
  2704  10FA  1283               	bcf	3,5	;RP0=0, select bank0
  2705  10FB  1007               	bcf	7,0	;volatile
  2706  10FC  0008               	return
  2707  10FD                     l5825:	
  2708                           
  2709                           ;main.c: 239: else if(co2 > (zeljena_co2 + 250))
  2710  10FD  087A               	movf	_zeljena_co2,w
  2711  10FE  3EFA               	addlw	250
  2712  10FF  00D4               	movwf	??_regulacija
  2713  1100  087B               	movf	_zeljena_co2+1,w
  2714  1101  1803               	skipnc
  2715  1102  3E01               	addlw	1
  2716  1103  00D5               	movwf	??_regulacija+1
  2717  1104  1683               	bsf	3,5	;RP0=1, select bank1
  2718  1105  082E               	movf	(_co2+1)^(0+128),w
  2719  1106  1283               	bcf	3,5	;RP0=0, select bank0
  2720  1107  0255               	subwf	??_regulacija+1,w
  2721  1108  1D03               	skipz
  2722  1109  290E               	goto	u6675
  2723  110A  1683               	bsf	3,5	;RP0=1, select bank1
  2724  110B  082D               	movf	_co2^(0+128),w
  2725  110C  1283               	bcf	3,5	;RP0=0, select bank0
  2726  110D  0254               	subwf	??_regulacija,w
  2727  110E                     u6675:	
  2728  110E  1C03               	btfss	3,0
  2729                           
  2730                           ;main.c: 240: {
  2731                           ;main.c: 241: RC0 = 1;
  2732  110F  1407               	bsf	7,0	;volatile
  2733  1110  0008               	return
  2734  1111                     __end_of_regulacija:	
  2735  1111                     PL20:	
  2736  1111  00C4               	movwf	___ftadd@f1+2
  2737  1112  1683               	bsf	3,5	;RP0=1, select bank1
  2738  1113  082A               	movf	_zeljena_vlaznost^(0+128),w
  2739  1114  1283               	bcf	3,5	;RP0=0, select bank0
  2740  1115  00C5               	movwf	___ftadd@f2
  2741  1116  1683               	bsf	3,5	;RP0=1, select bank1
  2742  1117  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  2743  1118  1283               	bcf	3,5	;RP0=0, select bank0
  2744  1119  00C6               	movwf	___ftadd@f2+1
  2745  111A  1683               	bsf	3,5	;RP0=1, select bank1
  2746  111B  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  2747  111C  1283               	bcf	3,5	;RP0=0, select bank0
  2748  111D  00C7               	movwf	___ftadd@f2+2
  2749  111E  0008               	return
  2750  111F                     __end_ofPL20:	
  2751  111F                     PL22:	
  2752  111F  00C4               	movwf	___ftadd@f1+2
  2753  1120  1683               	bsf	3,5	;RP0=1, select bank1
  2754  1121  0827               	movf	_zeljena_temperatura^(0+128),w
  2755  1122  1283               	bcf	3,5	;RP0=0, select bank0
  2756  1123  00C5               	movwf	___ftadd@f2
  2757  1124  1683               	bsf	3,5	;RP0=1, select bank1
  2758  1125  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2759  1126  1283               	bcf	3,5	;RP0=0, select bank0
  2760  1127  00C6               	movwf	___ftadd@f2+1
  2761  1128  1683               	bsf	3,5	;RP0=1, select bank1
  2762  1129  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2763  112A  1283               	bcf	3,5	;RP0=0, select bank0
  2764  112B  00C7               	movwf	___ftadd@f2+2
  2765  112C  0008               	return
  2766  112D                     __end_ofPL22:	
  2767  112D                     PL26:	
  2768  112D  00D0               	movwf	___ftge@ff1+2
  2769  112E  1683               	bsf	3,5	;RP0=1, select bank1
  2770  112F  0847               	movf	_temp^(0+128),w
  2771  1130  1283               	bcf	3,5	;RP0=0, select bank0
  2772  1131  00D1               	movwf	___ftge@ff2
  2773  1132  1683               	bsf	3,5	;RP0=1, select bank1
  2774  1133  0848               	movf	(_temp+1)^(0+128),w
  2775  1134  1283               	bcf	3,5	;RP0=0, select bank0
  2776  1135  00D2               	movwf	___ftge@ff2+1
  2777  1136  1683               	bsf	3,5	;RP0=1, select bank1
  2778  1137  0849               	movf	(_temp+2)^(0+128),w
  2779  1138  1283               	bcf	3,5	;RP0=0, select bank0
  2780  1139  00D3               	movwf	___ftge@ff2+2
  2781  113A  0008               	return
  2782  113B                     __end_ofPL26:	
  2783  113B                     PL40:	
  2784  113B  1683               	bsf	3,5	;RP0=1, select bank1
  2785  113C  0847               	movf	_temp^(0+128),w
  2786  113D  1283               	bcf	3,5	;RP0=0, select bank0
  2787  113E  00CE               	movwf	___ftge@ff1
  2788  113F  1683               	bsf	3,5	;RP0=1, select bank1
  2789  1140  0848               	movf	(_temp+1)^(0+128),w
  2790  1141  1283               	bcf	3,5	;RP0=0, select bank0
  2791  1142  00CF               	movwf	___ftge@ff1+1
  2792  1143  1683               	bsf	3,5	;RP0=1, select bank1
  2793  1144  0849               	movf	(_temp+2)^(0+128),w
  2794  1145  1283               	bcf	3,5	;RP0=0, select bank0
  2795  1146  00D0               	movwf	___ftge@ff1+2
  2796  1147  0008               	return
  2797  1148                     __end_ofPL40:	
  2798  1148                     PL70:	
  2799  1148  0842               	movf	?___ftadd,w
  2800  1149  00CE               	movwf	___ftge@ff1
  2801  114A  0843               	movf	?___ftadd+1,w
  2802  114B  00CF               	movwf	___ftge@ff1+1
  2803  114C  0844               	movf	?___ftadd+2,w
  2804  114D  0008               	return
  2805  114E                     __end_ofPL70:	
  2806  114E                     PL92:	
  2807  114E  0842               	movf	?___ftadd,w
  2808  114F  00D1               	movwf	___ftge@ff2
  2809  1150  0843               	movf	?___ftadd+1,w
  2810  1151  00D2               	movwf	___ftge@ff2+1
  2811  1152  0844               	movf	?___ftadd+2,w
  2812  1153  00D3               	movwf	___ftge@ff2+2
  2813  1154  0008               	return
  2814  1155                     __end_ofPL92:	
  2815                           
  2816                           	psect	text7
  2817  1D7E                     __ptext7:	
  2818 ;; *************** function _measureTGS4161 *****************
  2819 ;; Defined at:
  2820 ;;		line 30 in file "tgs4161.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  ppm             2   19[BANK0 ] unsigned int 
  2825 ;;  temp            2   17[BANK0 ] unsigned int 
  2826 ;;  ppm_temp        2   14[BANK0 ] unsigned int 
  2827 ;;  krez2           2   12[BANK0 ] unsigned int 
  2828 ;;  krez1           2   10[BANK0 ] unsigned int 
  2829 ;;  i               1   16[BANK0 ] unsigned char 
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2    6[BANK0 ] unsigned int 
  2832 ;; Registers used:
  2833 ;;		wreg, status,2, status,0, pclath, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/100
  2836 ;;		On exit  : 300/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2839 ;;      Params:         0       2       0       0       0
  2840 ;;      Locals:         0      11       0       0       0
  2841 ;;      Temps:          0       2       0       0       0
  2842 ;;      Totals:         0      15       0       0       0
  2843 ;;Total ram usage:       15 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    2
  2846 ;; This function calls:
  2847 ;;		___lwdiv
  2848 ;;		___wmul
  2849 ;;		_adcRead
  2850 ;; This function is called by:
  2851 ;;		_main
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           
  2856                           ;psect for function _measureTGS4161
  2857  1D7E                     _measureTGS4161:	
  2858                           
  2859                           ;incstack = 0
  2860                           ; Regs used in _measureTGS4161: [wreg+status,2+status,0+pclath+cstack]
  2861  1D7E  1283               	bcf	3,5	;RP0=0, select bank0
  2862  1D7F  1303               	bcf	3,6	;RP1=0, select bank0
  2863  1D80  30E9               	movlw	233
  2864  1D81  01B3               	clrf	measureTGS4161@ppm
  2865  1D82  01B4               	clrf	measureTGS4161@ppm+1
  2866  1D83  01AE               	clrf	measureTGS4161@ppm_temp
  2867  1D84  01AF               	clrf	measureTGS4161@ppm_temp+1
  2868                           
  2869                           ;tgs4161.c: 32: char i;
  2870                           ;tgs4161.c: 34: krez1 = -23.43;
  2871  1D85  00AA               	movwf	measureTGS4161@krez1
  2872  1D86  30FF               	movlw	255
  2873  1D87  00AB               	movwf	measureTGS4161@krez1+1
  2874                           
  2875                           ;tgs4161.c: 35: krez2 = -53.63;
  2876  1D88  30CB               	movlw	203
  2877  1D89  00AC               	movwf	measureTGS4161@krez2
  2878  1D8A  30FF               	movlw	255
  2879  1D8B  00AD               	movwf	measureTGS4161@krez2+1
  2880                           
  2881                           ;tgs4161.c: 37: INTCONbits.T0IE = 0;
  2882  1D8C  128B               	bcf	11,5	;volatile
  2883                           
  2884                           ;tgs4161.c: 38: for(i=0;i<7;i++)
  2885  1D8D  01B0               	clrf	measureTGS4161@i
  2886  1D8E                     l5717:	
  2887                           
  2888                           ;tgs4161.c: 39: {
  2889                           ;tgs4161.c: 40: temp = adcRead();
  2890  1D8E  2606  160A  158A   	fcall	_adcRead
  2891  1D91  0874               	movf	?_adcRead+1,w
  2892  1D92  00B2               	movwf	measureTGS4161@temp+1
  2893  1D93  0873               	movf	?_adcRead,w
  2894  1D94  00B1               	movwf	measureTGS4161@temp
  2895                           
  2896                           ;tgs4161.c: 42: if(temp > 236) ppm = krez1*temp + 6650;
  2897  1D95  3000               	movlw	0
  2898  1D96  0232               	subwf	measureTGS4161@temp+1,w
  2899  1D97  30ED               	movlw	237
  2900  1D98  1903               	skipnz
  2901  1D99  0231               	subwf	measureTGS4161@temp,w
  2902  1D9A  1C03               	skipc
  2903  1D9B  2DB0               	goto	l5725
  2904  1D9C  082B               	movf	measureTGS4161@krez1+1,w
  2905  1D9D  00F4               	movwf	___wmul@multiplier+1
  2906  1D9E  082A               	movf	measureTGS4161@krez1,w
  2907  1D9F  262F               	fcall	PL98	;call to abstracted procedure
  2908  1DA0  120A  158A  2697  160A  158A  	fcall	___wmul
  2909  1DA5  0874               	movf	?___wmul+1,w
  2910  1DA6  1283               	bcf	3,5	;RP0=0, select bank0
  2911  1DA7  00B4               	movwf	measureTGS4161@ppm+1
  2912  1DA8  0873               	movf	?___wmul,w
  2913  1DA9  00B3               	movwf	measureTGS4161@ppm
  2914  1DAA  30FA               	movlw	250
  2915  1DAB  07B3               	addwf	measureTGS4161@ppm,f
  2916  1DAC  1803               	skipnc
  2917  1DAD  0AB4               	incf	measureTGS4161@ppm+1,f
  2918  1DAE  3019               	movlw	25
  2919  1DAF  2DC3               	goto	L1
  2920  1DB0                     l5725:	
  2921                           
  2922                           ;tgs4161.c: 43: else ppm = krez2*temp + 13500;
  2923  1DB0  082D               	movf	measureTGS4161@krez2+1,w
  2924  1DB1  00F4               	movwf	___wmul@multiplier+1
  2925  1DB2  082C               	movf	measureTGS4161@krez2,w
  2926  1DB3  262F               	fcall	PL98	;call to abstracted procedure
  2927  1DB4  120A  158A  2697  160A  158A  	fcall	___wmul
  2928  1DB9  0874               	movf	?___wmul+1,w
  2929  1DBA  1283               	bcf	3,5	;RP0=0, select bank0
  2930  1DBB  00B4               	movwf	measureTGS4161@ppm+1
  2931  1DBC  0873               	movf	?___wmul,w
  2932  1DBD  00B3               	movwf	measureTGS4161@ppm
  2933  1DBE  30BC               	movlw	188
  2934  1DBF  07B3               	addwf	measureTGS4161@ppm,f
  2935  1DC0  1803               	skipnc
  2936  1DC1  0AB4               	incf	measureTGS4161@ppm+1,f
  2937  1DC2  3034               	movlw	52
  2938  1DC3                     L1:	
  2939  1DC3  07B4               	addwf	measureTGS4161@ppm+1,f
  2940                           
  2941                           ;tgs4161.c: 44: ppm_temp += ppm;
  2942  1DC4  0833               	movf	measureTGS4161@ppm,w
  2943  1DC5  07AE               	addwf	measureTGS4161@ppm_temp,f
  2944  1DC6  1803               	skipnc
  2945  1DC7  0AAF               	incf	measureTGS4161@ppm_temp+1,f
  2946  1DC8  0834               	movf	measureTGS4161@ppm+1,w
  2947  1DC9  07AF               	addwf	measureTGS4161@ppm_temp+1,f
  2948                           
  2949                           ;tgs4161.c: 45: _delay((unsigned long)((20)*(8000000/4000.0)));
  2950  1DCA  3034               	movlw	52
  2951  1DCB  00A9               	movwf	??_measureTGS4161+1
  2952  1DCC  30F1               	movlw	241
  2953  1DCD  00A8               	movwf	??_measureTGS4161
  2954  1DCE                     u6927:	
  2955  1DCE  0BA8               	decfsz	??_measureTGS4161,f
  2956  1DCF  2DCE               	goto	u6927
  2957  1DD0  0BA9               	decfsz	??_measureTGS4161+1,f
  2958  1DD1  2DCE               	goto	u6927
  2959  1DD2  2DD3               	nop2
  2960  1DD3  1283               	bcf	3,5	;RP0=0, select bank0
  2961  1DD4  1303               	bcf	3,6	;RP1=0, select bank0
  2962  1DD5  3007               	movlw	7
  2963  1DD6  0AB0               	incf	measureTGS4161@i,f
  2964  1DD7  0230               	subwf	measureTGS4161@i,w
  2965  1DD8  1C03               	skipc
  2966  1DD9  2D8E               	goto	l5717
  2967                           
  2968                           ;tgs4161.c: 46: }
  2969                           ;tgs4161.c: 47: INTCONbits.T0IE = 1;
  2970  1DDA  168B               	bsf	11,5	;volatile
  2971                           
  2972                           ;tgs4161.c: 49: ppm = ppm_temp/7;
  2973  1DDB  3007               	movlw	7
  2974  1DDC  00F3               	movwf	___lwdiv@divisor
  2975  1DDD  01F4               	clrf	___lwdiv@divisor+1
  2976  1DDE  082F               	movf	measureTGS4161@ppm_temp+1,w
  2977  1DDF  00F6               	movwf	___lwdiv@dividend+1
  2978  1DE0  082E               	movf	measureTGS4161@ppm_temp,w
  2979  1DE1  00F5               	movwf	___lwdiv@dividend
  2980  1DE2  120A  118A  27A0  160A  158A  	fcall	___lwdiv
  2981  1DE7  0874               	movf	?___lwdiv+1,w
  2982  1DE8  00B4               	movwf	measureTGS4161@ppm+1
  2983  1DE9  0873               	movf	?___lwdiv,w
  2984  1DEA  00B3               	movwf	measureTGS4161@ppm
  2985                           
  2986                           ;tgs4161.c: 50: if(ppm < 350) ppm = 350;
  2987  1DEB  3001               	movlw	1
  2988  1DEC  0234               	subwf	measureTGS4161@ppm+1,w
  2989  1DED  305E               	movlw	94
  2990  1DEE  1903               	skipnz
  2991  1DEF  0233               	subwf	measureTGS4161@ppm,w
  2992  1DF0  1803               	skipnc
  2993  1DF1  2DF6               	goto	l210
  2994  1DF2  305E               	movlw	94
  2995  1DF3  00B3               	movwf	measureTGS4161@ppm
  2996  1DF4  3001               	movlw	1
  2997  1DF5  00B4               	movwf	measureTGS4161@ppm+1
  2998  1DF6                     l210:	
  2999                           
  3000                           ;tgs4161.c: 51: if(ppm > 5500) ppm = 5500;
  3001  1DF6  3015               	movlw	21
  3002  1DF7  0234               	subwf	measureTGS4161@ppm+1,w
  3003  1DF8  307D               	movlw	125
  3004  1DF9  1903               	skipnz
  3005  1DFA  0233               	subwf	measureTGS4161@ppm,w
  3006  1DFB  1C03               	skipc
  3007  1DFC  2E01               	goto	l211
  3008  1DFD  307C               	movlw	124
  3009  1DFE  00B3               	movwf	measureTGS4161@ppm
  3010  1DFF  3015               	movlw	21
  3011  1E00  00B4               	movwf	measureTGS4161@ppm+1
  3012  1E01                     l211:	
  3013                           
  3014                           ;tgs4161.c: 53: return ppm;
  3015  1E01  0834               	movf	measureTGS4161@ppm+1,w
  3016  1E02  00A7               	movwf	?_measureTGS4161+1
  3017  1E03  0833               	movf	measureTGS4161@ppm,w
  3018  1E04  00A6               	movwf	?_measureTGS4161
  3019  1E05  0008               	return
  3020  1E06                     __end_of_measureTGS4161:	
  3021  1E06                     __ptext8:	
  3022 ;; *************** function _adcRead *****************
  3023 ;; Defined at:
  3024 ;;		line 12 in file "tgs4161.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;		None
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  temp            2    4[BANK0 ] unsigned int 
  3029 ;;  tempH           2    2[BANK0 ] unsigned short 
  3030 ;;  tempL           2    0[BANK0 ] unsigned short 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  2    2[COMMON] unsigned int 
  3033 ;; Registers used:
  3034 ;;		wreg, status,2
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 300/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         2       0       0       0       0
  3041 ;;      Locals:         0       6       0       0       0
  3042 ;;      Temps:          2       0       0       0       0
  3043 ;;      Totals:         4       6       0       0       0
  3044 ;;Total ram usage:       10 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    1
  3047 ;; This function calls:
  3048 ;;		Nothing
  3049 ;; This function is called by:
  3050 ;;		_measureTGS4161
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _adcRead
  3056  1E06                     _adcRead:	
  3057                           
  3058                           ;tgs4161.c: 14: unsigned short tempL=0, tempH=0;
  3059                           
  3060                           ;incstack = 0
  3061                           ; Regs used in _adcRead: [wreg+status,2]
  3062  1E06  1283               	bcf	3,5	;RP0=0, select bank0
  3063  1E07  1303               	bcf	3,6	;RP1=0, select bank0
  3064  1E08  01A0               	clrf	adcRead@tempL
  3065  1E09  01A1               	clrf	adcRead@tempL+1
  3066  1E0A  01A2               	clrf	adcRead@tempH
  3067  1E0B  01A3               	clrf	adcRead@tempH+1
  3068                           
  3069                           ;tgs4161.c: 16: ADCON0bits.ADON = 1;
  3070  1E0C  141F               	bsf	31,0	;volatile
  3071                           
  3072                           ;tgs4161.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  3073  1E0D  3003               	movlw	3
  3074  1E0E  00F6               	movwf	??_adcRead+1
  3075  1E0F  3097               	movlw	151
  3076  1E10  00F5               	movwf	??_adcRead
  3077  1E11                     u6937:	
  3078  1E11  0BF5               	decfsz	??_adcRead,f
  3079  1E12  2E11               	goto	u6937
  3080  1E13  0BF6               	decfsz	??_adcRead+1,f
  3081  1E14  2E11               	goto	u6937
  3082  1E15  2E16               	nop2
  3083                           
  3084                           ;tgs4161.c: 18: ADCON0bits.GO = 1;
  3085  1E16  1283               	bcf	3,5	;RP0=0, select bank0
  3086  1E17  1303               	bcf	3,6	;RP1=0, select bank0
  3087  1E18  149F               	bsf	31,1	;volatile
  3088  1E19                     l200:	
  3089                           ;tgs4161.c: 20: while(ADCON0bits.GO);
  3090                           
  3091  1E19  189F               	btfsc	31,1	;volatile
  3092  1E1A  2E19               	goto	l200
  3093                           
  3094                           ;tgs4161.c: 22: tempL |= ADRESL;
  3095  1E1B  1683               	bsf	3,5	;RP0=1, select bank1
  3096  1E1C  081E               	movf	30,w	;volatile
  3097  1E1D  1283               	bcf	3,5	;RP0=0, select bank0
  3098  1E1E  04A0               	iorwf	adcRead@tempL,f
  3099                           
  3100                           ;tgs4161.c: 23: tempH |= ADRESH;
  3101  1E1F  081E               	movf	30,w	;volatile
  3102  1E20  04A2               	iorwf	adcRead@tempH,f
  3103                           
  3104                           ;tgs4161.c: 25: temp = ((unsigned int)tempH <<8) + (unsigned int)tempL;
  3105  1E21  0822               	movf	adcRead@tempH,w
  3106  1E22  00A5               	movwf	adcRead@temp+1
  3107  1E23  01A4               	clrf	adcRead@temp
  3108  1E24  0820               	movf	adcRead@tempL,w
  3109  1E25  07A4               	addwf	adcRead@temp,f
  3110  1E26  1803               	skipnc
  3111  1E27  0AA5               	incf	adcRead@temp+1,f
  3112  1E28  0821               	movf	adcRead@tempL+1,w
  3113  1E29  07A5               	addwf	adcRead@temp+1,f
  3114                           
  3115                           ;tgs4161.c: 27: return temp;
  3116  1E2A  0825               	movf	adcRead@temp+1,w
  3117  1E2B  00F4               	movwf	?_adcRead+1
  3118  1E2C  0824               	movf	adcRead@temp,w
  3119  1E2D  00F3               	movwf	?_adcRead
  3120  1E2E  0008               	return
  3121  1E2F                     __end_of_adcRead:	
  3122  1E2F                     PL98:	
  3123  1E2F  00F3               	movwf	___wmul@multiplier
  3124  1E30  0832               	movf	measureTGS4161@temp+1,w
  3125  1E31  00F6               	movwf	___wmul@multiplicand+1
  3126  1E32  0831               	movf	measureTGS4161@temp,w
  3127  1E33  00F5               	movwf	___wmul@multiplicand
  3128  1E34  0008               	return
  3129  1E35                     __end_ofPL98:	
  3130                           
  3131                           	psect	text9
  3132  1B3C                     __ptext9:	
  3133 ;; *************** function _initTimer0 *****************
  3134 ;; Defined at:
  3135 ;;		line 176 in file "main.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;		None               void
  3142 ;; Registers used:
  3143 ;;		wreg, status,2, status,0
  3144 ;; Tracked objects:
  3145 ;;		On entry : 300/100
  3146 ;;		On exit  : 300/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       0       0       0
  3150 ;;      Locals:         0       0       0       0       0
  3151 ;;      Temps:          0       0       0       0       0
  3152 ;;      Totals:         0       0       0       0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    1
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function _initTimer0
  3165  1B3C                     _initTimer0:	
  3166                           
  3167                           ;main.c: 177: OPTION_REGbits.T0CS = 0;
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in _initTimer0: [wreg+status,2+status,0]
  3171  1B3C  1281               	bcf	1,5	;volatile
  3172                           
  3173                           ;main.c: 178: OPTION_REGbits.PSA = 0;
  3174  1B3D  1181               	bcf	1,3	;volatile
  3175                           
  3176                           ;main.c: 179: OPTION_REG |= 0b00000111;
  3177  1B3E  3007               	movlw	7
  3178  1B3F  0481               	iorwf	1,f	;volatile
  3179                           
  3180                           ;main.c: 180: INTCONbits.GIE = 1;
  3181  1B40  178B               	bsf	11,7	;volatile
  3182                           
  3183                           ;main.c: 181: TMR0 = 0;
  3184  1B41  1283               	bcf	3,5	;RP0=0, select bank0
  3185  1B42  0181               	clrf	1	;volatile
  3186                           
  3187                           ;main.c: 182: INTCONbits.T0IE = 1;
  3188  1B43  168B               	bsf	11,5	;volatile
  3189  1B44  0008               	return
  3190  1B45                     __end_of_initTimer0:	
  3191                           
  3192                           	psect	text10
  3193  0011                     __ptext10:	
  3194 ;; *************** function _initSHT71 *****************
  3195 ;; Defined at:
  3196 ;;		line 10 in file "sht71.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		None
  3205 ;; Tracked objects:
  3206 ;;		On entry : 300/0
  3207 ;;		On exit  : 300/100
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3210 ;;      Params:         0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    1
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_main
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           
  3225                           ;psect for function _initSHT71
  3226  0011                     _initSHT71:	
  3227                           
  3228                           ;sht71.c: 11: TRISBbits.TRISB7 = 0;
  3229                           
  3230                           ;incstack = 0
  3231                           ; Regs used in _initSHT71: []
  3232  0011  1683               	bsf	3,5	;RP0=1, select bank1
  3233  0012  1386               	bcf	6,7	;volatile
  3234                           
  3235                           ;sht71.c: 12: TRISBbits.TRISB7 = 0;
  3236  0013  1386               	bcf	6,7	;volatile
  3237  0014  0008               	return
  3238  0015                     __end_of_initSHT71:	
  3239                           
  3240                           	psect	text11
  3241  0015                     __ptext11:	
  3242 ;; *************** function _getTempDS18B20 *****************
  3243 ;; Defined at:
  3244 ;;		line 67 in file "ds18b20.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  temperatura     3   52[BANK0 ] float 
  3249 ;;  temp            2   59[BANK0 ] unsigned int 
  3250 ;;  tempH           2   57[BANK0 ] unsigned short 
  3251 ;;  tempL           2   55[BANK0 ] unsigned short 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  3   46[BANK0 ] float 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 300/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       3       0       0       0
  3262 ;;      Locals:         0       9       0       0       0
  3263 ;;      Temps:          0       3       0       0       0
  3264 ;;      Totals:         0      15       0       0       0
  3265 ;;Total ram usage:       15 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    3
  3268 ;; This function calls:
  3269 ;;		___ftadd
  3270 ;;		___ftmul
  3271 ;;		___lwtoft
  3272 ;;		_readDS18B20
  3273 ;;		_resetDS18B20
  3274 ;;		_writeDS18B20
  3275 ;; This function is called by:
  3276 ;;		_main
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function _getTempDS18B20
  3282  0015                     _getTempDS18B20:	
  3283                           
  3284                           ;ds18b20.c: 68: unsigned temp;
  3285                           ;ds18b20.c: 69: unsigned short tempL, tempH;
  3286                           ;ds18b20.c: 70: float temperatura;
  3287                           ;ds18b20.c: 71: if(!resetDS18B20())
  3288                           
  3289                           ;incstack = 0
  3290                           ; Regs used in _getTempDS18B20: [wreg+status,2+status,0+pclath+cstack]
  3291  0015  20DE  120A  118A   	fcall	_resetDS18B20
  3292  0018  3A00               	xorlw	0
  3293  0019  1D03               	skipz
  3294  001A  287E               	goto	l5643
  3295                           
  3296                           ;ds18b20.c: 72: {
  3297                           ;ds18b20.c: 73: writeDS18B20(0xCC);
  3298  001B  30CC               	movlw	204
  3299  001C  2087  120A  118A   	fcall	_writeDS18B20
  3300                           
  3301                           ;ds18b20.c: 74: writeDS18B20(0x44);
  3302  001F  3044               	movlw	68
  3303  0020  2087  120A  118A   	fcall	_writeDS18B20
  3304                           
  3305                           ;ds18b20.c: 75: _delay((unsigned long)((750)*(8000000/4000.0)));
  3306  0023  3008               	movlw	8
  3307  0024  1283               	bcf	3,5	;RP0=0, select bank0
  3308  0025  1303               	bcf	3,6	;RP1=0, select bank0
  3309  0026  00D3               	movwf	??_getTempDS18B20+2
  3310  0027  309D               	movlw	157
  3311  0028  00D2               	movwf	??_getTempDS18B20+1
  3312  0029  300B               	movlw	11
  3313  002A  00D1               	movwf	??_getTempDS18B20
  3314  002B                     u6947:	
  3315  002B  0BD1               	decfsz	??_getTempDS18B20,f
  3316  002C  282B               	goto	u6947
  3317  002D  0BD2               	decfsz	??_getTempDS18B20+1,f
  3318  002E  282B               	goto	u6947
  3319  002F  0BD3               	decfsz	??_getTempDS18B20+2,f
  3320  0030  282B               	goto	u6947
  3321  0031  2832               	nop2
  3322                           
  3323                           ;ds18b20.c: 77: resetDS18B20();
  3324  0032  20DE  120A  118A   	fcall	_resetDS18B20
  3325                           
  3326                           ;ds18b20.c: 78: writeDS18B20(0xCC);
  3327  0035  30CC               	movlw	204
  3328  0036  2087  120A  118A   	fcall	_writeDS18B20
  3329                           
  3330                           ;ds18b20.c: 79: writeDS18B20(0xBE);
  3331  0039  30BE               	movlw	190
  3332  003A  2087  120A  118A   	fcall	_writeDS18B20
  3333                           
  3334                           ;ds18b20.c: 81: tempL = readDS18B20();
  3335  003D  20B7  120A  118A   	fcall	_readDS18B20
  3336  0040  1283               	bcf	3,5	;RP0=0, select bank0
  3337  0041  1303               	bcf	3,6	;RP1=0, select bank0
  3338  0042  00D7               	movwf	getTempDS18B20@tempL
  3339  0043  01D8               	clrf	getTempDS18B20@tempL+1
  3340                           
  3341                           ;ds18b20.c: 82: tempH = readDS18B20();
  3342  0044  20B7               	fcall	_readDS18B20
  3343  0045  1283               	bcf	3,5	;RP0=0, select bank0
  3344  0046  1303               	bcf	3,6	;RP1=0, select bank0
  3345  0047  00D9               	movwf	getTempDS18B20@tempH
  3346  0048  01DA               	clrf	getTempDS18B20@tempH+1
  3347                           
  3348                           ;ds18b20.c: 84: temp = ((unsigned int)tempH << 8) + (unsigned int)tempL;
  3349  0049  00DC               	movwf	getTempDS18B20@temp+1
  3350  004A  01DB               	clrf	getTempDS18B20@temp
  3351  004B  0857               	movf	getTempDS18B20@tempL,w
  3352  004C  07DB               	addwf	getTempDS18B20@temp,f
  3353  004D  1803               	skipnc
  3354  004E  0ADC               	incf	getTempDS18B20@temp+1,f
  3355  004F  0858               	movf	getTempDS18B20@tempL+1,w
  3356  0050  07DC               	addwf	getTempDS18B20@temp+1,f
  3357                           
  3358                           ;ds18b20.c: 85: temperatura = (float)temp * 0.0625 - 0.3;
  3359  0051  309A               	movlw	154
  3360  0052  00C2               	movwf	___ftadd@f1
  3361  0053  3099               	movlw	153
  3362  0054  00C3               	movwf	___ftadd@f1+1
  3363  0055  30BE               	movlw	190
  3364  0056  00C4               	movwf	___ftadd@f1+2
  3365  0057  3080               	movlw	128
  3366  0058  01A8               	clrf	___ftmul@f1
  3367  0059  00A9               	movwf	___ftmul@f1+1
  3368  005A  303D               	movlw	61
  3369  005B  00AA               	movwf	___ftmul@f1+2
  3370  005C  085C               	movf	getTempDS18B20@temp+1,w
  3371  005D  00A4               	movwf	___lwtoft@c+1
  3372  005E  085B               	movf	getTempDS18B20@temp,w
  3373  005F  00A3               	movwf	___lwtoft@c
  3374  0060  120A  118A  2371  120A  118A  	fcall	___lwtoft
  3375  0065  0823               	movf	?___lwtoft,w
  3376  0066  00AB               	movwf	___ftmul@f2
  3377  0067  0824               	movf	?___lwtoft+1,w
  3378  0068  00AC               	movwf	___ftmul@f2+1
  3379  0069  0825               	movf	?___lwtoft+2,w
  3380  006A  00AD               	movwf	___ftmul@f2+2
  3381  006B  160A  118A  24AF  120A  118A  	fcall	___ftmul
  3382  0070  160A  118A  27AE  120A  118A  	fcall	PL62	;call to abstracted procedure
  3383  0075  160A  118A  263A   	fcall	___ftadd
  3384  0078  0842               	movf	?___ftadd,w
  3385  0079  00D4               	movwf	getTempDS18B20@temperatura
  3386  007A  0843               	movf	?___ftadd+1,w
  3387  007B  00D5               	movwf	getTempDS18B20@temperatura+1
  3388  007C  0844               	movf	?___ftadd+2,w
  3389  007D  00D6               	movwf	getTempDS18B20@temperatura+2
  3390  007E                     l5643:	
  3391                           
  3392                           ;ds18b20.c: 86: }
  3393                           ;ds18b20.c: 87: return temperatura;
  3394  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3395  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3396  0080  0854               	movf	getTempDS18B20@temperatura,w
  3397  0081  00CE               	movwf	?_getTempDS18B20
  3398  0082  0855               	movf	getTempDS18B20@temperatura+1,w
  3399  0083  00CF               	movwf	?_getTempDS18B20+1
  3400  0084  0856               	movf	getTempDS18B20@temperatura+2,w
  3401  0085  00D0               	movwf	?_getTempDS18B20+2
  3402  0086  0008               	return
  3403  0087                     __end_of_getTempDS18B20:	
  3404  0087                     __ptext12:	
  3405 ;; *************** function _writeDS18B20 *****************
  3406 ;; Defined at:
  3407 ;;		line 23 in file "ds18b20.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  Cmd             1    wreg     unsigned char 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  Cmd             1    3[COMMON] unsigned char 
  3412 ;;  i               1    4[COMMON] unsigned char 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;		None               void
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3422 ;;      Params:         0       0       0       0       0
  3423 ;;      Locals:         2       0       0       0       0
  3424 ;;      Temps:          1       0       0       0       0
  3425 ;;      Totals:         3       0       0       0       0
  3426 ;;Total ram usage:        3 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_getTempDS18B20
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           
  3437                           ;psect for function _writeDS18B20
  3438  0087                     _writeDS18B20:	
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _writeDS18B20: [wreg+status,2+status,0]
  3442                           ;writeDS18B20@Cmd stored from wreg
  3443  0087  00F4               	movwf	writeDS18B20@Cmd
  3444                           
  3445                           ;ds18b20.c: 24: char i;
  3446                           ;ds18b20.c: 25: TRISCbits.TRISC5 = 1;
  3447  0088  1683               	bsf	3,5	;RP0=1, select bank1
  3448  0089  1303               	bcf	3,6	;RP1=0, select bank1
  3449  008A  1687               	bsf	7,5	;volatile
  3450                           
  3451                           ;ds18b20.c: 26: for(i = 0; i < 8; i++)
  3452  008B  01F5               	clrf	writeDS18B20@i
  3453  008C                     l4127:	
  3454                           
  3455                           ;ds18b20.c: 27: {
  3456                           ;ds18b20.c: 28: if((Cmd & (1<<i))!= 0)
  3457  008C  3001               	movlw	1
  3458  008D  00F3               	movwf	??_writeDS18B20
  3459  008E  0A75               	incf	writeDS18B20@i,w
  3460  008F  2892               	goto	u4544
  3461  0090                     u4545:	
  3462  0090  1003               	clrc
  3463  0091  0DF3               	rlf	??_writeDS18B20,f
  3464  0092                     u4544:	
  3465  0092  3EFF               	addlw	-1
  3466  0093  1D03               	skipz
  3467  0094  2890               	goto	u4545
  3468  0095  0873               	movf	??_writeDS18B20,w
  3469  0096  0574               	andwf	writeDS18B20@Cmd,w
  3470  0097  1903               	btfsc	3,2
  3471  0098  28A6               	goto	l16
  3472                           
  3473                           ;ds18b20.c: 29: {
  3474                           ;ds18b20.c: 30: TRISCbits.TRISC5 = 0;
  3475                           
  3476                           ;ds18b20.c: 31: RC5 = 0;
  3477  0099  2101  120A  118A   	fcall	PL84	;call to abstracted procedure
  3478                           
  3479                           ;ds18b20.c: 32: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3480  009C  289D               	nop2	;2 cycle nop
  3481                           
  3482                           ;ds18b20.c: 33: TRISCbits.TRISC5 = 1;
  3483  009D  1683               	bsf	3,5	;RP0=1, select bank1
  3484  009E  1303               	bcf	3,6	;RP1=0, select bank1
  3485  009F  1687               	bsf	7,5	;volatile
  3486                           
  3487                           ;ds18b20.c: 34: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3488  00A0  3027               	movlw	39
  3489  00A1  00F3               	movwf	??_writeDS18B20
  3490  00A2                     u6957:	
  3491  00A2  0BF3               	decfsz	??_writeDS18B20,f
  3492  00A3  28A2               	goto	u6957
  3493  00A4  28A5               	nop2	;nop
  3494                           
  3495                           ;ds18b20.c: 35: }
  3496  00A5  28B1               	goto	l4137
  3497  00A6                     l16:	
  3498                           
  3499                           ;ds18b20.c: 36: else
  3500                           ;ds18b20.c: 37: {
  3501                           ;ds18b20.c: 39: TRISCbits.TRISC5 = 0;
  3502                           
  3503                           ;ds18b20.c: 40: RC5 = 0;
  3504  00A6  2101  120A  118A   	fcall	PL84	;call to abstracted procedure
  3505                           
  3506                           ;ds18b20.c: 41: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3507  00A9  3027               	movlw	39
  3508  00AA  00F3               	movwf	??_writeDS18B20
  3509  00AB                     u6967:	
  3510  00AB  0BF3               	decfsz	??_writeDS18B20,f
  3511  00AC  28AB               	goto	u6967
  3512  00AD  28AE               	nop2	;nop
  3513                           
  3514                           ;ds18b20.c: 42: TRISCbits.TRISC5 = 1;
  3515  00AE  1683               	bsf	3,5	;RP0=1, select bank1
  3516  00AF  1303               	bcf	3,6	;RP1=0, select bank1
  3517  00B0  1687               	bsf	7,5	;volatile
  3518  00B1                     l4137:	
  3519  00B1  3008               	movlw	8
  3520  00B2  0AF5               	incf	writeDS18B20@i,f
  3521  00B3  0275               	subwf	writeDS18B20@i,w
  3522  00B4  1803               	btfsc	3,0
  3523  00B5  0008               	return
  3524  00B6  288C               	goto	l4127
  3525  00B7                     __end_of_writeDS18B20:	
  3526  00B7                     __ptext14:	
  3527 ;; *************** function _readDS18B20 *****************
  3528 ;; Defined at:
  3529 ;;		line 48 in file "ds18b20.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  i               1    4[COMMON] unsigned char 
  3534 ;;  result          1    3[COMMON] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      unsigned char 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3544 ;;      Params:         0       0       0       0       0
  3545 ;;      Locals:         2       0       0       0       0
  3546 ;;      Temps:          1       0       0       0       0
  3547 ;;      Totals:         3       0       0       0       0
  3548 ;;Total ram usage:        3 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    1
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_getTempDS18B20
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _readDS18B20
  3560  00B7                     _readDS18B20:	
  3561                           
  3562                           ;ds18b20.c: 49: char i,result = 0;
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _readDS18B20: [wreg+status,2+status,0]
  3566  00B7  01F4               	clrf	readDS18B20@result
  3567                           
  3568                           ;ds18b20.c: 50: TRISCbits.TRISC5 = 1;
  3569  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  3570  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  3571  00BA  1687               	bsf	7,5	;volatile
  3572                           
  3573                           ;ds18b20.c: 52: for(i = 0; i < 8; i++)
  3574  00BB  01F5               	clrf	readDS18B20@i
  3575  00BC                     l21:	
  3576                           
  3577                           ;ds18b20.c: 53: {
  3578                           ;ds18b20.c: 54: TRISCbits.TRISC5 = 0;
  3579                           
  3580                           ;ds18b20.c: 55: RC5 = 0;
  3581  00BC  2101  120A  118A   	fcall	PL84	;call to abstracted procedure
  3582                           
  3583                           ;ds18b20.c: 56: _delay((unsigned long)((2)*(8000000/4000000.0)));
  3584  00BF  28C0               	nop2	;2 cycle nop
  3585  00C0  28C1               	nop2	;2 cycle nop
  3586                           
  3587                           ;ds18b20.c: 57: TRISCbits.TRISC5 = 1;
  3588  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  3589  00C2  1303               	bcf	3,6	;RP1=0, select bank1
  3590  00C3  1687               	bsf	7,5	;volatile
  3591                           
  3592                           ;ds18b20.c: 59: if(RC5 != 0) result |= 1<<i;
  3593  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  3594  00C5  1E87               	btfss	7,5	;volatile
  3595  00C6  28D2               	goto	l4151
  3596  00C7  3001               	movlw	1
  3597  00C8  00F3               	movwf	??_readDS18B20
  3598  00C9  0A75               	incf	readDS18B20@i,w
  3599  00CA  28CD               	goto	u4584
  3600  00CB                     u4585:	
  3601  00CB  1003               	clrc
  3602  00CC  0DF3               	rlf	??_readDS18B20,f
  3603  00CD                     u4584:	
  3604  00CD  3EFF               	addlw	-1
  3605  00CE  1D03               	skipz
  3606  00CF  28CB               	goto	u4585
  3607  00D0  0873               	movf	??_readDS18B20,w
  3608  00D1  04F4               	iorwf	readDS18B20@result,f
  3609  00D2                     l4151:	
  3610                           
  3611                           ;ds18b20.c: 61: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3612  00D2  3027               	movlw	39
  3613  00D3  00F3               	movwf	??_readDS18B20
  3614  00D4                     u7017:	
  3615  00D4  0BF3               	decfsz	??_readDS18B20,f
  3616  00D5  28D4               	goto	u7017
  3617  00D6  28D7               	nop2	;nop
  3618  00D7  3008               	movlw	8
  3619  00D8  0AF5               	incf	readDS18B20@i,f
  3620  00D9  0275               	subwf	readDS18B20@i,w
  3621  00DA  1C03               	skipc
  3622  00DB  28BC               	goto	l21
  3623                           
  3624                           ;ds18b20.c: 62: }
  3625                           ;ds18b20.c: 63: return result;
  3626  00DC  0874               	movf	readDS18B20@result,w
  3627  00DD  0008               	return
  3628  00DE                     __end_of_readDS18B20:	
  3629  00DE                     __ptext13:	
  3630 ;; *************** function _resetDS18B20 *****************
  3631 ;; Defined at:
  3632 ;;		line 3 in file "ds18b20.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      unsigned char 
  3639 ;; Registers used:
  3640 ;;		wreg
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/100
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3646 ;;      Params:         0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0
  3648 ;;      Temps:          1       0       0       0       0
  3649 ;;      Totals:         1       0       0       0       0
  3650 ;;Total ram usage:        1 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    1
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_getTempDS18B20
  3657 ;;		_main
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _resetDS18B20
  3663  00DE                     _resetDS18B20:	
  3664                           
  3665                           ;ds18b20.c: 4: TRISCbits.TRISC5 = 0;
  3666                           
  3667                           ;incstack = 0
  3668                           ; Regs used in _resetDS18B20: [wreg]
  3669                           
  3670                           ;ds18b20.c: 5: RC5 = 0;
  3671  00DE  2101  120A  118A   	fcall	PL84	;call to abstracted procedure
  3672                           
  3673                           ;ds18b20.c: 6: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3674  00E1  3089               	movlw	137
  3675  00E2  00F3               	movwf	??_resetDS18B20
  3676  00E3                     u6977:	
  3677  00E3  28E4               	nop2
  3678  00E4  28E5               	nop2
  3679  00E5  0BF3               	decfsz	??_resetDS18B20,f
  3680  00E6  28E3               	goto	u6977
  3681                           
  3682                           ;ds18b20.c: 7: TRISCbits.TRISC5 = 1;
  3683  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  3684  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  3685  00E9  1687               	bsf	7,5	;volatile
  3686                           
  3687                           ;ds18b20.c: 8: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3688  00EA  3027               	movlw	39
  3689  00EB  00F3               	movwf	??_resetDS18B20
  3690  00EC                     u6987:	
  3691  00EC  0BF3               	decfsz	??_resetDS18B20,f
  3692  00ED  28EC               	goto	u6987
  3693  00EE  28EF               	nop2	;nop
  3694                           
  3695                           ;ds18b20.c: 10: if (RC5 == 0)
  3696  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  3697  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  3698  00F1  1A87               	btfsc	7,5	;volatile
  3699  00F2  28FA               	goto	l4115
  3700                           
  3701                           ;ds18b20.c: 11: {
  3702                           ;ds18b20.c: 12: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3703  00F3  3089               	movlw	137
  3704  00F4  00F3               	movwf	??_resetDS18B20
  3705  00F5                     u6997:	
  3706  00F5  28F6               	nop2
  3707  00F6  28F7               	nop2
  3708  00F7  0BF3               	decfsz	??_resetDS18B20,f
  3709  00F8  28F5               	goto	u6997
  3710                           
  3711                           ;ds18b20.c: 13: return 0;
  3712  00F9  3400               	retlw	0
  3713  00FA                     l4115:	
  3714                           
  3715                           ;ds18b20.c: 15: else
  3716                           ;ds18b20.c: 16: {
  3717                           ;ds18b20.c: 17: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3718  00FA  3089               	movlw	137
  3719  00FB  00F3               	movwf	??_resetDS18B20
  3720  00FC                     u7007:	
  3721  00FC  28FD               	nop2
  3722  00FD  28FE               	nop2
  3723  00FE  0BF3               	decfsz	??_resetDS18B20,f
  3724  00FF  28FC               	goto	u7007
  3725                           
  3726                           ;ds18b20.c: 18: return 1;
  3727  0100  3401               	retlw	1
  3728  0101                     __end_of_resetDS18B20:	
  3729  0101                     PL84:	
  3730  0101  1683               	bsf	3,5	;RP0=1, select bank1
  3731  0102  1303               	bcf	3,6	;RP1=0, select bank1
  3732  0103  1287               	bcf	7,5	;volatile
  3733  0104  1283               	bcf	3,5	;RP0=0, select bank0
  3734  0105  1287               	bcf	7,5	;volatile
  3735  0106  0008               	return
  3736  0107                     __end_ofPL84:	
  3737                           
  3738                           	psect	text24
  3739  1C13                     __ptext24:	
  3740 ;; *************** function _displaySoilTemp *****************
  3741 ;; Defined at:
  3742 ;;		line 146 in file "main.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  t2              3   62[BANK0 ] float 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;		None               void
  3749 ;; Registers used:
  3750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 300/0
  3753 ;;		On exit  : 300/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3756 ;;      Params:         0       3       0       0       0
  3757 ;;      Locals:         0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0
  3759 ;;      Totals:         0       3       0       0       0
  3760 ;;Total ram usage:        3 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    5
  3763 ;; This function calls:
  3764 ;;		_LcdSetCursor
  3765 ;;		_LcdWriteString
  3766 ;;		___eetoi
  3767 ;;		_sprintf
  3768 ;; This function is called by:
  3769 ;;		_main
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function _displaySoilTemp
  3775  1C13                     _displaySoilTemp:	
  3776                           
  3777                           ;main.c: 148: sprintf(temperature, "%d", test);
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in _displaySoilTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3781  1C13  304B               	movlw	low (STR_11| (0+32768))
  3782  1C14  00D4               	movwf	sprintf@f
  3783  1C15  3099               	movlw	high (STR_11| (0+32768))
  3784  1C16  00D5               	movwf	sprintf@f+1
  3785  1C17  3000               	movlw	(low _test)& (0+255)
  3786  1C18  2453               	fcall	___eetoi
  3787  1C19  0878               	movf	?___eetoi+1,w
  3788  1C1A  00D7               	movwf	?_sprintf+3
  3789  1C1B  0877               	movf	?___eetoi,w
  3790  1C1C  00D6               	movwf	?_sprintf+2
  3791  1C1D  30BF               	movlw	(low (_temperature| 0))& (0+255)
  3792  1C1E  120A  158A  2134  160A  158A  	fcall	_sprintf
  3793  1C23  3001               	movlw	1
  3794                           
  3795                           ;main.c: 149: LcdSetCursor(1,1);
  3796  1C24  01F7               	clrf	LcdSetCursor@b
  3797  1C25  0AF7               	incf	LcdSetCursor@b,f
  3798  1C26  120A  118A  274D  160A  158A  	fcall	_LcdSetCursor
  3799                           
  3800                           ;main.c: 150: LcdWriteString("Soil temperature");
  3801  1C2B  30FF               	movlw	low (STR_12| (0+32768))
  3802  1C2C  00F8               	movwf	LcdWriteString@a
  3803  1C2D  3098               	movlw	high (STR_12| (0+32768))
  3804  1C2E  00F9               	movwf	LcdWriteString@a+1
  3805  1C2F  120A  118A  25EE  160A  158A  	fcall	_LcdWriteString
  3806  1C34  3002               	movlw	2
  3807                           
  3808                           ;main.c: 151: LcdSetCursor(2,1);
  3809  1C35  01F7               	clrf	LcdSetCursor@b
  3810  1C36  0AF7               	incf	LcdSetCursor@b,f
  3811  1C37  120A  118A  274D  160A  158A  	fcall	_LcdSetCursor
  3812                           
  3813                           ;main.c: 152: LcdWriteString(temperature);
  3814  1C3C  30BF               	movlw	(low (_temperature| 0))& (0+255)
  3815  1C3D  00F8               	movwf	LcdWriteString@a
  3816  1C3E  01F9               	clrf	LcdWriteString@a+1
  3817  1C3F  120A  118A  25EE  160A  158A  	fcall	_LcdWriteString
  3818                           
  3819                           ;main.c: 153: LcdSetCursor(2,6);
  3820  1C44  3006               	movlw	6
  3821  1C45  00F7               	movwf	LcdSetCursor@b
  3822  1C46  3002               	movlw	2
  3823  1C47  120A  118A  274D  160A  158A  	fcall	_LcdSetCursor
  3824                           
  3825                           ;main.c: 154: LcdWriteString(" deg        ");
  3826  1C4C  302B               	movlw	low (STR_4| (0+32768))
  3827  1C4D  00F8               	movwf	LcdWriteString@a
  3828  1C4E  3099               	movlw	high (STR_4| (0+32768))
  3829  1C4F  00F9               	movwf	LcdWriteString@a+1
  3830  1C50  120A  118A  2DEE   	ljmp	l5049
  3831  1C53                     __end_of_displaySoilTemp:	
  3832  1C53                     __ptext25:	
  3833 ;; *************** function ___eetoi *****************
  3834 ;; Defined at:
  3835 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  addr            1    wreg     PTR eeprom void 
  3838 ;;		 -> test(2), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;  addr            1    0[BANK0 ] PTR eeprom void 
  3841 ;;		 -> test(2), 
  3842 ;;  data            2    1[BANK0 ] unsigned int 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  2    6[COMMON] unsigned int 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 200/100
  3849 ;;		On exit  : 300/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3852 ;;      Params:         3       0       0       0       0
  3853 ;;      Locals:         0       3       0       0       0
  3854 ;;      Temps:          0       0       0       0       0
  3855 ;;      Totals:         3       3       0       0       0
  3856 ;;Total ram usage:        6 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    2
  3859 ;; This function calls:
  3860 ;;		_eecpymem
  3861 ;; This function is called by:
  3862 ;;		_displaySoilTemp
  3863 ;;		_main
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           
  3868                           ;psect for function ___eetoi
  3869  1C53                     ___eetoi:	
  3870                           
  3871                           ;incstack = 0
  3872                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3873                           ;___eetoi@addr stored from wreg
  3874  1C53  1283               	bcf	3,5	;RP0=0, select bank0
  3875  1C54  00A0               	movwf	___eetoi@addr
  3876  1C55  00F3               	movwf	eecpymem@from
  3877  1C56  3002               	movlw	2
  3878  1C57  00F4               	movwf	eecpymem@size
  3879  1C58  3021               	movlw	(low (___eetoi@data| 0))& (0+255)
  3880  1C59  2460               	fcall	_eecpymem
  3881  1C5A  1303               	bcf	3,6	;RP1=0, select bank0
  3882  1C5B  0822               	movf	___eetoi@data+1,w
  3883  1C5C  00F8               	movwf	?___eetoi+1
  3884  1C5D  0821               	movf	___eetoi@data,w
  3885  1C5E  00F7               	movwf	?___eetoi
  3886  1C5F  0008               	return
  3887  1C60                     __end_of___eetoi:	
  3888  1C60                     __ptext26:	
  3889 ;; *************** function _eecpymem *****************
  3890 ;; Defined at:
  3891 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  to              1    wreg     PTR volatile unsigned ch
  3894 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  3895 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  3896 ;;  from            1    2[COMMON] PTR eeprom unsigned char
  3897 ;;		 -> test(2), 
  3898 ;;  size            1    3[COMMON] unsigned char 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  to              1    5[COMMON] PTR volatile unsigned ch
  3901 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  3902 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  3903 ;;  cp              1    4[COMMON] PTR volatile unsigned ch
  3904 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  3905 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;		None               void
  3908 ;; Registers used:
  3909 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 300/0
  3912 ;;		On exit  : 300/200
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3915 ;;      Params:         2       0       0       0       0
  3916 ;;      Locals:         2       0       0       0       0
  3917 ;;      Temps:          0       0       0       0       0
  3918 ;;      Totals:         4       0       0       0       0
  3919 ;;Total ram usage:        4 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    1
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		___eetoi
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _eecpymem
  3931  1C60                     _eecpymem:	
  3932                           
  3933                           ;incstack = 0
  3934                           ; Regs used in _eecpymem: [wreg-fsr0h+status,2+status,0]
  3935                           ;eecpymem@to stored from wreg
  3936  1C60  00F6               	movwf	eecpymem@to
  3937  1C61  0876               	movf	eecpymem@to,w
  3938  1C62  00F5               	movwf	eecpymem@cp
  3939  1C63                     l611:	
  3940  1C63  1683               	bsf	3,5	;RP0=1, select bank3
  3941  1C64  1703               	bsf	3,6	;RP1=1, select bank3
  3942  1C65  188C               	btfsc	12,1	;volsfr
  3943  1C66  2C63               	goto	l611
  3944  1C67  0873               	movf	eecpymem@from,w
  3945  1C68  1283               	bcf	3,5	;RP0=0, select bank2
  3946  1C69  008D               	movwf	13	;volatile
  3947  1C6A                     l4099:	
  3948  1C6A  03F4               	decf	eecpymem@size,f
  3949  1C6B  0F74               	incfsz	eecpymem@size,w
  3950  1C6C  2C6E               	goto	l616
  3951  1C6D  0008               	return
  3952  1C6E                     l616:	
  3953  1C6E  1683               	bsf	3,5	;RP0=1, select bank3
  3954  1C6F  188C               	btfsc	12,1	;volsfr
  3955  1C70  2C6E               	goto	l616
  3956  1C71  138C               	bcf	12,7	;volsfr
  3957  1C72  140C               	bsf	12,0	;volsfr
  3958  1C73  0875               	movf	eecpymem@cp,w
  3959  1C74  0084               	movwf	4
  3960  1C75  1283               	bcf	3,5	;RP0=0, select bank2
  3961  1C76  080C               	movf	12,w	;volatile
  3962  1C77  1383               	bcf	3,7	;select IRP bank0
  3963  1C78  0080               	movwf	0
  3964  1C79  0AF5               	incf	eecpymem@cp,f
  3965  1C7A  0A8D               	incf	13,f	;volatile
  3966  1C7B  2C6A               	goto	l4099
  3967  1C7C                     __end_of_eecpymem:	
  3968                           
  3969                           	psect	text30
  3970  1006                     __ptext30:	
  3971 ;; *************** function _displayAirTemp *****************
  3972 ;; Defined at:
  3973 ;;		line 110 in file "main.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  temp2           3   62[BANK0 ] float 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;		None
  3978 ;; Return value:  Size  Location     Type
  3979 ;;		None               void
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 300/0
  3984 ;;		On exit  : 300/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3987 ;;      Params:         0       3       0       0       0
  3988 ;;      Locals:         0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0
  3990 ;;      Totals:         0       3       0       0       0
  3991 ;;Total ram usage:        3 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    5
  3994 ;; This function calls:
  3995 ;;		_LcdSetCursor
  3996 ;;		_LcdWriteString
  3997 ;;		_sprintf
  3998 ;; This function is called by:
  3999 ;;		_main
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           
  4004                           ;psect for function _displayAirTemp
  4005  1006                     _displayAirTemp:	
  4006                           
  4007                           ;main.c: 111: sprintf(temperature, " %.1f", temp2);
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in _displayAirTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4011  1006  3045               	movlw	low (STR_2| (0+32768))
  4012  1007  00D4               	movwf	sprintf@f
  4013  1008  3099               	movlw	high (STR_2| (0+32768))
  4014  1009  00D5               	movwf	sprintf@f+1
  4015  100A  085E               	movf	displayAirTemp@temp2,w
  4016  100B  00D6               	movwf	?_sprintf+2
  4017  100C  085F               	movf	displayAirTemp@temp2+1,w
  4018  100D  00D7               	movwf	?_sprintf+3
  4019  100E  0860               	movf	displayAirTemp@temp2+2,w
  4020  100F  00D8               	movwf	?_sprintf+4
  4021  1010  30BF               	movlw	(low (_temperature| 0))& (0+255)
  4022  1011  120A  158A  2134  160A  118A  	fcall	_sprintf
  4023  1016  3001               	movlw	1
  4024                           
  4025                           ;main.c: 112: LcdSetCursor(1,1);
  4026  1017  01F7               	clrf	LcdSetCursor@b
  4027  1018  0AF7               	incf	LcdSetCursor@b,f
  4028  1019  120A  118A  274D  160A  118A  	fcall	_LcdSetCursor
  4029                           
  4030                           ;main.c: 113: LcdWriteString("Air temperature ");
  4031  101E  30EE               	movlw	low (STR_3| (0+32768))
  4032  101F  00F8               	movwf	LcdWriteString@a
  4033  1020  3098               	movlw	high (STR_3| (0+32768))
  4034  1021  00F9               	movwf	LcdWriteString@a+1
  4035  1022  120A  118A  25EE  160A  118A  	fcall	_LcdWriteString
  4036  1027  3002               	movlw	2
  4037                           
  4038                           ;main.c: 114: LcdSetCursor(2,1);
  4039  1028  01F7               	clrf	LcdSetCursor@b
  4040  1029  0AF7               	incf	LcdSetCursor@b,f
  4041  102A  120A  118A  274D  160A  118A  	fcall	_LcdSetCursor
  4042                           
  4043                           ;main.c: 115: LcdWriteString(temperature);
  4044  102F  30BF               	movlw	(low (_temperature| 0))& (0+255)
  4045  1030  00F8               	movwf	LcdWriteString@a
  4046  1031  01F9               	clrf	LcdWriteString@a+1
  4047  1032  120A  118A  25EE  160A  118A  	fcall	_LcdWriteString
  4048                           
  4049                           ;main.c: 116: LcdSetCursor(2,6);
  4050  1037  3006               	movlw	6
  4051  1038  00F7               	movwf	LcdSetCursor@b
  4052  1039  3002               	movlw	2
  4053  103A  120A  118A  274D   	fcall	_LcdSetCursor
  4054                           
  4055                           ;main.c: 117: LcdWriteString(" deg        ");
  4056  103D  302B               	movlw	low (STR_4| (0+32768))
  4057  103E  00F8               	movwf	LcdWriteString@a
  4058  103F  3099               	movlw	high (STR_4| (0+32768))
  4059  1040  00F9               	movwf	LcdWriteString@a+1
  4060  1041  120A  118A  2DEE   	ljmp	l5049
  4061  1044                     __end_of_displayAirTemp:	
  4062                           
  4063                           	psect	text31
  4064  0107                     __ptext31:	
  4065 ;; *************** function _displayAirMoist *****************
  4066 ;; Defined at:
  4067 ;;		line 120 in file "main.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  humi2           3   62[BANK0 ] float 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;		None               void
  4074 ;; Registers used:
  4075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 300/0
  4078 ;;		On exit  : 300/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4081 ;;      Params:         0       3       0       0       0
  4082 ;;      Locals:         0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0
  4084 ;;      Totals:         0       3       0       0       0
  4085 ;;Total ram usage:        3 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    5
  4088 ;; This function calls:
  4089 ;;		_LcdSetCursor
  4090 ;;		_LcdWriteString
  4091 ;;		_sprintf
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _displayAirMoist
  4099  0107                     _displayAirMoist:	
  4100                           
  4101                           ;main.c: 121: sprintf(humidity, " %.1f", humi2);
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _displayAirMoist: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4105  0107  3045               	movlw	low (STR_2| (0+32768))
  4106  0108  00D4               	movwf	sprintf@f
  4107  0109  3099               	movlw	high (STR_2| (0+32768))
  4108  010A  00D5               	movwf	sprintf@f+1
  4109  010B  085E               	movf	displayAirMoist@humi2,w
  4110  010C  00D6               	movwf	?_sprintf+2
  4111  010D  085F               	movf	displayAirMoist@humi2+1,w
  4112  010E  00D7               	movwf	?_sprintf+3
  4113  010F  0860               	movf	displayAirMoist@humi2+2,w
  4114  0110  00D8               	movwf	?_sprintf+4
  4115  0111  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4116  0112  120A  158A  2134  120A  118A  	fcall	_sprintf
  4117  0117  3001               	movlw	1
  4118                           
  4119                           ;main.c: 122: LcdSetCursor(1,1);
  4120  0118  01F7               	clrf	LcdSetCursor@b
  4121  0119  0AF7               	incf	LcdSetCursor@b,f
  4122  011A  274D  120A  118A   	fcall	_LcdSetCursor
  4123                           
  4124                           ;main.c: 123: LcdWriteString("Air moist       ");
  4125  011D  3088               	movlw	low (STR_6| (0+32768))
  4126  011E  00F8               	movwf	LcdWriteString@a
  4127  011F  3098               	movlw	high (STR_6| (0+32768))
  4128  0120  00F9               	movwf	LcdWriteString@a+1
  4129  0121  25EE  120A  118A   	fcall	_LcdWriteString
  4130  0124  3002               	movlw	2
  4131                           
  4132                           ;main.c: 124: LcdSetCursor(2,1);
  4133  0125  01F7               	clrf	LcdSetCursor@b
  4134  0126  0AF7               	incf	LcdSetCursor@b,f
  4135  0127  274D  120A  118A   	fcall	_LcdSetCursor
  4136                           
  4137                           ;main.c: 125: LcdWriteString(humidity);
  4138  012A  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4139  012B  00F8               	movwf	LcdWriteString@a
  4140  012C  01F9               	clrf	LcdWriteString@a+1
  4141  012D  25EE  120A  118A   	fcall	_LcdWriteString
  4142                           
  4143                           ;main.c: 126: LcdSetCursor(2,6);
  4144  0130  3006               	movlw	6
  4145  0131  00F7               	movwf	LcdSetCursor@b
  4146  0132  3002               	movlw	2
  4147  0133  274D  120A  118A   	fcall	_LcdSetCursor
  4148                           
  4149                           ;main.c: 127: LcdWriteString(" %          ");
  4150  0136  301E               	movlw	low (STR_7| (0+32768))
  4151  0137  00F8               	movwf	LcdWriteString@a
  4152  0138  3099               	movlw	high (STR_7| (0+32768))
  4153  0139  00F9               	movwf	LcdWriteString@a+1
  4154  013A  2DEE               	ljmp	l5049
  4155  013B                     __end_of_displayAirMoist:	
  4156  013B                     __ptext4:	
  4157 ;; *************** function _menuHumi *****************
  4158 ;; Defined at:
  4159 ;;		line 315 in file "main.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 300/100
  4170 ;;		On exit  : 300/100
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4173 ;;      Params:         0       0       0       0       0
  4174 ;;      Locals:         0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0
  4176 ;;      Totals:         0       0       0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    6
  4180 ;; This function calls:
  4181 ;;		_LcdSetCursor
  4182 ;;		_LcdWriteString
  4183 ;;		___ftadd
  4184 ;;		___ftge
  4185 ;;		___ftsub
  4186 ;;		_manage_buttons
  4187 ;;		_menuCO2
  4188 ;;		_sprintf
  4189 ;; This function is called by:
  4190 ;;		_menu
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _menuHumi
  4196  013B                     _menuHumi:	
  4197                           
  4198                           ;main.c: 316: sprintf(humidity, " %.1f", zeljena_vlaznost);
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _menuHumi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4202  013B  3045               	movlw	low (STR_2| (0+32768))
  4203  013C  1283               	bcf	3,5	;RP0=0, select bank0
  4204  013D  00D4               	movwf	sprintf@f
  4205  013E  3099               	movlw	high (STR_2| (0+32768))
  4206  013F  00D5               	movwf	sprintf@f+1
  4207  0140  1683               	bsf	3,5	;RP0=1, select bank1
  4208  0141  082A               	movf	_zeljena_vlaznost^(0+128),w
  4209  0142  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0143  00D6               	movwf	?_sprintf+2
  4211  0144  1683               	bsf	3,5	;RP0=1, select bank1
  4212  0145  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4213  0146  1283               	bcf	3,5	;RP0=0, select bank0
  4214  0147  00D7               	movwf	?_sprintf+3
  4215  0148  1683               	bsf	3,5	;RP0=1, select bank1
  4216  0149  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4217  014A  1283               	bcf	3,5	;RP0=0, select bank0
  4218  014B  00D8               	movwf	?_sprintf+4
  4219  014C  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4220  014D  120A  158A  2134  120A  118A  	fcall	_sprintf
  4221  0152  3001               	movlw	1
  4222                           
  4223                           ;main.c: 317: LcdSetCursor(1,1);
  4224  0153  01F7               	clrf	LcdSetCursor@b
  4225  0154  0AF7               	incf	LcdSetCursor@b,f
  4226  0155  274D  120A  118A   	fcall	_LcdSetCursor
  4227                           
  4228                           ;main.c: 318: LcdWriteString("Set air moist   ");
  4229  0158  30CC               	movlw	low (STR_18| (0+32768))
  4230  0159  00F8               	movwf	LcdWriteString@a
  4231  015A  3098               	movlw	high (STR_18| (0+32768))
  4232  015B  00F9               	movwf	LcdWriteString@a+1
  4233  015C  25EE  120A  118A   	fcall	_LcdWriteString
  4234  015F  3002               	movlw	2
  4235                           
  4236                           ;main.c: 319: LcdSetCursor(2,1);
  4237  0160  01F7               	clrf	LcdSetCursor@b
  4238  0161  0AF7               	incf	LcdSetCursor@b,f
  4239  0162  274D  120A  118A   	fcall	_LcdSetCursor
  4240                           
  4241                           ;main.c: 320: LcdWriteString(humidity);
  4242  0165  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4243  0166  00F8               	movwf	LcdWriteString@a
  4244  0167  01F9               	clrf	LcdWriteString@a+1
  4245  0168  25EE  120A  118A   	fcall	_LcdWriteString
  4246                           
  4247                           ;main.c: 321: LcdSetCursor(2,6);
  4248  016B  3006               	movlw	6
  4249  016C  00F7               	movwf	LcdSetCursor@b
  4250  016D  3002               	movlw	2
  4251  016E  274D  120A  118A   	fcall	_LcdSetCursor
  4252                           
  4253                           ;main.c: 322: LcdWriteString("        ");
  4254  0171  3022               	movlw	low ((STR_7+4)| (0+32768))
  4255  0172  00F8               	movwf	LcdWriteString@a
  4256  0173  3099               	movlw	high ((STR_7+4)| (0+32768))
  4257  0174  00F9               	movwf	LcdWriteString@a+1
  4258  0175  25EE  120A  118A   	fcall	_LcdWriteString
  4259  0178                     l5619:	
  4260                           ;main.c: 324: while(!ok_flag_co2)
  4261                           
  4262  0178  1683               	bsf	3,5	;RP0=1, select bank1
  4263  0179  0836               	movf	_ok_flag_co2^(0+128),w
  4264  017A  1D03               	btfss	3,2
  4265  017B  0008               	return
  4266                           
  4267                           ;main.c: 325: {
  4268                           ;main.c: 326: manage_buttons();
  4269  017C  225D  120A  118A   	fcall	_manage_buttons
  4270                           
  4271                           ;main.c: 328: if(plus_flag)
  4272  017F  1683               	bsf	3,5	;RP0=1, select bank1
  4273  0180  1303               	bcf	3,6	;RP1=0, select bank1
  4274  0181  0838               	movf	_plus_flag^(0+128),w
  4275  0182  1903               	btfsc	3,2
  4276  0183  29EA               	goto	l5597
  4277                           
  4278                           ;main.c: 329: {
  4279                           ;main.c: 330: zeljena_vlaznost += 1;
  4280  0184  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0185  3080               	movlw	128
  4282  0186  01C2               	clrf	___ftadd@f1
  4283  0187  00C3               	movwf	___ftadd@f1+1
  4284  0188  303F               	movlw	63
  4285  0189  00C4               	movwf	___ftadd@f1+2
  4286  018A  1683               	bsf	3,5	;RP0=1, select bank1
  4287  018B  082A               	movf	_zeljena_vlaznost^(0+128),w
  4288  018C  1283               	bcf	3,5	;RP0=0, select bank0
  4289  018D  00C5               	movwf	___ftadd@f2
  4290  018E  1683               	bsf	3,5	;RP0=1, select bank1
  4291  018F  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4292  0190  1283               	bcf	3,5	;RP0=0, select bank0
  4293  0191  00C6               	movwf	___ftadd@f2+1
  4294  0192  1683               	bsf	3,5	;RP0=1, select bank1
  4295  0193  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4296  0194  1283               	bcf	3,5	;RP0=0, select bank0
  4297  0195  00C7               	movwf	___ftadd@f2+2
  4298  0196  160A  118A  263A  120A  118A  	fcall	___ftadd
  4299  019B  0842               	movf	?___ftadd,w
  4300  019C  1683               	bsf	3,5	;RP0=1, select bank1
  4301  019D  00AA               	movwf	_zeljena_vlaznost^(0+128)
  4302  019E  1283               	bcf	3,5	;RP0=0, select bank0
  4303  019F  0843               	movf	?___ftadd+1,w
  4304  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  4305  01A1  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4306  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4307  01A3  0844               	movf	?___ftadd+2,w
  4308  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  4309  01A5  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4310                           
  4311                           ;main.c: 331: if(zeljena_vlaznost > 99) zeljena_vlaznost = 99;
  4312  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  4313  01A7  30C6               	movlw	198
  4314  01A8  01CE               	clrf	___ftge@ff1
  4315  01A9  00CF               	movwf	___ftge@ff1+1
  4316  01AA  3042               	movlw	66
  4317  01AB  00D0               	movwf	___ftge@ff1+2
  4318  01AC  1683               	bsf	3,5	;RP0=1, select bank1
  4319  01AD  082A               	movf	_zeljena_vlaznost^(0+128),w
  4320  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  4321  01AF  00D1               	movwf	___ftge@ff2
  4322  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  4323  01B1  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4324  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  4325  01B3  00D2               	movwf	___ftge@ff2+1
  4326  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  4327  01B5  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4328  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  4329  01B7  00D3               	movwf	___ftge@ff2+2
  4330  01B8  120A  158A  25E5  120A  118A  	fcall	___ftge
  4331  01BD  1803               	btfsc	3,0
  4332  01BE  29C5               	goto	l5589
  4333  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  4334  01C0  30C6               	movlw	198
  4335  01C1  01AA               	clrf	_zeljena_vlaznost^(0+128)
  4336  01C2  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4337  01C3  3042               	movlw	66
  4338  01C4  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4339  01C5                     l5589:	
  4340                           
  4341                           ;main.c: 332: plus_flag = 0;
  4342  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  4343  01C6  3045               	movlw	low (STR_2| (0+32768))
  4344  01C7  01B8               	clrf	_plus_flag^(0+128)
  4345                           
  4346                           ;main.c: 334: sprintf(humidity, " %.1f", zeljena_vlaznost);
  4347  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  4348  01C9  00D4               	movwf	sprintf@f
  4349  01CA  3099               	movlw	high (STR_2| (0+32768))
  4350  01CB  00D5               	movwf	sprintf@f+1
  4351  01CC  1683               	bsf	3,5	;RP0=1, select bank1
  4352  01CD  082A               	movf	_zeljena_vlaznost^(0+128),w
  4353  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  4354  01CF  00D6               	movwf	?_sprintf+2
  4355  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  4356  01D1  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4357  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  4358  01D3  00D7               	movwf	?_sprintf+3
  4359  01D4  1683               	bsf	3,5	;RP0=1, select bank1
  4360  01D5  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4361  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  4362  01D7  00D8               	movwf	?_sprintf+4
  4363  01D8  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4364  01D9  120A  158A  2134  120A  118A  	fcall	_sprintf
  4365  01DE  3002               	movlw	2
  4366                           
  4367                           ;main.c: 335: LcdSetCursor(2,1);
  4368  01DF  01F7               	clrf	LcdSetCursor@b
  4369  01E0  0AF7               	incf	LcdSetCursor@b,f
  4370  01E1  274D  120A  118A   	fcall	_LcdSetCursor
  4371                           
  4372                           ;main.c: 336: LcdWriteString(humidity);
  4373  01E4  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4374  01E5  00F8               	movwf	LcdWriteString@a
  4375  01E6  01F9               	clrf	LcdWriteString@a+1
  4376  01E7  25EE  120A  118A   	fcall	_LcdWriteString
  4377  01EA                     l5597:	
  4378                           
  4379                           ;main.c: 337: }
  4380                           ;main.c: 339: if(minus_flag)
  4381  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  4382  01EB  0834               	movf	_minus_flag^(0+128),w
  4383  01EC  1903               	btfsc	3,2
  4384  01ED  2A52               	goto	l5611
  4385                           
  4386                           ;main.c: 340: {
  4387                           ;main.c: 341: zeljena_vlaznost -= 1;
  4388  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  4389  01EF  3080               	movlw	128
  4390  01F0  01CE               	clrf	___ftsub@f2
  4391  01F1  00CF               	movwf	___ftsub@f2+1
  4392  01F2  303F               	movlw	63
  4393  01F3  00D0               	movwf	___ftsub@f2+2
  4394  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  4395  01F5  082A               	movf	_zeljena_vlaznost^(0+128),w
  4396  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  4397  01F7  00D1               	movwf	___ftsub@f1
  4398  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  4399  01F9  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4400  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  4401  01FB  00D2               	movwf	___ftsub@f1+1
  4402  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  4403  01FD  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4404  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  4405  01FF  00D3               	movwf	___ftsub@f1+2
  4406  0200  120A  158A  26B8  120A  118A  	fcall	___ftsub
  4407  0205  084E               	movf	?___ftsub,w
  4408  0206  1683               	bsf	3,5	;RP0=1, select bank1
  4409  0207  00AA               	movwf	_zeljena_vlaznost^(0+128)
  4410  0208  1283               	bcf	3,5	;RP0=0, select bank0
  4411  0209  084F               	movf	?___ftsub+1,w
  4412  020A  1683               	bsf	3,5	;RP0=1, select bank1
  4413  020B  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4414  020C  1283               	bcf	3,5	;RP0=0, select bank0
  4415  020D  0850               	movf	?___ftsub+2,w
  4416  020E  1683               	bsf	3,5	;RP0=1, select bank1
  4417  020F  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4418                           
  4419                           ;main.c: 342: if(zeljena_vlaznost < 30) zeljena_vlaznost = 30;
  4420  0210  082A               	movf	_zeljena_vlaznost^(0+128),w
  4421  0211  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0212  00CE               	movwf	___ftge@ff1
  4423  0213  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0214  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4425  0215  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0216  00CF               	movwf	___ftge@ff1+1
  4427  0217  1683               	bsf	3,5	;RP0=1, select bank1
  4428  0218  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4429  0219  1283               	bcf	3,5	;RP0=0, select bank0
  4430  021A  00D0               	movwf	___ftge@ff1+2
  4431  021B  30F0               	movlw	240
  4432  021C  01D1               	clrf	___ftge@ff2
  4433  021D  00D2               	movwf	___ftge@ff2+1
  4434  021E  3041               	movlw	65
  4435  021F  00D3               	movwf	___ftge@ff2+2
  4436  0220  120A  158A  25E5  120A  118A  	fcall	___ftge
  4437  0225  1803               	btfsc	3,0
  4438  0226  2A2D               	goto	l5603
  4439  0227  1683               	bsf	3,5	;RP0=1, select bank1
  4440  0228  30F0               	movlw	240
  4441  0229  01AA               	clrf	_zeljena_vlaznost^(0+128)
  4442  022A  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4443  022B  3041               	movlw	65
  4444  022C  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4445  022D                     l5603:	
  4446                           
  4447                           ;main.c: 343: minus_flag = 0;
  4448  022D  1683               	bsf	3,5	;RP0=1, select bank1
  4449  022E  3045               	movlw	low (STR_2| (0+32768))
  4450  022F  01B4               	clrf	_minus_flag^(0+128)
  4451                           
  4452                           ;main.c: 345: sprintf(humidity, " %.1f", zeljena_vlaznost);
  4453  0230  1283               	bcf	3,5	;RP0=0, select bank0
  4454  0231  00D4               	movwf	sprintf@f
  4455  0232  3099               	movlw	high (STR_2| (0+32768))
  4456  0233  00D5               	movwf	sprintf@f+1
  4457  0234  1683               	bsf	3,5	;RP0=1, select bank1
  4458  0235  082A               	movf	_zeljena_vlaznost^(0+128),w
  4459  0236  1283               	bcf	3,5	;RP0=0, select bank0
  4460  0237  00D6               	movwf	?_sprintf+2
  4461  0238  1683               	bsf	3,5	;RP0=1, select bank1
  4462  0239  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4463  023A  1283               	bcf	3,5	;RP0=0, select bank0
  4464  023B  00D7               	movwf	?_sprintf+3
  4465  023C  1683               	bsf	3,5	;RP0=1, select bank1
  4466  023D  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4467  023E  1283               	bcf	3,5	;RP0=0, select bank0
  4468  023F  00D8               	movwf	?_sprintf+4
  4469  0240  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4470  0241  120A  158A  2134  120A  118A  	fcall	_sprintf
  4471  0246  3002               	movlw	2
  4472                           
  4473                           ;main.c: 346: LcdSetCursor(2,1);
  4474  0247  01F7               	clrf	LcdSetCursor@b
  4475  0248  0AF7               	incf	LcdSetCursor@b,f
  4476  0249  274D  120A  118A   	fcall	_LcdSetCursor
  4477                           
  4478                           ;main.c: 347: LcdWriteString(humidity);
  4479  024C  30BA               	movlw	(low (_humidity| 0))& (0+255)
  4480  024D  00F8               	movwf	LcdWriteString@a
  4481  024E  01F9               	clrf	LcdWriteString@a+1
  4482  024F  25EE  120A  118A   	fcall	_LcdWriteString
  4483  0252                     l5611:	
  4484                           
  4485                           ;main.c: 348: }
  4486                           ;main.c: 350: if(ok_flag)
  4487  0252  1683               	bsf	3,5	;RP0=1, select bank1
  4488  0253  0835               	movf	_ok_flag^(0+128),w
  4489  0254  1903               	btfsc	3,2
  4490  0255  2978               	goto	l5619
  4491                           
  4492                           ;main.c: 351: {
  4493                           ;main.c: 352: ok_flag = 0;
  4494  0256  01B5               	clrf	_ok_flag^(0+128)
  4495                           
  4496                           ;main.c: 353: ok_flag_humi = 1;
  4497  0257  01B7               	clrf	_ok_flag_humi^(0+128)
  4498  0258  0AB7               	incf	_ok_flag_humi^(0+128),f
  4499                           
  4500                           ;main.c: 354: menuCO2();
  4501  0259  2606  120A  118A   	fcall	_menuCO2
  4502  025C  2978               	goto	l5619
  4503  025D                     __end_of_menuHumi:	
  4504  025D                     __ptext6:	
  4505 ;; *************** function _manage_buttons *****************
  4506 ;; Defined at:
  4507 ;;		line 246 in file "main.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg
  4516 ;; Tracked objects:
  4517 ;;		On entry : 300/100
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4521 ;;      Params:         0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0
  4523 ;;      Temps:          2       0       0       0       0
  4524 ;;      Totals:         2       0       0       0       0
  4525 ;;Total ram usage:        2 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    1
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_menuCO2
  4532 ;;		_menuHumi
  4533 ;;		_menu
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _manage_buttons
  4539  025D                     _manage_buttons:	
  4540                           
  4541                           ;main.c: 248: if(RA2)
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _manage_buttons: [wreg]
  4545  025D  1283               	bcf	3,5	;RP0=0, select bank0
  4546  025E  1D05               	btfss	5,2	;volatile
  4547  025F  2A7C               	goto	l3411
  4548                           
  4549                           ;main.c: 249: {
  4550                           ;main.c: 250: _delay((unsigned long)((20)*(8000000/4000.0)));
  4551  0260  3034               	movlw	52
  4552  0261  00F4               	movwf	??_manage_buttons+1
  4553  0262  30F1               	movlw	241
  4554  0263  00F3               	movwf	??_manage_buttons
  4555  0264                     u6867:	
  4556  0264  0BF3               	decfsz	??_manage_buttons,f
  4557  0265  2A64               	goto	u6867
  4558  0266  0BF4               	decfsz	??_manage_buttons+1,f
  4559  0267  2A64               	goto	u6867
  4560  0268  2A69               	nop2
  4561                           
  4562                           ;main.c: 251: if(RA2) plus_flag = 1;
  4563  0269  1283               	bcf	3,5	;RP0=0, select bank0
  4564  026A  1303               	bcf	3,6	;RP1=0, select bank0
  4565  026B  1D05               	btfss	5,2	;volatile
  4566  026C  2A70               	goto	l371
  4567  026D  1683               	bsf	3,5	;RP0=1, select bank1
  4568  026E  01B8               	clrf	_plus_flag^(0+128)
  4569  026F  0AB8               	incf	_plus_flag^(0+128),f
  4570  0270                     l371:	
  4571  0270  1283               	bcf	3,5	;RP0=0, select bank0
  4572  0271  1905               	btfsc	5,2	;volatile
  4573  0272  2A70               	goto	l371
  4574                           
  4575                           ;main.c: 253: _delay((unsigned long)((20)*(8000000/4000.0)));
  4576  0273  3034               	movlw	52
  4577  0274  00F4               	movwf	??_manage_buttons+1
  4578  0275  30F1               	movlw	241
  4579  0276  00F3               	movwf	??_manage_buttons
  4580  0277                     u6877:	
  4581  0277  0BF3               	decfsz	??_manage_buttons,f
  4582  0278  2A77               	goto	u6877
  4583  0279  0BF4               	decfsz	??_manage_buttons+1,f
  4584  027A  2A77               	goto	u6877
  4585  027B  2A7C               	nop2
  4586  027C                     l3411:	
  4587                           
  4588                           ;main.c: 254: }
  4589                           ;main.c: 256: if(RA3)
  4590  027C  1283               	bcf	3,5	;RP0=0, select bank0
  4591  027D  1303               	bcf	3,6	;RP1=0, select bank0
  4592  027E  1D85               	btfss	5,3	;volatile
  4593  027F  2A9C               	goto	l3421
  4594                           
  4595                           ;main.c: 257: {
  4596                           ;main.c: 258: _delay((unsigned long)((20)*(8000000/4000.0)));
  4597  0280  3034               	movlw	52
  4598  0281  00F4               	movwf	??_manage_buttons+1
  4599  0282  30F1               	movlw	241
  4600  0283  00F3               	movwf	??_manage_buttons
  4601  0284                     u6887:	
  4602  0284  0BF3               	decfsz	??_manage_buttons,f
  4603  0285  2A84               	goto	u6887
  4604  0286  0BF4               	decfsz	??_manage_buttons+1,f
  4605  0287  2A84               	goto	u6887
  4606  0288  2A89               	nop2
  4607                           
  4608                           ;main.c: 259: if(RA3) minus_flag = 1;
  4609  0289  1283               	bcf	3,5	;RP0=0, select bank0
  4610  028A  1303               	bcf	3,6	;RP1=0, select bank0
  4611  028B  1D85               	btfss	5,3	;volatile
  4612  028C  2A90               	goto	l376
  4613  028D  1683               	bsf	3,5	;RP0=1, select bank1
  4614  028E  01B4               	clrf	_minus_flag^(0+128)
  4615  028F  0AB4               	incf	_minus_flag^(0+128),f
  4616  0290                     l376:	
  4617  0290  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0291  1985               	btfsc	5,3	;volatile
  4619  0292  2A90               	goto	l376
  4620                           
  4621                           ;main.c: 261: _delay((unsigned long)((20)*(8000000/4000.0)));
  4622  0293  3034               	movlw	52
  4623  0294  00F4               	movwf	??_manage_buttons+1
  4624  0295  30F1               	movlw	241
  4625  0296  00F3               	movwf	??_manage_buttons
  4626  0297                     u6897:	
  4627  0297  0BF3               	decfsz	??_manage_buttons,f
  4628  0298  2A97               	goto	u6897
  4629  0299  0BF4               	decfsz	??_manage_buttons+1,f
  4630  029A  2A97               	goto	u6897
  4631  029B  2A9C               	nop2
  4632  029C                     l3421:	
  4633                           
  4634                           ;main.c: 262: }
  4635                           ;main.c: 264: if(RA1)
  4636  029C  1283               	bcf	3,5	;RP0=0, select bank0
  4637  029D  1303               	bcf	3,6	;RP1=0, select bank0
  4638  029E  1C85               	btfss	5,1	;volatile
  4639  029F  0008               	return
  4640                           
  4641                           ;main.c: 265: {
  4642                           ;main.c: 266: _delay((unsigned long)((20)*(8000000/4000.0)));
  4643  02A0  3034               	movlw	52
  4644  02A1  00F4               	movwf	??_manage_buttons+1
  4645  02A2  30F1               	movlw	241
  4646  02A3  00F3               	movwf	??_manage_buttons
  4647  02A4                     u6907:	
  4648  02A4  0BF3               	decfsz	??_manage_buttons,f
  4649  02A5  2AA4               	goto	u6907
  4650  02A6  0BF4               	decfsz	??_manage_buttons+1,f
  4651  02A7  2AA4               	goto	u6907
  4652  02A8  2AA9               	nop2
  4653                           
  4654                           ;main.c: 267: if(RA1) ok_flag = 1;
  4655  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  4656  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  4657  02AB  1C85               	btfss	5,1	;volatile
  4658  02AC  2AB0               	goto	l381
  4659  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  4660  02AE  01B5               	clrf	_ok_flag^(0+128)
  4661  02AF  0AB5               	incf	_ok_flag^(0+128),f
  4662  02B0                     l381:	
  4663  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  4664  02B1  1885               	btfsc	5,1	;volatile
  4665  02B2  2AB0               	goto	l381
  4666                           
  4667                           ;main.c: 269: _delay((unsigned long)((20)*(8000000/4000.0)));
  4668  02B3  3034               	movlw	52
  4669  02B4  00F4               	movwf	??_manage_buttons+1
  4670  02B5  30F1               	movlw	241
  4671  02B6  00F3               	movwf	??_manage_buttons
  4672  02B7                     u6917:	
  4673  02B7  0BF3               	decfsz	??_manage_buttons,f
  4674  02B8  2AB7               	goto	u6917
  4675  02B9  0BF4               	decfsz	??_manage_buttons+1,f
  4676  02BA  2AB7               	goto	u6917
  4677  02BB  2ABC               	nop2
  4678  02BC  0008               	return
  4679  02BD                     __end_of_manage_buttons:	
  4680  02BD                     __ptext16:	
  4681 ;; *************** function _readStatusRegSHT71 *****************
  4682 ;; Defined at:
  4683 ;;		line 213 in file "sht71.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;  p_value         1    wreg     PTR unsigned char 
  4686 ;;		 -> getResSHT71@inp(1), 
  4687 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  4688 ;;		 -> getResSHT71@checksum(1), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  p_value         1    7[COMMON] PTR unsigned char 
  4691 ;;		 -> getResSHT71@inp(1), 
  4692 ;;  error           1    8[COMMON] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      unsigned char 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : B00/100
  4699 ;;		On exit  : B00/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4702 ;;      Params:         1       0       0       0       0
  4703 ;;      Locals:         2       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0
  4705 ;;      Totals:         3       0       0       0       0
  4706 ;;Total ram usage:        3 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    2
  4709 ;; This function calls:
  4710 ;;		_readByteSHT71
  4711 ;;		_tranStartSHT71
  4712 ;;		_writeByteSHT71
  4713 ;; This function is called by:
  4714 ;;		_getResSHT71
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           
  4719                           ;psect for function _readStatusRegSHT71
  4720  02BD                     _readStatusRegSHT71:	
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _readStatusRegSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4724                           ;readStatusRegSHT71@p_value stored from wreg
  4725  02BD  00F8               	movwf	readStatusRegSHT71@p_value
  4726                           
  4727                           ;sht71.c: 216: tranStartSHT71();
  4728  02BE  2424  120A  118A   	fcall	_tranStartSHT71
  4729                           
  4730                           ;sht71.c: 217: error = writeByteSHT71(0x07);
  4731  02C1  3007               	movlw	7
  4732  02C2  244E  120A  118A   	fcall	_writeByteSHT71
  4733  02C5  00F9               	movwf	readStatusRegSHT71@error
  4734                           
  4735                           ;sht71.c: 218: *p_value = readByteSHT71(1);
  4736  02C6  0878               	movf	readStatusRegSHT71@p_value,w
  4737  02C7  0084               	movwf	4
  4738  02C8  3001               	movlw	1
  4739  02C9  23F4  120A  118A   	fcall	_readByteSHT71
  4740  02CC  1383               	bcf	3,7	;select IRP bank0
  4741  02CD  0080               	movwf	0
  4742                           
  4743                           ;sht71.c: 219: *p_checksum = readByteSHT71(0);
  4744  02CE  0877               	movf	readStatusRegSHT71@p_checksum,w
  4745  02CF  0084               	movwf	4
  4746  02D0  3000               	movlw	0
  4747  02D1  23F4               	fcall	_readByteSHT71
  4748  02D2  1383               	bcf	3,7	;select IRP bank0
  4749  02D3  0080               	movwf	0
  4750                           
  4751                           ;sht71.c: 220: return error;
  4752  02D4  0879               	movf	readStatusRegSHT71@error,w
  4753  02D5  0008               	return
  4754  02D6                     __end_of_readStatusRegSHT71:	
  4755  02D6                     __ptext15:	
  4756 ;; *************** function _getResSHT71 *****************
  4757 ;; Defined at:
  4758 ;;		line 223 in file "sht71.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  p_temp          1    wreg     PTR float 
  4761 ;;		 -> temp(3), 
  4762 ;;  p_humi          1   77[BANK0 ] PTR float 
  4763 ;;		 -> humi(3), 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  p_temp          1    4[BANK1 ] PTR float 
  4766 ;;		 -> temp(3), 
  4767 ;;  temp_val        3   10[BANK1 ] struct .
  4768 ;;  humi_val        3    6[BANK1 ] struct .
  4769 ;;  checksum        1    9[BANK1 ] unsigned char 
  4770 ;;  error           1    5[BANK1 ] unsigned char 
  4771 ;;  inp             1    3[BANK1 ] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 300/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4781 ;;      Params:         0       1       0       0       0
  4782 ;;      Locals:         0       0      10       0       0
  4783 ;;      Temps:          0       0       3       0       0
  4784 ;;      Totals:         0       1      13       0       0
  4785 ;;Total ram usage:       14 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    4
  4788 ;; This function calls:
  4789 ;;		_LcdSetCursor
  4790 ;;		_LcdWriteString
  4791 ;;		___lwtoft
  4792 ;;		_calcSHT71
  4793 ;;		_connectionResetSHT71
  4794 ;;		_measureSHT71
  4795 ;;		_readStatusRegSHT71
  4796 ;; This function is called by:
  4797 ;;		_main
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _getResSHT71
  4803  02D6                     _getResSHT71:	
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _getResSHT71: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4807                           ;getResSHT71@p_temp stored from wreg
  4808  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  4809  02D7  00CE               	movwf	getResSHT71@p_temp^(0+128)
  4810  02D8  30D3               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4811                           
  4812                           ;sht71.c: 224: value humi_val,temp_val;
  4813                           ;sht71.c: 225: unsigned char error, checksum;
  4814                           ;sht71.c: 226: char inp;
  4815                           ;sht71.c: 227: error=0;
  4816  02D9  01CF               	clrf	getResSHT71@error^(0+128)
  4817                           
  4818                           ;sht71.c: 228: error += measureSHT71((unsigned char*) (&humi_val.i),&checksum,3);
  4819  02DA  00F7               	movwf	measureSHT71@p_checksum
  4820  02DB  3003               	movlw	3
  4821  02DC  00F8               	movwf	measureSHT71@mode
  4822  02DD  30D0               	movlw	(low (getResSHT71@humi_val| 0))& (0+255)
  4823  02DE  2383  120A  118A   	fcall	_measureSHT71
  4824  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  4825  02E2  07CF               	addwf	getResSHT71@error^(0+128),f
  4826                           
  4827                           ;sht71.c: 229: error += measureSHT71((unsigned char*) (&temp_val.i),&checksum,2);
  4828  02E3  30D3               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4829  02E4  00F7               	movwf	measureSHT71@p_checksum
  4830  02E5  3002               	movlw	2
  4831  02E6  00F8               	movwf	measureSHT71@mode
  4832  02E7  30D4               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  4833  02E8  2383  120A  118A   	fcall	_measureSHT71
  4834  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  4835  02EC  07CF               	addwf	getResSHT71@error^(0+128),f
  4836                           
  4837                           ;sht71.c: 230: error += readStatusRegSHT71(&inp, &checksum);
  4838  02ED  30D3               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4839  02EE  00F7               	movwf	readStatusRegSHT71@p_checksum
  4840  02EF  30CD               	movlw	(low (getResSHT71@inp| 0))& (0+255)
  4841  02F0  22BD  120A  118A   	fcall	_readStatusRegSHT71
  4842  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  4843  02F4  07CF               	addwf	getResSHT71@error^(0+128),f
  4844                           
  4845                           ;sht71.c: 231: if(error != 0)
  4846  02F5  084F               	movf	getResSHT71@error^(0+128),w
  4847  02F6  1903               	btfsc	3,2
  4848  02F7  2B17               	goto	l5697
  4849                           
  4850                           ;sht71.c: 232: {
  4851                           ;sht71.c: 233: connectionResetSHT71();
  4852  02F8  247E  120A  118A   	fcall	_connectionResetSHT71
  4853  02FB  3001               	movlw	1
  4854                           
  4855                           ;sht71.c: 234: LcdSetCursor(1,1);
  4856  02FC  01F7               	clrf	LcdSetCursor@b
  4857  02FD  0AF7               	incf	LcdSetCursor@b,f
  4858  02FE  274D  120A  118A   	fcall	_LcdSetCursor
  4859                           
  4860                           ;sht71.c: 235: LcdWriteString("Greska SHT71!");
  4861  0301  3010               	movlw	low (STR_1| (0+32768))
  4862  0302  00F8               	movwf	LcdWriteString@a
  4863  0303  3099               	movlw	high (STR_1| (0+32768))
  4864  0304  00F9               	movwf	LcdWriteString@a+1
  4865  0305  25EE  120A  118A   	fcall	_LcdWriteString
  4866                           
  4867                           ;sht71.c: 236: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4868  0308  300B               	movlw	11
  4869  0309  1683               	bsf	3,5	;RP0=1, select bank1
  4870  030A  00CC               	movwf	(??_getResSHT71^(0+128)+2)
  4871  030B  3026               	movlw	38
  4872  030C  00CB               	movwf	(??_getResSHT71^(0+128)+1)
  4873  030D  3066               	movlw	102
  4874  030E  00CA               	movwf	??_getResSHT71^(0+128)
  4875  030F                     u7027:	
  4876  030F  0BCA               	decfsz	??_getResSHT71^(0+128),f
  4877  0310  2B0F               	goto	u7027
  4878  0311  0BCB               	decfsz	(??_getResSHT71^(0+128)+1),f
  4879  0312  2B0F               	goto	u7027
  4880  0313  0BCC               	decfsz	(??_getResSHT71^(0+128)+2),f
  4881  0314  2B0F               	goto	u7027
  4882  0315  2B16               	nop2
  4883                           
  4884                           ;sht71.c: 237: }
  4885  0316  0008               	return
  4886  0317                     l5697:	
  4887                           
  4888                           ;sht71.c: 238: else
  4889                           ;sht71.c: 239: {
  4890                           ;sht71.c: 240: humi_val.f = (float)tempervalue[1];
  4891  0317  0823               	movf	((_tempervalue+1)^(0+128)+2),w
  4892  0318  1283               	bcf	3,5	;RP0=0, select bank0
  4893  0319  00A4               	movwf	___lwtoft@c+1
  4894  031A  1683               	bsf	3,5	;RP0=1, select bank1
  4895  031B  0822               	movf	(_tempervalue^(0+128)+2),w
  4896  031C  1283               	bcf	3,5	;RP0=0, select bank0
  4897  031D  00A3               	movwf	___lwtoft@c
  4898  031E  2371  120A  118A   	fcall	___lwtoft
  4899  0321  0823               	movf	?___lwtoft,w
  4900  0322  1683               	bsf	3,5	;RP0=1, select bank1
  4901  0323  00D0               	movwf	getResSHT71@humi_val^(0+128)
  4902  0324  1283               	bcf	3,5	;RP0=0, select bank0
  4903  0325  0824               	movf	?___lwtoft+1,w
  4904  0326  1683               	bsf	3,5	;RP0=1, select bank1
  4905  0327  00D1               	movwf	(getResSHT71@humi_val+1)^(0+128)
  4906  0328  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0329  0825               	movf	?___lwtoft+2,w
  4908  032A  1683               	bsf	3,5	;RP0=1, select bank1
  4909  032B  00D2               	movwf	(getResSHT71@humi_val+2)^(0+128)
  4910                           
  4911                           ;sht71.c: 241: temp_val.f = (float)tempervalue[0];
  4912  032C  0821               	movf	(_tempervalue+1)^(0+128),w
  4913  032D  1283               	bcf	3,5	;RP0=0, select bank0
  4914  032E  00A4               	movwf	___lwtoft@c+1
  4915  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4916  0330  0820               	movf	_tempervalue^(0+128),w
  4917  0331  1283               	bcf	3,5	;RP0=0, select bank0
  4918  0332  00A3               	movwf	___lwtoft@c
  4919  0333  2371               	fcall	___lwtoft
  4920  0334  0823               	movf	?___lwtoft,w
  4921  0335  1683               	bsf	3,5	;RP0=1, select bank1
  4922  0336  00D4               	movwf	getResSHT71@temp_val^(0+128)
  4923  0337  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0338  0824               	movf	?___lwtoft+1,w
  4925  0339  1683               	bsf	3,5	;RP0=1, select bank1
  4926  033A  00D5               	movwf	(getResSHT71@temp_val+1)^(0+128)
  4927  033B  1283               	bcf	3,5	;RP0=0, select bank0
  4928  033C  0825               	movf	?___lwtoft+2,w
  4929  033D  1683               	bsf	3,5	;RP0=1, select bank1
  4930  033E  00D6               	movwf	(getResSHT71@temp_val+2)^(0+128)
  4931                           
  4932                           ;sht71.c: 242: humi_val.f = calcSHT71(humi_val.f,&temp_val.f);
  4933  033F  0850               	movf	getResSHT71@humi_val^(0+128),w
  4934  0340  1283               	bcf	3,5	;RP0=0, select bank0
  4935  0341  00D4               	movwf	calcSHT71@p_humidity
  4936  0342  1683               	bsf	3,5	;RP0=1, select bank1
  4937  0343  0851               	movf	(getResSHT71@humi_val+1)^(0+128),w
  4938  0344  1283               	bcf	3,5	;RP0=0, select bank0
  4939  0345  00D5               	movwf	calcSHT71@p_humidity+1
  4940  0346  1683               	bsf	3,5	;RP0=1, select bank1
  4941  0347  0852               	movf	(getResSHT71@humi_val+2)^(0+128),w
  4942  0348  1283               	bcf	3,5	;RP0=0, select bank0
  4943  0349  00D6               	movwf	calcSHT71@p_humidity+2
  4944  034A  30D4               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  4945  034B  00D7               	movwf	calcSHT71@p_temperature
  4946  034C  160A  118A  252A   	fcall	_calcSHT71
  4947  034F  0854               	movf	?_calcSHT71,w
  4948  0350  1683               	bsf	3,5	;RP0=1, select bank1
  4949  0351  00D0               	movwf	getResSHT71@humi_val^(0+128)
  4950  0352  1283               	bcf	3,5	;RP0=0, select bank0
  4951  0353  0855               	movf	?_calcSHT71+1,w
  4952  0354  1683               	bsf	3,5	;RP0=1, select bank1
  4953  0355  00D1               	movwf	(getResSHT71@humi_val+1)^(0+128)
  4954  0356  1283               	bcf	3,5	;RP0=0, select bank0
  4955  0357  0856               	movf	?_calcSHT71+2,w
  4956  0358  1683               	bsf	3,5	;RP0=1, select bank1
  4957  0359  00D2               	movwf	(getResSHT71@humi_val+2)^(0+128)
  4958                           
  4959                           ;sht71.c: 243: *p_temp = temp_val.f;
  4960  035A  084E               	movf	getResSHT71@p_temp^(0+128),w
  4961  035B  0084               	movwf	4
  4962  035C  0854               	movf	getResSHT71@temp_val^(0+128),w
  4963  035D  0080               	movwf	0
  4964  035E  0A84               	incf	4,f
  4965  035F  0855               	movf	(getResSHT71@temp_val+1)^(0+128),w
  4966  0360  0080               	movwf	0
  4967  0361  0A84               	incf	4,f
  4968  0362  0856               	movf	(getResSHT71@temp_val+2)^(0+128),w
  4969  0363  0080               	movwf	0
  4970                           
  4971                           ;sht71.c: 244: *p_humi = humi_val.f;
  4972  0364  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0365  086D               	movf	getResSHT71@p_humi,w
  4974  0366  0084               	movwf	4
  4975  0367  1683               	bsf	3,5	;RP0=1, select bank1
  4976  0368  0850               	movf	getResSHT71@humi_val^(0+128),w
  4977  0369  0080               	movwf	0
  4978  036A  0A84               	incf	4,f
  4979  036B  0851               	movf	(getResSHT71@humi_val+1)^(0+128),w
  4980  036C  0080               	movwf	0
  4981  036D  0A84               	incf	4,f
  4982  036E  0852               	movf	(getResSHT71@humi_val+2)^(0+128),w
  4983  036F  0080               	movwf	0
  4984  0370  0008               	return
  4985  0371                     __end_of_getResSHT71:	
  4986  0371                     __ptext23:	
  4987 ;; *************** function ___lwtoft *****************
  4988 ;; Defined at:
  4989 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  c               2    3[BANK0 ] unsigned int 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  3    3[BANK0 ] float 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, pclath, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 300/0
  5000 ;;		On exit  : 300/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5003 ;;      Params:         0       3       0       0       0
  5004 ;;      Locals:         0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0
  5006 ;;      Totals:         0       3       0       0       0
  5007 ;;Total ram usage:        3 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    2
  5010 ;; This function calls:
  5011 ;;		___ftpack
  5012 ;; This function is called by:
  5013 ;;		_getTempDS18B20
  5014 ;;		_getResSHT71
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function ___lwtoft
  5020  0371                     ___lwtoft:	
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5024  0371  0823               	movf	___lwtoft@c,w
  5025  0372  00F3               	movwf	___ftpack@arg
  5026  0373  0824               	movf	___lwtoft@c+1,w
  5027  0374  00F4               	movwf	___ftpack@arg+1
  5028  0375  308E               	movlw	142
  5029  0376  01F5               	clrf	___ftpack@arg+2
  5030  0377  00F6               	movwf	___ftpack@exp
  5031  0378  01F7               	clrf	___ftpack@sign
  5032  0379  160A  118A  26FA   	fcall	___ftpack
  5033  037C  0873               	movf	?___ftpack,w
  5034  037D  00A3               	movwf	?___lwtoft
  5035  037E  0874               	movf	?___ftpack+1,w
  5036  037F  00A4               	movwf	?___lwtoft+1
  5037  0380  0875               	movf	?___ftpack+2,w
  5038  0381  00A5               	movwf	?___lwtoft+2
  5039  0382  0008               	return
  5040  0383                     __end_of___lwtoft:	
  5041  0383                     __ptext17:	
  5042 ;; *************** function _measureSHT71 *****************
  5043 ;; Defined at:
  5044 ;;		line 91 in file "sht71.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  p_value         1    wreg     PTR unsigned char 
  5047 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  5048 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  5049 ;;		 -> getResSHT71@checksum(1), 
  5050 ;;  mode            1    7[COMMON] unsigned char 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  p_value         1    0[BANK0 ] PTR unsigned char 
  5053 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  5054 ;;  temp            2    3[BANK0 ] unsigned int 
  5055 ;;  error           2    1[BANK0 ] unsigned int 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      unsigned char 
  5058 ;; Registers used:
  5059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 300/100
  5062 ;;		On exit  : B00/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5065 ;;      Params:         2       0       0       0       0
  5066 ;;      Locals:         0       5       0       0       0
  5067 ;;      Temps:          0       0       0       0       0
  5068 ;;      Totals:         2       5       0       0       0
  5069 ;;Total ram usage:        7 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    2
  5072 ;; This function calls:
  5073 ;;		_readByteSHT71
  5074 ;;		_tranStartSHT71
  5075 ;;		_writeByteSHT71
  5076 ;; This function is called by:
  5077 ;;		_getResSHT71
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _measureSHT71
  5083  0383                     _measureSHT71:	
  5084                           
  5085                           ;sht71.c: 92: unsigned error = 0;
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _measureSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5089  0383  1283               	bcf	3,5	;RP0=0, select bank0
  5090  0384  01A1               	clrf	measureSHT71@error
  5091  0385  01A2               	clrf	measureSHT71@error+1
  5092                           
  5093                           ;sht71.c: 94: tranStartSHT71();
  5094  0386  2424  120A  118A   	fcall	_tranStartSHT71
  5095                           
  5096                           ;sht71.c: 95: switch(mode){
  5097  0389  2B94               	goto	l4169
  5098  038A                     l4163:	
  5099  038A  3003               	movlw	3
  5100  038B  2B8D               	goto	L3
  5101  038C                     l4165:	
  5102  038C  3005               	movlw	5
  5103  038D                     L3:	
  5104  038D  244E  120A  118A   	fcall	_writeByteSHT71
  5105  0390  07A1               	addwf	measureSHT71@error,f
  5106  0391  1803               	skipnc
  5107  0392  0AA2               	incf	measureSHT71@error+1,f
  5108  0393  2B9C               	goto	l127
  5109  0394                     l4169:	
  5110  0394  0878               	movf	measureSHT71@mode,w
  5111                           
  5112                           ; Switch size 1, requested type "space"
  5113                           ; Number of cases is 2, Range of values is 2 to 3
  5114                           ; switch strategies available:
  5115                           ; Name         Instructions Cycles
  5116                           ; simple_byte            7     4 (average)
  5117                           ; direct_byte           17    11 (fixed)
  5118                           ; jumptable            263     9 (fixed)
  5119                           ;	Chosen strategy is simple_byte
  5120  0395  3A02               	xorlw	2	; case 2
  5121  0396  1903               	skipnz
  5122  0397  2B8A               	goto	l4163
  5123  0398  3A01               	xorlw	1	; case 3
  5124  0399  1903               	skipnz
  5125  039A  2B8C               	goto	l4165
  5126  039B  2B9C               	goto	l127
  5127  039C                     l127:	
  5128                           
  5129                           ;sht71.c: 100: TRISBbits.TRISB7 = 1;
  5130  039C  1683               	bsf	3,5	;RP0=1, select bank1
  5131  039D  1303               	bcf	3,6	;RP1=0, select bank1
  5132  039E  1786               	bsf	6,7	;volatile
  5133  039F                     l130:	
  5134                           ;sht71.c: 101: while (1)
  5135                           
  5136                           
  5137                           ;sht71.c: 102: {
  5138                           ;sht71.c: 103: if(RB7 == 0) break;
  5139  039F  1283               	bcf	3,5	;RP0=0, select bank0
  5140  03A0  1B86               	btfsc	6,7	;volatile
  5141  03A1  2B9F               	goto	l130
  5142                           
  5143                           ;sht71.c: 104: }
  5144                           ;sht71.c: 105: if(RB7) error += 1;
  5145  03A2  1F86               	btfss	6,7	;volatile
  5146  03A3  2BE4               	goto	l4201
  5147  03A4  0AA1               	incf	measureSHT71@error,f
  5148  03A5  1903               	skipnz
  5149  03A6  0AA2               	incf	measureSHT71@error+1,f
  5150  03A7  2BE4               	goto	l4201
  5151  03A8                     l4175:	
  5152                           
  5153                           ;sht71.c: 108: temp = readByteSHT71(1);
  5154  03A8  3001               	movlw	1
  5155  03A9  23F4  120A  118A   	fcall	_readByteSHT71
  5156  03AC  00A3               	movwf	measureSHT71@temp
  5157  03AD  01A4               	clrf	measureSHT71@temp+1
  5158                           
  5159                           ;sht71.c: 109: temp <<= 8;
  5160  03AE  00A4               	movwf	measureSHT71@temp+1
  5161  03AF  01A3               	clrf	measureSHT71@temp
  5162                           
  5163                           ;sht71.c: 110: tempervalue[0] = temp;
  5164  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  5165  03B1  00A1               	movwf	(_tempervalue+1)^(0+128)
  5166  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  5167  03B3  0823               	movf	measureSHT71@temp,w
  5168  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  5169  03B5  00A0               	movwf	_tempervalue^(0+128)
  5170                           
  5171                           ;sht71.c: 111: temp = 0;
  5172  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  5173  03B7  3001               	movlw	1
  5174  03B8  01A3               	clrf	measureSHT71@temp
  5175  03B9  01A4               	clrf	measureSHT71@temp+1
  5176                           
  5177                           ;sht71.c: 112: temp = readByteSHT71(1);
  5178  03BA  23F4  120A  118A   	fcall	_readByteSHT71
  5179  03BD  00A3               	movwf	measureSHT71@temp
  5180  03BE  01A4               	clrf	measureSHT71@temp+1
  5181                           
  5182                           ;sht71.c: 113: tempervalue[0] |= temp;
  5183  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  5184  03C0  04A0               	iorwf	_tempervalue^(0+128),f
  5185  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  5186  03C2  0824               	movf	measureSHT71@temp+1,w
  5187  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  5188  03C4  04A1               	iorwf	(_tempervalue+1)^(0+128),f
  5189                           
  5190                           ;sht71.c: 114: break;
  5191  03C5  2BEC               	goto	l4203
  5192  03C6                     l4187:	
  5193                           
  5194                           ;sht71.c: 116: temp = readByteSHT71(1);
  5195  03C6  3001               	movlw	1
  5196  03C7  23F4  120A  118A   	fcall	_readByteSHT71
  5197  03CA  00A3               	movwf	measureSHT71@temp
  5198  03CB  01A4               	clrf	measureSHT71@temp+1
  5199                           
  5200                           ;sht71.c: 117: temp <<= 8;
  5201  03CC  00A4               	movwf	measureSHT71@temp+1
  5202  03CD  01A3               	clrf	measureSHT71@temp
  5203                           
  5204                           ;sht71.c: 118: tempervalue[1] = temp;
  5205  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  5206  03CF  00A3               	movwf	((_tempervalue+1)^(0+128)+2)
  5207  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  5208  03D1  0823               	movf	measureSHT71@temp,w
  5209  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  5210  03D3  00A2               	movwf	(_tempervalue^(0+128)+2)
  5211                           
  5212                           ;sht71.c: 119: temp = 0;
  5213  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5214  03D5  3001               	movlw	1
  5215  03D6  01A3               	clrf	measureSHT71@temp
  5216  03D7  01A4               	clrf	measureSHT71@temp+1
  5217                           
  5218                           ;sht71.c: 120: temp = readByteSHT71(1);
  5219  03D8  23F4  120A  118A   	fcall	_readByteSHT71
  5220  03DB  00A3               	movwf	measureSHT71@temp
  5221  03DC  01A4               	clrf	measureSHT71@temp+1
  5222                           
  5223                           ;sht71.c: 121: tempervalue[1] |= temp;
  5224  03DD  1683               	bsf	3,5	;RP0=1, select bank1
  5225  03DE  04A2               	iorwf	(_tempervalue^(0+128)+2),f
  5226  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  5227  03E0  0824               	movf	measureSHT71@temp+1,w
  5228  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  5229  03E2  04A3               	iorwf	((_tempervalue+1)^(0+128)+2),f
  5230                           
  5231                           ;sht71.c: 122: break;
  5232  03E3  2BEC               	goto	l4203
  5233  03E4                     l4201:	
  5234  03E4  0878               	movf	measureSHT71@mode,w
  5235                           
  5236                           ; Switch size 1, requested type "space"
  5237                           ; Number of cases is 2, Range of values is 2 to 3
  5238                           ; switch strategies available:
  5239                           ; Name         Instructions Cycles
  5240                           ; simple_byte            7     4 (average)
  5241                           ; direct_byte           17    11 (fixed)
  5242                           ; jumptable            263     9 (fixed)
  5243                           ;	Chosen strategy is simple_byte
  5244  03E5  3A02               	xorlw	2	; case 2
  5245  03E6  1903               	skipnz
  5246  03E7  2BA8               	goto	l4175
  5247  03E8  3A01               	xorlw	1	; case 3
  5248  03E9  1903               	skipnz
  5249  03EA  2BC6               	goto	l4187
  5250  03EB  2BEC               	goto	l4203
  5251  03EC                     l4203:	
  5252                           
  5253                           ;sht71.c: 125: *p_checksum = readByteSHT71(0);
  5254  03EC  0877               	movf	measureSHT71@p_checksum,w
  5255  03ED  0084               	movwf	4
  5256  03EE  3000               	movlw	0
  5257  03EF  23F4               	fcall	_readByteSHT71
  5258  03F0  1383               	bcf	3,7	;select IRP bank0
  5259  03F1  0080               	movwf	0
  5260                           
  5261                           ;sht71.c: 126: return error;
  5262  03F2  0821               	movf	measureSHT71@error,w
  5263  03F3  0008               	return
  5264  03F4                     __end_of_measureSHT71:	
  5265  03F4                     __ptext19:	
  5266 ;; *************** function _readByteSHT71 *****************
  5267 ;; Defined at:
  5268 ;;		line 148 in file "sht71.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;  ack             1    wreg     unsigned char 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  ack             1    3[COMMON] unsigned char 
  5273 ;;  i               1    5[COMMON] unsigned char 
  5274 ;;  res             1    4[COMMON] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0
  5279 ;; Tracked objects:
  5280 ;;		On entry : 200/0
  5281 ;;		On exit  : 300/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5284 ;;      Params:         0       0       0       0       0
  5285 ;;      Locals:         3       0       0       0       0
  5286 ;;      Temps:          1       0       0       0       0
  5287 ;;      Totals:         4       0       0       0       0
  5288 ;;Total ram usage:        4 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    1
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_measureSHT71
  5295 ;;		_readStatusRegSHT71
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _readByteSHT71
  5301  03F4                     _readByteSHT71:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _readByteSHT71: [wreg+status,2+status,0]
  5305                           ;readByteSHT71@ack stored from wreg
  5306  03F4  00F4               	movwf	readByteSHT71@ack
  5307                           
  5308                           ;sht71.c: 149: unsigned char i, res=0;
  5309  03F5  01F5               	clrf	readByteSHT71@res
  5310                           
  5311                           ;sht71.c: 150: TRISBbits.TRISB7 = 1;
  5312  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  5313  03F7  1786               	bsf	6,7	;volatile
  5314                           
  5315                           ;sht71.c: 151: for (i=0x80;i>0;i/=2)
  5316  03F8  3080               	movlw	128
  5317  03F9  00F6               	movwf	readByteSHT71@i
  5318  03FA                     l148:	
  5319                           
  5320                           ;sht71.c: 152: {
  5321                           ;sht71.c: 153: RB6 = 1;
  5322  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  5323  03FB  1706               	bsf	6,6	;volatile
  5324                           
  5325                           ;sht71.c: 154: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5326  03FC  2BFD               	nop2	;2 cycle nop
  5327  03FD  2BFE               	nop2	;2 cycle nop
  5328                           
  5329                           ;sht71.c: 155: if (RB7) res = (res | i);
  5330  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  5331  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0400  0876               	movf	readByteSHT71@i,w
  5333  0401  1B86               	btfsc	6,7	;volatile
  5334  0402  04F5               	iorwf	readByteSHT71@res,f
  5335                           
  5336                           ;sht71.c: 156: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5337  0403  2C04               	nop2	;2 cycle nop
  5338  0404  2C05               	nop2	;2 cycle nop
  5339                           
  5340                           ;sht71.c: 157: RB6 = 0;
  5341  0405  1283               	bcf	3,5	;RP0=0, select bank0
  5342  0406  1303               	bcf	3,6	;RP1=0, select bank0
  5343  0407  1306               	bcf	6,6	;volatile
  5344  0408  1003               	clrc
  5345  0409  0CF6               	rrf	readByteSHT71@i,f
  5346  040A  0876               	movf	readByteSHT71@i,w
  5347  040B  1D03               	btfss	3,2
  5348  040C  2BFA               	goto	l148
  5349                           
  5350                           ;sht71.c: 158: }
  5351                           ;sht71.c: 159: TRISBbits.TRISB7 = 0;
  5352  040D  1683               	bsf	3,5	;RP0=1, select bank1
  5353  040E  1386               	bcf	6,7	;volatile
  5354                           
  5355                           ;sht71.c: 160: RB7 = !ack;
  5356  040F  0874               	movf	readByteSHT71@ack,w
  5357  0410  1D03               	btfss	3,2
  5358  0411  2C16               	goto	u4000
  5359  0412  1283               	bcf	3,5	;RP0=0, select bank0
  5360  0413  1303               	bcf	3,6	;RP1=0, select bank0
  5361  0414  1786               	bsf	6,7	;volatile
  5362  0415  2C19               	goto	l3789
  5363  0416                     u4000:	
  5364  0416  1283               	bcf	3,5	;RP0=0, select bank0
  5365  0417  1303               	bcf	3,6	;RP1=0, select bank0
  5366  0418  1386               	bcf	6,7	;volatile
  5367  0419                     l3789:	
  5368                           
  5369                           ;sht71.c: 161: RB6 = 1;
  5370  0419  1706               	bsf	6,6	;volatile
  5371                           
  5372                           ;sht71.c: 162: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5373  041A  3003               	movlw	3
  5374  041B  00F3               	movwf	??_readByteSHT71
  5375  041C                     u7047:	
  5376  041C  0BF3               	decfsz	??_readByteSHT71,f
  5377  041D  2C1C               	goto	u7047
  5378                           
  5379                           ;sht71.c: 163: RB6 = 0;
  5380  041E  1283               	bcf	3,5	;RP0=0, select bank0
  5381  041F  1303               	bcf	3,6	;RP1=0, select bank0
  5382  0420  1306               	bcf	6,6	;volatile
  5383                           
  5384                           ;sht71.c: 164: RB7 = 1;
  5385  0421  1786               	bsf	6,7	;volatile
  5386                           
  5387                           ;sht71.c: 165: return res;
  5388  0422  0875               	movf	readByteSHT71@res,w
  5389  0423  0008               	return
  5390  0424                     __end_of_readByteSHT71:	
  5391  0424                     __ptext21:	
  5392 ;; *************** function _tranStartSHT71 *****************
  5393 ;; Defined at:
  5394 ;;		line 15 in file "sht71.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;		None               void
  5401 ;; Registers used:
  5402 ;;		None
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/100
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5408 ;;      Params:         0       0       0       0       0
  5409 ;;      Locals:         0       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0
  5411 ;;      Totals:         0       0       0       0       0
  5412 ;;Total ram usage:        0 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    1
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_measureSHT71
  5419 ;;		_connectionResetSHT71
  5420 ;;		_readStatusRegSHT71
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _tranStartSHT71
  5426  0424                     _tranStartSHT71:	
  5427                           
  5428                           ;sht71.c: 16: TRISBbits.TRISB7 = 0;
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _tranStartSHT71: []
  5432  0424  1683               	bsf	3,5	;RP0=1, select bank1
  5433  0425  1303               	bcf	3,6	;RP1=0, select bank1
  5434  0426  1386               	bcf	6,7	;volatile
  5435                           
  5436                           ;sht71.c: 17: RB7 = 1;
  5437  0427  1283               	bcf	3,5	;RP0=0, select bank0
  5438  0428  1786               	bsf	6,7	;volatile
  5439                           
  5440                           ;sht71.c: 18: RB6 = 0;
  5441  0429  1306               	bcf	6,6	;volatile
  5442                           
  5443                           ;sht71.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5444  042A  2C2B               	nop2	;2 cycle nop
  5445  042B  2C2C               	nop2	;2 cycle nop
  5446                           
  5447                           ;sht71.c: 20: RB6 = 1;
  5448  042C  1283               	bcf	3,5	;RP0=0, select bank0
  5449  042D  1303               	bcf	3,6	;RP1=0, select bank0
  5450  042E  1706               	bsf	6,6	;volatile
  5451                           
  5452                           ;sht71.c: 21: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5453  042F  2C30               	nop2	;2 cycle nop
  5454  0430  2C31               	nop2	;2 cycle nop
  5455                           
  5456                           ;sht71.c: 22: RB7 = 0;
  5457  0431  1283               	bcf	3,5	;RP0=0, select bank0
  5458  0432  1303               	bcf	3,6	;RP1=0, select bank0
  5459  0433  1386               	bcf	6,7	;volatile
  5460                           
  5461                           ;sht71.c: 23: _delay((unsigned long)((1)*(8000000/4000000.0)));
  5462  0434  2C35               	nop2	;2 cycle nop
  5463                           
  5464                           ;sht71.c: 24: RB6 = 0;
  5465  0435  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0436  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0437  1306               	bcf	6,6	;volatile
  5468                           
  5469                           ;sht71.c: 25: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5470  0438  2C39               	nop2	;2 cycle nop
  5471  0439  2C3A               	nop2	;2 cycle nop
  5472                           
  5473                           ;sht71.c: 26: RB6 = 1;
  5474  043A  1283               	bcf	3,5	;RP0=0, select bank0
  5475  043B  1303               	bcf	3,6	;RP1=0, select bank0
  5476  043C  1706               	bsf	6,6	;volatile
  5477                           
  5478                           ;sht71.c: 27: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5479  043D  2C3E               	nop2	;2 cycle nop
  5480  043E  2C3F               	nop2	;2 cycle nop
  5481                           
  5482                           ;sht71.c: 28: RB7 = 1;
  5483  043F  1283               	bcf	3,5	;RP0=0, select bank0
  5484  0440  1303               	bcf	3,6	;RP1=0, select bank0
  5485  0441  1786               	bsf	6,7	;volatile
  5486                           
  5487                           ;sht71.c: 29: _delay((unsigned long)((1)*(8000000/4000000.0)));
  5488  0442  2C43               	nop2	;2 cycle nop
  5489                           
  5490                           ;sht71.c: 30: RB6 = 0;
  5491  0443  1283               	bcf	3,5	;RP0=0, select bank0
  5492  0444  1303               	bcf	3,6	;RP1=0, select bank0
  5493  0445  1306               	bcf	6,6	;volatile
  5494                           
  5495                           ;sht71.c: 31: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5496  0446  2C47               	nop2	;2 cycle nop
  5497  0447  2C48               	nop2	;2 cycle nop
  5498                           
  5499                           ;sht71.c: 32: RB7 = 0;
  5500  0448  1283               	bcf	3,5	;RP0=0, select bank0
  5501  0449  1303               	bcf	3,6	;RP1=0, select bank0
  5502  044A  1386               	bcf	6,7	;volatile
  5503                           
  5504                           ;sht71.c: 33: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5505  044B  2C4C               	nop2	;2 cycle nop
  5506  044C  2C4D               	nop2	;2 cycle nop
  5507  044D  0008               	return
  5508  044E                     __end_of_tranStartSHT71:	
  5509  044E                     __ptext18:	
  5510 ;; *************** function _writeByteSHT71 *****************
  5511 ;; Defined at:
  5512 ;;		line 168 in file "sht71.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  cmd             1    wreg     unsigned char 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  cmd             1    3[COMMON] unsigned char 
  5517 ;;  i               1    5[COMMON] unsigned char 
  5518 ;;  error           1    4[COMMON] unsigned char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      unsigned char 
  5521 ;; Registers used:
  5522 ;;		wreg, status,2, status,0
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/100
  5525 ;;		On exit  : 300/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5528 ;;      Params:         0       0       0       0       0
  5529 ;;      Locals:         3       0       0       0       0
  5530 ;;      Temps:          1       0       0       0       0
  5531 ;;      Totals:         4       0       0       0       0
  5532 ;;Total ram usage:        4 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		_measureSHT71
  5539 ;;		_readStatusRegSHT71
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           
  5544                           ;psect for function _writeByteSHT71
  5545  044E                     _writeByteSHT71:	
  5546                           
  5547                           ;incstack = 0
  5548                           ; Regs used in _writeByteSHT71: [wreg+status,2+status,0]
  5549                           ;writeByteSHT71@cmd stored from wreg
  5550  044E  00F4               	movwf	writeByteSHT71@cmd
  5551                           
  5552                           ;sht71.c: 170: TRISBbits.TRISB7 = 0;
  5553  044F  1683               	bsf	3,5	;RP0=1, select bank1
  5554  0450  1303               	bcf	3,6	;RP1=0, select bank1
  5555  0451  1386               	bcf	6,7	;volatile
  5556                           
  5557                           ;sht71.c: 172: for (i=0x80;i>0;i/=2)
  5558  0452  3080               	movlw	128
  5559  0453  00F6               	movwf	writeByteSHT71@i
  5560  0454                     l3747:	
  5561                           
  5562                           ;sht71.c: 173: {
  5563                           ;sht71.c: 174: if (i & cmd)
  5564  0454  0876               	movf	writeByteSHT71@i,w
  5565  0455  0574               	andwf	writeByteSHT71@cmd,w
  5566  0456  1903               	btfsc	3,2
  5567  0457  2C5B               	goto	l156
  5568                           
  5569                           ;sht71.c: 175: RB7 = 1;
  5570  0458  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0459  1786               	bsf	6,7	;volatile
  5572  045A  2C5D               	goto	l157
  5573  045B                     l156:	
  5574                           
  5575                           ;sht71.c: 176: else RB7 = 0;
  5576  045B  1283               	bcf	3,5	;RP0=0, select bank0
  5577  045C  1386               	bcf	6,7	;volatile
  5578  045D                     l157:	
  5579                           
  5580                           ;sht71.c: 177: RB6 = 1;
  5581  045D  1706               	bsf	6,6	;volatile
  5582                           
  5583                           ;sht71.c: 178: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5584  045E  3003               	movlw	3
  5585  045F  00F3               	movwf	??_writeByteSHT71
  5586  0460                     u7037:	
  5587  0460  0BF3               	decfsz	??_writeByteSHT71,f
  5588  0461  2C60               	goto	u7037
  5589                           
  5590                           ;sht71.c: 179: RB6 = 0;
  5591  0462  1283               	bcf	3,5	;RP0=0, select bank0
  5592  0463  1303               	bcf	3,6	;RP1=0, select bank0
  5593  0464  1306               	bcf	6,6	;volatile
  5594  0465  1003               	clrc
  5595  0466  0CF6               	rrf	writeByteSHT71@i,f
  5596  0467  0876               	movf	writeByteSHT71@i,w
  5597  0468  1D03               	btfss	3,2
  5598  0469  2C54               	goto	l3747
  5599                           
  5600                           ;sht71.c: 180: }
  5601                           ;sht71.c: 181: RB7 = 1;
  5602  046A  1786               	bsf	6,7	;volatile
  5603                           
  5604                           ;sht71.c: 182: TRISBbits.TRISB7 = 1;
  5605  046B  1683               	bsf	3,5	;RP0=1, select bank1
  5606  046C  1786               	bsf	6,7	;volatile
  5607                           
  5608                           ;sht71.c: 183: RB6 = 1;
  5609  046D  1283               	bcf	3,5	;RP0=0, select bank0
  5610  046E  1706               	bsf	6,6	;volatile
  5611                           
  5612                           ;sht71.c: 184: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5613  046F  2C70               	nop2	;2 cycle nop
  5614  0470  2C71               	nop2	;2 cycle nop
  5615                           
  5616                           ;sht71.c: 185: error = RB7;
  5617  0471  3000               	movlw	0
  5618  0472  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0473  1303               	bcf	3,6	;RP1=0, select bank0
  5620  0474  1B86               	btfsc	6,7	;volatile
  5621  0475  3001               	movlw	1
  5622  0476  00F5               	movwf	writeByteSHT71@error
  5623                           
  5624                           ;sht71.c: 186: _delay((unsigned long)((2)*(8000000/4000000.0)));
  5625  0477  2C78               	nop2	;2 cycle nop
  5626  0478  2C79               	nop2	;2 cycle nop
  5627                           
  5628                           ;sht71.c: 187: RB6 = 0;
  5629  0479  1283               	bcf	3,5	;RP0=0, select bank0
  5630  047A  1303               	bcf	3,6	;RP1=0, select bank0
  5631  047B  1306               	bcf	6,6	;volatile
  5632                           
  5633                           ;sht71.c: 188: return error;
  5634  047C  0875               	movf	writeByteSHT71@error,w
  5635  047D  0008               	return
  5636  047E                     __end_of_writeByteSHT71:	
  5637  047E                     __ptext20:	
  5638 ;; *************** function _connectionResetSHT71 *****************
  5639 ;; Defined at:
  5640 ;;		line 191 in file "sht71.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  i               1    2[COMMON] unsigned char 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0, pclath, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : B00/100
  5651 ;;		On exit  : 300/100
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5654 ;;      Params:         0       0       0       0       0
  5655 ;;      Locals:         1       0       0       0       0
  5656 ;;      Temps:          0       0       0       0       0
  5657 ;;      Totals:         1       0       0       0       0
  5658 ;;Total ram usage:        1 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    2
  5661 ;; This function calls:
  5662 ;;		_tranStartSHT71
  5663 ;; This function is called by:
  5664 ;;		_getResSHT71
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _connectionResetSHT71
  5670  047E                     _connectionResetSHT71:	
  5671                           
  5672                           ;sht71.c: 192: unsigned char i;
  5673                           ;sht71.c: 193: TRISBbits.TRISB7 = 0;
  5674                           
  5675                           ;incstack = 0
  5676                           ; Regs used in _connectionResetSHT71: [wreg+status,2+status,0+pclath+cstack]
  5677  047E  1386               	bcf	6,7	;volatile
  5678                           
  5679                           ;sht71.c: 194: RB7 = 1;
  5680  047F  1283               	bcf	3,5	;RP0=0, select bank0
  5681  0480  1786               	bsf	6,7	;volatile
  5682                           
  5683                           ;sht71.c: 195: RB6=0;
  5684  0481  1306               	bcf	6,6	;volatile
  5685                           
  5686                           ;sht71.c: 196: for(i=0;i<9;i++)
  5687  0482  01F3               	clrf	connectionResetSHT71@i
  5688  0483                     l161:	
  5689                           
  5690                           ;sht71.c: 197: { RB6 = 1;
  5691  0483  1283               	bcf	3,5	;RP0=0, select bank0
  5692  0484  1303               	bcf	3,6	;RP1=0, select bank0
  5693  0485  1706               	bsf	6,6	;volatile
  5694                           
  5695                           ;sht71.c: 198: _delay((unsigned long)((1)*(8000000/4000000.0)));
  5696  0486  2C87               	nop2	;2 cycle nop
  5697                           
  5698                           ;sht71.c: 199: RB6 = 0;
  5699  0487  1283               	bcf	3,5	;RP0=0, select bank0
  5700  0488  1303               	bcf	3,6	;RP1=0, select bank0
  5701  0489  1306               	bcf	6,6	;volatile
  5702                           
  5703                           ;sht71.c: 200: _delay((unsigned long)((1)*(8000000/4000000.0)));
  5704  048A  2C8B               	nop2	;2 cycle nop
  5705  048B  3009               	movlw	9
  5706  048C  0AF3               	incf	connectionResetSHT71@i,f
  5707  048D  0273               	subwf	connectionResetSHT71@i,w
  5708  048E  1C03               	skipc
  5709  048F  2C83               	goto	l161
  5710                           
  5711                           ;sht71.c: 201: }
  5712                           ;sht71.c: 202: tranStartSHT71();
  5713  0490  2424               	fcall	_tranStartSHT71
  5714                           
  5715                           ;sht71.c: 203: TRISBbits.TRISB7 = 1;
  5716  0491  1683               	bsf	3,5	;RP0=1, select bank1
  5717  0492  1303               	bcf	3,6	;RP1=0, select bank1
  5718  0493  1786               	bsf	6,7	;volatile
  5719  0494  0008               	return
  5720  0495                     __end_of_connectionResetSHT71:	
  5721  0495                     __ptext27:	
  5722 ;; *************** function _displayCO2 *****************
  5723 ;; Defined at:
  5724 ;;		line 130 in file "main.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;  co22            2   11[BANK0 ] unsigned int 
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;		None               void
  5731 ;; Registers used:
  5732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 300/0
  5735 ;;		On exit  : 300/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5738 ;;      Params:         0       2       0       0       0
  5739 ;;      Locals:         0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0
  5741 ;;      Totals:         0       2       0       0       0
  5742 ;;Total ram usage:        2 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    5
  5745 ;; This function calls:
  5746 ;;		_LcdSetCursor
  5747 ;;		_LcdWriteInt
  5748 ;;		_LcdWriteString
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _displayCO2
  5756  0495                     _displayCO2:	
  5757                           
  5758                           ;incstack = 0
  5759                           ; Regs used in _displayCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5760  0495  3001               	movlw	1
  5761                           
  5762                           ;main.c: 131: LcdSetCursor(1,1);
  5763  0496  01F7               	clrf	LcdSetCursor@b
  5764  0497  0AF7               	incf	LcdSetCursor@b,f
  5765  0498  274D  120A  118A   	fcall	_LcdSetCursor
  5766                           
  5767                           ;main.c: 132: LcdWriteString("CO2 in air      ");
  5768  049B  3099               	movlw	low (STR_8| (0+32768))
  5769  049C  00F8               	movwf	LcdWriteString@a
  5770  049D  3098               	movlw	high (STR_8| (0+32768))
  5771  049E  00F9               	movwf	LcdWriteString@a+1
  5772  049F  25EE  120A  118A   	fcall	_LcdWriteString
  5773                           
  5774                           ;main.c: 133: if(measure_co2)
  5775  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  5776  04A3  0832               	movf	_measure_co2^(0+128),w
  5777  04A4  1903               	btfsc	3,2
  5778  04A5  2CBD               	goto	l5777
  5779                           
  5780                           ;main.c: 134: {
  5781                           ;main.c: 135: LcdWriteInt(co22,2,1);
  5782  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  5783  04A7  082C               	movf	displayCO2@co22+1,w
  5784  04A8  00A5               	movwf	LcdWriteInt@i+1
  5785  04A9  082B               	movf	displayCO2@co22,w
  5786  04AA  00A4               	movwf	LcdWriteInt@i
  5787  04AB  3002               	movlw	2
  5788  04AC  00A6               	movwf	LcdWriteInt@row
  5789  04AD  01A7               	clrf	LcdWriteInt@column
  5790  04AE  0AA7               	incf	LcdWriteInt@column,f
  5791  04AF  2699  120A  118A   	fcall	_LcdWriteInt
  5792                           
  5793                           ;main.c: 136: LcdSetCursor(2,5);
  5794  04B2  3005               	movlw	5
  5795  04B3  00F7               	movwf	LcdSetCursor@b
  5796  04B4  3002               	movlw	2
  5797  04B5  274D  120A  118A   	fcall	_LcdSetCursor
  5798                           
  5799                           ;main.c: 137: LcdWriteString(" ppm        ");
  5800  04B8  3038               	movlw	low (STR_9| (0+32768))
  5801  04B9  00F8               	movwf	LcdWriteString@a
  5802  04BA  3099               	movlw	high (STR_9| (0+32768))
  5803  04BB  00F9               	movwf	LcdWriteString@a+1
  5804  04BC  2DEE               	ljmp	l5049
  5805  04BD                     l5777:	
  5806                           ;main.c: 138: }
  5807                           
  5808  04BD  3002               	movlw	2
  5809                           
  5810                           ;main.c: 139: else
  5811                           ;main.c: 140: {
  5812                           ;main.c: 141: LcdSetCursor(2,1);
  5813  04BE  01F7               	clrf	LcdSetCursor@b
  5814  04BF  0AF7               	incf	LcdSetCursor@b,f
  5815  04C0  274D  120A  118A   	fcall	_LcdSetCursor
  5816                           
  5817                           ;main.c: 142: LcdWriteString("Measuring...    ");
  5818  04C3  30AA               	movlw	low (STR_10| (0+32768))
  5819  04C4  00F8               	movwf	LcdWriteString@a
  5820  04C5  3098               	movlw	high (STR_10| (0+32768))
  5821  04C6  00F9               	movwf	LcdWriteString@a+1
  5822  04C7  2DEE               	ljmp	l5049
  5823  04C8                     __end_of_displayCO2:	
  5824  04C8                     __ptext3:	
  5825 ;; *************** function _menu *****************
  5826 ;; Defined at:
  5827 ;;		line 360 in file "main.c"
  5828 ;; Parameters:    Size  Location     Type
  5829 ;;		None
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;		None
  5832 ;; Return value:  Size  Location     Type
  5833 ;;		None               void
  5834 ;; Registers used:
  5835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 300/100
  5838 ;;		On exit  : 300/100
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5841 ;;      Params:         0       0       0       0       0
  5842 ;;      Locals:         0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0
  5844 ;;      Totals:         0       0       0       0       0
  5845 ;;Total ram usage:        0 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    7
  5848 ;; This function calls:
  5849 ;;		_LcdSetCursor
  5850 ;;		_LcdWriteString
  5851 ;;		___ftadd
  5852 ;;		___ftge
  5853 ;;		___ftsub
  5854 ;;		_manage_buttons
  5855 ;;		_menuHumi
  5856 ;;		_sprintf
  5857 ;; This function is called by:
  5858 ;;		_main
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function _menu
  5864  04C8                     _menu:	
  5865                           
  5866                           ;main.c: 362: sprintf(temperature, " %.1f", zeljena_temperatura);
  5867                           
  5868                           ;incstack = 0
  5869                           ; Regs used in _menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5870  04C8  3045               	movlw	low (STR_2| (0+32768))
  5871  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  5872  04CA  00D4               	movwf	sprintf@f
  5873  04CB  3099               	movlw	high (STR_2| (0+32768))
  5874  04CC  00D5               	movwf	sprintf@f+1
  5875  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  5876  04CE  0827               	movf	_zeljena_temperatura^(0+128),w
  5877  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  5878  04D0  00D6               	movwf	?_sprintf+2
  5879  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  5880  04D2  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  5881  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  5882  04D4  00D7               	movwf	?_sprintf+3
  5883  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  5884  04D6  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  5885  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  5886  04D8  00D8               	movwf	?_sprintf+4
  5887  04D9  30BF               	movlw	(low (_temperature| 0))& (0+255)
  5888  04DA  120A  158A  2134  120A  118A  	fcall	_sprintf
  5889  04DF  3001               	movlw	1
  5890                           
  5891                           ;main.c: 363: LcdSetCursor(1,1);
  5892  04E0  01F7               	clrf	LcdSetCursor@b
  5893  04E1  0AF7               	incf	LcdSetCursor@b,f
  5894  04E2  274D  120A  118A   	fcall	_LcdSetCursor
  5895                           
  5896                           ;main.c: 364: LcdWriteString("Set air temp.   ");
  5897  04E5  30BB               	movlw	low (STR_23| (0+32768))
  5898  04E6  00F8               	movwf	LcdWriteString@a
  5899  04E7  3098               	movlw	high (STR_23| (0+32768))
  5900  04E8  00F9               	movwf	LcdWriteString@a+1
  5901  04E9  25EE  120A  118A   	fcall	_LcdWriteString
  5902  04EC  3002               	movlw	2
  5903                           
  5904                           ;main.c: 365: LcdSetCursor(2,1);
  5905  04ED  01F7               	clrf	LcdSetCursor@b
  5906  04EE  0AF7               	incf	LcdSetCursor@b,f
  5907  04EF  274D  120A  118A   	fcall	_LcdSetCursor
  5908                           
  5909                           ;main.c: 366: LcdWriteString(temperature);
  5910  04F2  30BF               	movlw	(low (_temperature| 0))& (0+255)
  5911  04F3  00F8               	movwf	LcdWriteString@a
  5912  04F4  01F9               	clrf	LcdWriteString@a+1
  5913  04F5  25EE  120A  118A   	fcall	_LcdWriteString
  5914                           
  5915                           ;main.c: 367: LcdSetCursor(2,6);
  5916  04F8  3006               	movlw	6
  5917  04F9  00F7               	movwf	LcdSetCursor@b
  5918  04FA  3002               	movlw	2
  5919  04FB  274D  120A  118A   	fcall	_LcdSetCursor
  5920                           
  5921                           ;main.c: 368: LcdWriteString("         ");
  5922  04FE  3021               	movlw	low ((STR_7+3)| (0+32768))
  5923  04FF  00F8               	movwf	LcdWriteString@a
  5924  0500  3099               	movlw	high ((STR_7+3)| (0+32768))
  5925  0501  00F9               	movwf	LcdWriteString@a+1
  5926  0502  25EE  120A  118A   	fcall	_LcdWriteString
  5927  0505                     l5875:	
  5928                           ;main.c: 370: while(!ok_flag_humi)
  5929                           
  5930  0505  1683               	bsf	3,5	;RP0=1, select bank1
  5931  0506  0837               	movf	_ok_flag_humi^(0+128),w
  5932  0507  1D03               	btfss	3,2
  5933  0508  2DEA               	goto	l5877
  5934                           
  5935                           ;main.c: 371: {
  5936                           ;main.c: 372: manage_buttons();
  5937  0509  225D  120A  118A   	fcall	_manage_buttons
  5938                           
  5939                           ;main.c: 389: if(plus_flag)
  5940  050C  1683               	bsf	3,5	;RP0=1, select bank1
  5941  050D  1303               	bcf	3,6	;RP1=0, select bank1
  5942  050E  0838               	movf	_plus_flag^(0+128),w
  5943  050F  1903               	btfsc	3,2
  5944  0510  2D78               	goto	l5855
  5945                           
  5946                           ;main.c: 390: {
  5947                           ;main.c: 391: zeljena_temperatura += 0.1;
  5948  0511  30CD               	movlw	205
  5949  0512  1283               	bcf	3,5	;RP0=0, select bank0
  5950  0513  00C2               	movwf	___ftadd@f1
  5951  0514  30CC               	movlw	204
  5952  0515  00C3               	movwf	___ftadd@f1+1
  5953  0516  303D               	movlw	61
  5954  0517  00C4               	movwf	___ftadd@f1+2
  5955  0518  1683               	bsf	3,5	;RP0=1, select bank1
  5956  0519  0827               	movf	_zeljena_temperatura^(0+128),w
  5957  051A  1283               	bcf	3,5	;RP0=0, select bank0
  5958  051B  00C5               	movwf	___ftadd@f2
  5959  051C  1683               	bsf	3,5	;RP0=1, select bank1
  5960  051D  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  5961  051E  1283               	bcf	3,5	;RP0=0, select bank0
  5962  051F  00C6               	movwf	___ftadd@f2+1
  5963  0520  1683               	bsf	3,5	;RP0=1, select bank1
  5964  0521  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  5965  0522  1283               	bcf	3,5	;RP0=0, select bank0
  5966  0523  00C7               	movwf	___ftadd@f2+2
  5967  0524  160A  118A  263A  120A  118A  	fcall	___ftadd
  5968  0529  0842               	movf	?___ftadd,w
  5969  052A  1683               	bsf	3,5	;RP0=1, select bank1
  5970  052B  00A7               	movwf	_zeljena_temperatura^(0+128)
  5971  052C  1283               	bcf	3,5	;RP0=0, select bank0
  5972  052D  0843               	movf	?___ftadd+1,w
  5973  052E  1683               	bsf	3,5	;RP0=1, select bank1
  5974  052F  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  5975  0530  1283               	bcf	3,5	;RP0=0, select bank0
  5976  0531  0844               	movf	?___ftadd+2,w
  5977  0532  1683               	bsf	3,5	;RP0=1, select bank1
  5978  0533  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  5979                           
  5980                           ;main.c: 392: if(zeljena_temperatura > 40) zeljena_temperatura = 40;
  5981  0534  1283               	bcf	3,5	;RP0=0, select bank0
  5982  0535  3020               	movlw	32
  5983  0536  01CE               	clrf	___ftge@ff1
  5984  0537  00CF               	movwf	___ftge@ff1+1
  5985  0538  3042               	movlw	66
  5986  0539  00D0               	movwf	___ftge@ff1+2
  5987  053A  1683               	bsf	3,5	;RP0=1, select bank1
  5988  053B  0827               	movf	_zeljena_temperatura^(0+128),w
  5989  053C  1283               	bcf	3,5	;RP0=0, select bank0
  5990  053D  00D1               	movwf	___ftge@ff2
  5991  053E  1683               	bsf	3,5	;RP0=1, select bank1
  5992  053F  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  5993  0540  1283               	bcf	3,5	;RP0=0, select bank0
  5994  0541  00D2               	movwf	___ftge@ff2+1
  5995  0542  1683               	bsf	3,5	;RP0=1, select bank1
  5996  0543  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  5997  0544  1283               	bcf	3,5	;RP0=0, select bank0
  5998  0545  00D3               	movwf	___ftge@ff2+2
  5999  0546  120A  158A  25E5  120A  118A  	fcall	___ftge
  6000  054B  1803               	btfsc	3,0
  6001  054C  2D53               	goto	l5847
  6002  054D  1683               	bsf	3,5	;RP0=1, select bank1
  6003  054E  3020               	movlw	32
  6004  054F  01A7               	clrf	_zeljena_temperatura^(0+128)
  6005  0550  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  6006  0551  3042               	movlw	66
  6007  0552  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  6008  0553                     l5847:	
  6009                           
  6010                           ;main.c: 393: plus_flag = 0;
  6011  0553  1683               	bsf	3,5	;RP0=1, select bank1
  6012  0554  3045               	movlw	low (STR_2| (0+32768))
  6013  0555  01B8               	clrf	_plus_flag^(0+128)
  6014                           
  6015                           ;main.c: 395: sprintf(temperature, " %.1f", zeljena_temperatura);
  6016  0556  1283               	bcf	3,5	;RP0=0, select bank0
  6017  0557  00D4               	movwf	sprintf@f
  6018  0558  3099               	movlw	high (STR_2| (0+32768))
  6019  0559  00D5               	movwf	sprintf@f+1
  6020  055A  1683               	bsf	3,5	;RP0=1, select bank1
  6021  055B  0827               	movf	_zeljena_temperatura^(0+128),w
  6022  055C  1283               	bcf	3,5	;RP0=0, select bank0
  6023  055D  00D6               	movwf	?_sprintf+2
  6024  055E  1683               	bsf	3,5	;RP0=1, select bank1
  6025  055F  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  6026  0560  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0561  00D7               	movwf	?_sprintf+3
  6028  0562  1683               	bsf	3,5	;RP0=1, select bank1
  6029  0563  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  6030  0564  1283               	bcf	3,5	;RP0=0, select bank0
  6031  0565  00D8               	movwf	?_sprintf+4
  6032  0566  30BF               	movlw	(low (_temperature| 0))& (0+255)
  6033  0567  120A  158A  2134  120A  118A  	fcall	_sprintf
  6034  056C  3002               	movlw	2
  6035                           
  6036                           ;main.c: 396: LcdSetCursor(2,1);
  6037  056D  01F7               	clrf	LcdSetCursor@b
  6038  056E  0AF7               	incf	LcdSetCursor@b,f
  6039  056F  274D  120A  118A   	fcall	_LcdSetCursor
  6040                           
  6041                           ;main.c: 397: LcdWriteString(temperature);
  6042  0572  30BF               	movlw	(low (_temperature| 0))& (0+255)
  6043  0573  00F8               	movwf	LcdWriteString@a
  6044  0574  01F9               	clrf	LcdWriteString@a+1
  6045  0575  25EE  120A  118A   	fcall	_LcdWriteString
  6046  0578                     l5855:	
  6047                           
  6048                           ;main.c: 398: }
  6049                           ;main.c: 400: if(minus_flag)
  6050  0578  1683               	bsf	3,5	;RP0=1, select bank1
  6051  0579  0834               	movf	_minus_flag^(0+128),w
  6052  057A  1903               	btfsc	3,2
  6053  057B  2DE1               	goto	l5869
  6054                           
  6055                           ;main.c: 401: {
  6056                           ;main.c: 402: zeljena_temperatura -= 0.1;
  6057  057C  30CD               	movlw	205
  6058  057D  1283               	bcf	3,5	;RP0=0, select bank0
  6059  057E  00CE               	movwf	___ftsub@f2
  6060  057F  30CC               	movlw	204
  6061  0580  00CF               	movwf	___ftsub@f2+1
  6062  0581  303D               	movlw	61
  6063  0582  00D0               	movwf	___ftsub@f2+2
  6064  0583  1683               	bsf	3,5	;RP0=1, select bank1
  6065  0584  0827               	movf	_zeljena_temperatura^(0+128),w
  6066  0585  1283               	bcf	3,5	;RP0=0, select bank0
  6067  0586  00D1               	movwf	___ftsub@f1
  6068  0587  1683               	bsf	3,5	;RP0=1, select bank1
  6069  0588  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  6070  0589  1283               	bcf	3,5	;RP0=0, select bank0
  6071  058A  00D2               	movwf	___ftsub@f1+1
  6072  058B  1683               	bsf	3,5	;RP0=1, select bank1
  6073  058C  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  6074  058D  1283               	bcf	3,5	;RP0=0, select bank0
  6075  058E  00D3               	movwf	___ftsub@f1+2
  6076  058F  120A  158A  26B8  120A  118A  	fcall	___ftsub
  6077  0594  084E               	movf	?___ftsub,w
  6078  0595  1683               	bsf	3,5	;RP0=1, select bank1
  6079  0596  00A7               	movwf	_zeljena_temperatura^(0+128)
  6080  0597  1283               	bcf	3,5	;RP0=0, select bank0
  6081  0598  084F               	movf	?___ftsub+1,w
  6082  0599  1683               	bsf	3,5	;RP0=1, select bank1
  6083  059A  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  6084  059B  1283               	bcf	3,5	;RP0=0, select bank0
  6085  059C  0850               	movf	?___ftsub+2,w
  6086  059D  1683               	bsf	3,5	;RP0=1, select bank1
  6087  059E  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  6088                           
  6089                           ;main.c: 403: if(zeljena_temperatura < 15) zeljena_temperatura = 15;
  6090  059F  0827               	movf	_zeljena_temperatura^(0+128),w
  6091  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  6092  05A1  00CE               	movwf	___ftge@ff1
  6093  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  6094  05A3  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  6095  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  6096  05A5  00CF               	movwf	___ftge@ff1+1
  6097  05A6  1683               	bsf	3,5	;RP0=1, select bank1
  6098  05A7  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  6099  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  6100  05A9  00D0               	movwf	___ftge@ff1+2
  6101  05AA  3070               	movlw	112
  6102  05AB  01D1               	clrf	___ftge@ff2
  6103  05AC  00D2               	movwf	___ftge@ff2+1
  6104  05AD  3041               	movlw	65
  6105  05AE  00D3               	movwf	___ftge@ff2+2
  6106  05AF  120A  158A  25E5  120A  118A  	fcall	___ftge
  6107  05B4  1803               	btfsc	3,0
  6108  05B5  2DBC               	goto	l5861
  6109  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  6110  05B7  3070               	movlw	112
  6111  05B8  01A7               	clrf	_zeljena_temperatura^(0+128)
  6112  05B9  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  6113  05BA  3041               	movlw	65
  6114  05BB  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  6115  05BC                     l5861:	
  6116                           
  6117                           ;main.c: 404: minus_flag = 0;
  6118  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  6119  05BD  3045               	movlw	low (STR_2| (0+32768))
  6120  05BE  01B4               	clrf	_minus_flag^(0+128)
  6121                           
  6122                           ;main.c: 406: sprintf(temperature, " %.1f", zeljena_temperatura);
  6123  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  6124  05C0  00D4               	movwf	sprintf@f
  6125  05C1  3099               	movlw	high (STR_2| (0+32768))
  6126  05C2  00D5               	movwf	sprintf@f+1
  6127  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  6128  05C4  0827               	movf	_zeljena_temperatura^(0+128),w
  6129  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  6130  05C6  00D6               	movwf	?_sprintf+2
  6131  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  6132  05C8  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  6133  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  6134  05CA  00D7               	movwf	?_sprintf+3
  6135  05CB  1683               	bsf	3,5	;RP0=1, select bank1
  6136  05CC  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  6137  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  6138  05CE  00D8               	movwf	?_sprintf+4
  6139  05CF  30BF               	movlw	(low (_temperature| 0))& (0+255)
  6140  05D0  120A  158A  2134  120A  118A  	fcall	_sprintf
  6141  05D5  3002               	movlw	2
  6142                           
  6143                           ;main.c: 407: LcdSetCursor(2,1);
  6144  05D6  01F7               	clrf	LcdSetCursor@b
  6145  05D7  0AF7               	incf	LcdSetCursor@b,f
  6146  05D8  274D  120A  118A   	fcall	_LcdSetCursor
  6147                           
  6148                           ;main.c: 408: LcdWriteString(temperature);
  6149  05DB  30BF               	movlw	(low (_temperature| 0))& (0+255)
  6150  05DC  00F8               	movwf	LcdWriteString@a
  6151  05DD  01F9               	clrf	LcdWriteString@a+1
  6152  05DE  25EE  120A  118A   	fcall	_LcdWriteString
  6153  05E1                     l5869:	
  6154                           
  6155                           ;main.c: 409: }
  6156                           ;main.c: 418: if(ok_flag)
  6157  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  6158  05E2  0835               	movf	_ok_flag^(0+128),w
  6159  05E3  1903               	btfsc	3,2
  6160  05E4  2D05               	goto	l5875
  6161                           
  6162                           ;main.c: 419: {
  6163                           ;main.c: 420: ok_flag = 0;
  6164  05E5  01B5               	clrf	_ok_flag^(0+128)
  6165                           
  6166                           ;main.c: 421: menuHumi();
  6167  05E6  213B  120A  118A   	fcall	_menuHumi
  6168  05E9  2D05               	goto	l5875
  6169  05EA                     l5877:	
  6170                           
  6171                           ;main.c: 422: }
  6172                           ;main.c: 423: }
  6173                           ;main.c: 424: ok_flag = 0;
  6174  05EA  01B5               	clrf	_ok_flag^(0+128)
  6175                           
  6176                           ;main.c: 425: ok_flag_humi = 0;
  6177  05EB  01B7               	clrf	_ok_flag_humi^(0+128)
  6178                           
  6179                           ;main.c: 426: ok_flag_co2 = 0;
  6180  05EC  01B6               	clrf	_ok_flag_co2^(0+128)
  6181  05ED  0008               	return
  6182  05EE                     __end_of_menu:	
  6183  05EE                     __ptext53:	
  6184 ;; *************** function _LcdWriteString *****************
  6185 ;; Defined at:
  6186 ;;		line 106 in file "lcd.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  a               2    7[COMMON] PTR unsigned char 
  6189 ;;		 -> STR_24(10), STR_23(17), STR_19(9), STR_18(17), 
  6190 ;;		 -> STR_16(9), STR_15(11), STR_14(17), STR_13(13), 
  6191 ;;		 -> STR_12(17), STR_10(17), STR_9(13), STR_8(17), 
  6192 ;;		 -> STR_7(13), STR_6(17), humidity(5), STR_4(13), 
  6193 ;;		 -> STR_3(17), temperature(5), STR_1(14), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  i               2    3[BANK0 ] int 
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 300/0
  6202 ;;		On exit  : 300/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6205 ;;      Params:         2       0       0       0       0
  6206 ;;      Locals:         0       2       0       0       0
  6207 ;;      Temps:          0       3       0       0       0
  6208 ;;      Totals:         2       5       0       0       0
  6209 ;;Total ram usage:        7 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    3
  6212 ;; This function calls:
  6213 ;;		_LcdWriteChar
  6214 ;; This function is called by:
  6215 ;;		_getResSHT71
  6216 ;;		_displayAirTemp
  6217 ;;		_displayAirMoist
  6218 ;;		_displayCO2
  6219 ;;		_displaySoilTemp
  6220 ;;		_menuCO2
  6221 ;;		_menuHumi
  6222 ;;		_menu
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _LcdWriteString
  6228  05EE                     _LcdWriteString:	
  6229  05EE                     l5049:	
  6230                           ;incstack = 0
  6231                           ; Regs used in _LcdWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6232                           
  6233                           
  6234                           ;lcd.c: 108: int i;
  6235                           ;lcd.c: 109: for(i=0;a[i]!='\0';i++)
  6236  05EE  01A3               	clrf	LcdWriteString@i
  6237  05EF  01A4               	clrf	LcdWriteString@i+1
  6238  05F0                     l5055:	
  6239  05F0  27E2               	fcall	PL16	;call to abstracted procedure
  6240  05F1  160A  158A  2000  120A  118A  	fcall	stringtab
  6241  05F6  3A00               	xorlw	0
  6242  05F7  1903               	btfsc	3,2
  6243  05F8  0008               	return
  6244                           
  6245                           ;lcd.c: 110: LcdWriteChar(a[i]);
  6246  05F9  27E2               	fcall	PL16	;call to abstracted procedure
  6247  05FA  160A  158A  2000  120A  118A  	fcall	stringtab
  6248  05FF  277B  120A  118A   	fcall	_LcdWriteChar
  6249  0602  0AA3               	incf	LcdWriteString@i,f
  6250  0603  1903               	skipnz
  6251  0604  0AA4               	incf	LcdWriteString@i+1,f
  6252  0605  2DF0               	goto	l5055
  6253  0606                     __end_of_LcdWriteString:	
  6254  0606                     __ptext5:	
  6255 ;; *************** function _menuCO2 *****************
  6256 ;; Defined at:
  6257 ;;		line 273 in file "main.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 300/100
  6268 ;;		On exit  : 300/100
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6271 ;;      Params:         0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0
  6274 ;;      Totals:         0       0       0       0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    5
  6278 ;; This function calls:
  6279 ;;		_LcdSetCursor
  6280 ;;		_LcdWriteInt
  6281 ;;		_LcdWriteString
  6282 ;;		_manage_buttons
  6283 ;; This function is called by:
  6284 ;;		_menuHumi
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           
  6289                           ;psect for function _menuCO2
  6290  0606                     _menuCO2:	
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in _menuCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6294  0606  3001               	movlw	1
  6295                           
  6296                           ;main.c: 274: LcdSetCursor(1,1);
  6297  0607  01F7               	clrf	LcdSetCursor@b
  6298  0608  0AF7               	incf	LcdSetCursor@b,f
  6299  0609  274D  120A  118A   	fcall	_LcdSetCursor
  6300                           
  6301                           ;main.c: 275: LcdWriteString("Set CO2 in air  ");
  6302  060C  30DD               	movlw	low (STR_14| (0+32768))
  6303  060D  00F8               	movwf	LcdWriteString@a
  6304  060E  3098               	movlw	high (STR_14| (0+32768))
  6305  060F  00F9               	movwf	LcdWriteString@a+1
  6306  0610  25EE  120A  118A   	fcall	_LcdWriteString
  6307  0613  3002               	movlw	2
  6308                           
  6309                           ;main.c: 276: LcdSetCursor(2,1);
  6310  0614  01F7               	clrf	LcdSetCursor@b
  6311  0615  0AF7               	incf	LcdSetCursor@b,f
  6312  0616  274D  120A  118A   	fcall	_LcdSetCursor
  6313                           
  6314                           ;main.c: 277: LcdWriteString("          ");
  6315  0619  3020               	movlw	low ((STR_7+2)| (0+32768))
  6316  061A  00F8               	movwf	LcdWriteString@a
  6317  061B  3099               	movlw	high ((STR_7+2)| (0+32768))
  6318  061C  00F9               	movwf	LcdWriteString@a+1
  6319  061D  25EE  120A  118A   	fcall	_LcdWriteString
  6320  0620  3002               	movlw	2
  6321                           
  6322                           ;main.c: 278: LcdSetCursor(2,1);
  6323  0621  01F7               	clrf	LcdSetCursor@b
  6324  0622  0AF7               	incf	LcdSetCursor@b,f
  6325  0623  274D  120A  118A   	fcall	_LcdSetCursor
  6326                           
  6327                           ;main.c: 279: LcdWriteInt(zeljena_co2,2,1);
  6328  0626  087B               	movf	_zeljena_co2+1,w
  6329  0627  00A5               	movwf	LcdWriteInt@i+1
  6330  0628  087A               	movf	_zeljena_co2,w
  6331  0629  00A4               	movwf	LcdWriteInt@i
  6332  062A  3002               	movlw	2
  6333  062B  00A6               	movwf	LcdWriteInt@row
  6334  062C  01A7               	clrf	LcdWriteInt@column
  6335  062D  0AA7               	incf	LcdWriteInt@column,f
  6336  062E  2699  120A  118A   	fcall	_LcdWriteInt
  6337                           
  6338                           ;main.c: 280: LcdSetCursor(2,6);
  6339  0631  3006               	movlw	6
  6340  0632  00F7               	movwf	LcdSetCursor@b
  6341  0633  3002               	movlw	2
  6342  0634  274D  120A  118A   	fcall	_LcdSetCursor
  6343                           
  6344                           ;main.c: 281: LcdWriteString("        ");
  6345  0637  3022               	movlw	low ((STR_7+4)| (0+32768))
  6346  0638  00F8               	movwf	LcdWriteString@a
  6347  0639  3099               	movlw	high ((STR_7+4)| (0+32768))
  6348  063A  00F9               	movwf	LcdWriteString@a+1
  6349  063B  25EE  120A  118A   	fcall	_LcdWriteString
  6350  063E                     l5537:	
  6351                           ;main.c: 282: while(!ok_flag)
  6352                           
  6353  063E  1683               	bsf	3,5	;RP0=1, select bank1
  6354  063F  0835               	movf	_ok_flag^(0+128),w
  6355  0640  1D03               	btfss	3,2
  6356  0641  0008               	return
  6357                           
  6358                           ;main.c: 283: {
  6359                           ;main.c: 284: manage_buttons();
  6360  0642  225D  120A  118A   	fcall	_manage_buttons
  6361                           
  6362                           ;main.c: 286: if(plus_flag)
  6363  0645  1683               	bsf	3,5	;RP0=1, select bank1
  6364  0646  1303               	bcf	3,6	;RP1=0, select bank1
  6365  0647  0838               	movf	_plus_flag^(0+128),w
  6366  0648  1903               	btfsc	3,2
  6367  0649  2E6B               	goto	l5521
  6368                           
  6369                           ;main.c: 287: {
  6370                           ;main.c: 288: zeljena_co2 += 100;
  6371  064A  3064               	movlw	100
  6372  064B  07FA               	addwf	_zeljena_co2,f
  6373  064C  1803               	skipnc
  6374  064D  0AFB               	incf	_zeljena_co2+1,f
  6375                           
  6376                           ;main.c: 289: if(zeljena_co2 > 5000) zeljena_co2 = 5000;
  6377  064E  3013               	movlw	19
  6378  064F  027B               	subwf	_zeljena_co2+1,w
  6379  0650  3089               	movlw	137
  6380  0651  1903               	skipnz
  6381  0652  027A               	subwf	_zeljena_co2,w
  6382  0653  1C03               	skipc
  6383  0654  2E59               	goto	l5515
  6384  0655  3088               	movlw	136
  6385  0656  00FA               	movwf	_zeljena_co2
  6386  0657  3013               	movlw	19
  6387  0658  00FB               	movwf	_zeljena_co2+1
  6388  0659                     l5515:	
  6389  0659  3002               	movlw	2
  6390                           
  6391                           ;main.c: 290: plus_flag = 0;
  6392  065A  01B8               	clrf	_plus_flag^(0+128)
  6393  065B  01F7               	clrf	LcdSetCursor@b
  6394  065C  0AF7               	incf	LcdSetCursor@b,f
  6395  065D  274D  120A  118A   	fcall	_LcdSetCursor
  6396                           
  6397                           ;main.c: 293: LcdWriteInt(zeljena_co2,2,1);
  6398  0660  087B               	movf	_zeljena_co2+1,w
  6399  0661  00A5               	movwf	LcdWriteInt@i+1
  6400  0662  087A               	movf	_zeljena_co2,w
  6401  0663  00A4               	movwf	LcdWriteInt@i
  6402  0664  3002               	movlw	2
  6403  0665  00A6               	movwf	LcdWriteInt@row
  6404  0666  01A7               	clrf	LcdWriteInt@column
  6405  0667  0AA7               	incf	LcdWriteInt@column,f
  6406  0668  2699  120A  118A   	fcall	_LcdWriteInt
  6407  066B                     l5521:	
  6408                           
  6409                           ;main.c: 294: }
  6410                           ;main.c: 296: if(minus_flag)
  6411  066B  1683               	bsf	3,5	;RP0=1, select bank1
  6412  066C  0834               	movf	_minus_flag^(0+128),w
  6413  066D  1903               	btfsc	3,2
  6414  066E  2E90               	goto	l5533
  6415                           
  6416                           ;main.c: 297: {
  6417                           ;main.c: 298: zeljena_co2 -= 100;
  6418  066F  3064               	movlw	100
  6419  0670  02FA               	subwf	_zeljena_co2,f
  6420  0671  1C03               	skipc
  6421  0672  03FB               	decf	_zeljena_co2+1,f
  6422                           
  6423                           ;main.c: 299: if(zeljena_co2 < 300) zeljena_co2 = 300;
  6424  0673  3001               	movlw	1
  6425  0674  027B               	subwf	_zeljena_co2+1,w
  6426  0675  302C               	movlw	44
  6427  0676  1903               	skipnz
  6428  0677  027A               	subwf	_zeljena_co2,w
  6429  0678  1803               	skipnc
  6430  0679  2E7E               	goto	l5527
  6431  067A  302C               	movlw	44
  6432  067B  00FA               	movwf	_zeljena_co2
  6433  067C  3001               	movlw	1
  6434  067D  00FB               	movwf	_zeljena_co2+1
  6435  067E                     l5527:	
  6436  067E  3002               	movlw	2
  6437                           
  6438                           ;main.c: 300: minus_flag = 0;
  6439  067F  01B4               	clrf	_minus_flag^(0+128)
  6440  0680  01F7               	clrf	LcdSetCursor@b
  6441  0681  0AF7               	incf	LcdSetCursor@b,f
  6442  0682  274D  120A  118A   	fcall	_LcdSetCursor
  6443                           
  6444                           ;main.c: 303: LcdWriteInt(zeljena_co2,2,1);
  6445  0685  087B               	movf	_zeljena_co2+1,w
  6446  0686  00A5               	movwf	LcdWriteInt@i+1
  6447  0687  087A               	movf	_zeljena_co2,w
  6448  0688  00A4               	movwf	LcdWriteInt@i
  6449  0689  3002               	movlw	2
  6450  068A  00A6               	movwf	LcdWriteInt@row
  6451  068B  01A7               	clrf	LcdWriteInt@column
  6452  068C  0AA7               	incf	LcdWriteInt@column,f
  6453  068D  2699  120A  118A   	fcall	_LcdWriteInt
  6454  0690                     l5533:	
  6455                           
  6456                           ;main.c: 305: }
  6457                           ;main.c: 307: if(ok_flag)
  6458  0690  1683               	bsf	3,5	;RP0=1, select bank1
  6459  0691  0835               	movf	_ok_flag^(0+128),w
  6460  0692  1903               	btfsc	3,2
  6461  0693  2E3E               	goto	l5537
  6462                           
  6463                           ;main.c: 308: {
  6464                           ;main.c: 309: ok_flag = 1;
  6465  0694  01B5               	clrf	_ok_flag^(0+128)
  6466  0695  0AB5               	incf	_ok_flag^(0+128),f
  6467                           
  6468                           ;main.c: 310: ok_flag_co2 = 1;
  6469  0696  01B6               	clrf	_ok_flag_co2^(0+128)
  6470  0697  0AB6               	incf	_ok_flag_co2^(0+128),f
  6471  0698  2E3E               	goto	l5537
  6472  0699                     __end_of_menuCO2:	
  6473  0699                     __ptext28:	
  6474 ;; *************** function _LcdWriteInt *****************
  6475 ;; Defined at:
  6476 ;;		line 125 in file "lcd.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  i               2    4[BANK0 ] unsigned int 
  6479 ;;  row             1    6[BANK0 ] unsigned char 
  6480 ;;  column          1    7[BANK0 ] unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  ch              1   10[BANK0 ] unsigned char 
  6483 ;;  ch_manje_100    1    9[BANK0 ] unsigned char 
  6484 ;;  ch_manje_100    1    8[BANK0 ] unsigned char 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, pclath, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 300/0
  6491 ;;		On exit  : 300/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6494 ;;      Params:         0       4       0       0       0
  6495 ;;      Locals:         0       3       0       0       0
  6496 ;;      Temps:          0       0       0       0       0
  6497 ;;      Totals:         0       7       0       0       0
  6498 ;;Total ram usage:        7 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    4
  6501 ;; This function calls:
  6502 ;;		_LcdSetCursor
  6503 ;;		_LcdWriteChar
  6504 ;;		___lwdiv
  6505 ;;		___wmul
  6506 ;; This function is called by:
  6507 ;;		_displayCO2
  6508 ;;		_menuCO2
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _LcdWriteInt
  6514  0699                     _LcdWriteInt:	
  6515  0699  30E8               	movlw	232
  6516                           
  6517                           ;lcd.c: 126: unsigned char ch, ch_manje_1000=0, ch_manje_100=0;
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in _LcdWriteInt: [wreg+status,2+status,0+pclath+cstack]
  6521  069A  01A9               	clrf	LcdWriteInt@ch_manje_1000
  6522  069B  01A8               	clrf	LcdWriteInt@ch_manje_100
  6523                           
  6524                           ;lcd.c: 128: ch = i/1000;
  6525  069C  00F3               	movwf	___lwdiv@divisor
  6526  069D  3003               	movlw	3
  6527  069E  00F4               	movwf	___lwdiv@divisor+1
  6528  069F  0825               	movf	LcdWriteInt@i+1,w
  6529  06A0  00F6               	movwf	___lwdiv@dividend+1
  6530  06A1  0824               	movf	LcdWriteInt@i,w
  6531  06A2  00F5               	movwf	___lwdiv@dividend
  6532  06A3  27A0  120A  118A   	fcall	___lwdiv
  6533  06A6  0873               	movf	?___lwdiv,w
  6534  06A7  00AA               	movwf	LcdWriteInt@ch
  6535                           
  6536                           ;lcd.c: 129: if(ch == 0)
  6537  06A8  082A               	movf	LcdWriteInt@ch,w
  6538  06A9  1D03               	btfss	3,2
  6539  06AA  2EB5               	goto	l5067
  6540                           
  6541                           ;lcd.c: 130: {
  6542                           ;lcd.c: 131: ch_manje_1000 = 1;
  6543  06AB  01A9               	clrf	LcdWriteInt@ch_manje_1000
  6544  06AC  0AA9               	incf	LcdWriteInt@ch_manje_1000,f
  6545                           
  6546                           ;lcd.c: 132: LcdSetCursor(row,column);
  6547  06AD  0827               	movf	LcdWriteInt@column,w
  6548  06AE  00F7               	movwf	LcdSetCursor@b
  6549  06AF  0826               	movf	LcdWriteInt@row,w
  6550  06B0  274D  120A  118A   	fcall	_LcdSetCursor
  6551                           
  6552                           ;lcd.c: 133: LcdWriteChar(' ');
  6553  06B3  3020               	movlw	32
  6554  06B4  2EBD               	goto	L4
  6555  06B5                     l5067:	
  6556                           ;lcd.c: 134: }
  6557                           
  6558  06B5  3002               	movlw	2
  6559                           
  6560                           ;lcd.c: 135: else
  6561                           ;lcd.c: 136: {
  6562                           ;lcd.c: 137: LcdSetCursor(2,1);
  6563  06B6  01F7               	clrf	LcdSetCursor@b
  6564  06B7  0AF7               	incf	LcdSetCursor@b,f
  6565  06B8  274D  120A  118A   	fcall	_LcdSetCursor
  6566                           
  6567                           ;lcd.c: 138: LcdWriteChar(ch+'0');
  6568  06BB  082A               	movf	LcdWriteInt@ch,w
  6569  06BC  3E30               	addlw	48
  6570  06BD                     L4:	
  6571  06BD  277B               	fcall	_LcdWriteChar
  6572                           
  6573                           ;lcd.c: 139: }
  6574                           ;lcd.c: 142: i = (i - ch*1000);
  6575  06BE  082A               	movf	LcdWriteInt@ch,w
  6576  06BF  00F3               	movwf	___wmul@multiplier
  6577  06C0  30E8               	movlw	232
  6578  06C1  01F4               	clrf	___wmul@multiplier+1
  6579  06C2  00F5               	movwf	___wmul@multiplicand
  6580  06C3  3003               	movlw	3
  6581  06C4  00F6               	movwf	___wmul@multiplicand+1
  6582  06C5  120A  158A  2697  120A  118A  	fcall	___wmul
  6583  06CA  0873               	movf	?___wmul,w
  6584  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  6585  06CC  02A4               	subwf	LcdWriteInt@i,f
  6586  06CD  0874               	movf	?___wmul+1,w
  6587  06CE  1C03               	skipc
  6588  06CF  03A5               	decf	LcdWriteInt@i+1,f
  6589  06D0  02A5               	subwf	LcdWriteInt@i+1,f
  6590                           
  6591                           ;lcd.c: 143: ch = i/100;
  6592  06D1  3064               	movlw	100
  6593  06D2  00F3               	movwf	___lwdiv@divisor
  6594  06D3  01F4               	clrf	___lwdiv@divisor+1
  6595  06D4  0825               	movf	LcdWriteInt@i+1,w
  6596  06D5  00F6               	movwf	___lwdiv@dividend+1
  6597  06D6  0824               	movf	LcdWriteInt@i,w
  6598  06D7  00F5               	movwf	___lwdiv@dividend
  6599  06D8  27A0  120A  118A   	fcall	___lwdiv
  6600  06DB  0873               	movf	?___lwdiv,w
  6601  06DC  00AA               	movwf	LcdWriteInt@ch
  6602                           
  6603                           ;lcd.c: 144: if((ch == 0) && (ch_manje_1000))
  6604  06DD  082A               	movf	LcdWriteInt@ch,w
  6605  06DE  1D03               	btfss	3,2
  6606  06DF  2EEE               	goto	l5077
  6607  06E0  0829               	movf	LcdWriteInt@ch_manje_1000,w
  6608  06E1  1903               	btfsc	3,2
  6609  06E2  2EEE               	goto	l5077
  6610                           
  6611                           ;lcd.c: 145: {
  6612                           ;lcd.c: 146: ch_manje_100 = 1;
  6613  06E3  01A8               	clrf	LcdWriteInt@ch_manje_100
  6614  06E4  0AA8               	incf	LcdWriteInt@ch_manje_100,f
  6615                           
  6616                           ;lcd.c: 147: LcdSetCursor(row,column+1);
  6617  06E5  0827               	movf	LcdWriteInt@column,w
  6618  06E6  3E01               	addlw	1
  6619  06E7  00F7               	movwf	LcdSetCursor@b
  6620  06E8  0826               	movf	LcdWriteInt@row,w
  6621  06E9  274D  120A  118A   	fcall	_LcdSetCursor
  6622                           
  6623                           ;lcd.c: 148: LcdWriteChar(' ');
  6624  06EC  3020               	movlw	32
  6625  06ED  2EF5               	goto	L5
  6626  06EE                     l5077:	
  6627                           ;lcd.c: 149: }
  6628                           
  6629                           
  6630                           ;lcd.c: 150: else
  6631                           ;lcd.c: 151: {
  6632                           ;lcd.c: 152: LcdSetCursor(2,2);
  6633  06EE  3002               	movlw	2
  6634  06EF  00F7               	movwf	LcdSetCursor@b
  6635  06F0  274D  120A  118A   	fcall	_LcdSetCursor
  6636                           
  6637                           ;lcd.c: 153: LcdWriteChar(ch+'0');
  6638  06F3  082A               	movf	LcdWriteInt@ch,w
  6639  06F4  3E30               	addlw	48
  6640  06F5                     L5:	
  6641  06F5  277B               	fcall	_LcdWriteChar
  6642                           
  6643                           ;lcd.c: 154: }
  6644                           ;lcd.c: 157: i = (i - ch*100);
  6645  06F6  082A               	movf	LcdWriteInt@ch,w
  6646  06F7  00F3               	movwf	___wmul@multiplier
  6647  06F8  3064               	movlw	100
  6648  06F9  01F4               	clrf	___wmul@multiplier+1
  6649  06FA  00F5               	movwf	___wmul@multiplicand
  6650  06FB  01F6               	clrf	___wmul@multiplicand+1
  6651  06FC  120A  158A  2697  120A  118A  	fcall	___wmul
  6652  0701  0873               	movf	?___wmul,w
  6653  0702  1283               	bcf	3,5	;RP0=0, select bank0
  6654  0703  02A4               	subwf	LcdWriteInt@i,f
  6655  0704  0874               	movf	?___wmul+1,w
  6656  0705  1C03               	skipc
  6657  0706  03A5               	decf	LcdWriteInt@i+1,f
  6658  0707  02A5               	subwf	LcdWriteInt@i+1,f
  6659                           
  6660                           ;lcd.c: 158: ch = i/10;
  6661  0708  300A               	movlw	10
  6662  0709  00F3               	movwf	___lwdiv@divisor
  6663  070A  01F4               	clrf	___lwdiv@divisor+1
  6664  070B  0825               	movf	LcdWriteInt@i+1,w
  6665  070C  00F6               	movwf	___lwdiv@dividend+1
  6666  070D  0824               	movf	LcdWriteInt@i,w
  6667  070E  00F5               	movwf	___lwdiv@dividend
  6668  070F  27A0  120A  118A   	fcall	___lwdiv
  6669  0712  0873               	movf	?___lwdiv,w
  6670  0713  00AA               	movwf	LcdWriteInt@ch
  6671                           
  6672                           ;lcd.c: 159: if((ch == 0) && (ch_manje_1000) && (ch_manje_100))
  6673  0714  082A               	movf	LcdWriteInt@ch,w
  6674  0715  1D03               	btfss	3,2
  6675  0716  2F26               	goto	l5087
  6676  0717  0829               	movf	LcdWriteInt@ch_manje_1000,w
  6677  0718  1903               	btfsc	3,2
  6678  0719  2F26               	goto	l5087
  6679  071A  0828               	movf	LcdWriteInt@ch_manje_100,w
  6680  071B  1903               	btfsc	3,2
  6681  071C  2F26               	goto	l5087
  6682                           
  6683                           ;lcd.c: 160: {
  6684                           ;lcd.c: 161: LcdSetCursor(row,column+2);
  6685  071D  0827               	movf	LcdWriteInt@column,w
  6686  071E  3E02               	addlw	2
  6687  071F  00F7               	movwf	LcdSetCursor@b
  6688  0720  0826               	movf	LcdWriteInt@row,w
  6689  0721  274D  120A  118A   	fcall	_LcdSetCursor
  6690                           
  6691                           ;lcd.c: 162: LcdWriteChar(' ');
  6692  0724  3020               	movlw	32
  6693  0725  2F2E               	goto	L6
  6694  0726                     l5087:	
  6695                           ;lcd.c: 163: }
  6696                           
  6697                           
  6698                           ;lcd.c: 164: else
  6699                           ;lcd.c: 165: {
  6700                           ;lcd.c: 166: LcdSetCursor(2,3);
  6701  0726  3003               	movlw	3
  6702  0727  00F7               	movwf	LcdSetCursor@b
  6703  0728  3002               	movlw	2
  6704  0729  274D  120A  118A   	fcall	_LcdSetCursor
  6705                           
  6706                           ;lcd.c: 167: LcdWriteChar(ch+'0');
  6707  072C  082A               	movf	LcdWriteInt@ch,w
  6708  072D  3E30               	addlw	48
  6709  072E                     L6:	
  6710  072E  277B               	fcall	_LcdWriteChar
  6711                           
  6712                           ;lcd.c: 168: }
  6713                           ;lcd.c: 171: i = (i - ch*10);
  6714  072F  082A               	movf	LcdWriteInt@ch,w
  6715  0730  00F3               	movwf	___wmul@multiplier
  6716  0731  300A               	movlw	10
  6717  0732  01F4               	clrf	___wmul@multiplier+1
  6718  0733  00F5               	movwf	___wmul@multiplicand
  6719  0734  01F6               	clrf	___wmul@multiplicand+1
  6720  0735  120A  158A  2697  120A  118A  	fcall	___wmul
  6721  073A  0873               	movf	?___wmul,w
  6722  073B  1283               	bcf	3,5	;RP0=0, select bank0
  6723  073C  02A4               	subwf	LcdWriteInt@i,f
  6724  073D  0874               	movf	?___wmul+1,w
  6725  073E  1C03               	skipc
  6726  073F  03A5               	decf	LcdWriteInt@i+1,f
  6727  0740  02A5               	subwf	LcdWriteInt@i+1,f
  6728                           
  6729                           ;lcd.c: 172: ch = i;
  6730  0741  0824               	movf	LcdWriteInt@i,w
  6731  0742  00AA               	movwf	LcdWriteInt@ch
  6732                           
  6733                           ;lcd.c: 173: LcdSetCursor(row,column+3);
  6734  0743  0827               	movf	LcdWriteInt@column,w
  6735  0744  3E03               	addlw	3
  6736  0745  00F7               	movwf	LcdSetCursor@b
  6737  0746  0826               	movf	LcdWriteInt@row,w
  6738  0747  274D  120A  118A   	fcall	_LcdSetCursor
  6739                           
  6740                           ;lcd.c: 174: LcdWriteChar(ch+'0');
  6741  074A  082A               	movf	LcdWriteInt@ch,w
  6742  074B  3E30               	addlw	48
  6743  074C  2F7B               	ljmp	_LcdWriteChar
  6744  074D                     __end_of_LcdWriteInt:	
  6745  074D                     __ptext55:	
  6746 ;; *************** function _LcdSetCursor *****************
  6747 ;; Defined at:
  6748 ;;		line 45 in file "lcd.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  a               1    wreg     unsigned char 
  6751 ;;  b               1    6[COMMON] unsigned char 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  a               1    0[BANK0 ] unsigned char 
  6754 ;;  temp            1    3[BANK0 ] unsigned char 
  6755 ;;  y               1    2[BANK0 ] unsigned char 
  6756 ;;  z               1    1[BANK0 ] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;		None               void
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0, pclath, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 200/100
  6763 ;;		On exit  : 300/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6766 ;;      Params:         1       0       0       0       0
  6767 ;;      Locals:         0       4       0       0       0
  6768 ;;      Temps:          0       0       0       0       0
  6769 ;;      Totals:         1       4       0       0       0
  6770 ;;Total ram usage:        5 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    3
  6773 ;; This function calls:
  6774 ;;		_LcdCmd
  6775 ;; This function is called by:
  6776 ;;		_LcdWriteInt
  6777 ;;		_getResSHT71
  6778 ;;		_displayAirTemp
  6779 ;;		_displayAirMoist
  6780 ;;		_displayCO2
  6781 ;;		_displaySoilTemp
  6782 ;;		_menuCO2
  6783 ;;		_menuHumi
  6784 ;;		_menu
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           
  6789                           ;psect for function _LcdSetCursor
  6790  074D                     _LcdSetCursor:	
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in _LcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  6794                           ;LcdSetCursor@a stored from wreg
  6795  074D  1283               	bcf	3,5	;RP0=0, select bank0
  6796  074E  00A0               	movwf	LcdSetCursor@a
  6797                           
  6798                           ;lcd.c: 47: char temp,z,y;
  6799                           ;lcd.c: 48: if(a == 1)
  6800  074F  0B20               	decfsz	LcdSetCursor@a,w
  6801  0750  2F63               	goto	l4861
  6802                           
  6803                           ;lcd.c: 49: {
  6804                           ;lcd.c: 50: temp = 0x80 + b - 1;
  6805  0751  0877               	movf	LcdSetCursor@b,w
  6806  0752  3E7F               	addlw	127
  6807  0753  00A3               	movwf	LcdSetCursor@temp
  6808                           
  6809                           ;lcd.c: 51: z = temp>>4;
  6810  0754  0E23               	swapf	LcdSetCursor@temp,w
  6811  0755  390F               	andlw	15
  6812  0756  00A1               	movwf	LcdSetCursor@z
  6813                           
  6814                           ;lcd.c: 52: y = temp & 0x0F;
  6815  0757  0823               	movf	LcdSetCursor@temp,w
  6816  0758  00A2               	movwf	LcdSetCursor@y
  6817  0759  300F               	movlw	15
  6818  075A  05A2               	andwf	LcdSetCursor@y,f
  6819                           
  6820                           ;lcd.c: 53: LcdCmd(z);
  6821  075B  0821               	movf	LcdSetCursor@z,w
  6822  075C  160A  158A  23FB   	fcall	_LcdCmd
  6823                           
  6824                           ;lcd.c: 54: LcdCmd(y);
  6825  075F  0822               	movf	LcdSetCursor@y,w
  6826  0760  160A  158A  2BFB   	ljmp	_LcdCmd
  6827  0763                     l4861:	
  6828                           ;lcd.c: 55: }
  6829                           
  6830                           
  6831                           ;lcd.c: 56: else if(a == 2)
  6832  0763  3002               	movlw	2
  6833  0764  0620               	xorwf	LcdSetCursor@a,w
  6834  0765  1D03               	btfss	3,2
  6835  0766  0008               	return
  6836                           
  6837                           ;lcd.c: 57: {
  6838                           ;lcd.c: 58: temp = 0xC0 + b - 1;
  6839  0767  0877               	movf	LcdSetCursor@b,w
  6840  0768  3EBF               	addlw	191
  6841  0769  00A3               	movwf	LcdSetCursor@temp
  6842                           
  6843                           ;lcd.c: 59: z = temp>>4;
  6844  076A  0E23               	swapf	LcdSetCursor@temp,w
  6845  076B  390F               	andlw	15
  6846  076C  00A1               	movwf	LcdSetCursor@z
  6847                           
  6848                           ;lcd.c: 60: y = temp & 0x0F;
  6849  076D  0823               	movf	LcdSetCursor@temp,w
  6850  076E  00A2               	movwf	LcdSetCursor@y
  6851  076F  300F               	movlw	15
  6852  0770  05A2               	andwf	LcdSetCursor@y,f
  6853                           
  6854                           ;lcd.c: 61: LcdCmd(z);
  6855  0771  0821               	movf	LcdSetCursor@z,w
  6856  0772  160A  158A  23FB  120A  118A  	fcall	_LcdCmd
  6857                           
  6858                           ;lcd.c: 62: LcdCmd(y);
  6859  0777  0822               	movf	LcdSetCursor@y,w
  6860  0778  160A  158A  2BFB   	ljmp	_LcdCmd
  6861  077B                     __end_of_LcdSetCursor:	
  6862  077B                     __ptext54:	
  6863 ;; *************** function _LcdWriteChar *****************
  6864 ;; Defined at:
  6865 ;;		line 90 in file "lcd.c"
  6866 ;; Parameters:    Size  Location     Type
  6867 ;;  a               1    wreg     unsigned char 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  a               1    6[COMMON] unsigned char 
  6870 ;;  y               1    5[COMMON] unsigned char 
  6871 ;;  temp            1    4[COMMON] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;		None               void
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0, pclath, cstack
  6876 ;; Tracked objects:
  6877 ;;		On entry : 300/0
  6878 ;;		On exit  : 300/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6881 ;;      Params:         0       0       0       0       0
  6882 ;;      Locals:         3       0       0       0       0
  6883 ;;      Temps:          1       0       0       0       0
  6884 ;;      Totals:         4       0       0       0       0
  6885 ;;Total ram usage:        4 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    2
  6888 ;; This function calls:
  6889 ;;		_LcdPort
  6890 ;; This function is called by:
  6891 ;;		_LcdWriteString
  6892 ;;		_LcdWriteInt
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function _LcdWriteChar
  6898  077B                     _LcdWriteChar:	
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _LcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  6902                           ;LcdWriteChar@a stored from wreg
  6903  077B  00F7               	movwf	LcdWriteChar@a
  6904                           
  6905                           ;lcd.c: 92: char temp,y;
  6906                           ;lcd.c: 93: temp = a&0x0F;
  6907  077C  00F5               	movwf	LcdWriteChar@temp
  6908  077D  300F               	movlw	15
  6909  077E  05F5               	andwf	LcdWriteChar@temp,f
  6910                           
  6911                           ;lcd.c: 94: y = a&0xF0;
  6912  077F  0877               	movf	LcdWriteChar@a,w
  6913  0780  00F6               	movwf	LcdWriteChar@y
  6914  0781  30F0               	movlw	240
  6915  0782  05F6               	andwf	LcdWriteChar@y,f
  6916                           
  6917                           ;lcd.c: 95: RB5 = 1;
  6918  0783  1686               	bsf	6,5	;volatile
  6919                           
  6920                           ;lcd.c: 96: LcdPort(y>>4);
  6921  0784  0E76               	swapf	LcdWriteChar@y,w
  6922  0785  390F               	andlw	15
  6923  0786  27CA  120A  118A   	fcall	_LcdPort
  6924                           
  6925                           ;lcd.c: 97: RB4 = 1;
  6926  0789  1606               	bsf	6,4	;volatile
  6927                           
  6928                           ;lcd.c: 98: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6929  078A  301A               	movlw	26
  6930  078B  00F4               	movwf	??_LcdWriteChar
  6931  078C                     u7057:	
  6932  078C  0BF4               	decfsz	??_LcdWriteChar,f
  6933  078D  2F8C               	goto	u7057
  6934  078E  0000               	nop
  6935                           
  6936                           ;lcd.c: 99: RB4 = 0;
  6937  078F  1283               	bcf	3,5	;RP0=0, select bank0
  6938  0790  1303               	bcf	3,6	;RP1=0, select bank0
  6939  0791  1206               	bcf	6,4	;volatile
  6940                           
  6941                           ;lcd.c: 100: LcdPort(temp);
  6942  0792  0875               	movf	LcdWriteChar@temp,w
  6943  0793  27CA  120A  118A   	fcall	_LcdPort
  6944                           
  6945                           ;lcd.c: 101: RB4 = 1;
  6946  0796  1606               	bsf	6,4	;volatile
  6947                           
  6948                           ;lcd.c: 102: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6949  0797  301A               	movlw	26
  6950  0798  00F4               	movwf	??_LcdWriteChar
  6951  0799                     u7067:	
  6952  0799  0BF4               	decfsz	??_LcdWriteChar,f
  6953  079A  2F99               	goto	u7067
  6954  079B  0000               	nop
  6955                           
  6956                           ;lcd.c: 103: RB4 = 0;
  6957  079C  1283               	bcf	3,5	;RP0=0, select bank0
  6958  079D  1303               	bcf	3,6	;RP1=0, select bank0
  6959  079E  1206               	bcf	6,4	;volatile
  6960  079F  0008               	return
  6961  07A0                     __end_of_LcdWriteChar:	
  6962  07A0                     __ptext29:	
  6963 ;; *************** function ___lwdiv *****************
  6964 ;; Defined at:
  6965 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  divisor         2    2[COMMON] unsigned int 
  6968 ;;  dividend        2    4[COMMON] unsigned int 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  quotient        2    6[COMMON] unsigned int 
  6971 ;;  counter         1    8[COMMON] unsigned char 
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  2    2[COMMON] unsigned int 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0
  6976 ;; Tracked objects:
  6977 ;;		On entry : 300/0
  6978 ;;		On exit  : 300/0
  6979 ;;		Unchanged: 300/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6981 ;;      Params:         4       0       0       0       0
  6982 ;;      Locals:         3       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0
  6984 ;;      Totals:         7       0       0       0       0
  6985 ;;Total ram usage:        7 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    1
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_LcdWriteInt
  6992 ;;		_measureTGS4161
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function ___lwdiv
  6998  07A0                     ___lwdiv:	
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7002  07A0  01F7               	clrf	___lwdiv@quotient
  7003  07A1  01F8               	clrf	___lwdiv@quotient+1
  7004  07A2  0873               	movf	___lwdiv@divisor,w
  7005  07A3  0474               	iorwf	___lwdiv@divisor+1,w
  7006  07A4  1903               	btfsc	3,2
  7007  07A5  2FC5               	goto	l3351
  7008  07A6  01F9               	clrf	___lwdiv@counter
  7009  07A7                     L7:	
  7010  07A7  0AF9               	incf	___lwdiv@counter,f
  7011  07A8  1BF4               	btfsc	___lwdiv@divisor+1,7
  7012  07A9  2FAE               	goto	l3339
  7013  07AA  1003               	clrc
  7014  07AB  0DF3               	rlf	___lwdiv@divisor,f
  7015  07AC  0DF4               	rlf	___lwdiv@divisor+1,f
  7016  07AD  2FA7               	goto	L7
  7017  07AE                     l3339:	
  7018  07AE  1003               	clrc
  7019  07AF  0DF7               	rlf	___lwdiv@quotient,f
  7020  07B0  0DF8               	rlf	___lwdiv@quotient+1,f
  7021  07B1  0874               	movf	___lwdiv@divisor+1,w
  7022  07B2  0276               	subwf	___lwdiv@dividend+1,w
  7023  07B3  1D03               	skipz
  7024  07B4  2FB7               	goto	u3275
  7025  07B5  0873               	movf	___lwdiv@divisor,w
  7026  07B6  0275               	subwf	___lwdiv@dividend,w
  7027  07B7                     u3275:	
  7028  07B7  1C03               	skipc
  7029  07B8  2FC1               	goto	L8
  7030  07B9  0873               	movf	___lwdiv@divisor,w
  7031  07BA  02F5               	subwf	___lwdiv@dividend,f
  7032  07BB  0874               	movf	___lwdiv@divisor+1,w
  7033  07BC  1C03               	skipc
  7034  07BD  03F6               	decf	___lwdiv@dividend+1,f
  7035  07BE  02F6               	subwf	___lwdiv@dividend+1,f
  7036  07BF  1477               	bsf	___lwdiv@quotient,0
  7037  07C0  1003               	clrc
  7038  07C1                     L8:	
  7039  07C1  0CF4               	rrf	___lwdiv@divisor+1,f
  7040  07C2  0CF3               	rrf	___lwdiv@divisor,f
  7041  07C3  0BF9               	decfsz	___lwdiv@counter,f
  7042  07C4  2FAE               	goto	l3339
  7043  07C5                     l3351:	
  7044  07C5  0878               	movf	___lwdiv@quotient+1,w
  7045  07C6  00F4               	movwf	?___lwdiv+1
  7046  07C7  0877               	movf	___lwdiv@quotient,w
  7047  07C8  00F3               	movwf	?___lwdiv
  7048  07C9  0008               	return
  7049  07CA                     __end_of___lwdiv:	
  7050  07CA                     __ptext63:	
  7051 ;; *************** function _LcdPort *****************
  7052 ;; Defined at:
  7053 ;;		line 8 in file "lcd.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  a               1    wreg     unsigned char 
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  a               1    2[COMMON] unsigned char 
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg
  7062 ;; Tracked objects:
  7063 ;;		On entry : 200/0
  7064 ;;		On exit  : 300/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7067 ;;      Params:         0       0       0       0       0
  7068 ;;      Locals:         1       0       0       0       0
  7069 ;;      Temps:          0       0       0       0       0
  7070 ;;      Totals:         1       0       0       0       0
  7071 ;;Total ram usage:        1 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    1
  7074 ;; This function calls:
  7075 ;;		Nothing
  7076 ;; This function is called by:
  7077 ;;		_LcdCmd
  7078 ;;		_LcdInit
  7079 ;;		_LcdWriteChar
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _LcdPort
  7085  07CA                     _LcdPort:	
  7086                           
  7087                           ;incstack = 0
  7088                           ; Regs used in _LcdPort: [wreg]
  7089                           ;LcdPort@a stored from wreg
  7090  07CA  00F3               	movwf	LcdPort@a
  7091                           
  7092                           ;lcd.c: 10: if(a & 1)
  7093  07CB  1C73               	btfss	LcdPort@a,0
  7094  07CC  2FD0               	goto	l51
  7095                           
  7096                           ;lcd.c: 11: RB0 = 1;
  7097  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  7098  07CE  1406               	bsf	6,0	;volatile
  7099  07CF  2FD2               	goto	l52
  7100  07D0                     l51:	
  7101                           
  7102                           ;lcd.c: 12: else
  7103                           ;lcd.c: 13: RB0 = 0;
  7104  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  7105  07D1  1006               	bcf	6,0	;volatile
  7106  07D2                     l52:	
  7107                           
  7108                           ;lcd.c: 15: if(a & 2)
  7109  07D2  1CF3               	btfss	LcdPort@a,1
  7110  07D3  2FD6               	goto	l53
  7111                           
  7112                           ;lcd.c: 16: RB1 = 1;
  7113  07D4  1486               	bsf	6,1	;volatile
  7114  07D5  2FD7               	goto	l54
  7115  07D6                     l53:	
  7116                           
  7117                           ;lcd.c: 17: else
  7118                           ;lcd.c: 18: RB1 = 0;
  7119  07D6  1086               	bcf	6,1	;volatile
  7120  07D7                     l54:	
  7121                           
  7122                           ;lcd.c: 20: if(a & 4)
  7123  07D7  1D73               	btfss	LcdPort@a,2
  7124  07D8  2FDB               	goto	l55
  7125                           
  7126                           ;lcd.c: 21: RB2 = 1;
  7127  07D9  1506               	bsf	6,2	;volatile
  7128  07DA  2FDC               	goto	l56
  7129  07DB                     l55:	
  7130                           
  7131                           ;lcd.c: 22: else
  7132                           ;lcd.c: 23: RB2 = 0;
  7133  07DB  1106               	bcf	6,2	;volatile
  7134  07DC                     l56:	
  7135                           
  7136                           ;lcd.c: 25: if(a & 8)
  7137  07DC  1DF3               	btfss	LcdPort@a,3
  7138  07DD  2FE0               	goto	l57
  7139                           
  7140                           ;lcd.c: 26: RB3 = 1;
  7141  07DE  1586               	bsf	6,3	;volatile
  7142  07DF  0008               	return
  7143  07E0                     l57:	
  7144                           
  7145                           ;lcd.c: 27: else
  7146                           ;lcd.c: 28: RB3 = 0;
  7147  07E0  1186               	bcf	6,3	;volatile
  7148  07E1  0008               	return
  7149  07E2                     __end_of_LcdPort:	
  7150  07E2                     PL16:	
  7151  07E2  0823               	movf	LcdWriteString@i,w
  7152  07E3  0778               	addwf	LcdWriteString@a,w
  7153  07E4  00A1               	movwf	??_LcdWriteString+1
  7154  07E5  0879               	movf	LcdWriteString@a+1,w
  7155  07E6  00A0               	movwf	??_LcdWriteString
  7156  07E7  1803               	skipnc
  7157  07E8  0AA0               	incf	??_LcdWriteString,f
  7158  07E9  1BA3               	btfsc	LcdWriteString@i,7
  7159  07EA  03A0               	decf	??_LcdWriteString,f
  7160  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  7161  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  7162  07ED  0820               	movf	??_LcdWriteString,w
  7163  07EE  00A2               	movwf	??_LcdWriteString+2
  7164  07EF  00FF               	movwf	127
  7165  07F0  0821               	movf	??_LcdWriteString+1,w
  7166  07F1  0084               	movwf	4
  7167  07F2  0008               	return
  7168  07F3                     __end_ofPL16:	
  7169                           
  7170                           	psect	text32
  7171  0934                     __ptext32:	
  7172 ;; *************** function _sprintf *****************
  7173 ;; Defined at:
  7174 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;  sp              1    wreg     PTR unsigned char 
  7177 ;;		 -> humidity(5), temperature(5), 
  7178 ;;  f               2   52[BANK0 ] PTR const unsigned char 
  7179 ;;		 -> STR_26(6), STR_25(6), STR_22(6), STR_21(6), 
  7180 ;;		 -> STR_20(6), STR_17(6), STR_11(3), STR_5(6), 
  7181 ;;		 -> STR_2(6), 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  7184 ;;		 -> humidity(5), temperature(5), 
  7185 ;;  val             4   10[BANK1 ] unsigned long 
  7186 ;;  tmpval          4    6[BANK1 ] struct .
  7187 ;;  fval            3   18[BANK1 ] struct .
  7188 ;;  prec            2   16[BANK1 ] int 
  7189 ;;  exp             2   14[BANK1 ] int 
  7190 ;;  flag            2    4[BANK1 ] unsigned short 
  7191 ;;  cp              2    0        PTR const unsigned char 
  7192 ;;  len             2    0        unsigned int 
  7193 ;;  width           2    0        int 
  7194 ;;  c               1   22[BANK1 ] char 
  7195 ;;  ap              1    3[BANK1 ] PTR void [1]
  7196 ;;		 -> ?_sprintf(2), 
  7197 ;;  d               1    0        unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  2   52[BANK0 ] int 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 300/0
  7204 ;;		On exit  : B00/100
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7207 ;;      Params:         0       5       0       0       0
  7208 ;;      Locals:         0       0      23       0       0
  7209 ;;      Temps:          0       5       0       0       0
  7210 ;;      Totals:         0      10      23       0       0
  7211 ;;Total ram usage:       33 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    4
  7214 ;; This function calls:
  7215 ;;		___awdiv
  7216 ;;		___ftadd
  7217 ;;		___ftge
  7218 ;;		___ftmul
  7219 ;;		___ftneg
  7220 ;;		___ftsub
  7221 ;;		___fttol
  7222 ;;		___lldiv
  7223 ;;		___llmod
  7224 ;;		___lltoft
  7225 ;;		___wmul
  7226 ;;		__div_to_l_
  7227 ;;		__tdiv_to_l_
  7228 ;;		_fround
  7229 ;;		_isdigit
  7230 ;;		_scale
  7231 ;; This function is called by:
  7232 ;;		_displayAirTemp
  7233 ;;		_displayAirMoist
  7234 ;;		_displaySoilTemp
  7235 ;;		_menuHumi
  7236 ;;		_menu
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _sprintf
  7242  0934                     _sprintf:	
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7246                           ;sprintf@sp stored from wreg
  7247  0934  1683               	bsf	3,5	;RP0=1, select bank1
  7248  0935  00DF               	movwf	sprintf@sp^(0+128)
  7249                           
  7250                           ;doprnt.c: 494: va_list ap;
  7251                           ;doprnt.c: 499: signed char c;
  7252                           ;doprnt.c: 501: int width;
  7253                           ;doprnt.c: 504: int prec;
  7254                           ;doprnt.c: 508: unsigned short flag;
  7255                           ;doprnt.c: 515: char d;
  7256                           ;doprnt.c: 516: double fval;
  7257                           ;doprnt.c: 517: int exp;
  7258                           ;doprnt.c: 523: union {
  7259                           ;doprnt.c: 524: unsigned long vd;
  7260                           ;doprnt.c: 525: double integ;
  7261                           ;doprnt.c: 526: } tmpval;
  7262                           ;doprnt.c: 528: unsigned long val;
  7263                           ;doprnt.c: 529: unsigned len;
  7264                           ;doprnt.c: 530: const char * cp;
  7265                           ;doprnt.c: 533: *ap = __va_start();
  7266  0936  3056               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  7267  0937  00CD               	movwf	sprintf@ap^(0+128)
  7268  0938                     l5487:	
  7269                           ;doprnt.c: 536: while(c = *f++) {
  7270                           
  7271  0938  2743               	fcall	PL36	;call to abstracted procedure
  7272  0939  160A  158A  2000  120A  158A  	fcall	stringtab
  7273  093E  1683               	bsf	3,5	;RP0=1, select bank1
  7274  093F  00E0               	movwf	sprintf@c^(0+128)
  7275  0940  0860               	movf	sprintf@c^(0+128),w
  7276  0941  1903               	btfsc	3,2
  7277  0942  2DE0               	goto	l5489
  7278                           
  7279                           ;doprnt.c: 538: if(c != '%')
  7280  0943  3025               	movlw	37
  7281  0944  0660               	xorwf	sprintf@c^(0+128),w
  7282  0945  1903               	btfsc	3,2
  7283  0946  294E               	goto	l5259
  7284                           
  7285                           ;doprnt.c: 540: {
  7286                           ;doprnt.c: 541: ((*sp++ = (c)));
  7287  0947  085F               	movf	sprintf@sp^(0+128),w
  7288  0948  0084               	movwf	4
  7289  0949  0860               	movf	sprintf@c^(0+128),w
  7290  094A  1383               	bcf	3,7	;select IRP bank0
  7291  094B  0080               	movwf	0
  7292  094C  0ADF               	incf	sprintf@sp^(0+128),f
  7293                           
  7294                           ;doprnt.c: 542: continue;
  7295  094D  2938               	goto	l5487
  7296  094E                     l5259:	
  7297                           
  7298                           ;doprnt.c: 543: }
  7299                           ;doprnt.c: 548: flag = 0;
  7300  094E  01CE               	clrf	sprintf@flag^(0+128)
  7301  094F  01CF               	clrf	(sprintf@flag+1)^(0+128)
  7302                           
  7303                           ;doprnt.c: 611: if(*f == '.') {
  7304  0950  278A               	fcall	PL96	;call to abstracted procedure
  7305  0951  160A  158A  2000  120A  158A  	fcall	stringtab
  7306  0956  3A2E               	xorlw	46
  7307  0957  1D03               	skipz
  7308  0958  2995               	goto	l5275
  7309                           
  7310                           ;doprnt.c: 612: flag |= 0x4000;
  7311  0959  1683               	bsf	3,5	;RP0=1, select bank1
  7312  095A  174F               	bsf	(sprintf@flag^(0+128)+1),6
  7313                           
  7314                           ;doprnt.c: 613: f++;
  7315  095B  1283               	bcf	3,5	;RP0=0, select bank0
  7316  095C  0AD4               	incf	sprintf@f,f
  7317  095D  1903               	skipnz
  7318  095E  0AD5               	incf	sprintf@f+1,f
  7319                           
  7320                           ;doprnt.c: 620: {
  7321                           ;doprnt.c: 621: prec = 0;
  7322  095F  1683               	bsf	3,5	;RP0=1, select bank1
  7323  0960  01DA               	clrf	sprintf@prec^(0+128)
  7324  0961  01DB               	clrf	(sprintf@prec+1)^(0+128)
  7325  0962                     l5273:	
  7326                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7327                           
  7328  0962  278A               	fcall	PL96	;call to abstracted procedure
  7329  0963  160A  158A  2000  120A  158A  	fcall	stringtab
  7330  0968  27F2  120A  158A   	fcall	_isdigit
  7331  096B  1C03               	btfss	3,0
  7332  096C  299C               	goto	l5281
  7333                           
  7334                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7335  096D  1683               	bsf	3,5	;RP0=1, select bank1
  7336  096E  085B               	movf	(sprintf@prec+1)^(0+128),w
  7337  096F  00F4               	movwf	___wmul@multiplier+1
  7338  0970  085A               	movf	sprintf@prec^(0+128),w
  7339  0971  00F3               	movwf	___wmul@multiplier
  7340  0972  300A               	movlw	10
  7341  0973  00F5               	movwf	___wmul@multiplicand
  7342  0974  01F6               	clrf	___wmul@multiplicand+1
  7343  0975  2697  120A  158A   	fcall	___wmul
  7344  0978  278A               	fcall	PL96	;call to abstracted procedure
  7345  0979  160A  158A  2000  120A  158A  	fcall	stringtab
  7346  097E  0773               	addwf	?___wmul,w
  7347  097F  00D9               	movwf	??_sprintf
  7348  0980  3000               	movlw	0
  7349  0981  1803               	skipnc
  7350  0982  3001               	movlw	1
  7351  0983  0774               	addwf	?___wmul+1,w
  7352  0984  00DA               	movwf	??_sprintf+1
  7353  0985  0859               	movf	??_sprintf,w
  7354  0986  3ED0               	addlw	208
  7355  0987  1683               	bsf	3,5	;RP0=1, select bank1
  7356  0988  00DA               	movwf	sprintf@prec^(0+128)
  7357  0989  1283               	bcf	3,5	;RP0=0, select bank0
  7358  098A  085A               	movf	??_sprintf+1,w
  7359  098B  1803               	skipnc
  7360  098C  3E01               	addlw	1
  7361  098D  3EFF               	addlw	255
  7362  098E  1683               	bsf	3,5	;RP0=1, select bank1
  7363  098F  00DB               	movwf	(sprintf@prec+1)^(0+128)
  7364  0990  1283               	bcf	3,5	;RP0=0, select bank0
  7365  0991  0AD4               	incf	sprintf@f,f
  7366  0992  1903               	skipnz
  7367  0993  0AD5               	incf	sprintf@f+1,f
  7368  0994  2962               	goto	l5273
  7369  0995                     l5275:	
  7370                           
  7371                           ;doprnt.c: 626: prec = 0;
  7372  0995  1683               	bsf	3,5	;RP0=1, select bank1
  7373  0996  01DA               	clrf	sprintf@prec^(0+128)
  7374  0997  01DB               	clrf	(sprintf@prec+1)^(0+128)
  7375                           
  7376                           ;doprnt.c: 628: flag |= 0x1000;
  7377  0998  164F               	bsf	(sprintf@flag^(0+128)+1),4
  7378  0999  299C               	goto	l5281
  7379  099A                     l534:	
  7380                           ;doprnt.c: 662: case 'f':
  7381                           
  7382                           
  7383                           ;doprnt.c: 663: flag |= 0x400;
  7384  099A  154F               	bsf	(sprintf@flag^(0+128)+1),2
  7385                           
  7386                           ;doprnt.c: 664: break;
  7387  099B  29B1               	goto	l5283
  7388  099C                     l5281:	
  7389  099C  2743               	fcall	PL36	;call to abstracted procedure
  7390  099D  160A  158A  2000  120A  158A  	fcall	stringtab
  7391  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  7392  09A3  00E0               	movwf	sprintf@c^(0+128)
  7393                           
  7394                           ; Switch size 1, requested type "space"
  7395                           ; Number of cases is 4, Range of values is 0 to 105
  7396                           ; switch strategies available:
  7397                           ; Name         Instructions Cycles
  7398                           ; simple_byte           13     7 (average)
  7399                           ; jumptable            260     6 (fixed)
  7400                           ;	Chosen strategy is simple_byte
  7401  09A4  3A00               	xorlw	0	; case 0
  7402  09A5  1903               	skipnz
  7403  09A6  2DE0               	goto	l5489
  7404  09A7  3A64               	xorlw	100	; case 100
  7405  09A8  1903               	skipnz
  7406  09A9  29B1               	goto	l5283
  7407  09AA  3A02               	xorlw	2	; case 102
  7408  09AB  1903               	skipnz
  7409  09AC  299A               	goto	l534
  7410  09AD  3A0F               	xorlw	15	; case 105
  7411  09AE  1903               	skipnz
  7412  09AF  29B1               	goto	l5283
  7413  09B0  2938               	goto	l5487
  7414  09B1                     l5283:	
  7415                           
  7416                           ;doprnt.c: 825: if(flag & (0x700)) {
  7417  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  7418  09B2  3007               	movlw	7
  7419  09B3  01D9               	clrf	??_sprintf
  7420  09B4  1683               	bsf	3,5	;RP0=1, select bank1
  7421  09B5  054F               	andwf	(sprintf@flag+1)^(0+128),w
  7422  09B6  1283               	bcf	3,5	;RP0=0, select bank0
  7423  09B7  00DA               	movwf	??_sprintf+1
  7424  09B8  0459               	iorwf	??_sprintf,w
  7425  09B9  1903               	btfsc	3,2
  7426  09BA  2CE8               	goto	l5435
  7427                           
  7428                           ;doprnt.c: 827: if(flag & 0x1000)
  7429  09BB  1683               	bsf	3,5	;RP0=1, select bank1
  7430  09BC  1E4F               	btfss	(sprintf@flag+1)^(0+128),4
  7431  09BD  29C1               	goto	l5289
  7432                           
  7433                           ;doprnt.c: 829: prec = 6;
  7434  09BE  3006               	movlw	6
  7435  09BF  00DA               	movwf	sprintf@prec^(0+128)
  7436  09C0  01DB               	clrf	(sprintf@prec+1)^(0+128)
  7437  09C1                     l5289:	
  7438                           
  7439                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7440  09C1  084D               	movf	sprintf@ap^(0+128),w
  7441  09C2  0084               	movwf	4
  7442  09C3  1383               	bcf	3,7	;select IRP bank0
  7443  09C4  0800               	movf	0,w
  7444  09C5  00DC               	movwf	sprintf@fval^(0+128)
  7445  09C6  0A84               	incf	4,f
  7446  09C7  0800               	movf	0,w
  7447  09C8  00DD               	movwf	(sprintf@fval+1)^(0+128)
  7448  09C9  0A84               	incf	4,f
  7449  09CA  0800               	movf	0,w
  7450  09CB  00DE               	movwf	(sprintf@fval+2)^(0+128)
  7451  09CC  3003               	movlw	3
  7452  09CD  07CD               	addwf	sprintf@ap^(0+128),f
  7453                           
  7454                           ;doprnt.c: 831: if(fval < 0.0) {
  7455  09CE  085C               	movf	sprintf@fval^(0+128),w
  7456  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7457  09D0  00CE               	movwf	___ftge@ff1
  7458  09D1  1683               	bsf	3,5	;RP0=1, select bank1
  7459  09D2  085D               	movf	(sprintf@fval+1)^(0+128),w
  7460  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  7461  09D4  00CF               	movwf	___ftge@ff1+1
  7462  09D5  1683               	bsf	3,5	;RP0=1, select bank1
  7463  09D6  085E               	movf	(sprintf@fval+2)^(0+128),w
  7464  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  7465  09D8  00D0               	movwf	___ftge@ff1+2
  7466  09D9  01D1               	clrf	___ftge@ff2
  7467  09DA  01D2               	clrf	___ftge@ff2+1
  7468  09DB  01D3               	clrf	___ftge@ff2+2
  7469  09DC  25E5  120A  158A   	fcall	___ftge
  7470  09DF  1803               	btfsc	3,0
  7471  09E0  29F3               	goto	l5299
  7472                           
  7473                           ;doprnt.c: 832: fval = -fval;
  7474  09E1  1683               	bsf	3,5	;RP0=1, select bank1
  7475  09E2  085C               	movf	sprintf@fval^(0+128),w
  7476  09E3  00F3               	movwf	___ftneg@f1
  7477  09E4  085D               	movf	(sprintf@fval+1)^(0+128),w
  7478  09E5  00F4               	movwf	___ftneg@f1+1
  7479  09E6  085E               	movf	(sprintf@fval+2)^(0+128),w
  7480  09E7  00F5               	movwf	___ftneg@f1+2
  7481  09E8  26B0  120A  158A   	fcall	___ftneg
  7482  09EB  0873               	movf	?___ftneg,w
  7483  09EC  00DC               	movwf	sprintf@fval^(0+128)
  7484  09ED  0874               	movf	?___ftneg+1,w
  7485  09EE  00DD               	movwf	(sprintf@fval+1)^(0+128)
  7486  09EF  0875               	movf	?___ftneg+2,w
  7487  09F0  00DE               	movwf	(sprintf@fval+2)^(0+128)
  7488                           
  7489                           ;doprnt.c: 833: flag |= 0x03;
  7490  09F1  3003               	movlw	3
  7491  09F2  04CE               	iorwf	sprintf@flag^(0+128),f
  7492  09F3                     l5299:	
  7493                           
  7494                           ;doprnt.c: 834: }
  7495                           ;doprnt.c: 835: exp = 0;
  7496  09F3  1683               	bsf	3,5	;RP0=1, select bank1
  7497  09F4  01D8               	clrf	sprintf@exp^(0+128)
  7498  09F5  01D9               	clrf	(sprintf@exp+1)^(0+128)
  7499                           
  7500                           ;doprnt.c: 836: if( fval!=0) {
  7501  09F6  085E               	movf	(sprintf@fval+2)^(0+128),w
  7502  09F7  045D               	iorwf	(sprintf@fval+1)^(0+128),w
  7503  09F8  045C               	iorwf	sprintf@fval^(0+128),w
  7504  09F9  1903               	skipnz
  7505  09FA  2A97               	goto	l5331
  7506                           
  7507                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7508  09FB  30DC               	movlw	low (sprintf@fval| 0)
  7509  09FC  0084               	movwf	4
  7510  09FD  1383               	bcf	3,7	;select IRP bank1
  7511  09FE  277C  120A  158A   	fcall	PL88	;call to abstracted procedure
  7512  0A01  0A84               	incf	4,f
  7513  0A02  0800               	movf	0,w
  7514  0A03  00DB               	movwf	??_sprintf+2
  7515  0A04  0A84               	incf	4,f
  7516  0A05  0800               	movf	0,w
  7517  0A06  00DC               	movwf	??_sprintf+3
  7518  0A07  300F               	movlw	15
  7519  0A08                     u5995:	
  7520  0A08  1003               	clrc
  7521  0A09  0CDC               	rrf	??_sprintf+3,f
  7522  0A0A  0CDB               	rrf	??_sprintf+2,f
  7523  0A0B  0CDA               	rrf	??_sprintf+1,f
  7524  0A0C  0CD9               	rrf	??_sprintf,f
  7525  0A0D  3EFF               	addlw	-1
  7526  0A0E  1D03               	skipz
  7527  0A0F  2A08               	goto	u5995
  7528  0A10  085A               	movf	??_sprintf+1,w
  7529  0A11  1683               	bsf	3,5	;RP0=1, select bank1
  7530  0A12  00D9               	movwf	(sprintf@exp+1)^(0+128)
  7531  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  7532  0A14  0859               	movf	??_sprintf,w
  7533  0A15  1683               	bsf	3,5	;RP0=1, select bank1
  7534  0A16  00D8               	movwf	sprintf@exp^(0+128)
  7535  0A17  3082               	movlw	-126
  7536  0A18  01D9               	clrf	(sprintf@exp+1)^(0+128)
  7537  0A19  07D8               	addwf	sprintf@exp^(0+128),f
  7538  0A1A  1C03               	skipc
  7539  0A1B  03D9               	decf	(sprintf@exp+1)^(0+128),f
  7540                           
  7541                           ;doprnt.c: 838: exp--;
  7542  0A1C  30FF               	movlw	-1
  7543  0A1D  07D8               	addwf	sprintf@exp^(0+128),f
  7544  0A1E  1C03               	skipc
  7545  0A1F  03D9               	decf	(sprintf@exp+1)^(0+128),f
  7546                           
  7547                           ;doprnt.c: 839: exp *= 3;
  7548  0A20  3003               	movlw	3
  7549  0A21  00F3               	movwf	___wmul@multiplier
  7550  0A22  01F4               	clrf	___wmul@multiplier+1
  7551  0A23  0859               	movf	(sprintf@exp+1)^(0+128),w
  7552  0A24  00F6               	movwf	___wmul@multiplicand+1
  7553  0A25  0858               	movf	sprintf@exp^(0+128),w
  7554  0A26  00F5               	movwf	___wmul@multiplicand
  7555  0A27  2697               	fcall	___wmul
  7556  0A28  0874               	movf	?___wmul+1,w
  7557  0A29  1683               	bsf	3,5	;RP0=1, select bank1
  7558  0A2A  00D9               	movwf	(sprintf@exp+1)^(0+128)
  7559  0A2B  0873               	movf	?___wmul,w
  7560  0A2C  00D8               	movwf	sprintf@exp^(0+128)
  7561                           
  7562                           ;doprnt.c: 840: exp /= 10;
  7563  0A2D  300A               	movlw	10
  7564  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  7565  0A2F  00A0               	movwf	___awdiv@divisor
  7566  0A30  01A1               	clrf	___awdiv@divisor+1
  7567  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  7568  0A32  0859               	movf	(sprintf@exp+1)^(0+128),w
  7569  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  7570  0A34  00A3               	movwf	___awdiv@dividend+1
  7571  0A35  1683               	bsf	3,5	;RP0=1, select bank1
  7572  0A36  0858               	movf	sprintf@exp^(0+128),w
  7573  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  7574  0A38  00A2               	movwf	___awdiv@dividend
  7575  0A39  160A  118A  242D  120A  158A  	fcall	___awdiv
  7576  0A3E  0821               	movf	?___awdiv+1,w
  7577  0A3F  1683               	bsf	3,5	;RP0=1, select bank1
  7578  0A40  00D9               	movwf	(sprintf@exp+1)^(0+128)
  7579  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  7580  0A42  0820               	movf	?___awdiv,w
  7581  0A43  1683               	bsf	3,5	;RP0=1, select bank1
  7582  0A44  00D8               	movwf	sprintf@exp^(0+128)
  7583                           
  7584                           ;doprnt.c: 841: if(exp < 0)
  7585  0A45  1FD9               	btfss	(sprintf@exp+1)^(0+128),7
  7586  0A46  2A4B               	goto	l5319
  7587                           
  7588                           ;doprnt.c: 842: exp--;
  7589  0A47  30FF               	movlw	-1
  7590  0A48  07D8               	addwf	sprintf@exp^(0+128),f
  7591  0A49  1C03               	skipc
  7592  0A4A  03D9               	decf	(sprintf@exp+1)^(0+128),f
  7593  0A4B                     l5319:	
  7594                           
  7595                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7596  0A4B  0358               	decf	sprintf@exp^(0+128),w
  7597  0A4C  3AFF               	xorlw	255
  7598  0A4D  160A  118A  229B  120A  158A  	fcall	_scale
  7599                           
  7600                           ;doprnt.c: 847: tmpval.integ *= fval;
  7601  0A52  2750  120A  158A   	fcall	PL42	;call to abstracted procedure
  7602  0A55  2769               	fcall	PL52	;call to abstracted procedure
  7603  0A56  1683               	bsf	3,5	;RP0=1, select bank1
  7604  0A57  0850               	movf	sprintf@tmpval^(0+128),w
  7605  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  7606  0A59  00AB               	movwf	___ftmul@f2
  7607  0A5A  1683               	bsf	3,5	;RP0=1, select bank1
  7608  0A5B  0851               	movf	(sprintf@tmpval+1)^(0+128),w
  7609  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  7610  0A5D  00AC               	movwf	___ftmul@f2+1
  7611  0A5E  1683               	bsf	3,5	;RP0=1, select bank1
  7612  0A5F  0852               	movf	(sprintf@tmpval+2)^(0+128),w
  7613  0A60  1283               	bcf	3,5	;RP0=0, select bank0
  7614  0A61  00AD               	movwf	___ftmul@f2+2
  7615  0A62  160A  118A  24AF  120A  158A  	fcall	___ftmul
  7616  0A67  0828               	movf	?___ftmul,w
  7617  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  7618  0A69  00D0               	movwf	sprintf@tmpval^(0+128)
  7619  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  7620  0A6B  0829               	movf	?___ftmul+1,w
  7621  0A6C  1683               	bsf	3,5	;RP0=1, select bank1
  7622  0A6D  00D1               	movwf	(sprintf@tmpval+1)^(0+128)
  7623  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  7624  0A6F  082A               	movf	?___ftmul+2,w
  7625  0A70  1683               	bsf	3,5	;RP0=1, select bank1
  7626  0A71  00D2               	movwf	(sprintf@tmpval+2)^(0+128)
  7627                           
  7628                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  7629  0A72  2721  120A  158A   	fcall	PL12	;call to abstracted procedure
  7630  0A75  3080               	movlw	128
  7631  0A76  01D1               	clrf	___ftge@ff2
  7632  0A77  00D2               	movwf	___ftge@ff2+1
  7633  0A78  303F               	movlw	63
  7634  0A79  00D3               	movwf	___ftge@ff2+2
  7635  0A7A  25E5  120A  158A   	fcall	___ftge
  7636  0A7D  1803               	btfsc	3,0
  7637  0A7E  2A85               	goto	l5327
  7638                           
  7639                           ;doprnt.c: 849: exp--;
  7640  0A7F  30FF               	movlw	-1
  7641  0A80  1683               	bsf	3,5	;RP0=1, select bank1
  7642  0A81  07D8               	addwf	sprintf@exp^(0+128),f
  7643  0A82  1C03               	skipc
  7644  0A83  03D9               	decf	(sprintf@exp+1)^(0+128),f
  7645  0A84  2A97               	goto	l5331
  7646  0A85                     l5327:	
  7647                           
  7648                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  7649  0A85  1683               	bsf	3,5	;RP0=1, select bank1
  7650  0A86  2721  120A  158A   	fcall	PL12	;call to abstracted procedure
  7651  0A89  3020               	movlw	32
  7652  0A8A  01D1               	clrf	___ftge@ff2
  7653  0A8B  00D2               	movwf	___ftge@ff2+1
  7654  0A8C  3041               	movlw	65
  7655  0A8D  00D3               	movwf	___ftge@ff2+2
  7656  0A8E  25E5  120A  158A   	fcall	___ftge
  7657  0A91  1C03               	btfss	3,0
  7658  0A92  2A97               	goto	l5331
  7659                           
  7660                           ;doprnt.c: 851: exp++;
  7661  0A93  1683               	bsf	3,5	;RP0=1, select bank1
  7662  0A94  0AD8               	incf	sprintf@exp^(0+128),f
  7663  0A95  1903               	skipnz
  7664  0A96  0AD9               	incf	(sprintf@exp+1)^(0+128),f
  7665  0A97                     l5331:	
  7666                           
  7667                           ;doprnt.c: 852: }
  7668                           ;doprnt.c: 1112: if(prec <= 12)
  7669  0A97  1683               	bsf	3,5	;RP0=1, select bank1
  7670  0A98  085B               	movf	(sprintf@prec+1)^(0+128),w
  7671  0A99  3A80               	xorlw	128
  7672  0A9A  00FF               	movwf	127
  7673  0A9B  3080               	movlw	128
  7674  0A9C  027F               	subwf	127,w
  7675  0A9D  1D03               	skipz
  7676  0A9E  2AA1               	goto	u6035
  7677  0A9F  300D               	movlw	13
  7678  0AA0  025A               	subwf	sprintf@prec^(0+128),w
  7679  0AA1                     u6035:	
  7680  0AA1  1803               	skipnc
  7681  0AA2  2ACD               	goto	l5335
  7682                           
  7683                           ;doprnt.c: 1113: fval += fround(prec);
  7684  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
  7685  0AA4  1303               	bcf	3,6	;RP1=0, select bank1
  7686  0AA5  085A               	movf	sprintf@prec^(0+128),w
  7687  0AA6  160A  118A  2173  120A  158A  	fcall	_fround
  7688  0AAB  0837               	movf	?_fround,w
  7689  0AAC  00C2               	movwf	___ftadd@f1
  7690  0AAD  0838               	movf	?_fround+1,w
  7691  0AAE  00C3               	movwf	___ftadd@f1+1
  7692  0AAF  0839               	movf	?_fround+2,w
  7693  0AB0  00C4               	movwf	___ftadd@f1+2
  7694  0AB1  1683               	bsf	3,5	;RP0=1, select bank1
  7695  0AB2  085C               	movf	sprintf@fval^(0+128),w
  7696  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  7697  0AB4  00C5               	movwf	___ftadd@f2
  7698  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  7699  0AB6  085D               	movf	(sprintf@fval+1)^(0+128),w
  7700  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
  7701  0AB8  00C6               	movwf	___ftadd@f2+1
  7702  0AB9  1683               	bsf	3,5	;RP0=1, select bank1
  7703  0ABA  085E               	movf	(sprintf@fval+2)^(0+128),w
  7704  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  7705  0ABC  00C7               	movwf	___ftadd@f2+2
  7706  0ABD  160A  118A  263A  120A  158A  	fcall	___ftadd
  7707  0AC2  0842               	movf	?___ftadd,w
  7708  0AC3  1683               	bsf	3,5	;RP0=1, select bank1
  7709  0AC4  00DC               	movwf	sprintf@fval^(0+128)
  7710  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
  7711  0AC6  0843               	movf	?___ftadd+1,w
  7712  0AC7  1683               	bsf	3,5	;RP0=1, select bank1
  7713  0AC8  00DD               	movwf	(sprintf@fval+1)^(0+128)
  7714  0AC9  1283               	bcf	3,5	;RP0=0, select bank0
  7715  0ACA  0844               	movf	?___ftadd+2,w
  7716  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  7717  0ACC  00DE               	movwf	(sprintf@fval+2)^(0+128)
  7718  0ACD                     l5335:	
  7719                           
  7720                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7721  0ACD  1683               	bsf	3,5	;RP0=1, select bank1
  7722  0ACE  1303               	bcf	3,6	;RP1=0, select bank1
  7723  0ACF  0859               	movf	(sprintf@exp+1)^(0+128),w
  7724  0AD0  3A80               	xorlw	128
  7725  0AD1  00FF               	movwf	127
  7726  0AD2  3080               	movlw	128
  7727  0AD3  027F               	subwf	127,w
  7728  0AD4  1D03               	skipz
  7729  0AD5  2AD8               	goto	u6045
  7730  0AD6  300A               	movlw	10
  7731  0AD7  0258               	subwf	sprintf@exp^(0+128),w
  7732  0AD8                     u6045:	
  7733  0AD8  1803               	skipnc
  7734  0AD9  2AF9               	goto	l5343
  7735  0ADA  1683               	bsf	3,5	;RP0=1, select bank1
  7736  0ADB  1303               	bcf	3,6	;RP1=0, select bank1
  7737  0ADC  085E               	movf	(sprintf@fval+2)^(0+128),w
  7738  0ADD  045D               	iorwf	(sprintf@fval+1)^(0+128),w
  7739  0ADE  045C               	iorwf	sprintf@fval^(0+128),w
  7740  0ADF  1903               	skipnz
  7741  0AE0  2B34               	goto	l5357
  7742  0AE1  275D  120A  158A   	fcall	PL46	;call to abstracted procedure
  7743  0AE4  2790  120A  158A   	fcall	___fttol
  7744  0AE7  0845               	movf	?___fttol+3,w
  7745  0AE8  0444               	iorwf	?___fttol+2,w
  7746  0AE9  0443               	iorwf	?___fttol+1,w
  7747  0AEA  0442               	iorwf	?___fttol,w
  7748  0AEB  1D03               	skipz
  7749  0AEC  2B34               	goto	l5357
  7750  0AED  1683               	bsf	3,5	;RP0=1, select bank1
  7751  0AEE  0859               	movf	(sprintf@exp+1)^(0+128),w
  7752  0AEF  3A80               	xorlw	128
  7753  0AF0  00FF               	movwf	127
  7754  0AF1  3080               	movlw	128
  7755  0AF2  027F               	subwf	127,w
  7756  0AF3  1D03               	skipz
  7757  0AF4  2AF7               	goto	u6075
  7758  0AF5  3002               	movlw	2
  7759  0AF6  0258               	subwf	sprintf@exp^(0+128),w
  7760  0AF7                     u6075:	
  7761  0AF7  1C03               	skipc
  7762  0AF8  2B34               	goto	l5357
  7763  0AF9                     l5343:	
  7764                           
  7765                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7766  0AF9  1683               	bsf	3,5	;RP0=1, select bank1
  7767  0AFA  1303               	bcf	3,6	;RP1=0, select bank1
  7768  0AFB  2721  120A  158A   	fcall	PL12	;call to abstracted procedure
  7769  0AFE  3070               	movlw	112
  7770  0AFF  00D1               	movwf	___ftge@ff2
  7771  0B00  3089               	movlw	137
  7772  0B01  00D2               	movwf	___ftge@ff2+1
  7773  0B02  3040               	movlw	64
  7774  0B03  00D3               	movwf	___ftge@ff2+2
  7775  0B04  25E5  120A  158A   	fcall	___ftge
  7776  0B07  1803               	btfsc	3,0
  7777  0B08  2B0B               	goto	l5347
  7778                           
  7779                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7780  0B09  30F7               	movlw	-9
  7781  0B0A  2B0C               	goto	L15
  7782  0B0B                     l5347:	
  7783                           ;doprnt.c: 1122: }else{
  7784                           
  7785                           
  7786                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7787  0B0B  30F8               	movlw	-8
  7788  0B0C                     L15:	
  7789  0B0C  1683               	bsf	3,5	;RP0=1, select bank1
  7790  0B0D  07D8               	addwf	sprintf@exp^(0+128),f
  7791  0B0E  1C03               	skipc
  7792  0B0F  03D9               	decf	(sprintf@exp+1)^(0+128),f
  7793                           
  7794                           ;doprnt.c: 1124: }
  7795                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7796  0B10  0858               	movf	sprintf@exp^(0+128),w
  7797  0B11  160A  118A  229B  120A  158A  	fcall	_scale
  7798                           
  7799                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7800  0B16  2750               	fcall	PL42	;call to abstracted procedure
  7801  0B17  00F3               	movwf	__tdiv_to_l_@f1
  7802  0B18  085D               	movf	(sprintf@fval+1)^(0+128),w
  7803  0B19  00F4               	movwf	__tdiv_to_l_@f1+1
  7804  0B1A  085E               	movf	(sprintf@fval+2)^(0+128),w
  7805  0B1B  00F5               	movwf	__tdiv_to_l_@f1+2
  7806  0B1C  0850               	movf	sprintf@tmpval^(0+128),w
  7807  0B1D  00F6               	movwf	__tdiv_to_l_@f2
  7808  0B1E  0851               	movf	(sprintf@tmpval+1)^(0+128),w
  7809  0B1F  00F7               	movwf	__tdiv_to_l_@f2+1
  7810  0B20  0852               	movf	(sprintf@tmpval+2)^(0+128),w
  7811  0B21  00F8               	movwf	__tdiv_to_l_@f2+2
  7812  0B22  160A  158A  247C  120A  158A  	fcall	__tdiv_to_l_
  7813  0B27  0876               	movf	?__tdiv_to_l_+3,w
  7814  0B28  1683               	bsf	3,5	;RP0=1, select bank1
  7815  0B29  00D7               	movwf	(sprintf@val+3)^(0+128)
  7816  0B2A  0875               	movf	?__tdiv_to_l_+2,w
  7817  0B2B  00D6               	movwf	(sprintf@val+2)^(0+128)
  7818  0B2C  0874               	movf	?__tdiv_to_l_+1,w
  7819  0B2D  00D5               	movwf	(sprintf@val+1)^(0+128)
  7820  0B2E  0873               	movf	?__tdiv_to_l_,w
  7821  0B2F  00D4               	movwf	sprintf@val^(0+128)
  7822                           
  7823                           ;doprnt.c: 1129: fval = 0.0;
  7824  0B30  01DC               	clrf	sprintf@fval^(0+128)
  7825  0B31  01DD               	clrf	(sprintf@fval+1)^(0+128)
  7826  0B32  01DE               	clrf	(sprintf@fval+2)^(0+128)
  7827                           
  7828                           ;doprnt.c: 1130: } else {
  7829  0B33  2B75               	goto	l5361
  7830  0B34                     l5357:	
  7831                           
  7832                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7833  0B34  1683               	bsf	3,5	;RP0=1, select bank1
  7834  0B35  1303               	bcf	3,6	;RP1=0, select bank1
  7835  0B36  275D  120A  158A   	fcall	PL46	;call to abstracted procedure
  7836  0B39  2790  120A  158A   	fcall	___fttol
  7837  0B3C  2735               	fcall	PL24	;call to abstracted procedure
  7838  0B3D  1683               	bsf	3,5	;RP0=1, select bank1
  7839  0B3E  00D4               	movwf	sprintf@val^(0+128)
  7840                           
  7841                           ;doprnt.c: 1132: fval -= (double)val;
  7842  0B3F  0857               	movf	(sprintf@val+3)^(0+128),w
  7843  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  7844  0B41  00A6               	movwf	___lltoft@c+3
  7845  0B42  1683               	bsf	3,5	;RP0=1, select bank1
  7846  0B43  0856               	movf	(sprintf@val+2)^(0+128),w
  7847  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  7848  0B45  00A5               	movwf	___lltoft@c+2
  7849  0B46  1683               	bsf	3,5	;RP0=1, select bank1
  7850  0B47  0855               	movf	(sprintf@val+1)^(0+128),w
  7851  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  7852  0B49  00A4               	movwf	___lltoft@c+1
  7853  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  7854  0B4B  0854               	movf	sprintf@val^(0+128),w
  7855  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  7856  0B4D  00A3               	movwf	___lltoft@c
  7857  0B4E  160A  118A  2155  120A  158A  	fcall	___lltoft
  7858  0B53  0823               	movf	?___lltoft,w
  7859  0B54  00CE               	movwf	___ftsub@f2
  7860  0B55  0824               	movf	?___lltoft+1,w
  7861  0B56  00CF               	movwf	___ftsub@f2+1
  7862  0B57  0825               	movf	?___lltoft+2,w
  7863  0B58  00D0               	movwf	___ftsub@f2+2
  7864  0B59  1683               	bsf	3,5	;RP0=1, select bank1
  7865  0B5A  085C               	movf	sprintf@fval^(0+128),w
  7866  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  7867  0B5C  00D1               	movwf	___ftsub@f1
  7868  0B5D  1683               	bsf	3,5	;RP0=1, select bank1
  7869  0B5E  085D               	movf	(sprintf@fval+1)^(0+128),w
  7870  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  7871  0B60  00D2               	movwf	___ftsub@f1+1
  7872  0B61  1683               	bsf	3,5	;RP0=1, select bank1
  7873  0B62  085E               	movf	(sprintf@fval+2)^(0+128),w
  7874  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  7875  0B64  00D3               	movwf	___ftsub@f1+2
  7876  0B65  26B8  120A  158A   	fcall	___ftsub
  7877  0B68  084E               	movf	?___ftsub,w
  7878  0B69  1683               	bsf	3,5	;RP0=1, select bank1
  7879  0B6A  00DC               	movwf	sprintf@fval^(0+128)
  7880  0B6B  1283               	bcf	3,5	;RP0=0, select bank0
  7881  0B6C  084F               	movf	?___ftsub+1,w
  7882  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  7883  0B6E  00DD               	movwf	(sprintf@fval+1)^(0+128)
  7884  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  7885  0B70  0850               	movf	?___ftsub+2,w
  7886  0B71  1683               	bsf	3,5	;RP0=1, select bank1
  7887  0B72  00DE               	movwf	(sprintf@fval+2)^(0+128)
  7888                           
  7889                           ;doprnt.c: 1133: exp = 0;
  7890  0B73  01D8               	clrf	sprintf@exp^(0+128)
  7891  0B74  01D9               	clrf	(sprintf@exp+1)^(0+128)
  7892  0B75                     l5361:	
  7893                           
  7894                           ;doprnt.c: 1134: }
  7895                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7896  0B75  01E0               	clrf	sprintf@c^(0+128)
  7897  0B76  0AE0               	incf	sprintf@c^(0+128),f
  7898  0B77                     l5367:	
  7899                           
  7900                           ;doprnt.c: 1137: if(val < dpowers[c])
  7901  0B77  0860               	movf	sprintf@c^(0+128),w
  7902  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  7903  0B79  00D9               	movwf	??_sprintf
  7904  0B7A  3001               	movlw	1
  7905  0B7B  1003               	clrc
  7906  0B7C                     L9:	
  7907  0B7C  0DD9               	rlf	??_sprintf,f
  7908  0B7D  3EFF               	addlw	-1
  7909  0B7E  1003               	clrc
  7910  0B7F  1D03               	skipz
  7911  0B80  2B7C               	goto	L9
  7912  0B81  272D               	fcall	PL14	;call to abstracted procedure
  7913  0B82  160A  158A  2000  120A  158A  	fcall	stringtab
  7914  0B87  00DA               	movwf	??_sprintf+1
  7915  0B88  160A  158A  2000  120A  158A  	fcall	stringtab
  7916  0B8D  00DB               	movwf	??_sprintf+2
  7917  0B8E  160A  158A  2000  120A  158A  	fcall	stringtab
  7918  0B93  00DC               	movwf	??_sprintf+3
  7919  0B94  160A  158A  2000  120A  158A  	fcall	stringtab
  7920  0B99  00DD               	movwf	??_sprintf+4
  7921  0B9A  1683               	bsf	3,5	;RP0=1, select bank1
  7922  0B9B  0257               	subwf	(sprintf@val+3)^(0+128),w
  7923  0B9C  1D03               	skipz
  7924  0B9D  2BAE               	goto	u6105
  7925  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  7926  0B9F  085C               	movf	??_sprintf+3,w
  7927  0BA0  1683               	bsf	3,5	;RP0=1, select bank1
  7928  0BA1  0256               	subwf	(sprintf@val+2)^(0+128),w
  7929  0BA2  1D03               	skipz
  7930  0BA3  2BAE               	goto	u6105
  7931  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
  7932  0BA5  085B               	movf	??_sprintf+2,w
  7933  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  7934  0BA7  0255               	subwf	(sprintf@val+1)^(0+128),w
  7935  0BA8  1D03               	skipz
  7936  0BA9  2BAE               	goto	u6105
  7937  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  7938  0BAB  085A               	movf	??_sprintf+1,w
  7939  0BAC  1683               	bsf	3,5	;RP0=1, select bank1
  7940  0BAD  0254               	subwf	sprintf@val^(0+128),w
  7941  0BAE                     u6105:	
  7942  0BAE  1C03               	btfss	3,0
  7943  0BAF  2BB5               	goto	l5375
  7944  0BB0  300A               	movlw	10
  7945  0BB1  0AE0               	incf	sprintf@c^(0+128),f
  7946  0BB2  0660               	xorwf	sprintf@c^(0+128),w
  7947  0BB3  1D03               	btfss	3,2
  7948  0BB4  2B77               	goto	l5367
  7949  0BB5                     l5375:	
  7950                           
  7951                           ;doprnt.c: 1175: {
  7952                           ;doprnt.c: 1188: if(flag & 0x03)
  7953  0BB5  084E               	movf	sprintf@flag^(0+128),w
  7954  0BB6  3903               	andlw	3
  7955  0BB7  1903               	btfsc	3,2
  7956  0BB8  2BF1               	goto	l5389
  7957                           
  7958                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  7959  0BB9  085F               	movf	sprintf@sp^(0+128),w
  7960  0BBA  0084               	movwf	4
  7961  0BBB  302D               	movlw	45
  7962  0BBC  2BEE               	goto	L18
  7963  0BBD                     l5381:	
  7964                           
  7965                           ;doprnt.c: 1200: {
  7966                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7967  0BBD  0860               	movf	sprintf@c^(0+128),w
  7968  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  7969  0BBF  00D9               	movwf	??_sprintf
  7970  0BC0  3001               	movlw	1
  7971  0BC1  1003               	clrc
  7972  0BC2                     L10:	
  7973  0BC2  0DD9               	rlf	??_sprintf,f
  7974  0BC3  3EFF               	addlw	-1
  7975  0BC4  1003               	clrc
  7976  0BC5  1D03               	skipz
  7977  0BC6  2BC2               	goto	L10
  7978  0BC7  272D               	fcall	PL14	;call to abstracted procedure
  7979  0BC8  160A  158A  2000  120A  158A  	fcall	stringtab
  7980  0BCD  00A0               	movwf	___lldiv@divisor
  7981  0BCE  160A  158A  2000  120A  158A  	fcall	stringtab
  7982  0BD3  00A1               	movwf	___lldiv@divisor+1
  7983  0BD4  160A  158A  2000  120A  158A  	fcall	stringtab
  7984  0BD9  00A2               	movwf	___lldiv@divisor+2
  7985  0BDA  160A  158A  2000  120A  158A  	fcall	stringtab
  7986  0BDF  26FB  120A  158A   	fcall	PL4	;call to abstracted procedure
  7987  0BE2  264F  120A  158A   	fcall	___lldiv
  7988                           
  7989                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7990  0BE5  26D5  120A  158A   	fcall	PL2	;call to abstracted procedure
  7991  0BE8  2611  120A  158A   	fcall	___llmod
  7992                           
  7993                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  7994  0BEB  270D  120A  158A   	fcall	PL10	;call to abstracted procedure
  7995  0BEE                     L18:	
  7996  0BEE  1383               	bcf	3,7	;select IRP bank0
  7997  0BEF  0080               	movwf	0
  7998  0BF0  0ADF               	incf	sprintf@sp^(0+128),f
  7999  0BF1                     l5389:	
  8000  0BF1  03E0               	decf	sprintf@c^(0+128),f
  8001  0BF2  0F60               	incfsz	sprintf@c^(0+128),w
  8002  0BF3  2BBD               	goto	l5381
  8003  0BF4                     l5397:	
  8004  0BF4  0859               	movf	(sprintf@exp+1)^(0+128),w
  8005  0BF5  3A80               	xorlw	128
  8006  0BF6  00FF               	movwf	127
  8007  0BF7  3080               	movlw	128
  8008  0BF8  027F               	subwf	127,w
  8009  0BF9  1D03               	skipz
  8010  0BFA  2BFD               	goto	u6155
  8011  0BFB  3001               	movlw	1
  8012  0BFC  0258               	subwf	sprintf@exp^(0+128),w
  8013  0BFD                     u6155:	
  8014  0BFD  1C03               	btfss	3,0
  8015  0BFE  2C08               	goto	l5399
  8016                           
  8017                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  8018  0BFF  1683               	bsf	3,5	;RP0=1, select bank1
  8019  0C00  1303               	bcf	3,6	;RP1=0, select bank1
  8020  0C01  2774  120A  158A   	fcall	PL66	;call to abstracted procedure
  8021                           
  8022                           ;doprnt.c: 1209: exp--;
  8023  0C04  07D8               	addwf	sprintf@exp^(0+128),f
  8024  0C05  1C03               	skipc
  8025  0C06  03D9               	decf	(sprintf@exp+1)^(0+128),f
  8026  0C07  2BF4               	goto	l5397
  8027  0C08                     l5399:	
  8028                           
  8029                           ;doprnt.c: 1210: }
  8030                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8031  0C08  1683               	bsf	3,5	;RP0=1, select bank1
  8032  0C09  1303               	bcf	3,6	;RP1=0, select bank1
  8033  0C0A  085B               	movf	(sprintf@prec+1)^(0+128),w
  8034  0C0B  3A80               	xorlw	128
  8035  0C0C  00FF               	movwf	127
  8036  0C0D  3080               	movlw	128
  8037  0C0E  027F               	subwf	127,w
  8038  0C0F  1D03               	skipz
  8039  0C10  2C13               	goto	u6165
  8040  0C11  3009               	movlw	9
  8041  0C12  025A               	subwf	sprintf@prec^(0+128),w
  8042  0C13                     u6165:	
  8043  0C13  1C03               	skipc
  8044  0C14  2C19               	goto	l5403
  8045                           
  8046                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8047  0C15  3008               	movlw	8
  8048  0C16  1683               	bsf	3,5	;RP0=1, select bank1
  8049  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  8050  0C18  2C1C               	goto	L16
  8051  0C19                     l5403:	
  8052                           
  8053                           ;doprnt.c: 1213: else
  8054                           ;doprnt.c: 1214: c = prec;
  8055  0C19  1683               	bsf	3,5	;RP0=1, select bank1
  8056  0C1A  1303               	bcf	3,6	;RP1=0, select bank1
  8057  0C1B  085A               	movf	sprintf@prec^(0+128),w
  8058  0C1C                     L16:	
  8059  0C1C  00E0               	movwf	sprintf@c^(0+128)
  8060                           
  8061                           ;doprnt.c: 1215: prec -= c;
  8062  0C1D  2783  120A  158A   	fcall	PL94	;call to abstracted procedure
  8063  0C20  02DA               	subwf	sprintf@prec^(0+128),f
  8064  0C21  1283               	bcf	3,5	;RP0=0, select bank0
  8065  0C22  085A               	movf	??_sprintf+1,w
  8066  0C23  1683               	bsf	3,5	;RP0=1, select bank1
  8067  0C24  1C03               	skipc
  8068  0C25  03DB               	decf	(sprintf@prec+1)^(0+128),f
  8069  0C26  02DB               	subwf	(sprintf@prec+1)^(0+128),f
  8070                           
  8071                           ;doprnt.c: 1219: if(c)
  8072  0C27  0860               	movf	sprintf@c^(0+128),w
  8073  0C28  1903               	btfsc	3,2
  8074  0C29  2C30               	goto	l5411
  8075                           
  8076                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  8077  0C2A  085F               	movf	sprintf@sp^(0+128),w
  8078  0C2B  0084               	movwf	4
  8079  0C2C  302E               	movlw	46
  8080  0C2D  1383               	bcf	3,7	;select IRP bank0
  8081  0C2E  0080               	movwf	0
  8082  0C2F  0ADF               	incf	sprintf@sp^(0+128),f
  8083  0C30                     l5411:	
  8084                           
  8085                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8086  0C30  0860               	movf	sprintf@c^(0+128),w
  8087  0C31  160A  118A  229B  120A  158A  	fcall	_scale
  8088  0C36  0837               	movf	?_scale,w
  8089  0C37  1683               	bsf	3,5	;RP0=1, select bank1
  8090  0C38  00CA               	movwf	_sprintf$1130^(0+128)
  8091  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  8092  0C3A  0838               	movf	?_scale+1,w
  8093  0C3B  1683               	bsf	3,5	;RP0=1, select bank1
  8094  0C3C  00CB               	movwf	(_sprintf$1130+1)^(0+128)
  8095  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  8096  0C3E  0839               	movf	?_scale+2,w
  8097  0C3F  1683               	bsf	3,5	;RP0=1, select bank1
  8098  0C40  00CC               	movwf	(_sprintf$1130+2)^(0+128)
  8099                           
  8100                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8101  0C41  084A               	movf	_sprintf$1130^(0+128),w
  8102  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  8103  0C43  00AB               	movwf	___ftmul@f2
  8104  0C44  1683               	bsf	3,5	;RP0=1, select bank1
  8105  0C45  084B               	movf	(_sprintf$1130+1)^(0+128),w
  8106  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  8107  0C47  00AC               	movwf	___ftmul@f2+1
  8108  0C48  1683               	bsf	3,5	;RP0=1, select bank1
  8109  0C49  084C               	movf	(_sprintf$1130+2)^(0+128),w
  8110  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  8111  0C4B  00AD               	movwf	___ftmul@f2+2
  8112  0C4C  1683               	bsf	3,5	;RP0=1, select bank1
  8113  0C4D  085C               	movf	sprintf@fval^(0+128),w
  8114  0C4E  2769               	fcall	PL52	;call to abstracted procedure
  8115  0C4F  160A  118A  24AF  120A  158A  	fcall	___ftmul
  8116  0C54  0828               	movf	?___ftmul,w
  8117  0C55  00C2               	movwf	___fttol@f1
  8118  0C56  0829               	movf	?___ftmul+1,w
  8119  0C57  00C3               	movwf	___fttol@f1+1
  8120  0C58  082A               	movf	?___ftmul+2,w
  8121  0C59  00C4               	movwf	___fttol@f1+2
  8122  0C5A  2790  120A  158A   	fcall	___fttol
  8123  0C5D  2735  120A  158A   	fcall	PL24	;call to abstracted procedure
  8124  0C60  2CD8               	goto	L17
  8125  0C61                     l5415:	
  8126                           ;doprnt.c: 1228: while(c--) {
  8127                           
  8128                           
  8129                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8130  0C61  0860               	movf	sprintf@c^(0+128),w
  8131  0C62  1283               	bcf	3,5	;RP0=0, select bank0
  8132  0C63  00D9               	movwf	??_sprintf
  8133  0C64  3001               	movlw	1
  8134  0C65  1003               	clrc
  8135  0C66                     L11:	
  8136  0C66  0DD9               	rlf	??_sprintf,f
  8137  0C67  3EFF               	addlw	-1
  8138  0C68  1003               	clrc
  8139  0C69  1D03               	skipz
  8140  0C6A  2C66               	goto	L11
  8141  0C6B  272D               	fcall	PL14	;call to abstracted procedure
  8142  0C6C  160A  158A  2000  120A  158A  	fcall	stringtab
  8143  0C71  00A0               	movwf	___lldiv@divisor
  8144  0C72  160A  158A  2000  120A  158A  	fcall	stringtab
  8145  0C77  00A1               	movwf	___lldiv@divisor+1
  8146  0C78  160A  158A  2000  120A  158A  	fcall	stringtab
  8147  0C7D  00A2               	movwf	___lldiv@divisor+2
  8148  0C7E  160A  158A  2000  120A  158A  	fcall	stringtab
  8149  0C83  26FB  120A  158A   	fcall	PL4	;call to abstracted procedure
  8150  0C86  264F  120A  158A   	fcall	___lldiv
  8151                           
  8152                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8153  0C89  26D5  120A  158A   	fcall	PL2	;call to abstracted procedure
  8154  0C8C  2611  120A  158A   	fcall	___llmod
  8155                           
  8156                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  8157  0C8F  270D  120A  158A   	fcall	PL10	;call to abstracted procedure
  8158  0C92  1383               	bcf	3,7	;select IRP bank0
  8159  0C93  0080               	movwf	0
  8160  0C94  0ADF               	incf	sprintf@sp^(0+128),f
  8161                           
  8162                           ;doprnt.c: 1232: val %= dpowers[c];
  8163  0C95  0860               	movf	sprintf@c^(0+128),w
  8164  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  8165  0C97  00D9               	movwf	??_sprintf
  8166  0C98  3001               	movlw	1
  8167  0C99  1003               	clrc
  8168  0C9A                     L12:	
  8169  0C9A  0DD9               	rlf	??_sprintf,f
  8170  0C9B  3EFF               	addlw	-1
  8171  0C9C  1003               	clrc
  8172  0C9D  1D03               	skipz
  8173  0C9E  2C9A               	goto	L12
  8174  0C9F  272D               	fcall	PL14	;call to abstracted procedure
  8175  0CA0  160A  158A  2000  120A  158A  	fcall	stringtab
  8176  0CA5  00A8               	movwf	___llmod@divisor
  8177  0CA6  160A  158A  2000  120A  158A  	fcall	stringtab
  8178  0CAB  00A9               	movwf	___llmod@divisor+1
  8179  0CAC  160A  158A  2000  120A  158A  	fcall	stringtab
  8180  0CB1  00AA               	movwf	___llmod@divisor+2
  8181  0CB2  160A  158A  2000  120A  158A  	fcall	stringtab
  8182  0CB7  00AB               	movwf	___llmod@divisor+3
  8183  0CB8  1683               	bsf	3,5	;RP0=1, select bank1
  8184  0CB9  0857               	movf	(sprintf@val+3)^(0+128),w
  8185  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  8186  0CBB  00AF               	movwf	___llmod@dividend+3
  8187  0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  8188  0CBD  0856               	movf	(sprintf@val+2)^(0+128),w
  8189  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  8190  0CBF  00AE               	movwf	___llmod@dividend+2
  8191  0CC0  1683               	bsf	3,5	;RP0=1, select bank1
  8192  0CC1  0855               	movf	(sprintf@val+1)^(0+128),w
  8193  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  8194  0CC3  00AD               	movwf	___llmod@dividend+1
  8195  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  8196  0CC5  0854               	movf	sprintf@val^(0+128),w
  8197  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  8198  0CC7  00AC               	movwf	___llmod@dividend
  8199  0CC8  2611  120A  158A   	fcall	___llmod
  8200  0CCB  082B               	movf	?___llmod+3,w
  8201  0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  8202  0CCD  00D7               	movwf	(sprintf@val+3)^(0+128)
  8203  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  8204  0CCF  082A               	movf	?___llmod+2,w
  8205  0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  8206  0CD1  00D6               	movwf	(sprintf@val+2)^(0+128)
  8207  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  8208  0CD3  0829               	movf	?___llmod+1,w
  8209  0CD4  1683               	bsf	3,5	;RP0=1, select bank1
  8210  0CD5  00D5               	movwf	(sprintf@val+1)^(0+128)
  8211  0CD6  1283               	bcf	3,5	;RP0=0, select bank0
  8212  0CD7  0828               	movf	?___llmod,w
  8213  0CD8                     L17:	
  8214  0CD8  1683               	bsf	3,5	;RP0=1, select bank1
  8215  0CD9  00D4               	movwf	sprintf@val^(0+128)
  8216  0CDA  03E0               	decf	sprintf@c^(0+128),f
  8217  0CDB  0F60               	incfsz	sprintf@c^(0+128),w
  8218  0CDC  2C61               	goto	l5415
  8219  0CDD                     l5433:	
  8220  0CDD  085A               	movf	sprintf@prec^(0+128),w
  8221  0CDE  045B               	iorwf	(sprintf@prec+1)^(0+128),w
  8222  0CDF  1903               	btfsc	3,2
  8223  0CE0  2938               	goto	l5487
  8224                           
  8225                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  8226  0CE1  2774  120A  158A   	fcall	PL66	;call to abstracted procedure
  8227                           
  8228                           ;doprnt.c: 1237: prec--;
  8229  0CE4  07DA               	addwf	sprintf@prec^(0+128),f
  8230  0CE5  1C03               	skipc
  8231  0CE6  03DB               	decf	(sprintf@prec+1)^(0+128),f
  8232  0CE7  2CDD               	goto	l5433
  8233  0CE8                     l5435:	
  8234                           
  8235                           ;doprnt.c: 1246: }
  8236                           ;doprnt.c: 1253: {
  8237                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  8238  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  8239  0CE9  084D               	movf	sprintf@ap^(0+128),w
  8240  0CEA  0084               	movwf	4
  8241  0CEB  1383               	bcf	3,7	;select IRP bank0
  8242  0CEC  277C  120A  158A   	fcall	PL88	;call to abstracted procedure
  8243  0CEF  0859               	movf	??_sprintf,w
  8244  0CF0  1683               	bsf	3,5	;RP0=1, select bank1
  8245  0CF1  00D4               	movwf	sprintf@val^(0+128)
  8246  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  8247  0CF3  085A               	movf	??_sprintf+1,w
  8248  0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  8249  0CF5  00D5               	movwf	(sprintf@val+1)^(0+128)
  8250  0CF6  3000               	movlw	0
  8251  0CF7  1BD5               	btfsc	(sprintf@val+1)^(0+128),7
  8252  0CF8  30FF               	movlw	255
  8253  0CF9  00D6               	movwf	(sprintf@val+2)^(0+128)
  8254  0CFA  00D7               	movwf	(sprintf@val+3)^(0+128)
  8255  0CFB  0ACD               	incf	sprintf@ap^(0+128),f
  8256  0CFC  0ACD               	incf	sprintf@ap^(0+128),f
  8257                           
  8258                           ;doprnt.c: 1261: if((long)val < 0) {
  8259  0CFD  1FD7               	btfss	(sprintf@val+3)^(0+128),7
  8260  0CFE  2D0C               	goto	l5445
  8261                           
  8262                           ;doprnt.c: 1262: flag |= 0x03;
  8263  0CFF  3003               	movlw	3
  8264  0D00  04CE               	iorwf	sprintf@flag^(0+128),f
  8265                           
  8266                           ;doprnt.c: 1263: val = -val;
  8267  0D01  09D4               	comf	sprintf@val^(0+128),f
  8268  0D02  09D5               	comf	(sprintf@val+1)^(0+128),f
  8269  0D03  09D6               	comf	(sprintf@val+2)^(0+128),f
  8270  0D04  09D7               	comf	(sprintf@val+3)^(0+128),f
  8271  0D05  0AD4               	incf	sprintf@val^(0+128),f
  8272  0D06  1903               	skipnz
  8273  0D07  0AD5               	incf	(sprintf@val+1)^(0+128),f
  8274  0D08  1903               	skipnz
  8275  0D09  0AD6               	incf	(sprintf@val+2)^(0+128),f
  8276  0D0A  1903               	skipnz
  8277  0D0B  0AD7               	incf	(sprintf@val+3)^(0+128),f
  8278  0D0C                     l5445:	
  8279                           
  8280                           ;doprnt.c: 1264: }
  8281                           ;doprnt.c: 1266: }
  8282                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8283  0D0C  085A               	movf	sprintf@prec^(0+128),w
  8284  0D0D  045B               	iorwf	(sprintf@prec+1)^(0+128),w
  8285  0D0E  1D03               	btfss	3,2
  8286  0D0F  2D18               	goto	l5451
  8287  0D10  0857               	movf	(sprintf@val+3)^(0+128),w
  8288  0D11  0456               	iorwf	(sprintf@val+2)^(0+128),w
  8289  0D12  0455               	iorwf	(sprintf@val+1)^(0+128),w
  8290  0D13  0454               	iorwf	sprintf@val^(0+128),w
  8291  0D14  1903               	btfsc	3,2
  8292                           
  8293                           ;doprnt.c: 1291: prec++;
  8294  0D15  0ADA               	incf	sprintf@prec^(0+128),f
  8295  0D16  1903               	skipnz
  8296  0D17  0ADB               	incf	(sprintf@prec+1)^(0+128),f
  8297  0D18                     l5451:	
  8298                           
  8299                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8300  0D18  01E0               	clrf	sprintf@c^(0+128)
  8301  0D19  0AE0               	incf	sprintf@c^(0+128),f
  8302  0D1A                     l5457:	
  8303                           
  8304                           ;doprnt.c: 1306: if(val < dpowers[c])
  8305  0D1A  0860               	movf	sprintf@c^(0+128),w
  8306  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  8307  0D1C  00D9               	movwf	??_sprintf
  8308  0D1D  3001               	movlw	1
  8309  0D1E  1003               	clrc
  8310  0D1F                     L13:	
  8311  0D1F  0DD9               	rlf	??_sprintf,f
  8312  0D20  3EFF               	addlw	-1
  8313  0D21  1003               	clrc
  8314  0D22  1D03               	skipz
  8315  0D23  2D1F               	goto	L13
  8316  0D24  272D               	fcall	PL14	;call to abstracted procedure
  8317  0D25  160A  158A  2000  120A  158A  	fcall	stringtab
  8318  0D2A  00DA               	movwf	??_sprintf+1
  8319  0D2B  160A  158A  2000  120A  158A  	fcall	stringtab
  8320  0D30  00DB               	movwf	??_sprintf+2
  8321  0D31  160A  158A  2000  120A  158A  	fcall	stringtab
  8322  0D36  00DC               	movwf	??_sprintf+3
  8323  0D37  160A  158A  2000  120A  158A  	fcall	stringtab
  8324  0D3C  00DD               	movwf	??_sprintf+4
  8325  0D3D  1683               	bsf	3,5	;RP0=1, select bank1
  8326  0D3E  0257               	subwf	(sprintf@val+3)^(0+128),w
  8327  0D3F  1D03               	skipz
  8328  0D40  2D51               	goto	u6265
  8329  0D41  1283               	bcf	3,5	;RP0=0, select bank0
  8330  0D42  085C               	movf	??_sprintf+3,w
  8331  0D43  1683               	bsf	3,5	;RP0=1, select bank1
  8332  0D44  0256               	subwf	(sprintf@val+2)^(0+128),w
  8333  0D45  1D03               	skipz
  8334  0D46  2D51               	goto	u6265
  8335  0D47  1283               	bcf	3,5	;RP0=0, select bank0
  8336  0D48  085B               	movf	??_sprintf+2,w
  8337  0D49  1683               	bsf	3,5	;RP0=1, select bank1
  8338  0D4A  0255               	subwf	(sprintf@val+1)^(0+128),w
  8339  0D4B  1D03               	skipz
  8340  0D4C  2D51               	goto	u6265
  8341  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  8342  0D4E  085A               	movf	??_sprintf+1,w
  8343  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  8344  0D50  0254               	subwf	sprintf@val^(0+128),w
  8345  0D51                     u6265:	
  8346  0D51  1C03               	btfss	3,0
  8347  0D52  2D58               	goto	l5465
  8348  0D53  300A               	movlw	10
  8349  0D54  0AE0               	incf	sprintf@c^(0+128),f
  8350  0D55  0660               	xorwf	sprintf@c^(0+128),w
  8351  0D56  1D03               	btfss	3,2
  8352  0D57  2D1A               	goto	l5457
  8353  0D58                     l5465:	
  8354                           
  8355                           ;doprnt.c: 1339: if(c < prec)
  8356  0D58  0860               	movf	sprintf@c^(0+128),w
  8357  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  8358  0D5A  00D9               	movwf	??_sprintf
  8359  0D5B  01DA               	clrf	??_sprintf+1
  8360  0D5C  1BD9               	btfsc	??_sprintf,7
  8361  0D5D  03DA               	decf	??_sprintf+1,f
  8362  0D5E  085A               	movf	??_sprintf+1,w
  8363  0D5F  3A80               	xorlw	128
  8364  0D60  00DB               	movwf	??_sprintf+2
  8365  0D61  1683               	bsf	3,5	;RP0=1, select bank1
  8366  0D62  085B               	movf	(sprintf@prec+1)^(0+128),w
  8367  0D63  3A80               	xorlw	128
  8368  0D64  1283               	bcf	3,5	;RP0=0, select bank0
  8369  0D65  025B               	subwf	??_sprintf+2,w
  8370  0D66  1D03               	skipz
  8371  0D67  2D6C               	goto	u6285
  8372  0D68  1683               	bsf	3,5	;RP0=1, select bank1
  8373  0D69  085A               	movf	sprintf@prec^(0+128),w
  8374  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  8375  0D6B  0259               	subwf	??_sprintf,w
  8376  0D6C                     u6285:	
  8377  0D6C  1C03               	btfss	3,0
  8378  0D6D  2D89               	goto	l5473
  8379                           
  8380                           ;doprnt.c: 1341: else if(prec < c)
  8381  0D6E  1683               	bsf	3,5	;RP0=1, select bank1
  8382  0D6F  1303               	bcf	3,6	;RP1=0, select bank1
  8383  0D70  0860               	movf	sprintf@c^(0+128),w
  8384  0D71  2783  120A  158A   	fcall	PL94	;call to abstracted procedure
  8385  0D74  085B               	movf	(sprintf@prec+1)^(0+128),w
  8386  0D75  3A80               	xorlw	128
  8387  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  8388  0D77  00DB               	movwf	??_sprintf+2
  8389  0D78  085A               	movf	??_sprintf+1,w
  8390  0D79  3A80               	xorlw	128
  8391  0D7A  025B               	subwf	??_sprintf+2,w
  8392  0D7B  1D03               	skipz
  8393  0D7C  2D80               	goto	u6295
  8394  0D7D  0859               	movf	??_sprintf,w
  8395  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  8396  0D7F  025A               	subwf	sprintf@prec^(0+128),w
  8397  0D80                     u6295:	
  8398  0D80  1803               	skipnc
  8399  0D81  2D89               	goto	l5473
  8400                           
  8401                           ;doprnt.c: 1342: prec = c;
  8402  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  8403  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  8404  0D84  0860               	movf	sprintf@c^(0+128),w
  8405  0D85  00DA               	movwf	sprintf@prec^(0+128)
  8406  0D86  01DB               	clrf	(sprintf@prec+1)^(0+128)
  8407  0D87  1BDA               	btfsc	sprintf@prec^(0+128),7
  8408  0D88  03DB               	decf	(sprintf@prec+1)^(0+128),f
  8409  0D89                     l5473:	
  8410                           
  8411                           ;doprnt.c: 1422: {
  8412                           ;doprnt.c: 1438: if(flag & 0x03)
  8413  0D89  1683               	bsf	3,5	;RP0=1, select bank1
  8414  0D8A  1303               	bcf	3,6	;RP1=0, select bank1
  8415  0D8B  084E               	movf	sprintf@flag^(0+128),w
  8416  0D8C  3903               	andlw	3
  8417  0D8D  1903               	btfsc	3,2
  8418  0D8E  2D95               	goto	l5485
  8419                           
  8420                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8421  0D8F  085F               	movf	sprintf@sp^(0+128),w
  8422  0D90  0084               	movwf	4
  8423  0D91  302D               	movlw	45
  8424  0D92                     L19:	
  8425  0D92  1383               	bcf	3,7	;select IRP bank0
  8426  0D93  0080               	movwf	0
  8427  0D94  0ADF               	incf	sprintf@sp^(0+128),f
  8428  0D95                     l5485:	
  8429  0D95  30FF               	movlw	-1
  8430  0D96  07DA               	addwf	sprintf@prec^(0+128),f
  8431  0D97  1C03               	skipc
  8432  0D98  03DB               	decf	(sprintf@prec+1)^(0+128),f
  8433  0D99  0F5A               	incfsz	sprintf@prec^(0+128),w
  8434  0D9A  2D9E               	goto	l5479
  8435  0D9B  0A5B               	incf	(sprintf@prec+1)^(0+128),w
  8436  0D9C  1903               	btfsc	3,2
  8437  0D9D  2938               	goto	l5487
  8438  0D9E                     l5479:	
  8439                           
  8440                           ;doprnt.c: 1478: {
  8441                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8442  0D9E  300A               	movlw	10
  8443  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  8444  0DA0  00A8               	movwf	___llmod@divisor
  8445  0DA1  01A9               	clrf	___llmod@divisor+1
  8446  0DA2  01AA               	clrf	___llmod@divisor+2
  8447  0DA3  01AB               	clrf	___llmod@divisor+3
  8448  0DA4  1683               	bsf	3,5	;RP0=1, select bank1
  8449  0DA5  085A               	movf	sprintf@prec^(0+128),w
  8450  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  8451  0DA7  00D9               	movwf	??_sprintf
  8452  0DA8  3001               	movlw	1
  8453  0DA9  1003               	clrc
  8454  0DAA                     L14:	
  8455  0DAA  0DD9               	rlf	??_sprintf,f
  8456  0DAB  3EFF               	addlw	-1
  8457  0DAC  1003               	clrc
  8458  0DAD  1D03               	skipz
  8459  0DAE  2DAA               	goto	L14
  8460  0DAF  272D               	fcall	PL14	;call to abstracted procedure
  8461  0DB0  160A  158A  2000  120A  158A  	fcall	stringtab
  8462  0DB5  00A0               	movwf	___lldiv@divisor
  8463  0DB6  160A  158A  2000  120A  158A  	fcall	stringtab
  8464  0DBB  00A1               	movwf	___lldiv@divisor+1
  8465  0DBC  160A  158A  2000  120A  158A  	fcall	stringtab
  8466  0DC1  00A2               	movwf	___lldiv@divisor+2
  8467  0DC2  160A  158A  2000  120A  158A  	fcall	stringtab
  8468  0DC7  26FB  120A  158A   	fcall	PL4	;call to abstracted procedure
  8469  0DCA  264F  120A  158A   	fcall	___lldiv
  8470  0DCD  0823               	movf	?___lldiv+3,w
  8471  0DCE  00AF               	movwf	___llmod@dividend+3
  8472  0DCF  0822               	movf	?___lldiv+2,w
  8473  0DD0  00AE               	movwf	___llmod@dividend+2
  8474  0DD1  0821               	movf	?___lldiv+1,w
  8475  0DD2  00AD               	movwf	___llmod@dividend+1
  8476  0DD3  0820               	movf	?___lldiv,w
  8477  0DD4  00AC               	movwf	___llmod@dividend
  8478  0DD5  2611  120A  158A   	fcall	___llmod
  8479  0DD8  0828               	movf	?___llmod,w
  8480  0DD9  3E30               	addlw	48
  8481  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  8482  0DDB  00E0               	movwf	sprintf@c^(0+128)
  8483                           
  8484                           ;doprnt.c: 1523: }
  8485                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8486  0DDC  085F               	movf	sprintf@sp^(0+128),w
  8487  0DDD  0084               	movwf	4
  8488  0DDE  0860               	movf	sprintf@c^(0+128),w
  8489  0DDF  2D92               	goto	L19
  8490  0DE0                     l5489:	
  8491                           
  8492                           ;doprnt.c: 1538: *sp = 0;
  8493  0DE0  085F               	movf	sprintf@sp^(0+128),w
  8494  0DE1  0084               	movwf	4
  8495  0DE2  1383               	bcf	3,7	;select IRP bank0
  8496  0DE3  0180               	clrf	0
  8497  0DE4  0008               	return
  8498  0DE5                     __end_of_sprintf:	
  8499  0DE5                     __ptext52:	
  8500 ;; *************** function ___ftge *****************
  8501 ;; Defined at:
  8502 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftge.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;  ff1             3   46[BANK0 ] float 
  8505 ;;  ff2             3   49[BANK0 ] float 
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		wreg, status,2, status,0
  8512 ;; Tracked objects:
  8513 ;;		On entry : 300/0
  8514 ;;		On exit  : 300/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8517 ;;      Params:         0       6       0       0       0
  8518 ;;      Locals:         0       0       0       0       0
  8519 ;;      Temps:          0       0       0       0       0
  8520 ;;      Totals:         0       6       0       0       0
  8521 ;;Total ram usage:        6 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    1
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_calcSHT71
  8528 ;;		_regulacija
  8529 ;;		_menuHumi
  8530 ;;		_menu
  8531 ;;		_sprintf
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           
  8536                           ;psect for function ___ftge
  8537  0DE5                     ___ftge:	
  8538                           
  8539                           ;incstack = 0
  8540                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8541  0DE5  1FD0               	btfss	___ftge@ff1+2,7
  8542  0DE6  2DF4               	goto	l3607
  8543  0DE7  084E               	movf	___ftge@ff1,w
  8544  0DE8  3C00               	sublw	0
  8545  0DE9  00CE               	movwf	___ftge@ff1
  8546  0DEA  084F               	movf	___ftge@ff1+1,w
  8547  0DEB  1C03               	skipc
  8548  0DEC  0F4F               	incfsz	___ftge@ff1+1,w
  8549  0DED  3C00               	sublw	0
  8550  0DEE  00CF               	movwf	___ftge@ff1+1
  8551  0DEF  0850               	movf	___ftge@ff1+2,w
  8552  0DF0  1C03               	skipc
  8553  0DF1  0F50               	incfsz	___ftge@ff1+2,w
  8554  0DF2  3C80               	sublw	128
  8555  0DF3  00D0               	movwf	___ftge@ff1+2
  8556  0DF4                     l3607:	
  8557  0DF4  1FD3               	btfss	___ftge@ff2+2,7
  8558  0DF5  2E03               	goto	l3611
  8559  0DF6  0851               	movf	___ftge@ff2,w
  8560  0DF7  3C00               	sublw	0
  8561  0DF8  00D1               	movwf	___ftge@ff2
  8562  0DF9  0852               	movf	___ftge@ff2+1,w
  8563  0DFA  1C03               	skipc
  8564  0DFB  0F52               	incfsz	___ftge@ff2+1,w
  8565  0DFC  3C00               	sublw	0
  8566  0DFD  00D2               	movwf	___ftge@ff2+1
  8567  0DFE  0853               	movf	___ftge@ff2+2,w
  8568  0DFF  1C03               	skipc
  8569  0E00  0F53               	incfsz	___ftge@ff2+2,w
  8570  0E01  3C80               	sublw	128
  8571  0E02  00D3               	movwf	___ftge@ff2+2
  8572  0E03                     l3611:	
  8573  0E03  3080               	movlw	128
  8574  0E04  06D0               	xorwf	___ftge@ff1+2,f
  8575  0E05  06D3               	xorwf	___ftge@ff2+2,f
  8576  0E06  0853               	movf	___ftge@ff2+2,w
  8577  0E07  0250               	subwf	___ftge@ff1+2,w
  8578  0E08  1D03               	skipz
  8579  0E09  0008               	return
  8580  0E0A  0852               	movf	___ftge@ff2+1,w
  8581  0E0B  024F               	subwf	___ftge@ff1+1,w
  8582  0E0C  1D03               	skipz
  8583  0E0D  0008               	return
  8584  0E0E  0851               	movf	___ftge@ff2,w
  8585  0E0F  024E               	subwf	___ftge@ff1,w
  8586  0E10  0008               	return
  8587  0E11                     __end_of___ftge:	
  8588  0E11                     __ptext46:	
  8589 ;; *************** function ___llmod *****************
  8590 ;; Defined at:
  8591 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\llmod.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  divisor         4    8[BANK0 ] unsigned long 
  8594 ;;  dividend        4   12[BANK0 ] unsigned long 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  counter         1    7[COMMON] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  4    8[BANK0 ] unsigned long 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0
  8601 ;; Tracked objects:
  8602 ;;		On entry : 300/0
  8603 ;;		On exit  : 300/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8606 ;;      Params:         0       8       0       0       0
  8607 ;;      Locals:         1       0       0       0       0
  8608 ;;      Temps:          0       0       0       0       0
  8609 ;;      Totals:         1       8       0       0       0
  8610 ;;Total ram usage:        9 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    1
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_sprintf
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function ___llmod
  8622  0E11                     ___llmod:	
  8623                           
  8624                           ;incstack = 0
  8625                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8626  0E11  082B               	movf	___llmod@divisor+3,w
  8627  0E12  042A               	iorwf	___llmod@divisor+2,w
  8628  0E13  0429               	iorwf	___llmod@divisor+1,w
  8629  0E14  0428               	iorwf	___llmod@divisor,w
  8630  0E15  1903               	skipnz
  8631  0E16  2E46               	goto	l3721
  8632  0E17  01F8               	clrf	___llmod@counter
  8633  0E18                     L27:	
  8634  0E18  0AF8               	incf	___llmod@counter,f
  8635  0E19  1BAB               	btfsc	___llmod@divisor+3,7
  8636  0E1A  2E21               	goto	l3713
  8637  0E1B  1003               	clrc
  8638  0E1C  0DA8               	rlf	___llmod@divisor,f
  8639  0E1D  0DA9               	rlf	___llmod@divisor+1,f
  8640  0E1E  0DAA               	rlf	___llmod@divisor+2,f
  8641  0E1F  0DAB               	rlf	___llmod@divisor+3,f
  8642  0E20  2E18               	goto	L27
  8643  0E21                     l3713:	
  8644  0E21  082B               	movf	___llmod@divisor+3,w
  8645  0E22  022F               	subwf	___llmod@dividend+3,w
  8646  0E23  1D03               	skipz
  8647  0E24  2E2F               	goto	u3935
  8648  0E25  082A               	movf	___llmod@divisor+2,w
  8649  0E26  022E               	subwf	___llmod@dividend+2,w
  8650  0E27  1D03               	skipz
  8651  0E28  2E2F               	goto	u3935
  8652  0E29  0829               	movf	___llmod@divisor+1,w
  8653  0E2A  022D               	subwf	___llmod@dividend+1,w
  8654  0E2B  1D03               	skipz
  8655  0E2C  2E2F               	goto	u3935
  8656  0E2D  0828               	movf	___llmod@divisor,w
  8657  0E2E  022C               	subwf	___llmod@dividend,w
  8658  0E2F                     u3935:	
  8659  0E2F  1C03               	skipc
  8660  0E30  2E40               	goto	L28
  8661  0E31  0828               	movf	___llmod@divisor,w
  8662  0E32  02AC               	subwf	___llmod@dividend,f
  8663  0E33  0829               	movf	___llmod@divisor+1,w
  8664  0E34  1C03               	skipc
  8665  0E35  0F29               	incfsz	___llmod@divisor+1,w
  8666  0E36  02AD               	subwf	___llmod@dividend+1,f
  8667  0E37  082A               	movf	___llmod@divisor+2,w
  8668  0E38  1C03               	skipc
  8669  0E39  0F2A               	incfsz	___llmod@divisor+2,w
  8670  0E3A  02AE               	subwf	___llmod@dividend+2,f
  8671  0E3B  082B               	movf	___llmod@divisor+3,w
  8672  0E3C  1C03               	skipc
  8673  0E3D  0F2B               	incfsz	___llmod@divisor+3,w
  8674  0E3E  02AF               	subwf	___llmod@dividend+3,f
  8675  0E3F  1003               	clrc
  8676  0E40                     L28:	
  8677  0E40  0CAB               	rrf	___llmod@divisor+3,f
  8678  0E41  0CAA               	rrf	___llmod@divisor+2,f
  8679  0E42  0CA9               	rrf	___llmod@divisor+1,f
  8680  0E43  0CA8               	rrf	___llmod@divisor,f
  8681  0E44  0BF8               	decfsz	___llmod@counter,f
  8682  0E45  2E21               	goto	l3713
  8683  0E46                     l3721:	
  8684  0E46  082F               	movf	___llmod@dividend+3,w
  8685  0E47  00AB               	movwf	?___llmod+3
  8686  0E48  082E               	movf	___llmod@dividend+2,w
  8687  0E49  00AA               	movwf	?___llmod+2
  8688  0E4A  082D               	movf	___llmod@dividend+1,w
  8689  0E4B  00A9               	movwf	?___llmod+1
  8690  0E4C  082C               	movf	___llmod@dividend,w
  8691  0E4D  00A8               	movwf	?___llmod
  8692  0E4E  0008               	return
  8693  0E4F                     __end_of___llmod:	
  8694  0E4F                     __ptext60:	
  8695 ;; *************** function ___lldiv *****************
  8696 ;; Defined at:
  8697 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lldiv.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  divisor         4    0[BANK0 ] unsigned long 
  8700 ;;  dividend        4    4[BANK0 ] unsigned long 
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  quotient        4    2[COMMON] unsigned long 
  8703 ;;  counter         1    6[COMMON] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  4    0[BANK0 ] unsigned long 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 300/0
  8710 ;;		On exit  : 300/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8713 ;;      Params:         0       8       0       0       0
  8714 ;;      Locals:         5       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0
  8716 ;;      Totals:         5       8       0       0       0
  8717 ;;Total ram usage:       13 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    1
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_UARTInit
  8724 ;;		_sprintf
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function ___lldiv
  8730  0E4F                     ___lldiv:	
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8734  0E4F  01F3               	clrf	___lldiv@quotient
  8735  0E50  01F4               	clrf	___lldiv@quotient+1
  8736  0E51  01F5               	clrf	___lldiv@quotient+2
  8737  0E52  01F6               	clrf	___lldiv@quotient+3
  8738  0E53  0823               	movf	___lldiv@divisor+3,w
  8739  0E54  0422               	iorwf	___lldiv@divisor+2,w
  8740  0E55  0421               	iorwf	___lldiv@divisor+1,w
  8741  0E56  0420               	iorwf	___lldiv@divisor,w
  8742  0E57  1903               	skipnz
  8743  0E58  2E8E               	goto	l5237
  8744  0E59  01F7               	clrf	___lldiv@counter
  8745  0E5A                     L31:	
  8746  0E5A  0AF7               	incf	___lldiv@counter,f
  8747  0E5B  1BA3               	btfsc	___lldiv@divisor+3,7
  8748  0E5C  2E63               	goto	l5225
  8749  0E5D  1003               	clrc
  8750  0E5E  0DA0               	rlf	___lldiv@divisor,f
  8751  0E5F  0DA1               	rlf	___lldiv@divisor+1,f
  8752  0E60  0DA2               	rlf	___lldiv@divisor+2,f
  8753  0E61  0DA3               	rlf	___lldiv@divisor+3,f
  8754  0E62  2E5A               	goto	L31
  8755  0E63                     l5225:	
  8756  0E63  1003               	clrc
  8757  0E64  0DF3               	rlf	___lldiv@quotient,f
  8758  0E65  0DF4               	rlf	___lldiv@quotient+1,f
  8759  0E66  0DF5               	rlf	___lldiv@quotient+2,f
  8760  0E67  0DF6               	rlf	___lldiv@quotient+3,f
  8761  0E68  0823               	movf	___lldiv@divisor+3,w
  8762  0E69  0227               	subwf	___lldiv@dividend+3,w
  8763  0E6A  1D03               	skipz
  8764  0E6B  2E76               	goto	u5895
  8765  0E6C  0822               	movf	___lldiv@divisor+2,w
  8766  0E6D  0226               	subwf	___lldiv@dividend+2,w
  8767  0E6E  1D03               	skipz
  8768  0E6F  2E76               	goto	u5895
  8769  0E70  0821               	movf	___lldiv@divisor+1,w
  8770  0E71  0225               	subwf	___lldiv@dividend+1,w
  8771  0E72  1D03               	skipz
  8772  0E73  2E76               	goto	u5895
  8773  0E74  0820               	movf	___lldiv@divisor,w
  8774  0E75  0224               	subwf	___lldiv@dividend,w
  8775  0E76                     u5895:	
  8776  0E76  1C03               	skipc
  8777  0E77  2E88               	goto	L32
  8778  0E78  0820               	movf	___lldiv@divisor,w
  8779  0E79  02A4               	subwf	___lldiv@dividend,f
  8780  0E7A  0821               	movf	___lldiv@divisor+1,w
  8781  0E7B  1C03               	skipc
  8782  0E7C  0F21               	incfsz	___lldiv@divisor+1,w
  8783  0E7D  02A5               	subwf	___lldiv@dividend+1,f
  8784  0E7E  0822               	movf	___lldiv@divisor+2,w
  8785  0E7F  1C03               	skipc
  8786  0E80  0F22               	incfsz	___lldiv@divisor+2,w
  8787  0E81  02A6               	subwf	___lldiv@dividend+2,f
  8788  0E82  0823               	movf	___lldiv@divisor+3,w
  8789  0E83  1C03               	skipc
  8790  0E84  0F23               	incfsz	___lldiv@divisor+3,w
  8791  0E85  02A7               	subwf	___lldiv@dividend+3,f
  8792  0E86  1473               	bsf	___lldiv@quotient,0
  8793  0E87  1003               	clrc
  8794  0E88                     L32:	
  8795  0E88  0CA3               	rrf	___lldiv@divisor+3,f
  8796  0E89  0CA2               	rrf	___lldiv@divisor+2,f
  8797  0E8A  0CA1               	rrf	___lldiv@divisor+1,f
  8798  0E8B  0CA0               	rrf	___lldiv@divisor,f
  8799  0E8C  0BF7               	decfsz	___lldiv@counter,f
  8800  0E8D  2E63               	goto	l5225
  8801  0E8E                     l5237:	
  8802  0E8E  0876               	movf	___lldiv@quotient+3,w
  8803  0E8F  00A3               	movwf	?___lldiv+3
  8804  0E90  0875               	movf	___lldiv@quotient+2,w
  8805  0E91  00A2               	movwf	?___lldiv+2
  8806  0E92  0874               	movf	___lldiv@quotient+1,w
  8807  0E93  00A1               	movwf	?___lldiv+1
  8808  0E94  0873               	movf	___lldiv@quotient,w
  8809  0E95  00A0               	movwf	?___lldiv
  8810  0E96  0008               	return
  8811  0E97                     __end_of___lldiv:	
  8812  0E97                     __ptext44:	
  8813 ;; *************** function ___wmul *****************
  8814 ;; Defined at:
  8815 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  multiplier      2    2[COMMON] unsigned int 
  8818 ;;  multiplicand    2    4[COMMON] unsigned int 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;  product         2    6[COMMON] unsigned int 
  8821 ;; Return value:  Size  Location     Type
  8822 ;;                  2    2[COMMON] unsigned int 
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0
  8825 ;; Tracked objects:
  8826 ;;		On entry : 200/0
  8827 ;;		On exit  : 200/0
  8828 ;;		Unchanged: 200/0
  8829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8830 ;;      Params:         4       0       0       0       0
  8831 ;;      Locals:         2       0       0       0       0
  8832 ;;      Temps:          0       0       0       0       0
  8833 ;;      Totals:         6       0       0       0       0
  8834 ;;Total ram usage:        6 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    1
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		_LcdWriteInt
  8841 ;;		_measureTGS4161
  8842 ;;		_sprintf
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           
  8847                           ;psect for function ___wmul
  8848  0E97                     ___wmul:	
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8852  0E97  01F7               	clrf	___wmul@product
  8853  0E98  01F8               	clrf	___wmul@product+1
  8854  0E99                     l3051:	
  8855  0E99  1C73               	btfss	___wmul@multiplier,0
  8856  0E9A  2EA1               	goto	l3055
  8857  0E9B  0875               	movf	___wmul@multiplicand,w
  8858  0E9C  07F7               	addwf	___wmul@product,f
  8859  0E9D  1803               	skipnc
  8860  0E9E  0AF8               	incf	___wmul@product+1,f
  8861  0E9F  0876               	movf	___wmul@multiplicand+1,w
  8862  0EA0  07F8               	addwf	___wmul@product+1,f
  8863  0EA1                     l3055:	
  8864  0EA1  1003               	clrc
  8865  0EA2  0DF5               	rlf	___wmul@multiplicand,f
  8866  0EA3  0DF6               	rlf	___wmul@multiplicand+1,f
  8867  0EA4  1003               	clrc
  8868  0EA5  0CF4               	rrf	___wmul@multiplier+1,f
  8869  0EA6  0CF3               	rrf	___wmul@multiplier,f
  8870  0EA7  0873               	movf	___wmul@multiplier,w
  8871  0EA8  0474               	iorwf	___wmul@multiplier+1,w
  8872  0EA9  1D03               	btfss	3,2
  8873  0EAA  2E99               	goto	l3051
  8874  0EAB  0878               	movf	___wmul@product+1,w
  8875  0EAC  00F4               	movwf	?___wmul+1
  8876  0EAD  0877               	movf	___wmul@product,w
  8877  0EAE  00F3               	movwf	?___wmul
  8878  0EAF  0008               	return
  8879  0EB0                     __end_of___wmul:	
  8880  0EB0                     __ptext51:	
  8881 ;; *************** function ___ftneg *****************
  8882 ;; Defined at:
  8883 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftneg.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  f1              3    2[COMMON] float 
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;		None
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  3    2[COMMON] float 
  8890 ;; Registers used:
  8891 ;;		wreg
  8892 ;; Tracked objects:
  8893 ;;		On entry : 300/100
  8894 ;;		On exit  : 300/100
  8895 ;;		Unchanged: 300/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8897 ;;      Params:         3       0       0       0       0
  8898 ;;      Locals:         0       0       0       0       0
  8899 ;;      Temps:          0       0       0       0       0
  8900 ;;      Totals:         3       0       0       0       0
  8901 ;;Total ram usage:        3 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    1
  8904 ;; This function calls:
  8905 ;;		Nothing
  8906 ;; This function is called by:
  8907 ;;		_sprintf
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           
  8912                           ;psect for function ___ftneg
  8913  0EB0                     ___ftneg:	
  8914                           
  8915                           ;incstack = 0
  8916                           ; Regs used in ___ftneg: [wreg]
  8917  0EB0  0875               	movf	___ftneg@f1+2,w
  8918  0EB1  0474               	iorwf	___ftneg@f1+1,w
  8919  0EB2  0473               	iorwf	___ftneg@f1,w
  8920  0EB3  1903               	skipnz
  8921  0EB4  0008               	return
  8922  0EB5  3080               	movlw	128
  8923  0EB6  06F5               	xorwf	___ftneg@f1+2,f
  8924  0EB7  0008               	return
  8925  0EB8                     __end_of___ftneg:	
  8926  0EB8                     __ptext48:	
  8927 ;; *************** function ___ftsub *****************
  8928 ;; Defined at:
  8929 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftsub.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  f2              3   46[BANK0 ] float 
  8932 ;;  f1              3   49[BANK0 ] float 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  3   46[BANK0 ] float 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 300/0
  8941 ;;		On exit  : 300/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8944 ;;      Params:         0       6       0       0       0
  8945 ;;      Locals:         0       0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0
  8947 ;;      Totals:         0       6       0       0       0
  8948 ;;Total ram usage:        6 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    3
  8951 ;; This function calls:
  8952 ;;		___ftadd
  8953 ;; This function is called by:
  8954 ;;		_menuHumi
  8955 ;;		_menu
  8956 ;;		_sprintf
  8957 ;; This function uses a non-reentrant model
  8958 ;;
  8959                           
  8960                           
  8961                           ;psect for function ___ftsub
  8962  0EB8                     ___ftsub:	
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8966  0EB8  0850               	movf	___ftsub@f2+2,w
  8967  0EB9  044F               	iorwf	___ftsub@f2+1,w
  8968  0EBA  044E               	iorwf	___ftsub@f2,w
  8969  0EBB  1903               	skipnz
  8970  0EBC  2EBF               	goto	l5211
  8971  0EBD  3080               	movlw	128
  8972  0EBE  06D0               	xorwf	___ftsub@f2+2,f
  8973  0EBF                     l5211:	
  8974  0EBF  0851               	movf	___ftsub@f1,w
  8975  0EC0  00C2               	movwf	___ftadd@f1
  8976  0EC1  0852               	movf	___ftsub@f1+1,w
  8977  0EC2  00C3               	movwf	___ftadd@f1+1
  8978  0EC3  0853               	movf	___ftsub@f1+2,w
  8979  0EC4  00C4               	movwf	___ftadd@f1+2
  8980  0EC5  084E               	movf	___ftsub@f2,w
  8981  0EC6  00C5               	movwf	___ftadd@f2
  8982  0EC7  084F               	movf	___ftsub@f2+1,w
  8983  0EC8  00C6               	movwf	___ftadd@f2+1
  8984  0EC9  0850               	movf	___ftsub@f2+2,w
  8985  0ECA  00C7               	movwf	___ftadd@f2+2
  8986  0ECB  160A  118A  263A   	fcall	___ftadd
  8987  0ECE  0842               	movf	?___ftadd,w
  8988  0ECF  00CE               	movwf	?___ftsub
  8989  0ED0  0843               	movf	?___ftadd+1,w
  8990  0ED1  00CF               	movwf	?___ftsub+1
  8991  0ED2  0844               	movf	?___ftadd+2,w
  8992  0ED3  00D0               	movwf	?___ftsub+2
  8993  0ED4  0008               	return
  8994  0ED5                     __end_of___ftsub:	
  8995  0ED5                     PL2:	
  8996  0ED5  0823               	movf	?___lldiv+3,w
  8997  0ED6  1683               	bsf	3,5	;RP0=1, select bank1
  8998  0ED7  00D3               	movwf	(sprintf@tmpval+3)^(0+128)
  8999  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  9000  0ED9  0822               	movf	?___lldiv+2,w
  9001  0EDA  1683               	bsf	3,5	;RP0=1, select bank1
  9002  0EDB  00D2               	movwf	(sprintf@tmpval+2)^(0+128)
  9003  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  9004  0EDD  0821               	movf	?___lldiv+1,w
  9005  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  9006  0EDF  00D1               	movwf	(sprintf@tmpval+1)^(0+128)
  9007  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  9008  0EE1  0820               	movf	?___lldiv,w
  9009  0EE2  1683               	bsf	3,5	;RP0=1, select bank1
  9010  0EE3  00D0               	movwf	sprintf@tmpval^(0+128)
  9011  0EE4  300A               	movlw	10
  9012  0EE5  1283               	bcf	3,5	;RP0=0, select bank0
  9013  0EE6  00A8               	movwf	___llmod@divisor
  9014  0EE7  01A9               	clrf	___llmod@divisor+1
  9015  0EE8  01AA               	clrf	___llmod@divisor+2
  9016  0EE9  01AB               	clrf	___llmod@divisor+3
  9017  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  9018  0EEB  0853               	movf	(sprintf@tmpval+3)^(0+128),w
  9019  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  9020  0EED  00AF               	movwf	___llmod@dividend+3
  9021  0EEE  1683               	bsf	3,5	;RP0=1, select bank1
  9022  0EEF  0852               	movf	(sprintf@tmpval+2)^(0+128),w
  9023  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  9024  0EF1  00AE               	movwf	___llmod@dividend+2
  9025  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  9026  0EF3  0851               	movf	(sprintf@tmpval+1)^(0+128),w
  9027  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  9028  0EF5  00AD               	movwf	___llmod@dividend+1
  9029  0EF6  1683               	bsf	3,5	;RP0=1, select bank1
  9030  0EF7  0850               	movf	sprintf@tmpval^(0+128),w
  9031  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  9032  0EF9  00AC               	movwf	___llmod@dividend
  9033  0EFA  0008               	return
  9034  0EFB                     __end_ofPL2:	
  9035  0EFB                     PL4:	
  9036  0EFB  00A3               	movwf	___lldiv@divisor+3
  9037  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  9038  0EFD  0857               	movf	(sprintf@val+3)^(0+128),w
  9039  0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  9040  0EFF  00A7               	movwf	___lldiv@dividend+3
  9041  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  9042  0F01  0856               	movf	(sprintf@val+2)^(0+128),w
  9043  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  9044  0F03  00A6               	movwf	___lldiv@dividend+2
  9045  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  9046  0F05  0855               	movf	(sprintf@val+1)^(0+128),w
  9047  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  9048  0F07  00A5               	movwf	___lldiv@dividend+1
  9049  0F08  1683               	bsf	3,5	;RP0=1, select bank1
  9050  0F09  0854               	movf	sprintf@val^(0+128),w
  9051  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  9052  0F0B  00A4               	movwf	___lldiv@dividend
  9053  0F0C  0008               	return
  9054  0F0D                     __end_ofPL4:	
  9055  0F0D                     PL10:	
  9056  0F0D  082B               	movf	?___llmod+3,w
  9057  0F0E  1683               	bsf	3,5	;RP0=1, select bank1
  9058  0F0F  00D3               	movwf	(sprintf@tmpval+3)^(0+128)
  9059  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  9060  0F11  082A               	movf	?___llmod+2,w
  9061  0F12  1683               	bsf	3,5	;RP0=1, select bank1
  9062  0F13  00D2               	movwf	(sprintf@tmpval+2)^(0+128)
  9063  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  9064  0F15  0829               	movf	?___llmod+1,w
  9065  0F16  1683               	bsf	3,5	;RP0=1, select bank1
  9066  0F17  00D1               	movwf	(sprintf@tmpval+1)^(0+128)
  9067  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  9068  0F19  0828               	movf	?___llmod,w
  9069  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
  9070  0F1B  00D0               	movwf	sprintf@tmpval^(0+128)
  9071  0F1C  085F               	movf	sprintf@sp^(0+128),w
  9072  0F1D  0084               	movwf	4
  9073  0F1E  0850               	movf	sprintf@tmpval^(0+128),w
  9074  0F1F  3E30               	addlw	48
  9075  0F20  0008               	return
  9076  0F21                     __end_ofPL10:	
  9077  0F21                     PL12:	
  9078  0F21  0850               	movf	sprintf@tmpval^(0+128),w
  9079  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  9080  0F23  00CE               	movwf	___ftge@ff1
  9081  0F24  1683               	bsf	3,5	;RP0=1, select bank1
  9082  0F25  0851               	movf	(sprintf@tmpval+1)^(0+128),w
  9083  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  9084  0F27  00CF               	movwf	___ftge@ff1+1
  9085  0F28  1683               	bsf	3,5	;RP0=1, select bank1
  9086  0F29  0852               	movf	(sprintf@tmpval+2)^(0+128),w
  9087  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  9088  0F2B  00D0               	movwf	___ftge@ff1+2
  9089  0F2C  0008               	return
  9090  0F2D                     __end_ofPL12:	
  9091  0F2D                     PL14:	
  9092  0F2D  0D59               	rlf	??_sprintf,w
  9093  0F2E  3E60               	addlw	low (_dpowers| (0+32768))
  9094  0F2F  0084               	movwf	4
  9095  0F30  3098               	movlw	high (_dpowers| (0+32768))
  9096  0F31  1803               	skipnc
  9097  0F32  3E01               	addlw	1
  9098  0F33  00FF               	movwf	127
  9099  0F34  0008               	return
  9100  0F35                     __end_ofPL14:	
  9101  0F35                     PL24:	
  9102  0F35  0845               	movf	?___fttol+3,w
  9103  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  9104  0F37  00D7               	movwf	(sprintf@val+3)^(0+128)
  9105  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  9106  0F39  0844               	movf	?___fttol+2,w
  9107  0F3A  1683               	bsf	3,5	;RP0=1, select bank1
  9108  0F3B  00D6               	movwf	(sprintf@val+2)^(0+128)
  9109  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  9110  0F3D  0843               	movf	?___fttol+1,w
  9111  0F3E  1683               	bsf	3,5	;RP0=1, select bank1
  9112  0F3F  00D5               	movwf	(sprintf@val+1)^(0+128)
  9113  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  9114  0F41  0842               	movf	?___fttol,w
  9115  0F42  0008               	return
  9116  0F43                     __end_ofPL24:	
  9117  0F43                     PL36:	
  9118  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  9119  0F44  0855               	movf	sprintf@f+1,w
  9120  0F45  00DA               	movwf	??_sprintf+1
  9121  0F46  0854               	movf	sprintf@f,w
  9122  0F47  00D9               	movwf	??_sprintf
  9123  0F48  0AD4               	incf	sprintf@f,f
  9124  0F49  1903               	skipnz
  9125  0F4A  0AD5               	incf	sprintf@f+1,f
  9126  0F4B  085A               	movf	??_sprintf+1,w
  9127  0F4C  00FF               	movwf	127
  9128  0F4D  0859               	movf	??_sprintf,w
  9129  0F4E  0084               	movwf	4
  9130  0F4F  0008               	return
  9131  0F50                     __end_ofPL36:	
  9132  0F50                     PL42:	
  9133  0F50  0837               	movf	?_scale,w
  9134  0F51  1683               	bsf	3,5	;RP0=1, select bank1
  9135  0F52  00D0               	movwf	sprintf@tmpval^(0+128)
  9136  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  9137  0F54  0838               	movf	?_scale+1,w
  9138  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  9139  0F56  00D1               	movwf	(sprintf@tmpval+1)^(0+128)
  9140  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  9141  0F58  0839               	movf	?_scale+2,w
  9142  0F59  1683               	bsf	3,5	;RP0=1, select bank1
  9143  0F5A  00D2               	movwf	(sprintf@tmpval+2)^(0+128)
  9144  0F5B  085C               	movf	sprintf@fval^(0+128),w
  9145  0F5C  0008               	return
  9146  0F5D                     __end_ofPL42:	
  9147  0F5D                     PL46:	
  9148  0F5D  085C               	movf	sprintf@fval^(0+128),w
  9149  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  9150  0F5F  00C2               	movwf	___fttol@f1
  9151  0F60  1683               	bsf	3,5	;RP0=1, select bank1
  9152  0F61  085D               	movf	(sprintf@fval+1)^(0+128),w
  9153  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  9154  0F63  00C3               	movwf	___fttol@f1+1
  9155  0F64  1683               	bsf	3,5	;RP0=1, select bank1
  9156  0F65  085E               	movf	(sprintf@fval+2)^(0+128),w
  9157  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  9158  0F67  00C4               	movwf	___fttol@f1+2
  9159  0F68  0008               	return
  9160  0F69                     __end_ofPL46:	
  9161  0F69                     PL52:	
  9162  0F69  1283               	bcf	3,5	;RP0=0, select bank0
  9163  0F6A  00A8               	movwf	___ftmul@f1
  9164  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  9165  0F6C  085D               	movf	(sprintf@fval+1)^(0+128),w
  9166  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  9167  0F6E  00A9               	movwf	___ftmul@f1+1
  9168  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  9169  0F70  085E               	movf	(sprintf@fval+2)^(0+128),w
  9170  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  9171  0F72  00AA               	movwf	___ftmul@f1+2
  9172  0F73  0008               	return
  9173  0F74                     __end_ofPL52:	
  9174  0F74                     PL66:	
  9175  0F74  085F               	movf	sprintf@sp^(0+128),w
  9176  0F75  0084               	movwf	4
  9177  0F76  3030               	movlw	48
  9178  0F77  1383               	bcf	3,7	;select IRP bank0
  9179  0F78  0080               	movwf	0
  9180  0F79  30FF               	movlw	-1
  9181  0F7A  0ADF               	incf	sprintf@sp^(0+128),f
  9182  0F7B  0008               	return
  9183  0F7C                     __end_ofPL66:	
  9184  0F7C                     PL88:	
  9185  0F7C  0800               	movf	0,w
  9186  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  9187  0F7E  00D9               	movwf	??_sprintf
  9188  0F7F  0A84               	incf	4,f
  9189  0F80  0800               	movf	0,w
  9190  0F81  00DA               	movwf	??_sprintf+1
  9191  0F82  0008               	return
  9192  0F83                     __end_ofPL88:	
  9193  0F83                     PL94:	
  9194  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  9195  0F84  00D9               	movwf	??_sprintf
  9196  0F85  01DA               	clrf	??_sprintf+1
  9197  0F86  1BD9               	btfsc	??_sprintf,7
  9198  0F87  03DA               	decf	??_sprintf+1,f
  9199  0F88  1683               	bsf	3,5	;RP0=1, select bank1
  9200  0F89  0008               	return
  9201  0F8A                     __end_ofPL94:	
  9202  0F8A                     PL96:	
  9203  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  9204  0F8B  0855               	movf	sprintf@f+1,w
  9205  0F8C  00FF               	movwf	127
  9206  0F8D  0854               	movf	sprintf@f,w
  9207  0F8E  0084               	movwf	4
  9208  0F8F  0008               	return
  9209  0F90                     __end_ofPL96:	
  9210  0F90                     __ptext47:	
  9211 ;; *************** function ___fttol *****************
  9212 ;; Defined at:
  9213 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fttol.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  f1              3   34[BANK0 ] float 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  lval            4   42[BANK0 ] unsigned long 
  9218 ;;  exp1            1   46[BANK0 ] unsigned char 
  9219 ;;  sign1           1   41[BANK0 ] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  4   34[BANK0 ] long 
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0
  9224 ;; Tracked objects:
  9225 ;;		On entry : 300/0
  9226 ;;		On exit  : 300/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9229 ;;      Params:         0       4       0       0       0
  9230 ;;      Locals:         0       6       0       0       0
  9231 ;;      Temps:          0       3       0       0       0
  9232 ;;      Totals:         0      13       0       0       0
  9233 ;;Total ram usage:       13 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    1
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_sprintf
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           
  9244                           ;psect for function ___fttol
  9245  0F90                     ___fttol:	
  9246                           
  9247                           ;incstack = 0
  9248                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9249  0F90  27EB  120A  158A   	fcall	PL80	;call to abstracted procedure
  9250  0F93  1003               	clrc
  9251  0F94  0D47               	rlf	??___fttol+1,w
  9252  0F95  0D48               	rlf	??___fttol+2,w
  9253  0F96  00CE               	movwf	___fttol@exp1
  9254  0F97  084E               	movf	___fttol@exp1,w
  9255  0F98  1D03               	btfss	3,2
  9256  0F99  2F9F               	goto	l3643
  9257  0F9A                     l3641:	
  9258  0F9A  01C2               	clrf	?___fttol
  9259  0F9B  01C3               	clrf	?___fttol+1
  9260  0F9C  01C4               	clrf	?___fttol+2
  9261  0F9D  01C5               	clrf	?___fttol+3
  9262  0F9E  0008               	return
  9263  0F9F                     l3643:	
  9264  0F9F  27EB  120A  158A   	fcall	PL80	;call to abstracted procedure
  9265  0FA2  3017               	movlw	23
  9266  0FA3                     u3805:	
  9267  0FA3  1003               	clrc
  9268  0FA4  0CC8               	rrf	??___fttol+2,f
  9269  0FA5  0CC7               	rrf	??___fttol+1,f
  9270  0FA6  0CC6               	rrf	??___fttol,f
  9271  0FA7  3EFF               	addlw	-1
  9272  0FA8  1D03               	skipz
  9273  0FA9  2FA3               	goto	u3805
  9274  0FAA  0846               	movf	??___fttol,w
  9275  0FAB  00C9               	movwf	___fttol@sign1
  9276  0FAC  17C3               	bsf	___fttol@f1+1,7
  9277  0FAD  01C4               	clrf	___fttol@f1+2
  9278  0FAE  0842               	movf	___fttol@f1,w
  9279  0FAF  00CA               	movwf	___fttol@lval
  9280  0FB0  0843               	movf	___fttol@f1+1,w
  9281  0FB1  00CB               	movwf	___fttol@lval+1
  9282  0FB2  0844               	movf	___fttol@f1+2,w
  9283  0FB3  00CC               	movwf	___fttol@lval+2
  9284  0FB4  308E               	movlw	142
  9285  0FB5  01CD               	clrf	___fttol@lval+3
  9286  0FB6  02CE               	subwf	___fttol@exp1,f
  9287  0FB7  1FCE               	btfss	___fttol@exp1,7
  9288  0FB8  2FC6               	goto	l3663
  9289  0FB9  084E               	movf	___fttol@exp1,w
  9290  0FBA  3A80               	xorlw	128
  9291  0FBB  3E8F               	addlw	143
  9292  0FBC  1C03               	btfss	3,0
  9293  0FBD  2F9A               	goto	l3641
  9294  0FBE                     l3659:	
  9295  0FBE  1003               	clrc
  9296  0FBF  0CCD               	rrf	___fttol@lval+3,f
  9297  0FC0  0CCC               	rrf	___fttol@lval+2,f
  9298  0FC1  0CCB               	rrf	___fttol@lval+1,f
  9299  0FC2  0CCA               	rrf	___fttol@lval,f
  9300  0FC3  0FCE               	incfsz	___fttol@exp1,f
  9301  0FC4  2FBE               	goto	l3659
  9302  0FC5  2FD4               	goto	l3671
  9303  0FC6                     l3663:	
  9304  0FC6  3018               	movlw	24
  9305  0FC7  024E               	subwf	___fttol@exp1,w
  9306  0FC8  1803               	btfsc	3,0
  9307  0FC9  2F9A               	goto	l3641
  9308  0FCA                     l3669:	
  9309  0FCA  084E               	movf	___fttol@exp1,w
  9310  0FCB  1903               	btfsc	3,2
  9311  0FCC  2FD4               	goto	l3671
  9312  0FCD  1003               	clrc
  9313  0FCE  0DCA               	rlf	___fttol@lval,f
  9314  0FCF  0DCB               	rlf	___fttol@lval+1,f
  9315  0FD0  0DCC               	rlf	___fttol@lval+2,f
  9316  0FD1  0DCD               	rlf	___fttol@lval+3,f
  9317  0FD2  03CE               	decf	___fttol@exp1,f
  9318  0FD3  2FCA               	goto	l3669
  9319  0FD4                     l3671:	
  9320  0FD4  0849               	movf	___fttol@sign1,w
  9321  0FD5  1903               	btfsc	3,2
  9322  0FD6  2FE2               	goto	l3675
  9323  0FD7  09CA               	comf	___fttol@lval,f
  9324  0FD8  09CB               	comf	___fttol@lval+1,f
  9325  0FD9  09CC               	comf	___fttol@lval+2,f
  9326  0FDA  09CD               	comf	___fttol@lval+3,f
  9327  0FDB  0ACA               	incf	___fttol@lval,f
  9328  0FDC  1903               	skipnz
  9329  0FDD  0ACB               	incf	___fttol@lval+1,f
  9330  0FDE  1903               	skipnz
  9331  0FDF  0ACC               	incf	___fttol@lval+2,f
  9332  0FE0  1903               	skipnz
  9333  0FE1  0ACD               	incf	___fttol@lval+3,f
  9334  0FE2                     l3675:	
  9335  0FE2  084D               	movf	___fttol@lval+3,w
  9336  0FE3  00C5               	movwf	?___fttol+3
  9337  0FE4  084C               	movf	___fttol@lval+2,w
  9338  0FE5  00C4               	movwf	?___fttol+2
  9339  0FE6  084B               	movf	___fttol@lval+1,w
  9340  0FE7  00C3               	movwf	?___fttol+1
  9341  0FE8  084A               	movf	___fttol@lval,w
  9342  0FE9  00C2               	movwf	?___fttol
  9343  0FEA  0008               	return
  9344  0FEB                     __end_of___fttol:	
  9345  0FEB                     PL80:	
  9346  0FEB  0842               	movf	___fttol@f1,w
  9347  0FEC  00C6               	movwf	??___fttol
  9348  0FED  0843               	movf	___fttol@f1+1,w
  9349  0FEE  00C7               	movwf	??___fttol+1
  9350  0FEF  0844               	movf	___fttol@f1+2,w
  9351  0FF0  00C8               	movwf	??___fttol+2
  9352  0FF1  0008               	return
  9353  0FF2                     __end_ofPL80:	
  9354  0FF2                     __ptext36:	
  9355 ;; *************** function _isdigit *****************
  9356 ;; Defined at:
  9357 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  c               1    wreg     unsigned char 
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;  c               1    3[COMMON] unsigned char 
  9362 ;; Return value:  Size  Location     Type
  9363 ;;		None               void
  9364 ;; Registers used:
  9365 ;;		wreg, status,2, status,0
  9366 ;; Tracked objects:
  9367 ;;		On entry : 300/0
  9368 ;;		On exit  : 300/0
  9369 ;;		Unchanged: 300/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9371 ;;      Params:         0       0       0       0       0
  9372 ;;      Locals:         2       0       0       0       0
  9373 ;;      Temps:          0       0       0       0       0
  9374 ;;      Totals:         2       0       0       0       0
  9375 ;;Total ram usage:        2 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    1
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_sprintf
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function _isdigit
  9387  0FF2                     _isdigit:	
  9388                           
  9389                           ;incstack = 0
  9390                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9391                           ;isdigit@c stored from wreg
  9392  0FF2  00F4               	movwf	isdigit@c
  9393  0FF3  303A               	movlw	58
  9394  0FF4  01F3               	clrf	_isdigit$829
  9395  0FF5  0274               	subwf	isdigit@c,w
  9396  0FF6  1803               	skipnc
  9397  0FF7  2FFE               	goto	l3501
  9398  0FF8  3030               	movlw	48
  9399  0FF9  0274               	subwf	isdigit@c,w
  9400  0FFA  1C03               	skipc
  9401  0FFB  2FFE               	goto	l3501
  9402  0FFC  01F3               	clrf	_isdigit$829
  9403  0FFD  0AF3               	incf	_isdigit$829,f
  9404  0FFE                     l3501:	
  9405  0FFE  0C73               	rrf	_isdigit$829,w
  9406  0FFF  0008               	return
  9407  1000                     __end_of_isdigit:	
  9408                           
  9409                           	psect	text42
  9410  1C7C                     __ptext42:	
  9411 ;; *************** function __tdiv_to_l_ *****************
  9412 ;; Defined at:
  9413 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftdivl.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;  f1              3    2[COMMON] float 
  9416 ;;  f2              3    5[COMMON] float 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  quot            4    3[BANK0 ] unsigned long 
  9419 ;;  exp1            1    8[BANK0 ] unsigned char 
  9420 ;;  cntr            1    7[BANK0 ] unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;                  4    2[COMMON] unsigned long 
  9423 ;; Registers used:
  9424 ;;		wreg, status,2, status,0
  9425 ;; Tracked objects:
  9426 ;;		On entry : 300/100
  9427 ;;		On exit  : 300/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9430 ;;      Params:         6       0       0       0       0
  9431 ;;      Locals:         0       6       0       0       0
  9432 ;;      Temps:          0       3       0       0       0
  9433 ;;      Totals:         6       9       0       0       0
  9434 ;;Total ram usage:       15 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    1
  9437 ;; This function calls:
  9438 ;;		Nothing
  9439 ;; This function is called by:
  9440 ;;		_sprintf
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function __tdiv_to_l_
  9446  1C7C                     __tdiv_to_l_:	
  9447                           
  9448                           ;incstack = 0
  9449                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  9450  1C7C  0873               	movf	__tdiv_to_l_@f1,w
  9451  1C7D  1283               	bcf	3,5	;RP0=0, select bank0
  9452  1C7E  00A0               	movwf	??__tdiv_to_l_
  9453  1C7F  0874               	movf	__tdiv_to_l_@f1+1,w
  9454  1C80  00A1               	movwf	??__tdiv_to_l_+1
  9455  1C81  0875               	movf	__tdiv_to_l_@f1+2,w
  9456  1C82  00A2               	movwf	??__tdiv_to_l_+2
  9457  1C83  1003               	clrc
  9458  1C84  0D21               	rlf	??__tdiv_to_l_+1,w
  9459  1C85  0D22               	rlf	??__tdiv_to_l_+2,w
  9460  1C86  00A8               	movwf	__tdiv_to_l_@exp1
  9461  1C87  0828               	movf	__tdiv_to_l_@exp1,w
  9462  1C88  1D03               	btfss	3,2
  9463  1C89  2C8F               	goto	l5161
  9464  1C8A                     l5159:	
  9465  1C8A  01F3               	clrf	?__tdiv_to_l_
  9466  1C8B  01F4               	clrf	?__tdiv_to_l_+1
  9467  1C8C  01F5               	clrf	?__tdiv_to_l_+2
  9468  1C8D  01F6               	clrf	?__tdiv_to_l_+3
  9469  1C8E  0008               	return
  9470  1C8F                     l5161:	
  9471  1C8F  0876               	movf	__tdiv_to_l_@f2,w
  9472  1C90  00A0               	movwf	??__tdiv_to_l_
  9473  1C91  0877               	movf	__tdiv_to_l_@f2+1,w
  9474  1C92  00A1               	movwf	??__tdiv_to_l_+1
  9475  1C93  0878               	movf	__tdiv_to_l_@f2+2,w
  9476  1C94  00A2               	movwf	??__tdiv_to_l_+2
  9477  1C95  1003               	clrc
  9478  1C96  0D21               	rlf	??__tdiv_to_l_+1,w
  9479  1C97  0D22               	rlf	??__tdiv_to_l_+2,w
  9480  1C98  00A7               	movwf	__tdiv_to_l_@cntr
  9481  1C99  0827               	movf	__tdiv_to_l_@cntr,w
  9482  1C9A  1903               	btfsc	3,2
  9483  1C9B  2C8A               	goto	l5159
  9484  1C9C  307F               	movlw	127
  9485  1C9D  17F4               	bsf	__tdiv_to_l_@f1+1,7
  9486  1C9E  01F5               	clrf	__tdiv_to_l_@f1+2
  9487  1C9F  17F7               	bsf	__tdiv_to_l_@f2+1,7
  9488  1CA0  01F8               	clrf	__tdiv_to_l_@f2+2
  9489  1CA1  01A3               	clrf	__tdiv_to_l_@quot
  9490  1CA2  01A4               	clrf	__tdiv_to_l_@quot+1
  9491  1CA3  01A5               	clrf	__tdiv_to_l_@quot+2
  9492  1CA4  01A6               	clrf	__tdiv_to_l_@quot+3
  9493  1CA5  02A8               	subwf	__tdiv_to_l_@exp1,f
  9494  1CA6  3098               	movlw	152
  9495  1CA7  0727               	addwf	__tdiv_to_l_@cntr,w
  9496  1CA8  00A0               	movwf	??__tdiv_to_l_
  9497  1CA9  02A8               	subwf	__tdiv_to_l_@exp1,f
  9498  1CAA  3018               	movlw	24
  9499  1CAB  00A7               	movwf	__tdiv_to_l_@cntr
  9500  1CAC                     l5175:	
  9501  1CAC  1003               	clrc
  9502  1CAD  0DA3               	rlf	__tdiv_to_l_@quot,f
  9503  1CAE  0DA4               	rlf	__tdiv_to_l_@quot+1,f
  9504  1CAF  0DA5               	rlf	__tdiv_to_l_@quot+2,f
  9505  1CB0  0DA6               	rlf	__tdiv_to_l_@quot+3,f
  9506  1CB1  0878               	movf	__tdiv_to_l_@f2+2,w
  9507  1CB2  0275               	subwf	__tdiv_to_l_@f1+2,w
  9508  1CB3  1D03               	skipz
  9509  1CB4  2CBB               	goto	u5795
  9510  1CB5  0877               	movf	__tdiv_to_l_@f2+1,w
  9511  1CB6  0274               	subwf	__tdiv_to_l_@f1+1,w
  9512  1CB7  1D03               	skipz
  9513  1CB8  2CBB               	goto	u5795
  9514  1CB9  0876               	movf	__tdiv_to_l_@f2,w
  9515  1CBA  0273               	subwf	__tdiv_to_l_@f1,w
  9516  1CBB                     u5795:	
  9517  1CBB  1C03               	skipc
  9518  1CBC  2CC9               	goto	L26
  9519  1CBD  0876               	movf	__tdiv_to_l_@f2,w
  9520  1CBE  02F3               	subwf	__tdiv_to_l_@f1,f
  9521  1CBF  0877               	movf	__tdiv_to_l_@f2+1,w
  9522  1CC0  1C03               	skipc
  9523  1CC1  0F77               	incfsz	__tdiv_to_l_@f2+1,w
  9524  1CC2  02F4               	subwf	__tdiv_to_l_@f1+1,f
  9525  1CC3  0878               	movf	__tdiv_to_l_@f2+2,w
  9526  1CC4  1C03               	skipc
  9527  1CC5  0A78               	incf	__tdiv_to_l_@f2+2,w
  9528  1CC6  02F5               	subwf	__tdiv_to_l_@f1+2,f
  9529  1CC7  1423               	bsf	__tdiv_to_l_@quot,0
  9530  1CC8  1003               	clrc
  9531  1CC9                     L26:	
  9532  1CC9  0DF3               	rlf	__tdiv_to_l_@f1,f
  9533  1CCA  0DF4               	rlf	__tdiv_to_l_@f1+1,f
  9534  1CCB  0DF5               	rlf	__tdiv_to_l_@f1+2,f
  9535  1CCC  0BA7               	decfsz	__tdiv_to_l_@cntr,f
  9536  1CCD  2CAC               	goto	l5175
  9537  1CCE  1FA8               	btfss	__tdiv_to_l_@exp1,7
  9538  1CCF  2CDD               	goto	l5195
  9539  1CD0  0828               	movf	__tdiv_to_l_@exp1,w
  9540  1CD1  3A80               	xorlw	128
  9541  1CD2  3E97               	addlw	151
  9542  1CD3  1C03               	btfss	3,0
  9543  1CD4  2C8A               	goto	l5159
  9544  1CD5                     l5191:	
  9545  1CD5  1003               	clrc
  9546  1CD6  0CA6               	rrf	__tdiv_to_l_@quot+3,f
  9547  1CD7  0CA5               	rrf	__tdiv_to_l_@quot+2,f
  9548  1CD8  0CA4               	rrf	__tdiv_to_l_@quot+1,f
  9549  1CD9  0CA3               	rrf	__tdiv_to_l_@quot,f
  9550  1CDA  0FA8               	incfsz	__tdiv_to_l_@exp1,f
  9551  1CDB  2CD5               	goto	l5191
  9552  1CDC  2CEB               	goto	l5203
  9553  1CDD                     l5195:	
  9554  1CDD  3018               	movlw	24
  9555  1CDE  0228               	subwf	__tdiv_to_l_@exp1,w
  9556  1CDF  1803               	btfsc	3,0
  9557  1CE0  2C8A               	goto	l5159
  9558  1CE1                     l5201:	
  9559  1CE1  0828               	movf	__tdiv_to_l_@exp1,w
  9560  1CE2  1903               	btfsc	3,2
  9561  1CE3  2CEB               	goto	l5203
  9562  1CE4  1003               	clrc
  9563  1CE5  0DA3               	rlf	__tdiv_to_l_@quot,f
  9564  1CE6  0DA4               	rlf	__tdiv_to_l_@quot+1,f
  9565  1CE7  0DA5               	rlf	__tdiv_to_l_@quot+2,f
  9566  1CE8  0DA6               	rlf	__tdiv_to_l_@quot+3,f
  9567  1CE9  03A8               	decf	__tdiv_to_l_@exp1,f
  9568  1CEA  2CE1               	goto	l5201
  9569  1CEB                     l5203:	
  9570  1CEB  0826               	movf	__tdiv_to_l_@quot+3,w
  9571  1CEC  00F6               	movwf	?__tdiv_to_l_+3
  9572  1CED  0825               	movf	__tdiv_to_l_@quot+2,w
  9573  1CEE  00F5               	movwf	?__tdiv_to_l_+2
  9574  1CEF  0824               	movf	__tdiv_to_l_@quot+1,w
  9575  1CF0  00F4               	movwf	?__tdiv_to_l_+1
  9576  1CF1  0823               	movf	__tdiv_to_l_@quot,w
  9577  1CF2  00F3               	movwf	?__tdiv_to_l_
  9578  1CF3  0008               	return
  9579  1CF4                     __end_of__tdiv_to_l_:	
  9580                           
  9581                           	psect	text43
  9582  1E35                     __ptext43:	
  9583 ;; *************** function __div_to_l_ *****************
  9584 ;; Defined at:
  9585 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fldivl.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  f1              3    2[COMMON] unsigned long 
  9588 ;;  f2              3    5[COMMON] unsigned long 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;  quot            4    8[BANK0 ] unsigned long 
  9591 ;;  exp1            1   13[BANK0 ] unsigned char 
  9592 ;;  cntr            1   12[BANK0 ] unsigned char 
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  4    2[COMMON] unsigned long 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9597 ;; Tracked objects:
  9598 ;;		On entry : 0/0
  9599 ;;		On exit  : 300/0
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9602 ;;      Params:         6       0       0       0       0
  9603 ;;      Locals:         0       6       0       0       0
  9604 ;;      Temps:          0       8       0       0       0
  9605 ;;      Totals:         6      14       0       0       0
  9606 ;;Total ram usage:       20 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    1
  9609 ;; This function calls:
  9610 ;;		Nothing
  9611 ;; This function is called by:
  9612 ;;		_sprintf
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           
  9617                           ;psect for function __div_to_l_
  9618  1E35                     __div_to_l_:	
  9619                           
  9620                           ;incstack = 0
  9621                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  9622  1E35  3073               	movlw	low (__div_to_l_@f1| 0)
  9623  1E36  0084               	movwf	4
  9624  1E37  0800               	movf	0,w
  9625  1E38  1283               	bcf	3,5	;RP0=0, select bank0
  9626  1E39  1303               	bcf	3,6	;RP1=0, select bank0
  9627  1E3A  00A0               	movwf	??__div_to_l_
  9628  1E3B  0A84               	incf	4,f
  9629  1E3C  0800               	movf	0,w
  9630  1E3D  00A1               	movwf	??__div_to_l_+1
  9631  1E3E  0A84               	incf	4,f
  9632  1E3F  0800               	movf	0,w
  9633  1E40  00A2               	movwf	??__div_to_l_+2
  9634  1E41  0A84               	incf	4,f
  9635  1E42  0800               	movf	0,w
  9636  1E43  00A3               	movwf	??__div_to_l_+3
  9637  1E44  1003               	clrc
  9638  1E45  0D22               	rlf	??__div_to_l_+2,w
  9639  1E46  0D23               	rlf	??__div_to_l_+3,w
  9640  1E47  00AD               	movwf	__div_to_l_@exp1
  9641  1E48  082D               	movf	__div_to_l_@exp1,w
  9642  1E49  1D03               	btfss	3,2
  9643  1E4A  2E50               	goto	l3559
  9644  1E4B                     l3557:	
  9645  1E4B  01F3               	clrf	?__div_to_l_
  9646  1E4C  01F4               	clrf	?__div_to_l_+1
  9647  1E4D  01F5               	clrf	?__div_to_l_+2
  9648  1E4E  01F6               	clrf	?__div_to_l_+3
  9649  1E4F  0008               	return
  9650  1E50                     l3559:	
  9651  1E50  3076               	movlw	low (__div_to_l_@f2| 0)
  9652  1E51  26F3  160A  158A   	fcall	PL8	;call to abstracted procedure
  9653  1E54  1003               	clrc
  9654  1E55  0D22               	rlf	??__div_to_l_+2,w
  9655  1E56  0D23               	rlf	??__div_to_l_+3,w
  9656  1E57  00AC               	movwf	__div_to_l_@cntr
  9657  1E58  082C               	movf	__div_to_l_@cntr,w
  9658  1E59  1903               	btfsc	3,2
  9659  1E5A  2E4B               	goto	l3557
  9660  1E5B  3073               	movlw	low (__div_to_l_@f1| 0)
  9661  1E5C  0084               	movwf	4
  9662  1E5D  3080               	movlw	128
  9663  1E5E  0A84               	incf	4,f
  9664  1E5F  0A84               	incf	4,f
  9665  1E60  0480               	iorwf	0,f
  9666  1E61  3073               	movlw	low (__div_to_l_@f1| 0)
  9667  1E62  0A84               	incf	4,f
  9668  1E63  0084               	movwf	4
  9669  1E64  3076               	movlw	low (__div_to_l_@f2| 0)
  9670  1E65  0A84               	incf	4,f
  9671  1E66  0A84               	incf	4,f
  9672  1E67  0A84               	incf	4,f
  9673  1E68  0180               	clrf	0
  9674  1E69  0084               	movwf	4
  9675  1E6A  3080               	movlw	128
  9676  1E6B  0A84               	incf	4,f
  9677  1E6C  0A84               	incf	4,f
  9678  1E6D  0480               	iorwf	0,f
  9679  1E6E  3076               	movlw	low (__div_to_l_@f2| 0)
  9680  1E6F  0A84               	incf	4,f
  9681  1E70  0084               	movwf	4
  9682  1E71  307F               	movlw	127
  9683  1E72  0A84               	incf	4,f
  9684  1E73  0A84               	incf	4,f
  9685  1E74  0A84               	incf	4,f
  9686  1E75  0180               	clrf	0
  9687  1E76  01A8               	clrf	__div_to_l_@quot
  9688  1E77  01A9               	clrf	__div_to_l_@quot+1
  9689  1E78  01AA               	clrf	__div_to_l_@quot+2
  9690  1E79  01AB               	clrf	__div_to_l_@quot+3
  9691  1E7A  02AD               	subwf	__div_to_l_@exp1,f
  9692  1E7B  30A0               	movlw	160
  9693  1E7C  072C               	addwf	__div_to_l_@cntr,w
  9694  1E7D  00A0               	movwf	??__div_to_l_
  9695  1E7E  02AD               	subwf	__div_to_l_@exp1,f
  9696  1E7F  3020               	movlw	32
  9697  1E80  00AC               	movwf	__div_to_l_@cntr
  9698  1E81                     l3573:	
  9699  1E81  3076               	movlw	low (__div_to_l_@f2| 0)
  9700  1E82  1003               	clrc
  9701  1E83  0DA8               	rlf	__div_to_l_@quot,f
  9702  1E84  0DA9               	rlf	__div_to_l_@quot+1,f
  9703  1E85  0DAA               	rlf	__div_to_l_@quot+2,f
  9704  1E86  0DAB               	rlf	__div_to_l_@quot+3,f
  9705  1E87  26F3  160A  158A   	fcall	PL8	;call to abstracted procedure
  9706  1E8A  3073               	movlw	low (__div_to_l_@f1| 0)
  9707  1E8B  0084               	movwf	4
  9708  1E8C  0800               	movf	0,w
  9709  1E8D  00A4               	movwf	??__div_to_l_+4
  9710  1E8E  0A84               	incf	4,f
  9711  1E8F  0800               	movf	0,w
  9712  1E90  00A5               	movwf	??__div_to_l_+5
  9713  1E91  0A84               	incf	4,f
  9714  1E92  0800               	movf	0,w
  9715  1E93  00A6               	movwf	??__div_to_l_+6
  9716  1E94  0A84               	incf	4,f
  9717  1E95  0800               	movf	0,w
  9718  1E96  00A7               	movwf	??__div_to_l_+7
  9719  1E97  0823               	movf	??__div_to_l_+3,w
  9720  1E98  0227               	subwf	??__div_to_l_+7,w
  9721  1E99  1D03               	skipz
  9722  1E9A  2EA5               	goto	u3675
  9723  1E9B  0822               	movf	??__div_to_l_+2,w
  9724  1E9C  0226               	subwf	??__div_to_l_+6,w
  9725  1E9D  1D03               	skipz
  9726  1E9E  2EA5               	goto	u3675
  9727  1E9F  0821               	movf	??__div_to_l_+1,w
  9728  1EA0  0225               	subwf	??__div_to_l_+5,w
  9729  1EA1  1D03               	skipz
  9730  1EA2  2EA5               	goto	u3675
  9731  1EA3  0820               	movf	??__div_to_l_,w
  9732  1EA4  0224               	subwf	??__div_to_l_+4,w
  9733  1EA5                     u3675:	
  9734  1EA5  1C03               	skipc
  9735  1EA6  2EC1               	goto	l832
  9736  1EA7  3076               	movlw	low (__div_to_l_@f2| 0)
  9737  1EA8  26F3  160A  158A   	fcall	PL8	;call to abstracted procedure
  9738  1EAB  3073               	movlw	low (__div_to_l_@f1| 0)
  9739  1EAC  0084               	movwf	4
  9740  1EAD  0820               	movf	??__div_to_l_,w
  9741  1EAE  0280               	subwf	0,f
  9742  1EAF  0A84               	incf	4,f
  9743  1EB0  0821               	movf	??__div_to_l_+1,w
  9744  1EB1  1C03               	skipc
  9745  1EB2  0F21               	incfsz	??__div_to_l_+1,w
  9746  1EB3  0280               	subwf	0,f
  9747  1EB4  0A84               	incf	4,f
  9748  1EB5  0822               	movf	??__div_to_l_+2,w
  9749  1EB6  1C03               	skipc
  9750  1EB7  0F22               	incfsz	??__div_to_l_+2,w
  9751  1EB8  0280               	subwf	0,f
  9752  1EB9  0A84               	incf	4,f
  9753  1EBA  0823               	movf	??__div_to_l_+3,w
  9754  1EBB  1C03               	skipc
  9755  1EBC  0A23               	incf	??__div_to_l_+3,w
  9756  1EBD  0280               	subwf	0,f
  9757  1EBE  3003               	movlw	3
  9758  1EBF  0284               	subwf	4,f
  9759  1EC0  1428               	bsf	__div_to_l_@quot,0
  9760  1EC1                     l832:	
  9761  1EC1  3073               	movlw	low (__div_to_l_@f1| 0)
  9762  1EC2  0084               	movwf	4
  9763  1EC3  1003               	clrc
  9764  1EC4  0D80               	rlf	0,f
  9765  1EC5  0A84               	incf	4,f
  9766  1EC6  0D80               	rlf	0,f
  9767  1EC7  0A84               	incf	4,f
  9768  1EC8  0D80               	rlf	0,f
  9769  1EC9  0A84               	incf	4,f
  9770  1ECA  0D80               	rlf	0,f
  9771  1ECB  0BAC               	decfsz	__div_to_l_@cntr,f
  9772  1ECC  2E81               	goto	l3573
  9773  1ECD  1FAD               	btfss	__div_to_l_@exp1,7
  9774  1ECE  2EDC               	goto	l3591
  9775  1ECF  082D               	movf	__div_to_l_@exp1,w
  9776  1ED0  3A80               	xorlw	128
  9777  1ED1  3E9F               	addlw	159
  9778  1ED2  1C03               	btfss	3,0
  9779  1ED3  2E4B               	goto	l3557
  9780  1ED4                     l3587:	
  9781  1ED4  1003               	clrc
  9782  1ED5  0CAB               	rrf	__div_to_l_@quot+3,f
  9783  1ED6  0CAA               	rrf	__div_to_l_@quot+2,f
  9784  1ED7  0CA9               	rrf	__div_to_l_@quot+1,f
  9785  1ED8  0CA8               	rrf	__div_to_l_@quot,f
  9786  1ED9  0FAD               	incfsz	__div_to_l_@exp1,f
  9787  1EDA  2ED4               	goto	l3587
  9788  1EDB  2EEA               	goto	l3599
  9789  1EDC                     l3591:	
  9790  1EDC  3020               	movlw	32
  9791  1EDD  022D               	subwf	__div_to_l_@exp1,w
  9792  1EDE  1803               	btfsc	3,0
  9793  1EDF  2E4B               	goto	l3557
  9794  1EE0                     l3597:	
  9795  1EE0  082D               	movf	__div_to_l_@exp1,w
  9796  1EE1  1903               	btfsc	3,2
  9797  1EE2  2EEA               	goto	l3599
  9798  1EE3  1003               	clrc
  9799  1EE4  0DA8               	rlf	__div_to_l_@quot,f
  9800  1EE5  0DA9               	rlf	__div_to_l_@quot+1,f
  9801  1EE6  0DAA               	rlf	__div_to_l_@quot+2,f
  9802  1EE7  0DAB               	rlf	__div_to_l_@quot+3,f
  9803  1EE8  03AD               	decf	__div_to_l_@exp1,f
  9804  1EE9  2EE0               	goto	l3597
  9805  1EEA                     l3599:	
  9806  1EEA  082B               	movf	__div_to_l_@quot+3,w
  9807  1EEB  00F6               	movwf	?__div_to_l_+3
  9808  1EEC  082A               	movf	__div_to_l_@quot+2,w
  9809  1EED  00F5               	movwf	?__div_to_l_+2
  9810  1EEE  0829               	movf	__div_to_l_@quot+1,w
  9811  1EEF  00F4               	movwf	?__div_to_l_+1
  9812  1EF0  0828               	movf	__div_to_l_@quot,w
  9813  1EF1  00F3               	movwf	?__div_to_l_
  9814  1EF2  0008               	return
  9815  1EF3                     __end_of__div_to_l_:	
  9816  1EF3                     PL8:	
  9817  1EF3  0084               	movwf	4
  9818  1EF4  0800               	movf	0,w
  9819  1EF5  00A0               	movwf	??__div_to_l_
  9820  1EF6  0A84               	incf	4,f
  9821  1EF7  0800               	movf	0,w
  9822  1EF8  00A1               	movwf	??__div_to_l_+1
  9823  1EF9  0A84               	incf	4,f
  9824  1EFA  0800               	movf	0,w
  9825  1EFB  00A2               	movwf	??__div_to_l_+2
  9826  1EFC  0A84               	incf	4,f
  9827  1EFD  0800               	movf	0,w
  9828  1EFE  00A3               	movwf	??__div_to_l_+3
  9829  1EFF  0008               	return
  9830  1F00                     __end_ofPL8:	
  9831                           
  9832                           	psect	text45
  9833  1155                     __ptext45:	
  9834 ;; *************** function ___lltoft *****************
  9835 ;; Defined at:
  9836 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lltoft.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;  c               4    3[BANK0 ] unsigned long 
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;  exp             1    7[COMMON] unsigned char 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  3    3[BANK0 ] float 
  9843 ;; Registers used:
  9844 ;;		wreg, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 300/0
  9847 ;;		On exit  : 300/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9850 ;;      Params:         0       4       0       0       0
  9851 ;;      Locals:         1       0       0       0       0
  9852 ;;      Temps:          0       0       0       0       0
  9853 ;;      Totals:         1       4       0       0       0
  9854 ;;Total ram usage:        5 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    2
  9857 ;; This function calls:
  9858 ;;		___ftpack
  9859 ;; This function is called by:
  9860 ;;		_sprintf
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           
  9865                           ;psect for function ___lltoft
  9866  1155                     ___lltoft:	
  9867                           
  9868                           ;incstack = 0
  9869                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9870  1155  308E               	movlw	142
  9871  1156  00F8               	movwf	___lltoft@exp
  9872  1157                     l5245:	
  9873  1157  30FF               	movlw	255
  9874  1158  0526               	andwf	___lltoft@c+3,w
  9875  1159  1903               	btfsc	3,2
  9876  115A  2962               	goto	l5247
  9877  115B  1003               	clrc
  9878  115C  0CA6               	rrf	___lltoft@c+3,f
  9879  115D  0CA5               	rrf	___lltoft@c+2,f
  9880  115E  0CA4               	rrf	___lltoft@c+1,f
  9881  115F  0CA3               	rrf	___lltoft@c,f
  9882  1160  0AF8               	incf	___lltoft@exp,f
  9883  1161  2957               	goto	l5245
  9884  1162                     l5247:	
  9885  1162  0823               	movf	___lltoft@c,w
  9886  1163  00F3               	movwf	___ftpack@arg
  9887  1164  0824               	movf	___lltoft@c+1,w
  9888  1165  00F4               	movwf	___ftpack@arg+1
  9889  1166  0825               	movf	___lltoft@c+2,w
  9890  1167  00F5               	movwf	___ftpack@arg+2
  9891  1168  0878               	movf	___lltoft@exp,w
  9892  1169  00F6               	movwf	___ftpack@exp
  9893  116A  01F7               	clrf	___ftpack@sign
  9894  116B  26FA               	fcall	___ftpack
  9895  116C  0873               	movf	?___ftpack,w
  9896  116D  00A3               	movwf	?___lltoft
  9897  116E  0874               	movf	?___ftpack+1,w
  9898  116F  00A4               	movwf	?___lltoft+1
  9899  1170  0875               	movf	?___ftpack+2,w
  9900  1171  00A5               	movwf	?___lltoft+2
  9901  1172  0008               	return
  9902  1173                     __end_of___lltoft:	
  9903  1173                     __ptext37:	
  9904 ;; *************** function _fround *****************
  9905 ;; Defined at:
  9906 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;  prec            1    wreg     unsigned char 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  prec            1   33[BANK0 ] unsigned char 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  3   23[BANK0 ] unsigned char 
  9913 ;; Registers used:
  9914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 300/100
  9917 ;;		On exit  : 300/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9920 ;;      Params:         0       4       0       0       0
  9921 ;;      Locals:         0       7       0       0       0
  9922 ;;      Temps:          0       0       0       0       0
  9923 ;;      Totals:         0      11       0       0       0
  9924 ;;Total ram usage:       11 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    3
  9927 ;; This function calls:
  9928 ;;		___bmul
  9929 ;;		___ftmul
  9930 ;;		___lbdiv
  9931 ;;		___lbmod
  9932 ;; This function is called by:
  9933 ;;		_sprintf
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _fround
  9939  1173                     _fround:	
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9943                           ;fround@prec stored from wreg
  9944  1173  1283               	bcf	3,5	;RP0=0, select bank0
  9945  1174  00C1               	movwf	fround@prec
  9946                           
  9947                           ;doprnt.c: 413: if(prec>=110)
  9948  1175  306E               	movlw	110
  9949  1176  0241               	subwf	fround@prec,w
  9950  1177  1C03               	skipc
  9951  1178  29F5               	goto	l5105
  9952                           
  9953                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9954  1179  3003               	movlw	3
  9955  117A  00A3               	movwf	___bmul@multiplicand
  9956  117B  300A               	movlw	10
  9957  117C  00F8               	movwf	___lbdiv@divisor
  9958  117D  3064               	movlw	100
  9959  117E  00F3               	movwf	___lbmod@divisor
  9960  117F  0841               	movf	fround@prec,w
  9961  1180  227F  160A  118A   	fcall	___lbmod
  9962  1183  2264  160A  118A   	fcall	___lbdiv
  9963  1186  251C  160A  118A   	fcall	___bmul
  9964  1189  27A0               	fcall	PL58	;call to abstracted procedure
  9965  118A  160A  158A  2000  160A  118A  	fcall	stringtab
  9966  118F  00A8               	movwf	___ftmul@f1
  9967  1190  160A  158A  2000  160A  118A  	fcall	stringtab
  9968  1195  00A9               	movwf	___ftmul@f1+1
  9969  1196  160A  158A  2000  160A  118A  	fcall	stringtab
  9970  119B  00AA               	movwf	___ftmul@f1+2
  9971  119C  3003               	movlw	3
  9972  119D  00A3               	movwf	___bmul@multiplicand
  9973  119E  3064               	movlw	100
  9974  119F  00F8               	movwf	___lbdiv@divisor
  9975  11A0  0841               	movf	fround@prec,w
  9976  11A1  2264  160A  118A   	fcall	___lbdiv
  9977  11A4  251C  160A  118A   	fcall	___bmul
  9978  11A7  27E5               	fcall	PL82	;call to abstracted procedure
  9979  11A8  160A  158A  2000  160A  118A  	fcall	stringtab
  9980  11AD  00AB               	movwf	___ftmul@f2
  9981  11AE  160A  158A  2000  160A  118A  	fcall	stringtab
  9982  11B3  00AC               	movwf	___ftmul@f2+1
  9983  11B4  160A  158A  2000  160A  118A  	fcall	stringtab
  9984  11B9  00AD               	movwf	___ftmul@f2+2
  9985  11BA  24AF  160A  118A   	fcall	___ftmul
  9986  11BD  27EC  160A  118A   	fcall	PL86	;call to abstracted procedure
  9987                           
  9988                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9989  11C0  27FA  160A  118A   	fcall	PL100	;call to abstracted procedure
  9990  11C3  227F  160A  118A   	fcall	___lbmod
  9991  11C6  251C  160A  118A   	fcall	___bmul
  9992  11C9  274A               	fcall	PL30	;call to abstracted procedure
  9993  11CA  160A  158A  2000  160A  118A  	fcall	stringtab
  9994  11CF  00A8               	movwf	___ftmul@f1
  9995  11D0  160A  158A  2000  160A  118A  	fcall	stringtab
  9996  11D5  00A9               	movwf	___ftmul@f1+1
  9997  11D6  160A  158A  2000  160A  118A  	fcall	stringtab
  9998  11DB  27CD  160A  118A   	fcall	PL74	;call to abstracted procedure
  9999  11DE  24AF  160A  118A   	fcall	___ftmul
 10000  11E1  0828               	movf	?___ftmul,w
 10001  11E2  00BB               	movwf	_fround$1128
 10002  11E3  0829               	movf	?___ftmul+1,w
 10003  11E4  00BC               	movwf	_fround$1128+1
 10004  11E5  082A               	movf	?___ftmul+2,w
 10005  11E6  00BD               	movwf	_fround$1128+2
 10006                           
 10007                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10008  11E7  303F               	movlw	63
 10009  11E8  01A8               	clrf	___ftmul@f1
 10010  11E9  01A9               	clrf	___ftmul@f1+1
 10011  11EA  00AA               	movwf	___ftmul@f1+2
 10012  11EB  083B               	movf	_fround$1128,w
 10013  11EC  00AB               	movwf	___ftmul@f2
 10014  11ED  083C               	movf	_fround$1128+1,w
 10015  11EE  00AC               	movwf	___ftmul@f2+1
 10016  11EF  083D               	movf	_fround$1128+2,w
 10017  11F0  00AD               	movwf	___ftmul@f2+2
 10018  11F1  24AF  160A  118A   	fcall	___ftmul
 10019  11F4  2F91               	ljmp	PL54	;call to abstracted procedure
 10020  11F5                     l5105:	
 10021                           
 10022                           ;doprnt.c: 415: else if(prec > 10)
 10023  11F5  300B               	movlw	11
 10024  11F6  0241               	subwf	fround@prec,w
 10025  11F7  1C03               	skipc
 10026  11F8  2A43               	goto	l5113
 10027                           
 10028                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10029  11F9  27FA  160A  118A   	fcall	PL100	;call to abstracted procedure
 10030  11FC  227F  160A  118A   	fcall	___lbmod
 10031  11FF  251C  160A  118A   	fcall	___bmul
 10032  1202  274A               	fcall	PL30	;call to abstracted procedure
 10033  1203  160A  158A  2000  160A  118A  	fcall	stringtab
 10034  1208  00A8               	movwf	___ftmul@f1
 10035  1209  160A  158A  2000  160A  118A  	fcall	stringtab
 10036  120E  00A9               	movwf	___ftmul@f1+1
 10037  120F  160A  158A  2000  160A  118A  	fcall	stringtab
 10038  1214  00AA               	movwf	___ftmul@f1+2
 10039  1215  3003               	movlw	3
 10040  1216  00A3               	movwf	___bmul@multiplicand
 10041  1217  300A               	movlw	10
 10042  1218  00F8               	movwf	___lbdiv@divisor
 10043  1219  0841               	movf	fround@prec,w
 10044  121A  2264  160A  118A   	fcall	___lbdiv
 10045  121D  251C  160A  118A   	fcall	___bmul
 10046  1220  27A0               	fcall	PL58	;call to abstracted procedure
 10047  1221  160A  158A  2000  160A  118A  	fcall	stringtab
 10048  1226  00AB               	movwf	___ftmul@f2
 10049  1227  160A  158A  2000  160A  118A  	fcall	stringtab
 10050  122C  00AC               	movwf	___ftmul@f2+1
 10051  122D  160A  158A  2000  160A  118A  	fcall	stringtab
 10052  1232  00AD               	movwf	___ftmul@f2+2
 10053  1233  24AF  160A  118A   	fcall	___ftmul
 10054  1236  27EC  160A  118A   	fcall	PL86	;call to abstracted procedure
 10055                           
 10056                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10057  1239  303F               	movlw	63
 10058  123A  01A8               	clrf	___ftmul@f1
 10059  123B  01A9               	clrf	___ftmul@f1+1
 10060  123C  27CD  160A  118A   	fcall	PL74	;call to abstracted procedure
 10061  123F  24AF  160A  118A   	fcall	___ftmul
 10062  1242  2F91               	ljmp	PL54	;call to abstracted procedure
 10063  1243                     l5113:	
 10064                           
 10065                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10066  1243  303F               	movlw	63
 10067  1244  01A8               	clrf	___ftmul@f1
 10068  1245  01A9               	clrf	___ftmul@f1+1
 10069  1246  00AA               	movwf	___ftmul@f1+2
 10070  1247  3003               	movlw	3
 10071  1248  00A3               	movwf	___bmul@multiplicand
 10072  1249  0841               	movf	fround@prec,w
 10073  124A  251C  160A  118A   	fcall	___bmul
 10074  124D  274A               	fcall	PL30	;call to abstracted procedure
 10075  124E  160A  158A  2000  160A  118A  	fcall	stringtab
 10076  1253  00AB               	movwf	___ftmul@f2
 10077  1254  160A  158A  2000  160A  118A  	fcall	stringtab
 10078  1259  00AC               	movwf	___ftmul@f2+1
 10079  125A  160A  158A  2000  160A  118A  	fcall	stringtab
 10080  125F  00AD               	movwf	___ftmul@f2+2
 10081  1260  24AF  160A  118A   	fcall	___ftmul
 10082  1263  2F91               	ljmp	PL54	;call to abstracted procedure
 10083  1264                     __end_of_fround:	
 10084  1264                     __ptext39:	
 10085 ;; *************** function ___lbdiv *****************
 10086 ;; Defined at:
 10087 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbdiv.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;  dividend        1    wreg     unsigned char 
 10090 ;;  divisor         1    7[COMMON] unsigned char 
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  dividend        1    0[BANK0 ] unsigned char 
 10093 ;;  quotient        1    2[BANK0 ] unsigned char 
 10094 ;;  counter         1    1[BANK0 ] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  1    wreg      unsigned char 
 10097 ;; Registers used:
 10098 ;;		wreg, status,2, status,0
 10099 ;; Tracked objects:
 10100 ;;		On entry : 300/0
 10101 ;;		On exit  : 300/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10104 ;;      Params:         1       0       0       0       0
 10105 ;;      Locals:         0       3       0       0       0
 10106 ;;      Temps:          0       0       0       0       0
 10107 ;;      Totals:         1       3       0       0       0
 10108 ;;Total ram usage:        4 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    1
 10111 ;; This function calls:
 10112 ;;		Nothing
 10113 ;; This function is called by:
 10114 ;;		_fround
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           
 10119                           ;psect for function ___lbdiv
 10120  1264                     ___lbdiv:	
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 10124                           ;___lbdiv@dividend stored from wreg
 10125  1264  00A0               	movwf	___lbdiv@dividend
 10126  1265  01A2               	clrf	___lbdiv@quotient
 10127  1266  0878               	movf	___lbdiv@divisor,w
 10128  1267  1903               	btfsc	3,2
 10129  1268  2A7D               	goto	l5045
 10130  1269  01A1               	clrf	___lbdiv@counter
 10131  126A                     l5031:	
 10132  126A  0AA1               	incf	___lbdiv@counter,f
 10133  126B  1BF8               	btfsc	___lbdiv@divisor,7
 10134  126C  2A70               	goto	l975
 10135  126D  1003               	clrc
 10136  126E  0DF8               	rlf	___lbdiv@divisor,f
 10137  126F  2A6A               	goto	l5031
 10138  1270                     l975:	
 10139  1270  1003               	clrc
 10140  1271  0DA2               	rlf	___lbdiv@quotient,f
 10141  1272  0878               	movf	___lbdiv@divisor,w
 10142  1273  0220               	subwf	___lbdiv@dividend,w
 10143  1274  1C03               	skipc
 10144  1275  2A7A               	goto	L25
 10145  1276  0878               	movf	___lbdiv@divisor,w
 10146  1277  02A0               	subwf	___lbdiv@dividend,f
 10147  1278  1422               	bsf	___lbdiv@quotient,0
 10148  1279  1003               	clrc
 10149  127A                     L25:	
 10150  127A  0CF8               	rrf	___lbdiv@divisor,f
 10151  127B  0BA1               	decfsz	___lbdiv@counter,f
 10152  127C  2A70               	goto	l975
 10153  127D                     l5045:	
 10154  127D  0822               	movf	___lbdiv@quotient,w
 10155  127E  0008               	return
 10156  127F                     __end_of___lbdiv:	
 10157  127F                     __ptext38:	
 10158 ;; *************** function ___lbmod *****************
 10159 ;; Defined at:
 10160 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbmod.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;  dividend        1    wreg     unsigned char 
 10163 ;;  divisor         1    2[COMMON] unsigned char 
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;  dividend        1    4[COMMON] unsigned char 
 10166 ;;  rem             1    6[COMMON] unsigned char 
 10167 ;;  counter         1    5[COMMON] unsigned char 
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      unsigned char 
 10170 ;; Registers used:
 10171 ;;		wreg, status,2, status,0
 10172 ;; Tracked objects:
 10173 ;;		On entry : 300/0
 10174 ;;		On exit  : 300/0
 10175 ;;		Unchanged: 300/0
 10176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10177 ;;      Params:         1       0       0       0       0
 10178 ;;      Locals:         3       0       0       0       0
 10179 ;;      Temps:          1       0       0       0       0
 10180 ;;      Totals:         5       0       0       0       0
 10181 ;;Total ram usage:        5 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; Hardware stack levels required when called:    1
 10184 ;; This function calls:
 10185 ;;		Nothing
 10186 ;; This function is called by:
 10187 ;;		_fround
 10188 ;; This function uses a non-reentrant model
 10189 ;;
 10190                           
 10191                           
 10192                           ;psect for function ___lbmod
 10193  127F                     ___lbmod:	
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 10197                           ;___lbmod@dividend stored from wreg
 10198  127F  00F5               	movwf	___lbmod@dividend
 10199  1280  3008               	movlw	8
 10200  1281  00F6               	movwf	___lbmod@counter
 10201  1282  01F7               	clrf	___lbmod@rem
 10202  1283                     l3315:	
 10203  1283  0875               	movf	___lbmod@dividend,w
 10204  1284  00F4               	movwf	??___lbmod
 10205  1285  3007               	movlw	7
 10206  1286  1003               	clrc
 10207  1287                     L24:	
 10208  1287  0CF4               	rrf	??___lbmod,f
 10209  1288  3EFF               	addlw	-1
 10210  1289  1003               	clrc
 10211  128A  1D03               	skipz
 10212  128B  2A87               	goto	L24
 10213  128C  0D77               	rlf	___lbmod@rem,w
 10214  128D  0474               	iorwf	??___lbmod,w
 10215  128E  00F7               	movwf	___lbmod@rem
 10216  128F  1003               	clrc
 10217  1290  0DF5               	rlf	___lbmod@dividend,f
 10218  1291  0873               	movf	___lbmod@divisor,w
 10219  1292  0277               	subwf	___lbmod@rem,w
 10220  1293  1C03               	skipc
 10221  1294  2A97               	goto	l3323
 10222  1295  0873               	movf	___lbmod@divisor,w
 10223  1296  02F7               	subwf	___lbmod@rem,f
 10224  1297                     l3323:	
 10225  1297  0BF6               	decfsz	___lbmod@counter,f
 10226  1298  2A83               	goto	l3315
 10227  1299  0877               	movf	___lbmod@rem,w
 10228  129A  0008               	return
 10229  129B                     __end_of___lbmod:	
 10230  129B                     __ptext33:	
 10231 ;; *************** function _scale *****************
 10232 ;; Defined at:
 10233 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;  scl             1    wreg     char 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  scl             1   33[BANK0 ] char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  3   23[BANK0 ] char 
 10240 ;; Registers used:
 10241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10242 ;; Tracked objects:
 10243 ;;		On entry : 300/100
 10244 ;;		On exit  : 300/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10247 ;;      Params:         0       3       0       0       0
 10248 ;;      Locals:         0       4       0       0       0
 10249 ;;      Temps:          0       4       0       0       0
 10250 ;;      Totals:         0      11       0       0       0
 10251 ;;Total ram usage:       11 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    3
 10254 ;; This function calls:
 10255 ;;		___awdiv
 10256 ;;		___awmod
 10257 ;;		___bmul
 10258 ;;		___ftmul
 10259 ;; This function is called by:
 10260 ;;		_sprintf
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function _scale
 10266  129B                     _scale:	
 10267                           
 10268                           ;incstack = 0
 10269                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10270                           ;scale@scl stored from wreg
 10271  129B  1283               	bcf	3,5	;RP0=0, select bank0
 10272  129C  00C1               	movwf	scale@scl
 10273                           
 10274                           ;doprnt.c: 428: if(scl < 0) {
 10275  129D  1FC1               	btfss	scale@scl,7
 10276  129E  2B63               	goto	l5139
 10277                           
 10278                           ;doprnt.c: 429: scl = -scl;
 10279  129F  09C1               	comf	scale@scl,f
 10280  12A0  0AC1               	incf	scale@scl,f
 10281                           
 10282                           ;doprnt.c: 430: if(scl>=110)
 10283  12A1  0841               	movf	scale@scl,w
 10284  12A2  3A80               	xorlw	128
 10285  12A3  3E12               	addlw	-238
 10286  12A4  1C03               	skipc
 10287  12A5  2B0A               	goto	l5129
 10288                           
 10289                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10290  12A6  277A  160A  118A   	fcall	PL48	;call to abstracted procedure
 10291  12A9  2472  160A  118A   	fcall	___awmod
 10292  12AC  0874               	movf	?___awmod+1,w
 10293  12AD  00A3               	movwf	___awdiv@dividend+1
 10294  12AE  0873               	movf	?___awmod,w
 10295  12AF  00A2               	movwf	___awdiv@dividend
 10296  12B0  242D  160A  118A   	fcall	___awdiv
 10297  12B3  27C5  160A  118A   	fcall	PL72	;call to abstracted procedure
 10298  12B6  27A0               	fcall	PL58	;call to abstracted procedure
 10299  12B7  160A  158A  2000  160A  118A  	fcall	stringtab
 10300  12BC  00A8               	movwf	___ftmul@f1
 10301  12BD  160A  158A  2000  160A  118A  	fcall	stringtab
 10302  12C2  00A9               	movwf	___ftmul@f1+1
 10303  12C3  160A  158A  2000  160A  118A  	fcall	stringtab
 10304  12C8  27BD  160A  118A   	fcall	PL68	;call to abstracted procedure
 10305  12CB  1BA2               	btfsc	___awdiv@dividend,7
 10306  12CC  03A3               	decf	___awdiv@dividend+1,f
 10307  12CD  242D  160A  118A   	fcall	___awdiv
 10308  12D0  2772  160A  118A   	fcall	PL44	;call to abstracted procedure
 10309  12D3  27E5               	fcall	PL82	;call to abstracted procedure
 10310  12D4  160A  158A  2000  160A  118A  	fcall	stringtab
 10311  12D9  00AB               	movwf	___ftmul@f2
 10312  12DA  160A  158A  2000  160A  118A  	fcall	stringtab
 10313  12DF  00AC               	movwf	___ftmul@f2+1
 10314  12E0  160A  158A  2000  160A  118A  	fcall	stringtab
 10315  12E5  00AD               	movwf	___ftmul@f2+2
 10316  12E6  24AF  160A  118A   	fcall	___ftmul
 10317                           
 10318                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10319  12E9  2765  160A  118A   	fcall	PL38	;call to abstracted procedure
 10320  12EC  1BF5               	btfsc	___awmod@dividend,7
 10321  12ED  03F6               	decf	___awmod@dividend+1,f
 10322  12EE  2472  160A  118A   	fcall	___awmod
 10323  12F1  273C               	fcall	PL28	;call to abstracted procedure
 10324  12F2  160A  158A  2000  160A  118A  	fcall	stringtab
 10325  12F7  00A8               	movwf	___ftmul@f1
 10326  12F8  160A  158A  2000  160A  118A  	fcall	stringtab
 10327  12FD  00A9               	movwf	___ftmul@f1+1
 10328  12FE  160A  158A  2000  160A  118A  	fcall	stringtab
 10329  1303  27D5  160A  118A   	fcall	PL76	;call to abstracted procedure
 10330  1306  24AF  160A  118A   	fcall	___ftmul
 10331  1309  2F51               	ljmp	PL32	;call to abstracted procedure
 10332  130A                     l5129:	
 10333                           
 10334                           ;doprnt.c: 432: else if(scl > 10)
 10335  130A  0841               	movf	scale@scl,w
 10336  130B  3A80               	xorlw	128
 10337  130C  3E75               	addlw	-139
 10338  130D  1C03               	skipc
 10339  130E  2B4B               	goto	l5135
 10340                           
 10341                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 10342  130F  27A7  160A  118A   	fcall	PL60	;call to abstracted procedure
 10343  1312  1BF5               	btfsc	___awmod@dividend,7
 10344  1313  03F6               	decf	___awmod@dividend+1,f
 10345  1314  2472  160A  118A   	fcall	___awmod
 10346  1317  273C               	fcall	PL28	;call to abstracted procedure
 10347  1318  160A  158A  2000  160A  118A  	fcall	stringtab
 10348  131D  00A8               	movwf	___ftmul@f1
 10349  131E  160A  158A  2000  160A  118A  	fcall	stringtab
 10350  1323  00A9               	movwf	___ftmul@f1+1
 10351  1324  160A  158A  2000  160A  118A  	fcall	stringtab
 10352  1329  27B5  160A  118A   	fcall	PL64	;call to abstracted procedure
 10353  132C  1BA2               	btfsc	___awdiv@dividend,7
 10354  132D  03A3               	decf	___awdiv@dividend+1,f
 10355  132E  242D  160A  118A   	fcall	___awdiv
 10356  1331  2772  160A  118A   	fcall	PL44	;call to abstracted procedure
 10357  1334  27A0               	fcall	PL58	;call to abstracted procedure
 10358  1335  160A  158A  2000  160A  118A  	fcall	stringtab
 10359  133A  00AB               	movwf	___ftmul@f2
 10360  133B  160A  158A  2000  160A  118A  	fcall	stringtab
 10361  1340  00AC               	movwf	___ftmul@f2+1
 10362  1341  160A  158A  2000  160A  118A  	fcall	stringtab
 10363  1346  00AD               	movwf	___ftmul@f2+2
 10364  1347  24AF  160A  118A   	fcall	___ftmul
 10365  134A  2F51               	ljmp	PL32	;call to abstracted procedure
 10366  134B                     l5135:	
 10367                           
 10368                           ;doprnt.c: 434: return _npowers_[scl];
 10369  134B  3003               	movlw	3
 10370  134C  00A3               	movwf	___bmul@multiplicand
 10371  134D  0841               	movf	scale@scl,w
 10372  134E  251C  160A  118A   	fcall	___bmul
 10373  1351  274A               	fcall	PL30	;call to abstracted procedure
 10374  1352  160A  158A  2000  160A  118A  	fcall	stringtab
 10375  1357  00B7               	movwf	?_scale
 10376  1358  160A  158A  2000  160A  118A  	fcall	stringtab
 10377  135D  00B8               	movwf	?_scale+1
 10378  135E  160A  158A  2000   	fcall	stringtab
 10379  1361  00B9               	movwf	?_scale+2
 10380  1362  0008               	return
 10381  1363                     l5139:	
 10382                           
 10383                           ;doprnt.c: 435: }
 10384                           ;doprnt.c: 436: if(scl>=110)
 10385  1363  0841               	movf	scale@scl,w
 10386  1364  3A80               	xorlw	128
 10387  1365  3E12               	addlw	-238
 10388  1366  1C03               	skipc
 10389  1367  2BD0               	goto	l5147
 10390                           
 10391                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10392  1368  277A  160A  118A   	fcall	PL48	;call to abstracted procedure
 10393  136B  2472  160A  118A   	fcall	___awmod
 10394  136E  0874               	movf	?___awmod+1,w
 10395  136F  00A3               	movwf	___awdiv@dividend+1
 10396  1370  0873               	movf	?___awmod,w
 10397  1371  00A2               	movwf	___awdiv@dividend
 10398  1372  242D  160A  118A   	fcall	___awdiv
 10399  1375  27C5  160A  118A   	fcall	PL72	;call to abstracted procedure
 10400  1378  27F3               	fcall	PL90	;call to abstracted procedure
 10401  1379  160A  158A  2000  160A  118A  	fcall	stringtab
 10402  137E  00A8               	movwf	___ftmul@f1
 10403  137F  160A  158A  2000  160A  118A  	fcall	stringtab
 10404  1384  00A9               	movwf	___ftmul@f1+1
 10405  1385  160A  158A  2000  160A  118A  	fcall	stringtab
 10406  138A  27BD  160A  118A   	fcall	PL68	;call to abstracted procedure
 10407  138D  1BA2               	btfsc	___awdiv@dividend,7
 10408  138E  03A3               	decf	___awdiv@dividend+1,f
 10409  138F  242D  160A  118A   	fcall	___awdiv
 10410  1392  2772               	fcall	PL44	;call to abstracted procedure
 10411  1393  3E6F               	addlw	low ((__powers_| (0+32768)+54))
 10412  1394  0084               	movwf	4
 10413  1395  3098               	movlw	high ((__powers_| (0+32768)+54))
 10414  1396  1803               	skipnc
 10415  1397  3E01               	addlw	1
 10416  1398  00FF               	movwf	127
 10417  1399  160A  158A  2000  160A  118A  	fcall	stringtab
 10418  139E  00AB               	movwf	___ftmul@f2
 10419  139F  160A  158A  2000  160A  118A  	fcall	stringtab
 10420  13A4  00AC               	movwf	___ftmul@f2+1
 10421  13A5  160A  158A  2000  160A  118A  	fcall	stringtab
 10422  13AA  00AD               	movwf	___ftmul@f2+2
 10423  13AB  24AF  160A  118A   	fcall	___ftmul
 10424                           
 10425                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10426  13AE  2765  160A  118A   	fcall	PL38	;call to abstracted procedure
 10427  13B1  1BF5               	btfsc	___awmod@dividend,7
 10428  13B2  03F6               	decf	___awmod@dividend+1,f
 10429  13B3  2472  160A  118A   	fcall	___awmod
 10430  13B6  0873               	movf	?___awmod,w
 10431  13B7  2758               	fcall	PL34	;call to abstracted procedure
 10432  13B8  160A  158A  2000  160A  118A  	fcall	stringtab
 10433  13BD  00A8               	movwf	___ftmul@f1
 10434  13BE  160A  158A  2000  160A  118A  	fcall	stringtab
 10435  13C3  00A9               	movwf	___ftmul@f1+1
 10436  13C4  160A  158A  2000  160A  118A  	fcall	stringtab
 10437  13C9  27D5  160A  118A   	fcall	PL76	;call to abstracted procedure
 10438  13CC  24AF  160A  118A   	fcall	___ftmul
 10439  13CF  2F51               	ljmp	PL32	;call to abstracted procedure
 10440  13D0                     l5147:	
 10441                           
 10442                           ;doprnt.c: 438: else if(scl > 10)
 10443  13D0  0841               	movf	scale@scl,w
 10444  13D1  3A80               	xorlw	128
 10445  13D2  3E75               	addlw	-139
 10446  13D3  1C03               	skipc
 10447  13D4  2C12               	goto	l5153
 10448                           
 10449                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10450  13D5  27A7  160A  118A   	fcall	PL60	;call to abstracted procedure
 10451  13D8  1BF5               	btfsc	___awmod@dividend,7
 10452  13D9  03F6               	decf	___awmod@dividend+1,f
 10453  13DA  2472  160A  118A   	fcall	___awmod
 10454  13DD  0873               	movf	?___awmod,w
 10455  13DE  2758               	fcall	PL34	;call to abstracted procedure
 10456  13DF  160A  158A  2000  160A  118A  	fcall	stringtab
 10457  13E4  00A8               	movwf	___ftmul@f1
 10458  13E5  160A  158A  2000  160A  118A  	fcall	stringtab
 10459  13EA  00A9               	movwf	___ftmul@f1+1
 10460  13EB  160A  158A  2000  160A  118A  	fcall	stringtab
 10461  13F0  27B5  160A  118A   	fcall	PL64	;call to abstracted procedure
 10462  13F3  1BA2               	btfsc	___awdiv@dividend,7
 10463  13F4  03A3               	decf	___awdiv@dividend+1,f
 10464  13F5  242D  160A  118A   	fcall	___awdiv
 10465  13F8  2772  160A  118A   	fcall	PL44	;call to abstracted procedure
 10466  13FB  27F3               	fcall	PL90	;call to abstracted procedure
 10467  13FC  160A  158A  2000  160A  118A  	fcall	stringtab
 10468  1401  00AB               	movwf	___ftmul@f2
 10469  1402  160A  158A  2000  160A  118A  	fcall	stringtab
 10470  1407  00AC               	movwf	___ftmul@f2+1
 10471  1408  160A  158A  2000  160A  118A  	fcall	stringtab
 10472  140D  00AD               	movwf	___ftmul@f2+2
 10473  140E  24AF  160A  118A   	fcall	___ftmul
 10474  1411  2F51               	ljmp	PL32	;call to abstracted procedure
 10475  1412                     l5153:	
 10476                           
 10477                           ;doprnt.c: 440: return _powers_[scl];
 10478  1412  3003               	movlw	3
 10479  1413  00A3               	movwf	___bmul@multiplicand
 10480  1414  0841               	movf	scale@scl,w
 10481  1415  251C               	fcall	___bmul
 10482  1416  3E39               	addlw	low (__powers_| (0+32768))
 10483  1417  0084               	movwf	4
 10484  1418  3098               	movlw	high (__powers_| (0+32768))
 10485  1419  1803               	skipnc
 10486  141A  3E01               	addlw	1
 10487  141B  00FF               	movwf	127
 10488  141C  160A  158A  2000  160A  118A  	fcall	stringtab
 10489  1421  00B7               	movwf	?_scale
 10490  1422  160A  158A  2000  160A  118A  	fcall	stringtab
 10491  1427  00B8               	movwf	?_scale+1
 10492  1428  160A  158A  2000   	fcall	stringtab
 10493  142B  00B9               	movwf	?_scale+2
 10494  142C  0008               	return
 10495  142D                     __end_of_scale:	
 10496  142D                     __ptext35:	
 10497 ;; *************** function ___awdiv *****************
 10498 ;; Defined at:
 10499 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;  divisor         2    0[BANK0 ] int 
 10502 ;;  dividend        2    2[BANK0 ] int 
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;  quotient        2    6[BANK0 ] int 
 10505 ;;  sign            1    5[BANK0 ] unsigned char 
 10506 ;;  counter         1    4[BANK0 ] unsigned char 
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  2    0[BANK0 ] int 
 10509 ;; Registers used:
 10510 ;;		wreg, status,2, status,0
 10511 ;; Tracked objects:
 10512 ;;		On entry : 300/0
 10513 ;;		On exit  : 300/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10516 ;;      Params:         0       4       0       0       0
 10517 ;;      Locals:         0       4       0       0       0
 10518 ;;      Temps:          0       0       0       0       0
 10519 ;;      Totals:         0       8       0       0       0
 10520 ;;Total ram usage:        8 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; Hardware stack levels required when called:    1
 10523 ;; This function calls:
 10524 ;;		Nothing
 10525 ;; This function is called by:
 10526 ;;		_scale
 10527 ;;		_sprintf
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           
 10532                           ;psect for function ___awdiv
 10533  142D                     ___awdiv:	
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10537  142D  01A5               	clrf	___awdiv@sign
 10538  142E  1FA1               	btfss	___awdiv@divisor+1,7
 10539  142F  2C37               	goto	l3087
 10540  1430  09A0               	comf	___awdiv@divisor,f
 10541  1431  09A1               	comf	___awdiv@divisor+1,f
 10542  1432  0AA0               	incf	___awdiv@divisor,f
 10543  1433  1903               	skipnz
 10544  1434  0AA1               	incf	___awdiv@divisor+1,f
 10545  1435  01A5               	clrf	___awdiv@sign
 10546  1436  0AA5               	incf	___awdiv@sign,f
 10547  1437                     l3087:	
 10548  1437  1FA3               	btfss	___awdiv@dividend+1,7
 10549  1438  2C40               	goto	l3093
 10550  1439  09A2               	comf	___awdiv@dividend,f
 10551  143A  09A3               	comf	___awdiv@dividend+1,f
 10552  143B  0AA2               	incf	___awdiv@dividend,f
 10553  143C  1903               	skipnz
 10554  143D  0AA3               	incf	___awdiv@dividend+1,f
 10555  143E  3001               	movlw	1
 10556  143F  06A5               	xorwf	___awdiv@sign,f
 10557  1440                     l3093:	
 10558  1440  01A6               	clrf	___awdiv@quotient
 10559  1441  01A7               	clrf	___awdiv@quotient+1
 10560  1442  0820               	movf	___awdiv@divisor,w
 10561  1443  0421               	iorwf	___awdiv@divisor+1,w
 10562  1444  1903               	btfsc	3,2
 10563  1445  2C65               	goto	l3115
 10564  1446  01A4               	clrf	___awdiv@counter
 10565  1447                     L22:	
 10566  1447  0AA4               	incf	___awdiv@counter,f
 10567  1448  1BA1               	btfsc	___awdiv@divisor+1,7
 10568  1449  2C4E               	goto	l3103
 10569  144A  1003               	clrc
 10570  144B  0DA0               	rlf	___awdiv@divisor,f
 10571  144C  0DA1               	rlf	___awdiv@divisor+1,f
 10572  144D  2C47               	goto	L22
 10573  144E                     l3103:	
 10574  144E  1003               	clrc
 10575  144F  0DA6               	rlf	___awdiv@quotient,f
 10576  1450  0DA7               	rlf	___awdiv@quotient+1,f
 10577  1451  0821               	movf	___awdiv@divisor+1,w
 10578  1452  0223               	subwf	___awdiv@dividend+1,w
 10579  1453  1D03               	skipz
 10580  1454  2C57               	goto	u2805
 10581  1455  0820               	movf	___awdiv@divisor,w
 10582  1456  0222               	subwf	___awdiv@dividend,w
 10583  1457                     u2805:	
 10584  1457  1C03               	skipc
 10585  1458  2C61               	goto	L23
 10586  1459  0820               	movf	___awdiv@divisor,w
 10587  145A  02A2               	subwf	___awdiv@dividend,f
 10588  145B  0821               	movf	___awdiv@divisor+1,w
 10589  145C  1C03               	skipc
 10590  145D  03A3               	decf	___awdiv@dividend+1,f
 10591  145E  02A3               	subwf	___awdiv@dividend+1,f
 10592  145F  1426               	bsf	___awdiv@quotient,0
 10593  1460  1003               	clrc
 10594  1461                     L23:	
 10595  1461  0CA1               	rrf	___awdiv@divisor+1,f
 10596  1462  0CA0               	rrf	___awdiv@divisor,f
 10597  1463  0BA4               	decfsz	___awdiv@counter,f
 10598  1464  2C4E               	goto	l3103
 10599  1465                     l3115:	
 10600  1465  0825               	movf	___awdiv@sign,w
 10601  1466  1903               	btfsc	3,2
 10602  1467  2C6D               	goto	l3119
 10603  1468  09A6               	comf	___awdiv@quotient,f
 10604  1469  09A7               	comf	___awdiv@quotient+1,f
 10605  146A  0AA6               	incf	___awdiv@quotient,f
 10606  146B  1903               	skipnz
 10607  146C  0AA7               	incf	___awdiv@quotient+1,f
 10608  146D                     l3119:	
 10609  146D  0827               	movf	___awdiv@quotient+1,w
 10610  146E  00A1               	movwf	?___awdiv+1
 10611  146F  0826               	movf	___awdiv@quotient,w
 10612  1470  00A0               	movwf	?___awdiv
 10613  1471  0008               	return
 10614  1472                     __end_of___awdiv:	
 10615  1472                     __ptext34:	
 10616 ;; *************** function ___awmod *****************
 10617 ;; Defined at:
 10618 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
 10619 ;; Parameters:    Size  Location     Type
 10620 ;;  divisor         2    2[COMMON] int 
 10621 ;;  dividend        2    4[COMMON] int 
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;  sign            1    7[COMMON] unsigned char 
 10624 ;;  counter         1    6[COMMON] unsigned char 
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  2    2[COMMON] int 
 10627 ;; Registers used:
 10628 ;;		wreg, status,2, status,0
 10629 ;; Tracked objects:
 10630 ;;		On entry : 300/0
 10631 ;;		On exit  : 300/0
 10632 ;;		Unchanged: 300/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10634 ;;      Params:         4       0       0       0       0
 10635 ;;      Locals:         2       0       0       0       0
 10636 ;;      Temps:          0       0       0       0       0
 10637 ;;      Totals:         6       0       0       0       0
 10638 ;;Total ram usage:        6 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    1
 10641 ;; This function calls:
 10642 ;;		Nothing
 10643 ;; This function is called by:
 10644 ;;		_scale
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function ___awmod
 10650  1472                     ___awmod:	
 10651                           
 10652                           ;incstack = 0
 10653                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10654  1472  01F8               	clrf	___awmod@sign
 10655  1473  1FF6               	btfss	___awmod@dividend+1,7
 10656  1474  2C7C               	goto	l3131
 10657  1475  09F5               	comf	___awmod@dividend,f
 10658  1476  09F6               	comf	___awmod@dividend+1,f
 10659  1477  0AF5               	incf	___awmod@dividend,f
 10660  1478  1903               	skipnz
 10661  1479  0AF6               	incf	___awmod@dividend+1,f
 10662  147A  01F8               	clrf	___awmod@sign
 10663  147B  0AF8               	incf	___awmod@sign,f
 10664  147C                     l3131:	
 10665  147C  1FF4               	btfss	___awmod@divisor+1,7
 10666  147D  2C83               	goto	l3135
 10667  147E  09F3               	comf	___awmod@divisor,f
 10668  147F  09F4               	comf	___awmod@divisor+1,f
 10669  1480  0AF3               	incf	___awmod@divisor,f
 10670  1481  1903               	skipnz
 10671  1482  0AF4               	incf	___awmod@divisor+1,f
 10672  1483                     l3135:	
 10673  1483  0873               	movf	___awmod@divisor,w
 10674  1484  0474               	iorwf	___awmod@divisor+1,w
 10675  1485  1903               	btfsc	3,2
 10676  1486  2CA2               	goto	l3151
 10677  1487  01F7               	clrf	___awmod@counter
 10678  1488                     L20:	
 10679  1488  0AF7               	incf	___awmod@counter,f
 10680  1489  1BF4               	btfsc	___awmod@divisor+1,7
 10681  148A  2C8F               	goto	l3143
 10682  148B  1003               	clrc
 10683  148C  0DF3               	rlf	___awmod@divisor,f
 10684  148D  0DF4               	rlf	___awmod@divisor+1,f
 10685  148E  2C88               	goto	L20
 10686  148F                     l3143:	
 10687  148F  0874               	movf	___awmod@divisor+1,w
 10688  1490  0276               	subwf	___awmod@dividend+1,w
 10689  1491  1D03               	skipz
 10690  1492  2C95               	goto	u2875
 10691  1493  0873               	movf	___awmod@divisor,w
 10692  1494  0275               	subwf	___awmod@dividend,w
 10693  1495                     u2875:	
 10694  1495  1C03               	skipc
 10695  1496  2C9E               	goto	L21
 10696  1497  0873               	movf	___awmod@divisor,w
 10697  1498  02F5               	subwf	___awmod@dividend,f
 10698  1499  0874               	movf	___awmod@divisor+1,w
 10699  149A  1C03               	skipc
 10700  149B  03F6               	decf	___awmod@dividend+1,f
 10701  149C  02F6               	subwf	___awmod@dividend+1,f
 10702  149D  1003               	clrc
 10703  149E                     L21:	
 10704  149E  0CF4               	rrf	___awmod@divisor+1,f
 10705  149F  0CF3               	rrf	___awmod@divisor,f
 10706  14A0  0BF7               	decfsz	___awmod@counter,f
 10707  14A1  2C8F               	goto	l3143
 10708  14A2                     l3151:	
 10709  14A2  0878               	movf	___awmod@sign,w
 10710  14A3  1903               	btfsc	3,2
 10711  14A4  2CAA               	goto	l3155
 10712  14A5  09F5               	comf	___awmod@dividend,f
 10713  14A6  09F6               	comf	___awmod@dividend+1,f
 10714  14A7  0AF5               	incf	___awmod@dividend,f
 10715  14A8  1903               	skipnz
 10716  14A9  0AF6               	incf	___awmod@dividend+1,f
 10717  14AA                     l3155:	
 10718  14AA  0876               	movf	___awmod@dividend+1,w
 10719  14AB  00F4               	movwf	?___awmod+1
 10720  14AC  0875               	movf	___awmod@dividend,w
 10721  14AD  00F3               	movwf	?___awmod
 10722  14AE  0008               	return
 10723  14AF                     __end_of___awmod:	
 10724  14AF                     __ptext40:	
 10725 ;; *************** function ___ftmul *****************
 10726 ;; Defined at:
 10727 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftmul.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;  f1              3    8[BANK0 ] float 
 10730 ;;  f2              3   11[BANK0 ] float 
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
 10733 ;;  sign            1   22[BANK0 ] unsigned char 
 10734 ;;  cntr            1   21[BANK0 ] unsigned char 
 10735 ;;  exp             1   17[BANK0 ] unsigned char 
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  3    8[BANK0 ] float 
 10738 ;; Registers used:
 10739 ;;		wreg, status,2, status,0, pclath, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 300/0
 10742 ;;		On exit  : 300/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10745 ;;      Params:         0       6       0       0       0
 10746 ;;      Locals:         0       6       0       0       0
 10747 ;;      Temps:          0       3       0       0       0
 10748 ;;      Totals:         0      15       0       0       0
 10749 ;;Total ram usage:       15 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    2
 10752 ;; This function calls:
 10753 ;;		___ftpack
 10754 ;; This function is called by:
 10755 ;;		_getTempDS18B20
 10756 ;;		_calcSHT71
 10757 ;;		_fround
 10758 ;;		_scale
 10759 ;;		_sprintf
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function ___ftmul
 10765  14AF                     ___ftmul:	
 10766                           
 10767                           ;incstack = 0
 10768                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10769  14AF  0828               	movf	___ftmul@f1,w
 10770  14B0  00AE               	movwf	??___ftmul
 10771  14B1  0829               	movf	___ftmul@f1+1,w
 10772  14B2  00AF               	movwf	??___ftmul+1
 10773  14B3  082A               	movf	___ftmul@f1+2,w
 10774  14B4  00B0               	movwf	??___ftmul+2
 10775  14B5  1003               	clrc
 10776  14B6  0D2F               	rlf	??___ftmul+1,w
 10777  14B7  0D30               	rlf	??___ftmul+2,w
 10778  14B8  00B1               	movwf	___ftmul@exp
 10779  14B9  0831               	movf	___ftmul@exp,w
 10780  14BA  1D03               	btfss	3,2
 10781  14BB  2CC0               	goto	l4977
 10782  14BC  01A8               	clrf	?___ftmul
 10783  14BD  01A9               	clrf	?___ftmul+1
 10784  14BE  01AA               	clrf	?___ftmul+2
 10785  14BF  0008               	return
 10786  14C0                     l4977:	
 10787  14C0  082B               	movf	___ftmul@f2,w
 10788  14C1  00AE               	movwf	??___ftmul
 10789  14C2  082C               	movf	___ftmul@f2+1,w
 10790  14C3  00AF               	movwf	??___ftmul+1
 10791  14C4  082D               	movf	___ftmul@f2+2,w
 10792  14C5  00B0               	movwf	??___ftmul+2
 10793  14C6  1003               	clrc
 10794  14C7  0D2F               	rlf	??___ftmul+1,w
 10795  14C8  0D30               	rlf	??___ftmul+2,w
 10796  14C9  00B6               	movwf	___ftmul@sign
 10797  14CA  0836               	movf	___ftmul@sign,w
 10798  14CB  1D03               	btfss	3,2
 10799  14CC  2CD1               	goto	l4981
 10800  14CD  01A8               	clrf	?___ftmul
 10801  14CE  01A9               	clrf	?___ftmul+1
 10802  14CF  01AA               	clrf	?___ftmul+2
 10803  14D0  0008               	return
 10804  14D1                     l4981:	
 10805  14D1  0836               	movf	___ftmul@sign,w
 10806  14D2  3E7B               	addlw	123
 10807  14D3  07B1               	addwf	___ftmul@exp,f
 10808  14D4  082A               	movf	___ftmul@f1+2,w
 10809  14D5  00B6               	movwf	___ftmul@sign
 10810  14D6  082D               	movf	___ftmul@f2+2,w
 10811  14D7  06B6               	xorwf	___ftmul@sign,f
 10812  14D8  3080               	movlw	128
 10813  14D9  05B6               	andwf	___ftmul@sign,f
 10814  14DA  3007               	movlw	7
 10815  14DB  17A9               	bsf	___ftmul@f1+1,7
 10816  14DC  17AC               	bsf	___ftmul@f2+1,7
 10817  14DD  01AD               	clrf	___ftmul@f2+2
 10818  14DE  01B2               	clrf	___ftmul@f3_as_product
 10819  14DF  01B3               	clrf	___ftmul@f3_as_product+1
 10820  14E0  01B4               	clrf	___ftmul@f3_as_product+2
 10821  14E1  00B5               	movwf	___ftmul@cntr
 10822  14E2                     l4999:	
 10823  14E2  1C28               	btfss	___ftmul@f1,0
 10824  14E3  2CEB               	goto	l5003
 10825  14E4  2786  160A  118A   	fcall	PL50	;call to abstracted procedure
 10826  14E7  1803               	skipnc
 10827  14E8  0A2D               	incf	___ftmul@f2+2,w
 10828  14E9  1D03               	btfss	3,2
 10829  14EA  07B4               	addwf	___ftmul@f3_as_product+2,f
 10830  14EB                     l5003:	
 10831  14EB  1003               	clrc
 10832  14EC  0CAA               	rrf	___ftmul@f1+2,f
 10833  14ED  0CA9               	rrf	___ftmul@f1+1,f
 10834  14EE  0CA8               	rrf	___ftmul@f1,f
 10835  14EF  1003               	clrc
 10836  14F0  0DAB               	rlf	___ftmul@f2,f
 10837  14F1  0DAC               	rlf	___ftmul@f2+1,f
 10838  14F2  0DAD               	rlf	___ftmul@f2+2,f
 10839  14F3  0BB5               	decfsz	___ftmul@cntr,f
 10840  14F4  2CE2               	goto	l4999
 10841  14F5  3009               	movlw	9
 10842  14F6  00B5               	movwf	___ftmul@cntr
 10843  14F7                     l5011:	
 10844  14F7  1C28               	btfss	___ftmul@f1,0
 10845  14F8  2D00               	goto	l5015
 10846  14F9  2786  160A  118A   	fcall	PL50	;call to abstracted procedure
 10847  14FC  1803               	skipnc
 10848  14FD  0A2D               	incf	___ftmul@f2+2,w
 10849  14FE  1D03               	btfss	3,2
 10850  14FF  07B4               	addwf	___ftmul@f3_as_product+2,f
 10851  1500                     l5015:	
 10852  1500  1003               	clrc
 10853  1501  0CAA               	rrf	___ftmul@f1+2,f
 10854  1502  0CA9               	rrf	___ftmul@f1+1,f
 10855  1503  0CA8               	rrf	___ftmul@f1,f
 10856  1504  1003               	clrc
 10857  1505  0CB4               	rrf	___ftmul@f3_as_product+2,f
 10858  1506  0CB3               	rrf	___ftmul@f3_as_product+1,f
 10859  1507  0CB2               	rrf	___ftmul@f3_as_product,f
 10860  1508  0BB5               	decfsz	___ftmul@cntr,f
 10861  1509  2CF7               	goto	l5011
 10862  150A  0832               	movf	___ftmul@f3_as_product,w
 10863  150B  00F3               	movwf	___ftpack@arg
 10864  150C  0833               	movf	___ftmul@f3_as_product+1,w
 10865  150D  00F4               	movwf	___ftpack@arg+1
 10866  150E  0834               	movf	___ftmul@f3_as_product+2,w
 10867  150F  00F5               	movwf	___ftpack@arg+2
 10868  1510  0831               	movf	___ftmul@exp,w
 10869  1511  00F6               	movwf	___ftpack@exp
 10870  1512  0836               	movf	___ftmul@sign,w
 10871  1513  00F7               	movwf	___ftpack@sign
 10872  1514  26FA               	fcall	___ftpack
 10873  1515  0873               	movf	?___ftpack,w
 10874  1516  00A8               	movwf	?___ftmul
 10875  1517  0874               	movf	?___ftpack+1,w
 10876  1518  00A9               	movwf	?___ftmul+1
 10877  1519  0875               	movf	?___ftpack+2,w
 10878  151A  00AA               	movwf	?___ftmul+2
 10879  151B  0008               	return
 10880  151C                     __end_of___ftmul:	
 10881  151C                     __ptext41:	
 10882 ;; *************** function ___bmul *****************
 10883 ;; Defined at:
 10884 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  multiplier      1    wreg     unsigned char 
 10887 ;;  multiplicand    1    3[BANK0 ] unsigned char 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  multiplier      1    5[BANK0 ] unsigned char 
 10890 ;;  product         1    4[BANK0 ] unsigned char 
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      unsigned char 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0
 10895 ;; Tracked objects:
 10896 ;;		On entry : 300/0
 10897 ;;		On exit  : 300/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10900 ;;      Params:         0       1       0       0       0
 10901 ;;      Locals:         0       2       0       0       0
 10902 ;;      Temps:          0       0       0       0       0
 10903 ;;      Totals:         0       3       0       0       0
 10904 ;;Total ram usage:        3 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    1
 10907 ;; This function calls:
 10908 ;;		Nothing
 10909 ;; This function is called by:
 10910 ;;		_fround
 10911 ;;		_scale
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function ___bmul
 10917  151C                     ___bmul:	
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10921                           ;___bmul@multiplier stored from wreg
 10922  151C  00A5               	movwf	___bmul@multiplier
 10923  151D  01A4               	clrf	___bmul@product
 10924  151E                     l3067:	
 10925  151E  0823               	movf	___bmul@multiplicand,w
 10926  151F  1825               	btfsc	___bmul@multiplier,0
 10927  1520  07A4               	addwf	___bmul@product,f
 10928  1521  1003               	clrc
 10929  1522  0DA3               	rlf	___bmul@multiplicand,f
 10930  1523  1003               	clrc
 10931  1524  0CA5               	rrf	___bmul@multiplier,f
 10932  1525  0825               	movf	___bmul@multiplier,w
 10933  1526  1D03               	btfss	3,2
 10934  1527  2D1E               	goto	l3067
 10935  1528  0824               	movf	___bmul@product,w
 10936  1529  0008               	return
 10937  152A                     __end_of___bmul:	
 10938  152A                     __ptext22:	
 10939 ;; *************** function _calcSHT71 *****************
 10940 ;; Defined at:
 10941 ;;		line 129 in file "sht71.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  p_humidity      3   52[BANK0 ] float 
 10944 ;;  p_temperatur    1   55[BANK0 ] PTR float 
 10945 ;;		 -> getResSHT71@temp_val(3), 
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;  rh              3   74[BANK0 ] float 
 10948 ;;  rh_true         3   71[BANK0 ] float 
 10949 ;;  t_C             3   62[BANK0 ] float 
 10950 ;;  t               3   59[BANK0 ] float 
 10951 ;;  rh_lin          3   56[BANK0 ] float 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  3   52[BANK0 ] float 
 10954 ;; Registers used:
 10955 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 300/0
 10958 ;;		On exit  : B00/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10961 ;;      Params:         0       4       0       0       0
 10962 ;;      Locals:         0      21       0       0       0
 10963 ;;      Temps:          0       0       0       0       0
 10964 ;;      Totals:         0      25       0       0       0
 10965 ;;Total ram usage:       25 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    3
 10968 ;; This function calls:
 10969 ;;		___ftadd
 10970 ;;		___ftge
 10971 ;;		___ftmul
 10972 ;; This function is called by:
 10973 ;;		_getResSHT71
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           
 10978                           ;psect for function _calcSHT71
 10979  152A                     _calcSHT71:	
 10980                           
 10981                           ;sht71.c: 130: float rh_lin;
 10982                           ;sht71.c: 131: float rh_true;
 10983                           ;sht71.c: 132: float t = *p_temperature;
 10984                           
 10985                           ;incstack = 0
 10986                           ; Regs used in _calcSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10987  152A  0857               	movf	calcSHT71@p_temperature,w
 10988  152B  0084               	movwf	4
 10989  152C  1383               	bcf	3,7	;select IRP bank0
 10990  152D  0800               	movf	0,w
 10991  152E  00DB               	movwf	calcSHT71@t
 10992  152F  0A84               	incf	4,f
 10993  1530  0800               	movf	0,w
 10994  1531  00DC               	movwf	calcSHT71@t+1
 10995  1532  0A84               	incf	4,f
 10996  1533  0800               	movf	0,w
 10997  1534  00DD               	movwf	calcSHT71@t+2
 10998                           
 10999                           ;sht71.c: 133: float rh = p_humidity;
 11000  1535  0854               	movf	calcSHT71@p_humidity,w
 11001  1536  00EA               	movwf	calcSHT71@rh
 11002  1537  0855               	movf	calcSHT71@p_humidity+1,w
 11003  1538  00EB               	movwf	calcSHT71@rh+1
 11004  1539  0856               	movf	calcSHT71@p_humidity+2,w
 11005  153A  00EC               	movwf	calcSHT71@rh+2
 11006                           
 11007                           ;sht71.c: 134: float t_C;
 11008                           ;sht71.c: 136: t_C = t*0.01 + -40.1 - 1;
 11009  153B  3066               	movlw	102
 11010  153C  00C2               	movwf	___ftadd@f1
 11011  153D  3024               	movlw	36
 11012  153E  00C3               	movwf	___ftadd@f1+1
 11013  153F  30C2               	movlw	194
 11014  1540  00C4               	movwf	___ftadd@f1+2
 11015  1541  30D7               	movlw	215
 11016  1542  00A8               	movwf	___ftmul@f1
 11017  1543  3023               	movlw	35
 11018  1544  00A9               	movwf	___ftmul@f1+1
 11019  1545  303C               	movlw	60
 11020  1546  00AA               	movwf	___ftmul@f1+2
 11021  1547  085B               	movf	calcSHT71@t,w
 11022  1548  00AB               	movwf	___ftmul@f2
 11023  1549  085C               	movf	calcSHT71@t+1,w
 11024  154A  00AC               	movwf	___ftmul@f2+1
 11025  154B  085D               	movf	calcSHT71@t+2,w
 11026  154C  00AD               	movwf	___ftmul@f2+2
 11027  154D  24AF  160A  118A   	fcall	___ftmul
 11028  1550  27AE  160A  118A   	fcall	PL62	;call to abstracted procedure
 11029  1553  263A  160A  118A   	fcall	___ftadd
 11030  1556  0842               	movf	?___ftadd,w
 11031  1557  00DE               	movwf	calcSHT71@t_C
 11032  1558  0843               	movf	?___ftadd+1,w
 11033  1559  00DF               	movwf	calcSHT71@t_C+1
 11034  155A  0844               	movf	?___ftadd+2,w
 11035  155B  00E0               	movwf	calcSHT71@t_C+2
 11036                           
 11037                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
 11038  155C  086A               	movf	calcSHT71@rh,w
 11039  155D  00A8               	movwf	___ftmul@f1
 11040  155E  086B               	movf	calcSHT71@rh+1,w
 11041  155F  00A9               	movwf	___ftmul@f1+1
 11042  1560  086C               	movf	calcSHT71@rh+2,w
 11043  1561  2798  160A  118A   	fcall	PL56	;call to abstracted procedure
 11044  1564  24AF  160A  118A   	fcall	___ftmul
 11045  1567  0828               	movf	?___ftmul,w
 11046  1568  00E1               	movwf	_calcSHT71$1124
 11047  1569  0829               	movf	?___ftmul+1,w
 11048  156A  00E2               	movwf	_calcSHT71$1124+1
 11049  156B  082A               	movf	?___ftmul+2,w
 11050  156C  00E3               	movwf	_calcSHT71$1124+2
 11051                           
 11052                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
 11053  156D  30E3               	movlw	227
 11054  156E  00A8               	movwf	___ftmul@f1
 11055  156F  3025               	movlw	37
 11056  1570  00A9               	movwf	___ftmul@f1+1
 11057  1571  303D               	movlw	61
 11058  1572  2798  160A  118A   	fcall	PL56	;call to abstracted procedure
 11059  1575  24AF  160A  118A   	fcall	___ftmul
 11060  1578  0828               	movf	?___ftmul,w
 11061  1579  00C2               	movwf	___ftadd@f1
 11062  157A  0829               	movf	?___ftmul+1,w
 11063  157B  00C3               	movwf	___ftadd@f1+1
 11064  157C  082A               	movf	?___ftmul+2,w
 11065  157D  00C4               	movwf	___ftadd@f1+2
 11066  157E  30E8               	movlw	232
 11067  157F  00A8               	movwf	___ftmul@f1
 11068  1580  303B               	movlw	59
 11069  1581  00A9               	movwf	___ftmul@f1+1
 11070  1582  30B6               	movlw	182
 11071  1583  00AA               	movwf	___ftmul@f1+2
 11072  1584  0861               	movf	_calcSHT71$1124,w
 11073  1585  00AB               	movwf	___ftmul@f2
 11074  1586  0862               	movf	_calcSHT71$1124+1,w
 11075  1587  00AC               	movwf	___ftmul@f2+1
 11076  1588  0863               	movf	_calcSHT71$1124+2,w
 11077  1589  00AD               	movwf	___ftmul@f2+2
 11078  158A  24AF  160A  118A   	fcall	___ftmul
 11079  158D  27AE  160A  118A   	fcall	PL62	;call to abstracted procedure
 11080  1590  263A  160A  118A   	fcall	___ftadd
 11081  1593  0842               	movf	?___ftadd,w
 11082  1594  00E4               	movwf	_calcSHT71$1125
 11083  1595  0843               	movf	?___ftadd+1,w
 11084  1596  00E5               	movwf	_calcSHT71$1125+1
 11085  1597  0844               	movf	?___ftadd+2,w
 11086  1598  00E6               	movwf	_calcSHT71$1125+2
 11087                           
 11088                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
 11089  1599  3080               	movlw	128
 11090  159A  01C2               	clrf	___ftadd@f1
 11091  159B  00C3               	movwf	___ftadd@f1+1
 11092  159C  30C0               	movlw	192
 11093  159D  27DD  160A  118A   	fcall	PL78	;call to abstracted procedure
 11094  15A0  263A  160A  118A   	fcall	___ftadd
 11095  15A3  0842               	movf	?___ftadd,w
 11096  15A4  00D8               	movwf	calcSHT71@rh_lin
 11097  15A5  0843               	movf	?___ftadd+1,w
 11098  15A6  00D9               	movwf	calcSHT71@rh_lin+1
 11099  15A7  0844               	movf	?___ftadd+2,w
 11100  15A8  00DA               	movwf	calcSHT71@rh_lin+2
 11101                           
 11102                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
 11103  15A9  30D7               	movlw	215
 11104  15AA  00C2               	movwf	___ftadd@f1
 11105  15AB  3023               	movlw	35
 11106  15AC  00C3               	movwf	___ftadd@f1+1
 11107  15AD  303C               	movlw	60
 11108  15AE  00C4               	movwf	___ftadd@f1+2
 11109  15AF  30C6               	movlw	198
 11110  15B0  00A8               	movwf	___ftmul@f1
 11111  15B1  30A7               	movlw	167
 11112  15B2  00A9               	movwf	___ftmul@f1+1
 11113  15B3  3038               	movlw	56
 11114  15B4  2798  160A  118A   	fcall	PL56	;call to abstracted procedure
 11115  15B7  24AF  160A  118A   	fcall	___ftmul
 11116  15BA  27AE  160A  118A   	fcall	PL62	;call to abstracted procedure
 11117  15BD  263A  160A  118A   	fcall	___ftadd
 11118  15C0  0842               	movf	?___ftadd,w
 11119  15C1  00E1               	movwf	_calcSHT71$1124
 11120  15C2  0843               	movf	?___ftadd+1,w
 11121  15C3  00E2               	movwf	_calcSHT71$1124+1
 11122  15C4  0844               	movf	?___ftadd+2,w
 11123  15C5  00E3               	movwf	_calcSHT71$1124+2
 11124                           
 11125                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
 11126  15C6  0861               	movf	_calcSHT71$1124,w
 11127  15C7  00A8               	movwf	___ftmul@f1
 11128  15C8  0862               	movf	_calcSHT71$1124+1,w
 11129  15C9  00A9               	movwf	___ftmul@f1+1
 11130  15CA  0863               	movf	_calcSHT71$1124+2,w
 11131  15CB  00AA               	movwf	___ftmul@f1+2
 11132  15CC  30C8               	movlw	200
 11133  15CD  01C2               	clrf	___ftadd@f1
 11134  15CE  00C3               	movwf	___ftadd@f1+1
 11135  15CF  30C1               	movlw	193
 11136  15D0  00C4               	movwf	___ftadd@f1+2
 11137  15D1  085E               	movf	calcSHT71@t_C,w
 11138  15D2  00C5               	movwf	___ftadd@f2
 11139  15D3  085F               	movf	calcSHT71@t_C+1,w
 11140  15D4  00C6               	movwf	___ftadd@f2+1
 11141  15D5  0860               	movf	calcSHT71@t_C+2,w
 11142  15D6  00C7               	movwf	___ftadd@f2+2
 11143  15D7  263A  160A  118A   	fcall	___ftadd
 11144  15DA  0842               	movf	?___ftadd,w
 11145  15DB  00AB               	movwf	___ftmul@f2
 11146  15DC  0843               	movf	?___ftadd+1,w
 11147  15DD  00AC               	movwf	___ftmul@f2+1
 11148  15DE  0844               	movf	?___ftadd+2,w
 11149  15DF  00AD               	movwf	___ftmul@f2+2
 11150  15E0  24AF  160A  118A   	fcall	___ftmul
 11151  15E3  0828               	movf	?___ftmul,w
 11152  15E4  00E4               	movwf	_calcSHT71$1125
 11153  15E5  0829               	movf	?___ftmul+1,w
 11154  15E6  00E5               	movwf	_calcSHT71$1125+1
 11155  15E7  082A               	movf	?___ftmul+2,w
 11156  15E8  00E6               	movwf	_calcSHT71$1125+2
 11157                           
 11158                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
 11159  15E9  0858               	movf	calcSHT71@rh_lin,w
 11160  15EA  00C2               	movwf	___ftadd@f1
 11161  15EB  0859               	movf	calcSHT71@rh_lin+1,w
 11162  15EC  00C3               	movwf	___ftadd@f1+1
 11163  15ED  085A               	movf	calcSHT71@rh_lin+2,w
 11164  15EE  27DD  160A  118A   	fcall	PL78	;call to abstracted procedure
 11165  15F1  263A               	fcall	___ftadd
 11166  15F2  0842               	movf	?___ftadd,w
 11167  15F3  00E7               	movwf	calcSHT71@rh_true
 11168  15F4  0843               	movf	?___ftadd+1,w
 11169  15F5  00E8               	movwf	calcSHT71@rh_true+1
 11170  15F6  0844               	movf	?___ftadd+2,w
 11171  15F7  00E9               	movwf	calcSHT71@rh_true+2
 11172                           
 11173                           ;sht71.c: 141: if(rh_true > 99) rh_true = 99;
 11174  15F8  30C6               	movlw	198
 11175  15F9  01CE               	clrf	___ftge@ff1
 11176  15FA  00CF               	movwf	___ftge@ff1+1
 11177  15FB  3042               	movlw	66
 11178  15FC  00D0               	movwf	___ftge@ff1+2
 11179  15FD  0867               	movf	calcSHT71@rh_true,w
 11180  15FE  00D1               	movwf	___ftge@ff2
 11181  15FF  0868               	movf	calcSHT71@rh_true+1,w
 11182  1600  00D2               	movwf	___ftge@ff2+1
 11183  1601  0869               	movf	calcSHT71@rh_true+2,w
 11184  1602  00D3               	movwf	___ftge@ff2+2
 11185  1603  120A  158A  25E5  160A  118A  	fcall	___ftge
 11186  1608  1803               	btfsc	3,0
 11187  1609  2E0F               	goto	l5561
 11188  160A  30C6               	movlw	198
 11189  160B  01E7               	clrf	calcSHT71@rh_true
 11190  160C  00E8               	movwf	calcSHT71@rh_true+1
 11191  160D  3042               	movlw	66
 11192  160E  00E9               	movwf	calcSHT71@rh_true+2
 11193  160F                     l5561:	
 11194                           
 11195                           ;sht71.c: 142: if(rh_true < 0.1) rh_true = 0.1;
 11196  160F  0867               	movf	calcSHT71@rh_true,w
 11197  1610  00CE               	movwf	___ftge@ff1
 11198  1611  0868               	movf	calcSHT71@rh_true+1,w
 11199  1612  00CF               	movwf	___ftge@ff1+1
 11200  1613  0869               	movf	calcSHT71@rh_true+2,w
 11201  1614  00D0               	movwf	___ftge@ff1+2
 11202  1615  30CD               	movlw	205
 11203  1616  00D1               	movwf	___ftge@ff2
 11204  1617  30CC               	movlw	204
 11205  1618  00D2               	movwf	___ftge@ff2+1
 11206  1619  303D               	movlw	61
 11207  161A  00D3               	movwf	___ftge@ff2+2
 11208  161B  120A  158A  25E5  160A  118A  	fcall	___ftge
 11209  1620  1803               	btfsc	3,0
 11210  1621  2E28               	goto	l5565
 11211  1622  30CD               	movlw	205
 11212  1623  00E7               	movwf	calcSHT71@rh_true
 11213  1624  30CC               	movlw	204
 11214  1625  00E8               	movwf	calcSHT71@rh_true+1
 11215  1626  303D               	movlw	61
 11216  1627  00E9               	movwf	calcSHT71@rh_true+2
 11217  1628                     l5565:	
 11218                           
 11219                           ;sht71.c: 144: *p_temperature = t_C;
 11220  1628  0857               	movf	calcSHT71@p_temperature,w
 11221  1629  0084               	movwf	4
 11222  162A  085E               	movf	calcSHT71@t_C,w
 11223  162B  1383               	bcf	3,7	;select IRP bank0
 11224  162C  0080               	movwf	0
 11225  162D  0A84               	incf	4,f
 11226  162E  085F               	movf	calcSHT71@t_C+1,w
 11227  162F  0080               	movwf	0
 11228  1630  0A84               	incf	4,f
 11229  1631  0860               	movf	calcSHT71@t_C+2,w
 11230  1632  0080               	movwf	0
 11231                           
 11232                           ;sht71.c: 145: return rh_true;
 11233  1633  0867               	movf	calcSHT71@rh_true,w
 11234  1634  00D4               	movwf	?_calcSHT71
 11235  1635  0868               	movf	calcSHT71@rh_true+1,w
 11236  1636  00D5               	movwf	?_calcSHT71+1
 11237  1637  0869               	movf	calcSHT71@rh_true+2,w
 11238  1638  00D6               	movwf	?_calcSHT71+2
 11239  1639  0008               	return
 11240  163A                     __end_of_calcSHT71:	
 11241  163A                     __ptext49:	
 11242 ;; *************** function ___ftadd *****************
 11243 ;; Defined at:
 11244 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftadd.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  f1              3   34[BANK0 ] float 
 11247 ;;  f2              3   37[BANK0 ] float 
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;  exp1            1   45[BANK0 ] unsigned char 
 11250 ;;  exp2            1   44[BANK0 ] unsigned char 
 11251 ;;  sign            1   43[BANK0 ] unsigned char 
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  3   34[BANK0 ] float 
 11254 ;; Registers used:
 11255 ;;		wreg, status,2, status,0, pclath, cstack
 11256 ;; Tracked objects:
 11257 ;;		On entry : 300/0
 11258 ;;		On exit  : 300/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11261 ;;      Params:         0       6       0       0       0
 11262 ;;      Locals:         0       3       0       0       0
 11263 ;;      Temps:          0       3       0       0       0
 11264 ;;      Totals:         0      12       0       0       0
 11265 ;;Total ram usage:       12 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; Hardware stack levels required when called:    2
 11268 ;; This function calls:
 11269 ;;		___ftpack
 11270 ;; This function is called by:
 11271 ;;		_getTempDS18B20
 11272 ;;		_calcSHT71
 11273 ;;		_regulacija
 11274 ;;		_menuHumi
 11275 ;;		_menu
 11276 ;;		_sprintf
 11277 ;;		___ftsub
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function ___ftadd
 11283  163A                     ___ftadd:	
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11287  163A  0842               	movf	___ftadd@f1,w
 11288  163B  00C8               	movwf	??___ftadd
 11289  163C  0843               	movf	___ftadd@f1+1,w
 11290  163D  00C9               	movwf	??___ftadd+1
 11291  163E  0844               	movf	___ftadd@f1+2,w
 11292  163F  00CA               	movwf	??___ftadd+2
 11293  1640  1003               	clrc
 11294  1641  0D49               	rlf	??___ftadd+1,w
 11295  1642  0D4A               	rlf	??___ftadd+2,w
 11296  1643  00CD               	movwf	___ftadd@exp1
 11297  1644  0845               	movf	___ftadd@f2,w
 11298  1645  00C8               	movwf	??___ftadd
 11299  1646  0846               	movf	___ftadd@f2+1,w
 11300  1647  00C9               	movwf	??___ftadd+1
 11301  1648  0847               	movf	___ftadd@f2+2,w
 11302  1649  00CA               	movwf	??___ftadd+2
 11303  164A  1003               	clrc
 11304  164B  0D49               	rlf	??___ftadd+1,w
 11305  164C  0D4A               	rlf	??___ftadd+2,w
 11306  164D  00CC               	movwf	___ftadd@exp2
 11307  164E  084D               	movf	___ftadd@exp1,w
 11308  164F  1903               	btfsc	3,2
 11309  1650  2E5D               	goto	l4903
 11310  1651  084C               	movf	___ftadd@exp2,w
 11311  1652  024D               	subwf	___ftadd@exp1,w
 11312  1653  084C               	movf	___ftadd@exp2,w
 11313  1654  1803               	skipnc
 11314  1655  2E65               	goto	L29
 11315  1656  00C8               	movwf	??___ftadd
 11316  1657  084D               	movf	___ftadd@exp1,w
 11317  1658  02C8               	subwf	??___ftadd,f
 11318  1659  3019               	movlw	25
 11319  165A  0248               	subwf	??___ftadd,w
 11320  165B  1C03               	skipc
 11321  165C  2E64               	goto	l4907
 11322  165D                     l4903:	
 11323  165D  0845               	movf	___ftadd@f2,w
 11324  165E  00C2               	movwf	?___ftadd
 11325  165F  0846               	movf	___ftadd@f2+1,w
 11326  1660  00C3               	movwf	?___ftadd+1
 11327  1661  0847               	movf	___ftadd@f2+2,w
 11328  1662  00C4               	movwf	?___ftadd+2
 11329  1663  0008               	return
 11330  1664                     l4907:	
 11331  1664  084C               	movf	___ftadd@exp2,w
 11332  1665                     L29:	
 11333  1665  1903               	btfsc	3,2
 11334  1666  0008               	return
 11335  1667  084D               	movf	___ftadd@exp1,w
 11336  1668  024C               	subwf	___ftadd@exp2,w
 11337  1669  1803               	skipnc
 11338  166A  2E73               	goto	l4913
 11339  166B  084D               	movf	___ftadd@exp1,w
 11340  166C  00C8               	movwf	??___ftadd
 11341  166D  084C               	movf	___ftadd@exp2,w
 11342  166E  02C8               	subwf	??___ftadd,f
 11343  166F  3019               	movlw	25
 11344  1670  0248               	subwf	??___ftadd,w
 11345  1671  1803               	btfsc	3,0
 11346  1672  0008               	return
 11347  1673                     l4913:	
 11348  1673  3006               	movlw	6
 11349  1674  00CB               	movwf	___ftadd@sign
 11350  1675  1BC4               	btfsc	___ftadd@f1+2,7
 11351  1676  17CB               	bsf	___ftadd@sign,7
 11352  1677  1BC7               	btfsc	___ftadd@f2+2,7
 11353  1678  174B               	bsf	___ftadd@sign,6
 11354  1679  17C3               	bsf	___ftadd@f1+1,7
 11355  167A  01C4               	clrf	___ftadd@f1+2
 11356  167B  17C6               	bsf	___ftadd@f2+1,7
 11357  167C  01C7               	clrf	___ftadd@f2+2
 11358  167D  084C               	movf	___ftadd@exp2,w
 11359  167E  024D               	subwf	___ftadd@exp1,w
 11360  167F  1803               	skipnc
 11361  1680  2E9A               	goto	l4935
 11362  1681                     l4925:	
 11363  1681  1003               	clrc
 11364  1682  0DC5               	rlf	___ftadd@f2,f
 11365  1683  0DC6               	rlf	___ftadd@f2+1,f
 11366  1684  0DC7               	rlf	___ftadd@f2+2,f
 11367  1685  03CC               	decf	___ftadd@exp2,f
 11368  1686  084C               	movf	___ftadd@exp2,w
 11369  1687  064D               	xorwf	___ftadd@exp1,w
 11370  1688  1903               	skipnz
 11371  1689  2E95               	goto	l4933
 11372  168A  03CB               	decf	___ftadd@sign,f
 11373  168B  084B               	movf	___ftadd@sign,w
 11374  168C  3907               	andlw	7
 11375  168D  1903               	btfsc	3,2
 11376  168E  2E95               	goto	l4933
 11377  168F  2E81               	goto	l4925
 11378  1690                     l4931:	
 11379  1690  1003               	clrc
 11380  1691  0CC4               	rrf	___ftadd@f1+2,f
 11381  1692  0CC3               	rrf	___ftadd@f1+1,f
 11382  1693  0CC2               	rrf	___ftadd@f1,f
 11383  1694  0ACD               	incf	___ftadd@exp1,f
 11384  1695                     l4933:	
 11385  1695  084D               	movf	___ftadd@exp1,w
 11386  1696  064C               	xorwf	___ftadd@exp2,w
 11387  1697  1903               	btfsc	3,2
 11388  1698  2EB6               	goto	l883
 11389  1699  2E90               	goto	l4931
 11390  169A                     l4935:	
 11391  169A  084D               	movf	___ftadd@exp1,w
 11392  169B  024C               	subwf	___ftadd@exp2,w
 11393  169C  1803               	skipnc
 11394  169D  2EB6               	goto	l883
 11395  169E                     l4937:	
 11396  169E  1003               	clrc
 11397  169F  0DC2               	rlf	___ftadd@f1,f
 11398  16A0  0DC3               	rlf	___ftadd@f1+1,f
 11399  16A1  0DC4               	rlf	___ftadd@f1+2,f
 11400  16A2  03CD               	decf	___ftadd@exp1,f
 11401  16A3  084C               	movf	___ftadd@exp2,w
 11402  16A4  064D               	xorwf	___ftadd@exp1,w
 11403  16A5  1903               	skipnz
 11404  16A6  2EB2               	goto	l4945
 11405  16A7  03CB               	decf	___ftadd@sign,f
 11406  16A8  084B               	movf	___ftadd@sign,w
 11407  16A9  3907               	andlw	7
 11408  16AA  1903               	btfsc	3,2
 11409  16AB  2EB2               	goto	l4945
 11410  16AC  2E9E               	goto	l4937
 11411  16AD                     l4943:	
 11412  16AD  1003               	clrc
 11413  16AE  0CC7               	rrf	___ftadd@f2+2,f
 11414  16AF  0CC6               	rrf	___ftadd@f2+1,f
 11415  16B0  0CC5               	rrf	___ftadd@f2,f
 11416  16B1  0ACC               	incf	___ftadd@exp2,f
 11417  16B2                     l4945:	
 11418  16B2  084D               	movf	___ftadd@exp1,w
 11419  16B3  064C               	xorwf	___ftadd@exp2,w
 11420  16B4  1D03               	skipz
 11421  16B5  2EAD               	goto	l4943
 11422  16B6                     l883:	
 11423  16B6  1FCB               	btfss	___ftadd@sign,7
 11424  16B7  2EC1               	goto	l4951
 11425  16B8  30FF               	movlw	255
 11426  16B9  06C2               	xorwf	___ftadd@f1,f
 11427  16BA  06C3               	xorwf	___ftadd@f1+1,f
 11428  16BB  06C4               	xorwf	___ftadd@f1+2,f
 11429  16BC  0AC2               	incf	___ftadd@f1,f
 11430  16BD  1903               	skipnz
 11431  16BE  0AC3               	incf	___ftadd@f1+1,f
 11432  16BF  1903               	skipnz
 11433  16C0  0AC4               	incf	___ftadd@f1+2,f
 11434  16C1                     l4951:	
 11435  16C1  1F4B               	btfss	___ftadd@sign,6
 11436  16C2  2ECC               	goto	l4957
 11437  16C3  30FF               	movlw	255
 11438  16C4  06C5               	xorwf	___ftadd@f2,f
 11439  16C5  06C6               	xorwf	___ftadd@f2+1,f
 11440  16C6  06C7               	xorwf	___ftadd@f2+2,f
 11441  16C7  0AC5               	incf	___ftadd@f2,f
 11442  16C8  1903               	skipnz
 11443  16C9  0AC6               	incf	___ftadd@f2+1,f
 11444  16CA  1903               	skipnz
 11445  16CB  0AC7               	incf	___ftadd@f2+2,f
 11446  16CC                     l4957:	
 11447  16CC  01CB               	clrf	___ftadd@sign
 11448  16CD  0842               	movf	___ftadd@f1,w
 11449  16CE  07C5               	addwf	___ftadd@f2,f
 11450  16CF  0843               	movf	___ftadd@f1+1,w
 11451  16D0  1103               	clrz
 11452  16D1  1803               	skipnc
 11453  16D2  0A43               	incf	___ftadd@f1+1,w
 11454  16D3  1D03               	btfss	3,2
 11455  16D4  07C6               	addwf	___ftadd@f2+1,f
 11456  16D5  0844               	movf	___ftadd@f1+2,w
 11457  16D6  1103               	clrz
 11458  16D7  1803               	skipnc
 11459  16D8  0A44               	incf	___ftadd@f1+2,w
 11460  16D9  1D03               	btfss	3,2
 11461  16DA  07C7               	addwf	___ftadd@f2+2,f
 11462  16DB  1FC7               	btfss	___ftadd@f2+2,7
 11463  16DC  2EE8               	goto	l4969
 11464  16DD  30FF               	movlw	255
 11465  16DE  06C5               	xorwf	___ftadd@f2,f
 11466  16DF  06C6               	xorwf	___ftadd@f2+1,f
 11467  16E0  06C7               	xorwf	___ftadd@f2+2,f
 11468  16E1  0AC5               	incf	___ftadd@f2,f
 11469  16E2  1903               	skipnz
 11470  16E3  0AC6               	incf	___ftadd@f2+1,f
 11471  16E4  1903               	skipnz
 11472  16E5  0AC7               	incf	___ftadd@f2+2,f
 11473  16E6  01CB               	clrf	___ftadd@sign
 11474  16E7  0ACB               	incf	___ftadd@sign,f
 11475  16E8                     l4969:	
 11476  16E8  0845               	movf	___ftadd@f2,w
 11477  16E9  00F3               	movwf	___ftpack@arg
 11478  16EA  0846               	movf	___ftadd@f2+1,w
 11479  16EB  00F4               	movwf	___ftpack@arg+1
 11480  16EC  0847               	movf	___ftadd@f2+2,w
 11481  16ED  00F5               	movwf	___ftpack@arg+2
 11482  16EE  084D               	movf	___ftadd@exp1,w
 11483  16EF  00F6               	movwf	___ftpack@exp
 11484  16F0  084B               	movf	___ftadd@sign,w
 11485  16F1  00F7               	movwf	___ftpack@sign
 11486  16F2  26FA               	fcall	___ftpack
 11487  16F3  0873               	movf	?___ftpack,w
 11488  16F4  00C2               	movwf	?___ftadd
 11489  16F5  0874               	movf	?___ftpack+1,w
 11490  16F6  00C3               	movwf	?___ftadd+1
 11491  16F7  0875               	movf	?___ftpack+2,w
 11492  16F8  00C4               	movwf	?___ftadd+2
 11493  16F9  0008               	return
 11494  16FA                     __end_of___ftadd:	
 11495  16FA                     __ptext50:	
 11496 ;; *************** function ___ftpack *****************
 11497 ;; Defined at:
 11498 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\float.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  arg             3    2[COMMON] unsigned um
 11501 ;;  exp             1    5[COMMON] unsigned char 
 11502 ;;  sign            1    6[COMMON] unsigned char 
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  3    2[COMMON] float 
 11507 ;; Registers used:
 11508 ;;		wreg, status,2, status,0
 11509 ;; Tracked objects:
 11510 ;;		On entry : 300/0
 11511 ;;		On exit  : 300/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11514 ;;      Params:         5       0       0       0       0
 11515 ;;      Locals:         0       0       0       0       0
 11516 ;;      Temps:          0       3       0       0       0
 11517 ;;      Totals:         5       3       0       0       0
 11518 ;;Total ram usage:        8 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    1
 11521 ;; This function calls:
 11522 ;;		Nothing
 11523 ;; This function is called by:
 11524 ;;		___ftadd
 11525 ;;		___ftmul
 11526 ;;		___lltoft
 11527 ;;		___lwtoft
 11528 ;; This function uses a non-reentrant model
 11529 ;;
 11530                           
 11531                           
 11532                           ;psect for function ___ftpack
 11533  16FA                     ___ftpack:	
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11537  16FA  0876               	movf	___ftpack@exp,w
 11538  16FB  1903               	btfsc	3,2
 11539  16FC  2F02               	goto	l847
 11540  16FD  0875               	movf	___ftpack@arg+2,w
 11541  16FE  0474               	iorwf	___ftpack@arg+1,w
 11542  16FF  0473               	iorwf	___ftpack@arg,w
 11543  1700  1D03               	skipz
 11544  1701  2F0B               	goto	l4831
 11545  1702                     l847:	
 11546  1702  01F3               	clrf	?___ftpack
 11547  1703  01F4               	clrf	?___ftpack+1
 11548  1704  01F5               	clrf	?___ftpack+2
 11549  1705  0008               	return
 11550  1706                     l4829:	
 11551  1706  0AF6               	incf	___ftpack@exp,f
 11552  1707  1003               	clrc
 11553  1708  0CF5               	rrf	___ftpack@arg+2,f
 11554  1709  0CF4               	rrf	___ftpack@arg+1,f
 11555  170A  0CF3               	rrf	___ftpack@arg,f
 11556  170B                     l4831:	
 11557  170B  30FE               	movlw	254
 11558  170C  0575               	andwf	___ftpack@arg+2,w
 11559  170D  1903               	btfsc	3,2
 11560  170E  2F1A               	goto	l4835
 11561  170F  2F06               	goto	l4829
 11562  1710                     l4833:	
 11563  1710  0AF6               	incf	___ftpack@exp,f
 11564  1711  0AF3               	incf	___ftpack@arg,f
 11565  1712  1903               	skipnz
 11566  1713  0AF4               	incf	___ftpack@arg+1,f
 11567  1714  1903               	skipnz
 11568  1715  0AF5               	incf	___ftpack@arg+2,f
 11569  1716  1003               	clrc
 11570  1717  0CF5               	rrf	___ftpack@arg+2,f
 11571  1718  0CF4               	rrf	___ftpack@arg+1,f
 11572  1719  0CF3               	rrf	___ftpack@arg,f
 11573  171A                     l4835:	
 11574  171A  30FF               	movlw	255
 11575  171B  0575               	andwf	___ftpack@arg+2,w
 11576  171C  1903               	btfsc	3,2
 11577  171D  2F28               	goto	l4839
 11578  171E  2F10               	goto	l4833
 11579  171F                     l4841:	
 11580  171F  3002               	movlw	2
 11581  1720  0276               	subwf	___ftpack@exp,w
 11582  1721  1C03               	btfss	3,0
 11583  1722  2F2A               	goto	l859
 11584  1723  03F6               	decf	___ftpack@exp,f
 11585  1724  1003               	clrc
 11586  1725  0DF3               	rlf	___ftpack@arg,f
 11587  1726  0DF4               	rlf	___ftpack@arg+1,f
 11588  1727  0DF5               	rlf	___ftpack@arg+2,f
 11589  1728                     l4839:	
 11590  1728  1FF4               	btfss	___ftpack@arg+1,7
 11591  1729  2F1F               	goto	l4841
 11592  172A                     l859:	
 11593  172A  1C76               	btfss	___ftpack@exp,0
 11594  172B  13F4               	bcf	___ftpack@arg+1,7
 11595  172C  1003               	clrc
 11596  172D  0CF6               	rrf	___ftpack@exp,f
 11597  172E  0876               	movf	___ftpack@exp,w
 11598  172F  00A2               	movwf	??___ftpack+2
 11599  1730  01A1               	clrf	??___ftpack+1
 11600  1731  01A0               	clrf	??___ftpack
 11601  1732  0820               	movf	??___ftpack,w
 11602  1733  04F3               	iorwf	___ftpack@arg,f
 11603  1734  0821               	movf	??___ftpack+1,w
 11604  1735  04F4               	iorwf	___ftpack@arg+1,f
 11605  1736  0822               	movf	??___ftpack+2,w
 11606  1737  04F5               	iorwf	___ftpack@arg+2,f
 11607  1738  0877               	movf	___ftpack@sign,w
 11608  1739  1D03               	btfss	3,2
 11609  173A  17F5               	bsf	___ftpack@arg+2,7
 11610  173B  0008               	return
 11611  173C                     __end_of___ftpack:	
 11612  173C                     PL28:	
 11613  173C  0873               	movf	?___awmod,w
 11614  173D  00BA               	movwf	??_scale
 11615  173E  0874               	movf	?___awmod+1,w
 11616  173F  00BB               	movwf	??_scale+1
 11617  1740  083A               	movf	??_scale,w
 11618  1741  073A               	addwf	??_scale,w
 11619  1742  073A               	addwf	??_scale,w
 11620  1743  3E12               	addlw	low (__npowers_| (0+32768))
 11621  1744  0084               	movwf	4
 11622  1745  3098               	movlw	high (__npowers_| (0+32768))
 11623  1746  1803               	skipnc
 11624  1747  3E01               	addlw	1
 11625  1748  00FF               	movwf	127
 11626  1749  0008               	return
 11627  174A                     __end_ofPL28:	
 11628  174A                     PL30:	
 11629  174A  3E12               	addlw	low (__npowers_| (0+32768))
 11630  174B  0084               	movwf	4
 11631  174C  3098               	movlw	high (__npowers_| (0+32768))
 11632  174D  1803               	skipnc
 11633  174E  3E01               	addlw	1
 11634  174F  00FF               	movwf	127
 11635  1750  0008               	return
 11636  1751                     __end_ofPL30:	
 11637  1751                     PL32:	
 11638  1751  0828               	movf	?___ftmul,w
 11639  1752  00B7               	movwf	?_scale
 11640  1753  0829               	movf	?___ftmul+1,w
 11641  1754  00B8               	movwf	?_scale+1
 11642  1755  082A               	movf	?___ftmul+2,w
 11643  1756  00B9               	movwf	?_scale+2
 11644  1757  0008               	return
 11645  1758                     __end_ofPL32:	
 11646  1758                     PL34:	
 11647  1758  00BA               	movwf	??_scale
 11648  1759  0874               	movf	?___awmod+1,w
 11649  175A  00BB               	movwf	??_scale+1
 11650  175B  083A               	movf	??_scale,w
 11651  175C  073A               	addwf	??_scale,w
 11652  175D  073A               	addwf	??_scale,w
 11653  175E  3E39               	addlw	low (__powers_| (0+32768))
 11654  175F  0084               	movwf	4
 11655  1760  3098               	movlw	high (__powers_| (0+32768))
 11656  1761  1803               	skipnc
 11657  1762  3E01               	addlw	1
 11658  1763  00FF               	movwf	127
 11659  1764  0008               	return
 11660  1765                     __end_ofPL34:	
 11661  1765                     PL38:	
 11662  1765  0828               	movf	?___ftmul,w
 11663  1766  00BE               	movwf	_scale$1129
 11664  1767  0829               	movf	?___ftmul+1,w
 11665  1768  00BF               	movwf	_scale$1129+1
 11666  1769  082A               	movf	?___ftmul+2,w
 11667  176A  00C0               	movwf	_scale$1129+2
 11668  176B  300A               	movlw	10
 11669  176C  00F3               	movwf	___awmod@divisor
 11670  176D  01F4               	clrf	___awmod@divisor+1
 11671  176E  0841               	movf	scale@scl,w
 11672  176F  00F5               	movwf	___awmod@dividend
 11673  1770  01F6               	clrf	___awmod@dividend+1
 11674  1771  0008               	return
 11675  1772                     __end_ofPL38:	
 11676  1772                     PL44:	
 11677  1772  0820               	movf	?___awdiv,w
 11678  1773  00BC               	movwf	??_scale+2
 11679  1774  0821               	movf	?___awdiv+1,w
 11680  1775  00BD               	movwf	??_scale+3
 11681  1776  083C               	movf	??_scale+2,w
 11682  1777  073C               	addwf	??_scale+2,w
 11683  1778  073C               	addwf	??_scale+2,w
 11684  1779  0008               	return
 11685  177A                     __end_ofPL44:	
 11686  177A                     PL48:	
 11687  177A  300A               	movlw	10
 11688  177B  00A0               	movwf	___awdiv@divisor
 11689  177C  01A1               	clrf	___awdiv@divisor+1
 11690  177D  0841               	movf	scale@scl,w
 11691  177E  00F5               	movwf	___awmod@dividend
 11692  177F  01F6               	clrf	___awmod@dividend+1
 11693  1780  1BF5               	btfsc	___awmod@dividend,7
 11694  1781  03F6               	decf	___awmod@dividend+1,f
 11695  1782  3064               	movlw	100
 11696  1783  00F3               	movwf	___awmod@divisor
 11697  1784  01F4               	clrf	___awmod@divisor+1
 11698  1785  0008               	return
 11699  1786                     __end_ofPL48:	
 11700  1786                     PL50:	
 11701  1786  082B               	movf	___ftmul@f2,w
 11702  1787  07B2               	addwf	___ftmul@f3_as_product,f
 11703  1788  082C               	movf	___ftmul@f2+1,w
 11704  1789  1103               	clrz
 11705  178A  1803               	skipnc
 11706  178B  0A2C               	incf	___ftmul@f2+1,w
 11707  178C  1D03               	btfss	3,2
 11708  178D  07B3               	addwf	___ftmul@f3_as_product+1,f
 11709  178E  082D               	movf	___ftmul@f2+2,w
 11710  178F  1103               	clrz
 11711  1790  0008               	return
 11712  1791                     __end_ofPL50:	
 11713  1791                     PL54:	
 11714  1791  0828               	movf	?___ftmul,w
 11715  1792  00B7               	movwf	?_fround
 11716  1793  0829               	movf	?___ftmul+1,w
 11717  1794  00B8               	movwf	?_fround+1
 11718  1795  082A               	movf	?___ftmul+2,w
 11719  1796  00B9               	movwf	?_fround+2
 11720  1797  0008               	return
 11721  1798                     __end_ofPL54:	
 11722  1798                     PL56:	
 11723  1798  00AA               	movwf	___ftmul@f1+2
 11724  1799  086A               	movf	calcSHT71@rh,w
 11725  179A  00AB               	movwf	___ftmul@f2
 11726  179B  086B               	movf	calcSHT71@rh+1,w
 11727  179C  00AC               	movwf	___ftmul@f2+1
 11728  179D  086C               	movf	calcSHT71@rh+2,w
 11729  179E  00AD               	movwf	___ftmul@f2+2
 11730  179F  0008               	return
 11731  17A0                     __end_ofPL56:	
 11732  17A0                     PL58:	
 11733  17A0  3E2D               	addlw	low ((__npowers_| (0+32768)+27))
 11734  17A1  0084               	movwf	4
 11735  17A2  3098               	movlw	high ((__npowers_| (0+32768)+27))
 11736  17A3  1803               	skipnc
 11737  17A4  3E01               	addlw	1
 11738  17A5  00FF               	movwf	127
 11739  17A6  0008               	return
 11740  17A7                     __end_ofPL58:	
 11741  17A7                     PL60:	
 11742  17A7  300A               	movlw	10
 11743  17A8  00F3               	movwf	___awmod@divisor
 11744  17A9  01F4               	clrf	___awmod@divisor+1
 11745  17AA  0841               	movf	scale@scl,w
 11746  17AB  00F5               	movwf	___awmod@dividend
 11747  17AC  01F6               	clrf	___awmod@dividend+1
 11748  17AD  0008               	return
 11749  17AE                     __end_ofPL60:	
 11750  17AE                     PL62:	
 11751  17AE  0828               	movf	?___ftmul,w
 11752  17AF  00C5               	movwf	___ftadd@f2
 11753  17B0  0829               	movf	?___ftmul+1,w
 11754  17B1  00C6               	movwf	___ftadd@f2+1
 11755  17B2  082A               	movf	?___ftmul+2,w
 11756  17B3  00C7               	movwf	___ftadd@f2+2
 11757  17B4  0008               	return
 11758  17B5                     __end_ofPL62:	
 11759  17B5                     PL64:	
 11760  17B5  00AA               	movwf	___ftmul@f1+2
 11761  17B6  300A               	movlw	10
 11762  17B7  00A0               	movwf	___awdiv@divisor
 11763  17B8  01A1               	clrf	___awdiv@divisor+1
 11764  17B9  0841               	movf	scale@scl,w
 11765  17BA  00A2               	movwf	___awdiv@dividend
 11766  17BB  01A3               	clrf	___awdiv@dividend+1
 11767  17BC  0008               	return
 11768  17BD                     __end_ofPL64:	
 11769  17BD                     PL68:	
 11770  17BD  00AA               	movwf	___ftmul@f1+2
 11771  17BE  3064               	movlw	100
 11772  17BF  00A0               	movwf	___awdiv@divisor
 11773  17C0  01A1               	clrf	___awdiv@divisor+1
 11774  17C1  0841               	movf	scale@scl,w
 11775  17C2  00A2               	movwf	___awdiv@dividend
 11776  17C3  01A3               	clrf	___awdiv@dividend+1
 11777  17C4  0008               	return
 11778  17C5                     __end_ofPL68:	
 11779  17C5                     PL72:	
 11780  17C5  0820               	movf	?___awdiv,w
 11781  17C6  00BA               	movwf	??_scale
 11782  17C7  0821               	movf	?___awdiv+1,w
 11783  17C8  00BB               	movwf	??_scale+1
 11784  17C9  083A               	movf	??_scale,w
 11785  17CA  073A               	addwf	??_scale,w
 11786  17CB  073A               	addwf	??_scale,w
 11787  17CC  0008               	return
 11788  17CD                     __end_ofPL72:	
 11789  17CD                     PL74:	
 11790  17CD  00AA               	movwf	___ftmul@f1+2
 11791  17CE  083E               	movf	_fround$1127,w
 11792  17CF  00AB               	movwf	___ftmul@f2
 11793  17D0  083F               	movf	_fround$1127+1,w
 11794  17D1  00AC               	movwf	___ftmul@f2+1
 11795  17D2  0840               	movf	_fround$1127+2,w
 11796  17D3  00AD               	movwf	___ftmul@f2+2
 11797  17D4  0008               	return
 11798  17D5                     __end_ofPL74:	
 11799  17D5                     PL76:	
 11800  17D5  00AA               	movwf	___ftmul@f1+2
 11801  17D6  083E               	movf	_scale$1129,w
 11802  17D7  00AB               	movwf	___ftmul@f2
 11803  17D8  083F               	movf	_scale$1129+1,w
 11804  17D9  00AC               	movwf	___ftmul@f2+1
 11805  17DA  0840               	movf	_scale$1129+2,w
 11806  17DB  00AD               	movwf	___ftmul@f2+2
 11807  17DC  0008               	return
 11808  17DD                     __end_ofPL76:	
 11809  17DD                     PL78:	
 11810  17DD  00C4               	movwf	___ftadd@f1+2
 11811  17DE  0864               	movf	_calcSHT71$1125,w
 11812  17DF  00C5               	movwf	___ftadd@f2
 11813  17E0  0865               	movf	_calcSHT71$1125+1,w
 11814  17E1  00C6               	movwf	___ftadd@f2+1
 11815  17E2  0866               	movf	_calcSHT71$1125+2,w
 11816  17E3  00C7               	movwf	___ftadd@f2+2
 11817  17E4  0008               	return
 11818  17E5                     __end_ofPL78:	
 11819  17E5                     PL82:	
 11820  17E5  3E48               	addlw	low ((__npowers_| (0+32768)+54))
 11821  17E6  0084               	movwf	4
 11822  17E7  3098               	movlw	high ((__npowers_| (0+32768)+54))
 11823  17E8  1803               	skipnc
 11824  17E9  3E01               	addlw	1
 11825  17EA  00FF               	movwf	127
 11826  17EB  0008               	return
 11827  17EC                     __end_ofPL82:	
 11828  17EC                     PL86:	
 11829  17EC  0828               	movf	?___ftmul,w
 11830  17ED  00BE               	movwf	_fround$1127
 11831  17EE  0829               	movf	?___ftmul+1,w
 11832  17EF  00BF               	movwf	_fround$1127+1
 11833  17F0  082A               	movf	?___ftmul+2,w
 11834  17F1  00C0               	movwf	_fround$1127+2
 11835  17F2  0008               	return
 11836  17F3                     __end_ofPL86:	
 11837  17F3                     PL90:	
 11838  17F3  3E54               	addlw	low ((__powers_| (0+32768)+27))
 11839  17F4  0084               	movwf	4
 11840  17F5  3098               	movlw	high ((__powers_| (0+32768)+27))
 11841  17F6  1803               	skipnc
 11842  17F7  3E01               	addlw	1
 11843  17F8  00FF               	movwf	127
 11844  17F9  0008               	return
 11845  17FA                     __end_ofPL90:	
 11846  17FA                     PL100:	
 11847  17FA  3003               	movlw	3
 11848  17FB  00A3               	movwf	___bmul@multiplicand
 11849  17FC  300A               	movlw	10
 11850  17FD  00F3               	movwf	___lbmod@divisor
 11851  17FE  0841               	movf	fround@prec,w
 11852  17FF  0008               	return
 11853  1800                     __end_ofPL100:	
 11854                           
 11855                           	psect	text56
 11856  1B51                     __ptext56:	
 11857 ;; *************** function _adcInit *****************
 11858 ;; Defined at:
 11859 ;;		line 4 in file "tgs4161.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;		None
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;		None               void
 11866 ;; Registers used:
 11867 ;;		status,2
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/100
 11870 ;;		On exit  : 300/100
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11873 ;;      Params:         0       0       0       0       0
 11874 ;;      Locals:         0       0       0       0       0
 11875 ;;      Temps:          0       0       0       0       0
 11876 ;;      Totals:         0       0       0       0       0
 11877 ;;Total ram usage:        0 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    1
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_main
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _adcInit
 11889  1B51                     _adcInit:	
 11890                           
 11891                           ;tgs4161.c: 5: TRISA |= 0b00000001;
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _adcInit: [status,2]
 11895  1B51  1683               	bsf	3,5	;RP0=1, select bank1
 11896  1B52  1303               	bcf	3,6	;RP1=0, select bank1
 11897  1B53  1405               	bsf	5,0	;volatile
 11898                           
 11899                           ;tgs4161.c: 6: ANSEL |= 0b00000001;
 11900  1B54  1703               	bsf	3,6	;RP1=1, select bank3
 11901  1B55  1408               	bsf	8,0	;volatile
 11902                           
 11903                           ;tgs4161.c: 7: ADCON0 = 0b00000000;
 11904  1B56  1283               	bcf	3,5	;RP0=0, select bank0
 11905  1B57  1303               	bcf	3,6	;RP1=0, select bank0
 11906  1B58  019F               	clrf	31	;volatile
 11907                           
 11908                           ;tgs4161.c: 8: ADCON1 |= 0b10000000;
 11909  1B59  1683               	bsf	3,5	;RP0=1, select bank1
 11910  1B5A  179F               	bsf	31,7	;volatile
 11911                           
 11912                           ;tgs4161.c: 9: PIE1bits.ADIE = 0;
 11913  1B5B  130C               	bcf	12,6	;volatile
 11914  1B5C  0008               	return
 11915  1B5D                     __end_of_adcInit:	
 11916                           
 11917                           	psect	text57
 11918  1B7C                     __ptext57:	
 11919 ;; *************** function ___itoee *****************
 11920 ;; Defined at:
 11921 ;;		line 87 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;  addr            1    wreg     PTR eeprom void 
 11924 ;;		 -> test(2), 
 11925 ;;  data            2    3[BANK0 ] unsigned int 
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  addr            1    5[BANK0 ] PTR eeprom void 
 11928 ;;		 -> test(2), 
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  2    3[BANK0 ] unsigned int 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11933 ;; Tracked objects:
 11934 ;;		On entry : 300/0
 11935 ;;		On exit  : 300/300
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11938 ;;      Params:         0       2       0       0       0
 11939 ;;      Locals:         0       1       0       0       0
 11940 ;;      Temps:          0       0       0       0       0
 11941 ;;      Totals:         0       3       0       0       0
 11942 ;;Total ram usage:        3 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    2
 11945 ;; This function calls:
 11946 ;;		_memcpyee
 11947 ;; This function is called by:
 11948 ;;		_main
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           
 11953                           ;psect for function ___itoee
 11954  1B7C                     ___itoee:	
 11955                           
 11956                           ;incstack = 0
 11957                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11958                           ;___itoee@addr stored from wreg
 11959  1B7C  00A5               	movwf	___itoee@addr
 11960  1B7D  3023               	movlw	(low (___itoee@data| 0))& (0+255)
 11961  1B7E  00F3               	movwf	memcpyee@from
 11962  1B7F  3002               	movlw	2
 11963  1B80  00F4               	movwf	memcpyee@size
 11964  1B81  0825               	movf	___itoee@addr,w
 11965  1B82  2B83               	ljmp	_memcpyee
 11966  1B83                     __end_of___itoee:	
 11967  1B83                     __ptext58:	
 11968 ;; *************** function _memcpyee *****************
 11969 ;; Defined at:
 11970 ;;		line 24 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;  to              1    wreg     PTR eeprom unsigned char
 11973 ;;		 -> test(2), 
 11974 ;;  from            1    2[COMMON] PTR const unsigned char 
 11975 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
 11976 ;;		 -> __itoee@data(2), __ctoee@data(1), 
 11977 ;;  size            1    3[COMMON] unsigned char 
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;  to              1    5[COMMON] PTR eeprom unsigned char
 11980 ;;		 -> test(2), 
 11981 ;;  ptr             1    4[COMMON] PTR const unsigned char 
 11982 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
 11983 ;;		 -> __itoee@data(2), __ctoee@data(1), 
 11984 ;; Return value:  Size  Location     Type
 11985 ;;		None               void
 11986 ;; Registers used:
 11987 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11988 ;; Tracked objects:
 11989 ;;		On entry : 300/0
 11990 ;;		On exit  : 300/300
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11993 ;;      Params:         2       0       0       0       0
 11994 ;;      Locals:         2       0       0       0       0
 11995 ;;      Temps:          0       0       0       0       0
 11996 ;;      Totals:         4       0       0       0       0
 11997 ;;Total ram usage:        4 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    1
 12000 ;; This function calls:
 12001 ;;		Nothing
 12002 ;; This function is called by:
 12003 ;;		___itoee
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           
 12008                           ;psect for function _memcpyee
 12009  1B83                     _memcpyee:	
 12010                           
 12011                           ;incstack = 0
 12012                           ; Regs used in _memcpyee: [wreg-fsr0h+status,2+status,0]
 12013                           ;memcpyee@to stored from wreg
 12014  1B83  00F6               	movwf	memcpyee@to
 12015  1B84  0873               	movf	memcpyee@from,w
 12016  1B85  00F5               	movwf	memcpyee@ptr
 12017  1B86                     l623:	
 12018  1B86  1683               	bsf	3,5	;RP0=1, select bank3
 12019  1B87  1703               	bsf	3,6	;RP1=1, select bank3
 12020  1B88  188C               	btfsc	12,1	;volsfr
 12021  1B89  2B86               	goto	l623
 12022  1B8A  0876               	movf	memcpyee@to,w
 12023  1B8B  3EFF               	addlw	255
 12024  1B8C  1283               	bcf	3,5	;RP0=0, select bank2
 12025  1B8D  008D               	movwf	13	;volatile
 12026  1B8E  1683               	bsf	3,5	;RP0=1, select bank3
 12027  1B8F  138C               	bcf	12,7	;volsfr
 12028  1B90                     l4361:	
 12029  1B90  03F4               	decf	memcpyee@size,f
 12030  1B91  0F74               	incfsz	memcpyee@size,w
 12031  1B92  2B94               	goto	l628
 12032  1B93  0008               	return
 12033  1B94                     l628:	
 12034  1B94  188C               	btfsc	12,1	;volsfr
 12035  1B95  2B94               	goto	l628
 12036  1B96  0875               	movf	memcpyee@ptr,w
 12037  1B97  0084               	movwf	4
 12038  1B98  1383               	bcf	3,7	;select IRP bank0
 12039  1B99  0800               	movf	0,w
 12040  1B9A  1283               	bcf	3,5	;RP0=0, select bank2
 12041  1B9B  008C               	movwf	12	;volatile
 12042  1B9C  0AF5               	incf	memcpyee@ptr,f
 12043  1B9D  0A8D               	incf	13,f	;volatile
 12044  1B9E  1003               	bcf	3,0	;volatile
 12045  1B9F  1B8B               	btfsc	11,7	;volatile
 12046  1BA0  1403               	bsf	3,0	;volatile
 12047  1BA1  138B               	bcf	11,7	;volatile
 12048  1BA2  1683               	bsf	3,5	;RP0=1, select bank3
 12049  1BA3  150C               	bsf	12,2	;volsfr
 12050  1BA4  3055               	movlw	85
 12051  1BA5  008D               	movwf	13	;volsfr
 12052  1BA6  30AA               	movlw	170
 12053  1BA7  008D               	movwf	13	;volsfr
 12054  1BA8  148C               	bsf	12,1	;volsfr
 12055  1BA9  110C               	bcf	12,2	;volsfr
 12056  1BAA  1C03               	btfss	3,0	;volatile
 12057  1BAB  2B90               	goto	l4361
 12058  1BAC  178B               	bsf	11,7	;volatile
 12059  1BAD  2B90               	goto	l4361
 12060  1BAE                     __end_of_memcpyee:	
 12061                           
 12062                           	psect	text59
 12063  1CF4                     __ptext59:	
 12064 ;; *************** function _UARTInit *****************
 12065 ;; Defined at:
 12066 ;;		line 4 in file "uart.c"
 12067 ;; Parameters:    Size  Location     Type
 12068 ;;  baud_rate       4    8[BANK0 ] const unsigned long 
 12069 ;; Auto vars:     Size  Location     Type
 12070 ;;  x               2   17[BANK0 ] unsigned int 
 12071 ;;  k               1    0        unsigned char 
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      unsigned char 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2, status,0, pclath, cstack
 12076 ;; Tracked objects:
 12077 ;;		On entry : 300/0
 12078 ;;		On exit  : 200/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12081 ;;      Params:         0       4       0       0       0
 12082 ;;      Locals:         0       7       0       0       0
 12083 ;;      Temps:          0       0       0       0       0
 12084 ;;      Totals:         0      11       0       0       0
 12085 ;;Total ram usage:       11 bytes
 12086 ;; Hardware stack levels used:    1
 12087 ;; Hardware stack levels required when called:    2
 12088 ;; This function calls:
 12089 ;;		___lldiv
 12090 ;; This function is called by:
 12091 ;;		_main
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           
 12096                           ;psect for function _UARTInit
 12097  1CF4                     _UARTInit:	
 12098                           
 12099                           ;uart.c: 6: unsigned int x;
 12100                           ;uart.c: 7: unsigned char k;
 12101                           ;uart.c: 9: TRISCbits.TRISC6 = 0;
 12102                           
 12103                           ;incstack = 0
 12104                           ; Regs used in _UARTInit: [wreg+status,2+status,0+pclath+cstack]
 12105  1CF4  1683               	bsf	3,5	;RP0=1, select bank1
 12106  1CF5  1307               	bcf	7,6	;volatile
 12107                           
 12108                           ;uart.c: 10: TRISCbits.TRISC7 = 0;
 12109  1CF6  1387               	bcf	7,7	;volatile
 12110                           
 12111                           ;uart.c: 11: INTCON |= 0b11000000;
 12112  1CF7  30C0               	movlw	192
 12113  1CF8  048B               	iorwf	11,f	;volatile
 12114                           
 12115                           ;uart.c: 12: PIE1bits.RCIE = 1;
 12116  1CF9  168C               	bsf	12,5	;volatile
 12117                           
 12118                           ;uart.c: 14: if((baud_rate > 115200) || (baud_rate < 300)) return 0;
 12119  1CFA  1283               	bcf	3,5	;RP0=0, select bank0
 12120  1CFB  082B               	movf	UARTInit@baud_rate+3,w
 12121  1CFC  1D03               	btfss	3,2
 12122  1CFD  0008               	return
 12123  1CFE  3001               	movlw	1
 12124  1CFF  022A               	subwf	UARTInit@baud_rate+2,w
 12125  1D00  1D03               	skipz
 12126  1D01  2D08               	goto	u6743
 12127  1D02  30C2               	movlw	194
 12128  1D03  0229               	subwf	UARTInit@baud_rate+1,w
 12129  1D04  1D03               	skipz
 12130  1D05  2D08               	goto	u6743
 12131  1D06  3001               	movlw	1
 12132  1D07  0228               	subwf	UARTInit@baud_rate,w
 12133  1D08                     u6743:	
 12134  1D08  1803               	btfsc	3,0
 12135  1D09  0008               	return
 12136  1D0A  082B               	movf	UARTInit@baud_rate+3,w
 12137  1D0B  1D03               	btfss	3,2
 12138  1D0C  2D18               	goto	l5891
 12139  1D0D  082A               	movf	UARTInit@baud_rate+2,w
 12140  1D0E  1D03               	btfss	3,2
 12141  1D0F  2D18               	goto	l5891
 12142  1D10  3001               	movlw	1
 12143  1D11  0229               	subwf	UARTInit@baud_rate+1,w
 12144  1D12  1D03               	skipz
 12145  1D13  2D16               	goto	u6753
 12146  1D14  302C               	movlw	44
 12147  1D15  0228               	subwf	UARTInit@baud_rate,w
 12148  1D16                     u6753:	
 12149  1D16  1C03               	btfss	3,0
 12150  1D17  0008               	return
 12151  1D18                     l5891:	
 12152                           
 12153                           ;uart.c: 18: }
 12154                           ;uart.c: 20: if(baud_rate == 9600) x = (8000000 / baud_rate)/k - 1;
 12155  1D18  3080               	movlw	128
 12156  1D19  0628               	xorwf	UARTInit@baud_rate,w
 12157  1D1A  3025               	movlw	37
 12158  1D1B  1903               	skipnz
 12159  1D1C  0629               	xorwf	UARTInit@baud_rate+1,w
 12160  1D1D  042A               	iorwf	UARTInit@baud_rate+2,w
 12161  1D1E  042B               	iorwf	UARTInit@baud_rate+3,w
 12162  1D1F  1D03               	btfss	3,2
 12163  1D20  2D37               	goto	l5897
 12164  1D21  256F               	fcall	PL18	;call to abstracted procedure
 12165  1D22  120A  158A  264F  160A  158A  	fcall	___lldiv
 12166  1D27  2559               	fcall	PL6	;call to abstracted procedure
 12167  1D28  120A  158A  264F  160A  158A  	fcall	___lldiv
 12168  1D2D  0821               	movf	?___lldiv+1,w
 12169  1D2E  00B2               	movwf	UARTInit@x+1
 12170  1D2F  0820               	movf	?___lldiv,w
 12171  1D30  00B1               	movwf	UARTInit@x
 12172  1D31  30FF               	movlw	255
 12173  1D32  07B1               	addwf	UARTInit@x,f
 12174  1D33  1803               	skipnc
 12175  1D34  0AB2               	incf	UARTInit@x+1,f
 12176  1D35  07B2               	addwf	UARTInit@x+1,f
 12177  1D36  2D45               	goto	l5899
 12178  1D37                     l5897:	
 12179                           
 12180                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 12181  1D37  256F               	fcall	PL18	;call to abstracted procedure
 12182  1D38  120A  158A  264F  160A  158A  	fcall	___lldiv
 12183                           
 12184                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 12185  1D3D  2559               	fcall	PL6	;call to abstracted procedure
 12186  1D3E  120A  158A  264F   	fcall	___lldiv
 12187  1D41  0821               	movf	?___lldiv+1,w
 12188  1D42  00B2               	movwf	UARTInit@x+1
 12189  1D43  0820               	movf	?___lldiv,w
 12190  1D44  00B1               	movwf	UARTInit@x
 12191  1D45                     l5899:	
 12192                           
 12193                           ;uart.c: 23: BRGH = 1;
 12194  1D45  1683               	bsf	3,5	;RP0=1, select bank1
 12195  1D46  1518               	bsf	24,2	;volatile
 12196                           
 12197                           ;uart.c: 24: BRG16 = 1;
 12198  1D47  1703               	bsf	3,6	;RP1=1, select bank3
 12199  1D48  1587               	bsf	7,3	;volatile
 12200                           
 12201                           ;uart.c: 25: SPBRG = x & 0xFF;
 12202  1D49  1283               	bcf	3,5	;RP0=0, select bank0
 12203  1D4A  1303               	bcf	3,6	;RP1=0, select bank0
 12204  1D4B  0831               	movf	UARTInit@x,w
 12205  1D4C  1683               	bsf	3,5	;RP0=1, select bank1
 12206  1D4D  0099               	movwf	25	;volatile
 12207                           
 12208                           ;uart.c: 26: SPBRGH = (x>>8) & 0xFF;
 12209  1D4E  1283               	bcf	3,5	;RP0=0, select bank0
 12210  1D4F  0832               	movf	UARTInit@x+1,w
 12211  1D50  1683               	bsf	3,5	;RP0=1, select bank1
 12212  1D51  009A               	movwf	26	;volatile
 12213                           
 12214                           ;uart.c: 27: SYNC = 0;
 12215  1D52  1218               	bcf	24,4	;volatile
 12216                           
 12217                           ;uart.c: 28: SPEN = 1;
 12218  1D53  1283               	bcf	3,5	;RP0=0, select bank0
 12219  1D54  1798               	bsf	24,7	;volatile
 12220                           
 12221                           ;uart.c: 29: CREN = 1;
 12222  1D55  1618               	bsf	24,4	;volatile
 12223                           
 12224                           ;uart.c: 30: TXEN = 1;
 12225  1D56  1683               	bsf	3,5	;RP0=1, select bank1
 12226  1D57  1698               	bsf	24,5	;volatile
 12227  1D58  0008               	return
 12228  1D59                     __end_of_UARTInit:	
 12229  1D59                     PL6:	
 12230  1D59  0823               	movf	?___lldiv+3,w
 12231  1D5A  00AF               	movwf	_UARTInit$1126+3
 12232  1D5B  0822               	movf	?___lldiv+2,w
 12233  1D5C  00AE               	movwf	_UARTInit$1126+2
 12234  1D5D  0821               	movf	?___lldiv+1,w
 12235  1D5E  00AD               	movwf	_UARTInit$1126+1
 12236  1D5F  0820               	movf	?___lldiv,w
 12237  1D60  00AC               	movwf	_UARTInit$1126
 12238  1D61  3004               	movlw	4
 12239  1D62  00A0               	movwf	___lldiv@divisor
 12240  1D63  01A1               	clrf	___lldiv@divisor+1
 12241  1D64  01A2               	clrf	___lldiv@divisor+2
 12242  1D65  01A3               	clrf	___lldiv@divisor+3
 12243  1D66  082F               	movf	_UARTInit$1126+3,w
 12244  1D67  00A7               	movwf	___lldiv@dividend+3
 12245  1D68  082E               	movf	_UARTInit$1126+2,w
 12246  1D69  00A6               	movwf	___lldiv@dividend+2
 12247  1D6A  082D               	movf	_UARTInit$1126+1,w
 12248  1D6B  00A5               	movwf	___lldiv@dividend+1
 12249  1D6C  082C               	movf	_UARTInit$1126,w
 12250  1D6D  00A4               	movwf	___lldiv@dividend
 12251  1D6E  0008               	return
 12252  1D6F                     __end_ofPL6:	
 12253  1D6F                     PL18:	
 12254  1D6F  082B               	movf	UARTInit@baud_rate+3,w
 12255  1D70  00A3               	movwf	___lldiv@divisor+3
 12256  1D71  082A               	movf	UARTInit@baud_rate+2,w
 12257  1D72  00A2               	movwf	___lldiv@divisor+2
 12258  1D73  0829               	movf	UARTInit@baud_rate+1,w
 12259  1D74  00A1               	movwf	___lldiv@divisor+1
 12260  1D75  0828               	movf	UARTInit@baud_rate,w
 12261  1D76  00A0               	movwf	___lldiv@divisor
 12262  1D77  307A               	movlw	122
 12263  1D78  01A7               	clrf	___lldiv@dividend+3
 12264  1D79  00A6               	movwf	___lldiv@dividend+2
 12265  1D7A  3012               	movlw	18
 12266  1D7B  00A5               	movwf	___lldiv@dividend+1
 12267  1D7C  01A4               	clrf	___lldiv@dividend
 12268  1D7D  0008               	return
 12269  1D7E                     __end_ofPL18:	
 12270                           
 12271                           	psect	text61
 12272  1BAE                     __ptext61:	
 12273 ;; *************** function _LcdInit *****************
 12274 ;; Defined at:
 12275 ;;		line 66 in file "lcd.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;		None
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;		None               void
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, pclath, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : B00/0
 12286 ;;		On exit  : 300/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12289 ;;      Params:         0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0
 12291 ;;      Temps:          2       0       0       0       0
 12292 ;;      Totals:         2       0       0       0       0
 12293 ;;Total ram usage:        2 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    3
 12296 ;; This function calls:
 12297 ;;		_LcdCmd
 12298 ;;		_LcdPort
 12299 ;; This function is called by:
 12300 ;;		_main
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           
 12305                           ;psect for function _LcdInit
 12306  1BAE                     _LcdInit:	
 12307                           
 12308                           ;lcd.c: 69: OPTION_REG |= 0b10000000;
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _LcdInit: [wreg+status,2+status,0+pclath+cstack]
 12312  1BAE  1683               	bsf	3,5	;RP0=1, select bank1
 12313  1BAF  1781               	bsf	1,7	;volatile
 12314                           
 12315                           ;lcd.c: 70: ANSELH &= 0b11000000;
 12316  1BB0  30C0               	movlw	192
 12317  1BB1  1703               	bsf	3,6	;RP1=1, select bank3
 12318  1BB2  0589               	andwf	9,f	;volatile
 12319                           
 12320                           ;lcd.c: 71: TRISB = 0b00000000;
 12321  1BB3  1303               	bcf	3,6	;RP1=0, select bank1
 12322  1BB4  0186               	clrf	6	;volatile
 12323                           
 12324                           ;lcd.c: 73: LcdPort(0x00);
 12325  1BB5  3000               	movlw	0
 12326  1BB6  120A  118A  27CA  160A  158A  	fcall	_LcdPort
 12327                           
 12328                           ;lcd.c: 74: _delay((unsigned long)((20)*(8000000/4000.0)));
 12329  1BBB  3034               	movlw	52
 12330  1BBC  00F8               	movwf	??_LcdInit+1
 12331  1BBD  30F1               	movlw	241
 12332  1BBE  00F7               	movwf	??_LcdInit
 12333  1BBF                     u7077:	
 12334  1BBF  0BF7               	decfsz	??_LcdInit,f
 12335  1BC0  2BBF               	goto	u7077
 12336  1BC1  0BF8               	decfsz	??_LcdInit+1,f
 12337  1BC2  2BBF               	goto	u7077
 12338  1BC3  2BC4               	nop2
 12339                           
 12340                           ;lcd.c: 75: LcdCmd(0x03);
 12341  1BC4  3003               	movlw	3
 12342  1BC5  23FB  160A  158A   	fcall	_LcdCmd
 12343                           
 12344                           ;lcd.c: 76: _delay((unsigned long)((5)*(8000000/4000.0)));
 12345  1BC8  300D               	movlw	13
 12346  1BC9  00F8               	movwf	??_LcdInit+1
 12347  1BCA  30FB               	movlw	251
 12348  1BCB  00F7               	movwf	??_LcdInit
 12349  1BCC                     u7087:	
 12350  1BCC  0BF7               	decfsz	??_LcdInit,f
 12351  1BCD  2BCC               	goto	u7087
 12352  1BCE  0BF8               	decfsz	??_LcdInit+1,f
 12353  1BCF  2BCC               	goto	u7087
 12354  1BD0  2BD1               	nop2
 12355                           
 12356                           ;lcd.c: 77: LcdCmd(0x03);
 12357  1BD1  3003               	movlw	3
 12358  1BD2  23FB  160A  158A   	fcall	_LcdCmd
 12359                           
 12360                           ;lcd.c: 78: _delay((unsigned long)((11)*(8000000/4000.0)));
 12361  1BD5  301D               	movlw	29
 12362  1BD6  00F8               	movwf	??_LcdInit+1
 12363  1BD7  3091               	movlw	145
 12364  1BD8  00F7               	movwf	??_LcdInit
 12365  1BD9                     u7097:	
 12366  1BD9  0BF7               	decfsz	??_LcdInit,f
 12367  1BDA  2BD9               	goto	u7097
 12368  1BDB  0BF8               	decfsz	??_LcdInit+1,f
 12369  1BDC  2BD9               	goto	u7097
 12370                           
 12371                           ;lcd.c: 79: LcdCmd(0x03);
 12372  1BDD  3003               	movlw	3
 12373  1BDE  23FB  160A  158A   	fcall	_LcdCmd
 12374                           
 12375                           ;lcd.c: 81: LcdCmd(0x02);
 12376  1BE1  3002               	movlw	2
 12377  1BE2  23FB  160A  158A   	fcall	_LcdCmd
 12378                           
 12379                           ;lcd.c: 82: LcdCmd(0x02);
 12380  1BE5  3002               	movlw	2
 12381  1BE6  23FB  160A  158A   	fcall	_LcdCmd
 12382                           
 12383                           ;lcd.c: 83: LcdCmd(0x08);
 12384  1BE9  3008               	movlw	8
 12385  1BEA  23FB  160A  158A   	fcall	_LcdCmd
 12386                           
 12387                           ;lcd.c: 84: LcdCmd(0x00);
 12388  1BED  3000               	movlw	0
 12389  1BEE  23FB  160A  158A   	fcall	_LcdCmd
 12390                           
 12391                           ;lcd.c: 85: LcdCmd(0x0C);
 12392  1BF1  300C               	movlw	12
 12393  1BF2  23FB  160A  158A   	fcall	_LcdCmd
 12394                           
 12395                           ;lcd.c: 86: LcdCmd(0x00);
 12396  1BF5  3000               	movlw	0
 12397  1BF6  23FB  160A  158A   	fcall	_LcdCmd
 12398                           
 12399                           ;lcd.c: 87: LcdCmd(0x06);
 12400  1BF9  3006               	movlw	6
 12401  1BFA  2BFB               	ljmp	_LcdCmd
 12402  1BFB                     __end_of_LcdInit:	
 12403  1BFB                     __ptext62:	
 12404 ;; *************** function _LcdCmd *****************
 12405 ;; Defined at:
 12406 ;;		line 30 in file "lcd.c"
 12407 ;; Parameters:    Size  Location     Type
 12408 ;;  a               1    wreg     unsigned char 
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;  a               1    5[COMMON] unsigned char 
 12411 ;; Return value:  Size  Location     Type
 12412 ;;		None               void
 12413 ;; Registers used:
 12414 ;;		wreg, status,2, status,0, pclath, cstack
 12415 ;; Tracked objects:
 12416 ;;		On entry : 0/0
 12417 ;;		On exit  : 300/0
 12418 ;;		Unchanged: 0/0
 12419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12420 ;;      Params:         0       0       0       0       0
 12421 ;;      Locals:         1       0       0       0       0
 12422 ;;      Temps:          2       0       0       0       0
 12423 ;;      Totals:         3       0       0       0       0
 12424 ;;Total ram usage:        3 bytes
 12425 ;; Hardware stack levels used:    1
 12426 ;; Hardware stack levels required when called:    2
 12427 ;; This function calls:
 12428 ;;		_LcdPort
 12429 ;; This function is called by:
 12430 ;;		_LcdSetCursor
 12431 ;;		_LcdInit
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function _LcdCmd
 12437  1BFB                     _LcdCmd:	
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _LcdCmd: [wreg+status,2+status,0+pclath+cstack]
 12441                           ;LcdCmd@a stored from wreg
 12442  1BFB  00F6               	movwf	LcdCmd@a
 12443                           
 12444                           ;lcd.c: 32: RB5 = 0;
 12445  1BFC  1283               	bcf	3,5	;RP0=0, select bank0
 12446  1BFD  1303               	bcf	3,6	;RP1=0, select bank0
 12447  1BFE  1286               	bcf	6,5	;volatile
 12448                           
 12449                           ;lcd.c: 33: LcdPort(a);
 12450  1BFF  0876               	movf	LcdCmd@a,w
 12451  1C00  120A  118A  27CA  160A  158A  	fcall	_LcdPort
 12452                           
 12453                           ;lcd.c: 34: RB4 = 1;
 12454  1C05  1606               	bsf	6,4	;volatile
 12455                           
 12456                           ;lcd.c: 35: _delay((unsigned long)((4)*(8000000/4000.0)));
 12457  1C06  300B               	movlw	11
 12458  1C07  00F5               	movwf	??_LcdCmd+1
 12459  1C08  3062               	movlw	98
 12460  1C09  00F4               	movwf	??_LcdCmd
 12461  1C0A                     u7107:	
 12462  1C0A  0BF4               	decfsz	??_LcdCmd,f
 12463  1C0B  2C0A               	goto	u7107
 12464  1C0C  0BF5               	decfsz	??_LcdCmd+1,f
 12465  1C0D  2C0A               	goto	u7107
 12466  1C0E  0000               	nop
 12467                           
 12468                           ;lcd.c: 36: RB4 = 0;
 12469  1C0F  1283               	bcf	3,5	;RP0=0, select bank0
 12470  1C10  1303               	bcf	3,6	;RP1=0, select bank0
 12471  1C11  1206               	bcf	6,4	;volatile
 12472  1C12  0008               	return
 12473  1C13                     __end_of_LcdCmd:	
 12474                           
 12475                           	psect	text64
 12476  1B2D                     __ptext64:	
 12477 ;; *************** function _IOPinsInit *****************
 12478 ;; Defined at:
 12479 ;;		line 102 in file "main.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;		None
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;		None
 12484 ;; Return value:  Size  Location     Type
 12485 ;;		None               void
 12486 ;; Registers used:
 12487 ;;		None
 12488 ;; Tracked objects:
 12489 ;;		On entry : 300/100
 12490 ;;		On exit  : 300/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12493 ;;      Params:         0       0       0       0       0
 12494 ;;      Locals:         0       0       0       0       0
 12495 ;;      Temps:          0       0       0       0       0
 12496 ;;      Totals:         0       0       0       0       0
 12497 ;;Total ram usage:        0 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    1
 12500 ;; This function calls:
 12501 ;;		Nothing
 12502 ;; This function is called by:
 12503 ;;		_main
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           
 12508                           ;psect for function _IOPinsInit
 12509  1B2D                     _IOPinsInit:	
 12510                           
 12511                           ;main.c: 103: RC4 = 0;
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in _IOPinsInit: []
 12515  1B2D  1283               	bcf	3,5	;RP0=0, select bank0
 12516  1B2E  1207               	bcf	7,4	;volatile
 12517                           
 12518                           ;main.c: 104: RC1 = 0;
 12519  1B2F  1087               	bcf	7,1	;volatile
 12520                           
 12521                           ;main.c: 105: RC0 = 0;
 12522  1B30  1007               	bcf	7,0	;volatile
 12523                           
 12524                           ;main.c: 106: RC3 = 0;
 12525  1B31  1187               	bcf	7,3	;volatile
 12526                           
 12527                           ;main.c: 107: RA5 = 0;
 12528  1B32  1285               	bcf	5,5	;volatile
 12529  1B33  0008               	return
 12530  1B34                     __end_of_IOPinsInit:	
 12531                           
 12532                           	psect	text65
 12533  1B45                     __ptext65:	
 12534 ;; *************** function _IOPinsConfig *****************
 12535 ;; Defined at:
 12536 ;;		line 94 in file "main.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;		None
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;		None
 12541 ;; Return value:  Size  Location     Type
 12542 ;;		None               void
 12543 ;; Registers used:
 12544 ;;		wreg, status,2, status,0
 12545 ;; Tracked objects:
 12546 ;;		On entry : 200/100
 12547 ;;		On exit  : 300/100
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12550 ;;      Params:         0       0       0       0       0
 12551 ;;      Locals:         0       0       0       0       0
 12552 ;;      Temps:          0       0       0       0       0
 12553 ;;      Totals:         0       0       0       0       0
 12554 ;;Total ram usage:        0 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    1
 12557 ;; This function calls:
 12558 ;;		Nothing
 12559 ;; This function is called by:
 12560 ;;		_main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           
 12565                           ;psect for function _IOPinsConfig
 12566  1B45                     _IOPinsConfig:	
 12567                           
 12568                           ;main.c: 95: TRISA |= 0b00011110;
 12569                           
 12570                           ;incstack = 0
 12571                           ; Regs used in _IOPinsConfig: [wreg+status,2+status,0]
 12572  1B45  301E               	movlw	30
 12573  1B46  1683               	bsf	3,5	;RP0=1, select bank1
 12574  1B47  0485               	iorwf	5,f	;volatile
 12575                           
 12576                           ;main.c: 96: TRISA &= 0b11011111;
 12577  1B48  1285               	bcf	5,5	;volatile
 12578                           
 12579                           ;main.c: 97: ANSEL &= 0b00000001;
 12580  1B49  3001               	movlw	1
 12581  1B4A  1703               	bsf	3,6	;RP1=1, select bank3
 12582  1B4B  0588               	andwf	8,f	;volatile
 12583                           
 12584                           ;main.c: 98: TRISC &= 0b10000000;
 12585  1B4C  3080               	movlw	128
 12586  1B4D  1303               	bcf	3,6	;RP1=0, select bank1
 12587  1B4E  0587               	andwf	7,f	;volatile
 12588                           
 12589                           ;main.c: 99: TRISC |= 0b10000000;
 12590  1B4F  1787               	bsf	7,7	;volatile
 12591  1B50  0008               	return
 12592  1B51                     __end_of_IOPinsConfig:	
 12593                           
 12594                           	psect	text66
 12595  0802                     __ptext66:	
 12596 ;; *************** function _isr *****************
 12597 ;; Defined at:
 12598 ;;		line 67 in file "main.c"
 12599 ;; Parameters:    Size  Location     Type
 12600 ;;		None
 12601 ;; Auto vars:     Size  Location     Type
 12602 ;;		None
 12603 ;; Return value:  Size  Location     Type
 12604 ;;		None               void
 12605 ;; Registers used:
 12606 ;;		wreg, status,2, status,0
 12607 ;; Tracked objects:
 12608 ;;		On entry : 0/0
 12609 ;;		On exit  : 300/0
 12610 ;;		Unchanged: 0/0
 12611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12612 ;;      Params:         0       0       0       0       0
 12613 ;;      Locals:         0       0       0       0       0
 12614 ;;      Temps:          2       0       0       0       0
 12615 ;;      Totals:         2       0       0       0       0
 12616 ;;Total ram usage:        2 bytes
 12617 ;; Hardware stack levels used:    1
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		Interrupt level 1
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _isr
 12627  0802                     _isr:	
 12628                           
 12629                           ;main.c: 68: INTCONbits.T0IF = 0;
 12630  0802  110B               	bcf	11,2	;volatile
 12631                           
 12632                           ;main.c: 80: if(tmr_count == 91)
 12633  0803  305B               	movlw	91
 12634  0804  1683               	bsf	3,5	;RP0=1, select bank1
 12635  0805  1303               	bcf	3,6	;RP1=0, select bank1
 12636  0806  0639               	xorwf	_tmr_count^(0+128),w
 12637  0807  1D03               	btfss	3,2
 12638  0808  280D               	goto	i1l4723
 12639                           
 12640                           ;main.c: 81: {
 12641                           ;main.c: 82: tmr_count = 0;
 12642  0809  01B9               	clrf	_tmr_count^(0+128)
 12643                           
 12644                           ;main.c: 83: measure = 1;
 12645  080A  01B1               	clrf	_measure^(0+128)
 12646  080B  0AB1               	incf	_measure^(0+128),f
 12647                           
 12648                           ;main.c: 84: }
 12649  080C  2813               	goto	i1l4727
 12650  080D                     i1l4723:	
 12651                           
 12652                           ;main.c: 85: else if(tmr_count == 65)
 12653  080D  3041               	movlw	65
 12654  080E  0639               	xorwf	_tmr_count^(0+128),w
 12655  080F  1D03               	btfss	3,2
 12656  0810  2813               	goto	i1l4727
 12657                           
 12658                           ;main.c: 86: {
 12659                           ;main.c: 87: disp = 1;
 12660  0811  01AF               	clrf	_disp^(0+128)
 12661  0812  0AAF               	incf	_disp^(0+128),f
 12662  0813                     i1l4727:	
 12663                           
 12664                           ;main.c: 90: tmr_co2++;
 12665  0813  0AB9               	incf	_tmr_count^(0+128),f
 12666                           
 12667                           ;main.c: 91: TMR0 = 0;
 12668  0814  1283               	bcf	3,5	;RP0=0, select bank0
 12669  0815  0181               	clrf	1	;volatile
 12670  0816  0872               	movf	??_isr+1,w
 12671  0817  008A               	movwf	10
 12672  0818  0E71               	swapf	??_isr^(0+-128),w
 12673  0819  0083               	movwf	3
 12674  081A  0EFE               	swapf	126,f
 12675  081B  0E7E               	swapf	126,w
 12676  081C  0009               	retfie
 12677  081D                     __end_of_isr:	
 12678  007E                     btemp	set	126	;btemp
 12679  007E                     wtemp	set	126
 12680  007E                     wtemp0	set	126
 12681  0080                     wtemp1	set	128
 12682  0082                     wtemp2	set	130
 12683  0084                     wtemp3	set	132
 12684  0086                     wtemp4	set	134
 12685  0088                     wtemp5	set	136
 12686  007F                     wtemp6	set	127
 12687  007E                     ttemp	set	126
 12688  007E                     ttemp0	set	126
 12689  0081                     ttemp1	set	129
 12690  0084                     ttemp2	set	132
 12691  0087                     ttemp3	set	135
 12692  007F                     ttemp4	set	127
 12693  007E                     ltemp	set	126
 12694  007E                     ltemp0	set	126
 12695  0082                     ltemp1	set	130
 12696  0086                     ltemp2	set	134
 12697  0080                     ltemp3	set	128
 12698                           
 12699                           	psect	intentry
 12700  0004                     __pintentry:	
 12701                           ;incstack = 0
 12702                           ; Regs used in _isr: [wreg+status,2+status,0]
 12703                           
 12704  0004                     interrupt_function:	
 12705  007E                     saved_w	set	btemp
 12706  0004  00FE               	movwf	btemp
 12707  0005  0E03               	swapf	3,w
 12708  0006  00F1               	movwf	??_isr
 12709  0007  080A               	movf	10,w
 12710  0008  00F2               	movwf	??_isr+1
 12711  0009  120A  158A  2802   	ljmp	_isr


Data Sizes:
    Strings     198
    Constant    118
    Data        0
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      9      11
    BANK0            80     80      80
    BANK1            80     23      65
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    measureSHT71@p_value	PTR unsigned char  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), getResSHT71@humi_val(BANK1[3]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> test(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> test(EEDATA[2]), 

    memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> test(EEDATA[2]), 

    memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(COMMON[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(COMMON[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> test(EEDATA[2]), 

    eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(COMMON[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(COMMON[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_26(CODE[6]), STR_25(CODE[6]), STR_22(CODE[6]), STR_21(CODE[6]), 
		 -> STR_20(CODE[6]), STR_17(CODE[6]), STR_11(CODE[3]), STR_5(CODE[6]), 
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> humidity(BANK1[5]), temperature(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    getResSHT71@p_humi	PTR float  size(1) Largest target is 3
		 -> humi(BANK1[3]), 

    getResSHT71@p_temp	PTR float  size(1) Largest target is 3
		 -> temp(BANK1[3]), 

    readStatusRegSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    readStatusRegSHT71@p_value	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@inp(BANK1[1]), 

    calcSHT71@p_temperature	PTR float  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), 

    measureSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    LcdWriteString@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_24(CODE[10]), STR_23(CODE[17]), STR_19(CODE[9]), STR_18(CODE[17]), 
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[17]), STR_13(CODE[13]), 
		 -> STR_12(CODE[17]), STR_10(CODE[17]), STR_9(CODE[13]), STR_8(CODE[17]), 
		 -> STR_7(CODE[13]), STR_6(CODE[17]), humidity(BANK1[5]), STR_4(CODE[13]), 
		 -> STR_3(CODE[17]), temperature(BANK1[5]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->___eetoi
    _menu->_LcdWriteString
    _menuHumi->_LcdWriteString
    _menuCO2->_LcdWriteString
    _measureTGS4161->___lwdiv
    _getResSHT71->_LcdWriteString
    _getResSHT71->_readStatusRegSHT71
    _readStatusRegSHT71->_readByteSHT71
    _readStatusRegSHT71->_writeByteSHT71
    _measureSHT71->_readByteSHT71
    _measureSHT71->_writeByteSHT71
    ___lwtoft->___ftpack
    _displaySoilTemp->_LcdWriteString
    _displaySoilTemp->___eetoi
    ___eetoi->_eecpymem
    _displayCO2->_LcdWriteString
    _LcdWriteInt->___lwdiv
    _displayAirTemp->_LcdWriteString
    _displayAirMoist->_LcdWriteString
    _sprintf->___eetoi
    _scale->___awmod
    ___awdiv->___awmod
    _fround->___lbdiv
    ___lbdiv->___lbmod
    ___ftmul->___awmod
    ___ftmul->___lbdiv
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    _LcdWriteString->_LcdWriteChar
    _LcdWriteChar->_LcdPort
    _LcdSetCursor->_LcdCmd
    ___itoee->___eetoi
    _UARTInit->___lldiv
    _LcdInit->_LcdCmd
    _LcdCmd->_LcdPort

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getResSHT71
    _regulacija->___ftge
    _menu->_sprintf
    _menuHumi->_sprintf
    _menuCO2->_LcdWriteInt
    _measureTGS4161->_adcRead
    _getTempDS18B20->___ftadd
    _getResSHT71->_calcSHT71
    _calcSHT71->___ftge
    ___lwtoft->___ftpack
    _displaySoilTemp->_sprintf
    _displayCO2->_LcdWriteInt
    _LcdWriteInt->_LcdSetCursor
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf
    _sprintf->___ftge
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awdiv
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    ___itoee->___eetoi
    _UARTInit->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_sprintf
    _menuHumi->_sprintf
    _displaySoilTemp->_sprintf
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  353337
                                             78 BANK0      2     2      0
                       _IOPinsConfig
                         _IOPinsInit
                            _LcdInit
                           _UARTInit
                            ___eetoi
                            ___itoee
                            _adcInit
                    _displayAirMoist
                     _displayAirTemp
                         _displayCO2
                    _displaySoilTemp
                        _getResSHT71
                     _getTempDS18B20
                          _initSHT71
                         _initTimer0
                     _measureTGS4161
                               _menu
                         _regulacija
                       _resetDS18B20
                        _resetValues
 ---------------------------------------------------------------------------------
 (1) _resetValues                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _regulacija                                           2     2      0    7075
                                             52 BANK0      2     2      0
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0  138996
                       _LcdSetCursor
                     _LcdWriteString
                            ___ftadd
                             ___ftge
                            ___ftsub
                     _manage_buttons
                           _menuHumi
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _menuHumi                                             0     0      0   75549
                       _LcdSetCursor
                     _LcdWriteString
                            ___ftadd
                             ___ftge
                            ___ftsub
                     _manage_buttons
                            _menuCO2
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _menuCO2                                              0     0      0   12102
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
                     _manage_buttons
 ---------------------------------------------------------------------------------
 (4) _manage_buttons                                       2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _measureTGS4161                                      15    13      2    2885
                                              6 BANK0     15    13      2
                            ___lwdiv
                             ___wmul
                            _adcRead
 ---------------------------------------------------------------------------------
 (2) _adcRead                                             10     8      2      73
                                              2 COMMON     4     2      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSHT71                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTempDS18B20                                      15    12      3   13150
                                             46 BANK0     15    12      3
                            ___ftadd
                            ___ftmul
                           ___lwtoft
                        _readDS18B20
                       _resetDS18B20
                       _writeDS18B20
 ---------------------------------------------------------------------------------
 (2) _writeDS18B20                                         3     3      0      90
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetDS18B20                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readDS18B20                                          3     3      0      92
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getResSHT71                                         14    13      1   22237
                                             77 BANK0      1     0      1
                                              0 BANK1     13    13      0
                       _LcdSetCursor
                     _LcdWriteString
                           ___lwtoft
                          _calcSHT71
               _connectionResetSHT71
                       _measureSHT71
                 _readStatusRegSHT71
 ---------------------------------------------------------------------------------
 (2) _readStatusRegSHT71                                   3     2      1     376
                                              6 COMMON     3     2      1
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (2) _measureSHT71                                         7     5      2     685
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (3) _writeByteSHT71                                       4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _readByteSHT71                                        4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _connectionResetSHT71                                 1     1      0      46
                                              2 COMMON     1     1      0
                     _tranStartSHT71
 ---------------------------------------------------------------------------------
 (3) _tranStartSHT71                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calcSHT71                                           31    27      4   13224
                                             52 BANK0     25    21      4
                            ___ftadd
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2294
                                              3 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _displaySoilTemp                                      3     0      3   51588
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            ___eetoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___eetoi                                              6     3      3     880
                                              6 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           _eecpymem
 ---------------------------------------------------------------------------------
 (3) _eecpymem                                             4     2      2     758
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _displayCO2                                           2     0      2   12198
                                             11 BANK0      2     0      2
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (4) _LcdWriteInt                                          7     3      4    7131
                                              4 BANK0      7     3      4
                       _LcdSetCursor
                       _LcdWriteChar
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     586
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _displayAirTemp                                       3     0      3   50739
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayAirMoist                                      3     0      3   50739
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    35      5   45672
                                             52 BANK0     10     5      5
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___eetoi (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               14    11      3    8263
                                             23 BANK0     11     8      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1042
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              14    10      4    6764
                                             23 BANK0     11     7      4
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     318
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     436
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5292
                                              8 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     300
                                              3 BANK0      3     2      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1806
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    2235
                                              7 COMMON     1     1      0
                                              3 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     583
                                              7 COMMON     1     1      0
                                              8 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             13     9      4     411
                                             34 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5729
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5243
                                             34 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1832
                                             46 BANK0      6     0      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) _LcdWriteString                                       7     5      2    2080
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                       _LcdWriteChar
 ---------------------------------------------------------------------------------
 (5) _LcdWriteChar                                         4     4      0     260
                                              3 COMMON     4     4      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (5) _LcdSetCursor                                         5     4      1    2891
                                              6 COMMON     1     0      1
                                              0 BANK0      4     4      0
                             _LcdCmd
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___itoee                                              3     1      2     925
                                              3 BANK0      3     1      2
                            ___eetoi (ARG)
                           _memcpyee
 ---------------------------------------------------------------------------------
 (2) _memcpyee                                             4     2      2     758
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                            15    11      4    1646
                                              8 BANK0     11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1151
                                              2 COMMON     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              2     2      0     279
                                              6 COMMON     2     2      0
                             _LcdCmd
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdCmd                                               3     3      0     155
                                              3 COMMON     3     3      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdPort                                              1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOPinsInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IOPinsConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOPinsConfig
   _IOPinsInit
   _LcdInit
     _LcdCmd
       _LcdPort
     _LcdPort
   _UARTInit
     ___lldiv
   ___eetoi
     _eecpymem
   ___itoee
     ___eetoi (ARG)
       _eecpymem
     _memcpyee (ARG)
   _adcInit
   _displayAirMoist
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoi (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayAirTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoi (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayCO2
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteInt
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteChar
         _LcdPort
       ___lwdiv
       ___wmul
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
   _displaySoilTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___eetoi
       _eecpymem
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoi (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _getResSHT71
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___lwtoft
       ___ftpack
     _calcSHT71
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _connectionResetSHT71
       _tranStartSHT71
     _measureSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
     _readStatusRegSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
   _getTempDS18B20
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _readDS18B20
     _resetDS18B20
     _writeDS18B20
   _initSHT71
   _initTimer0
   _measureTGS4161
     ___lwdiv
     ___wmul
     _adcRead
   _menu
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltoft (ARG)
         ___ftpack
     _manage_buttons
     _menuHumi
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteString
         _LcdWriteChar
           _LcdPort
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       _manage_buttons
       _menuCO2
         _LcdSetCursor
           _LcdCmd
             _LcdPort
         _LcdWriteInt
           _LcdSetCursor
             _LcdCmd
               _LcdPort
           _LcdWriteChar
             _LcdPort
           ___lwdiv
           ___wmul
         _LcdWriteString
           _LcdWriteChar
             _LcdPort
         _manage_buttons
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___eetoi (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___ftge (ARG)
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _isdigit (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoi (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _regulacija
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
   _resetDS18B20
   _resetValues

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA             100      0       2       0        0.8%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      9       B       1       84.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      9C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     17      41       7       81.3%
BITBANK3            55      0       0       8        0.0%
BANK3               55      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      9C      12        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 28 18:29:19 2017

            UARTInit@baud_rate 0028                              _t 00A4                              pc 0002  
               ___bmul@product 0024                    __CFG_CP$OFF 0000                             PL2 0ED5  
                           PL4 0EFB                             PL6 1D59                             PL8 1EF3  
                           l21 00BC                             l16 00A6                             l51 07D0  
                           l52 07D2                             l53 07D6                             l54 07D7  
                           l55 07DB                             l56 07DC                             l57 07E0  
                           _RD 0C60                             _WR 0C61                   ___awdiv@sign 0025  
                           fsr 0004            ___wmul@multiplicand 0075                   ___ftadd@exp1 004D  
                 ___ftadd@exp2 004C                            PL10 0F0D                            PL20 1111  
                          PL12 0F21                            PL30 174A                            PL22 111F  
                          PL14 0F2D                            PL40 113B                            PL32 1751  
                          PL24 0F35                            PL16 07E2                            PL50 1786  
                          PL42 0F50                            PL34 1758                            PL26 112D  
                          PL18 1D6F                            PL60 17A7                            PL52 0F69  
                          PL44 1772                            PL36 0F43                            PL28 173C  
                          PL70 1148                            PL62 17AE                            PL54 1791  
                          PL46 0F5D                            PL38 1765                            PL80 0FEB  
                          PL72 17C5                            PL64 17B5                            PL56 1798  
                          PL48 177A                            PL90 17F3                            PL82 17E5  
                          PL74 17CD                            PL66 0F74                            PL58 17A0  
                          PL92 114E                            PL84 0101                            PL76 17D5  
                          PL68 17BD                            PL94 0F83                            PL86 17EC  
                          PL78 17DD                            PL96 0F8A                            PL88 0F7C  
                          PL98 1E2F                   ___ftadd@sign 004B                            l200 1E19  
                          l130 039F                            l210 1DF6                            l211 1E01  
                          l127 039C                            l161 0483                            l148 03FA  
                          l156 045B                            l157 045D                            l351 1072  
                          l432 0915                            l611 1C63                            l371 0270  
                          l355 10A0        __end_of_displaySoilTemp 1C53                            l381 02B0  
                          l534 099A                            l623 1B86                            l616 1C6E  
                          l376 0290                            l628 1B94                            l832 1EC1  
                          l847 1702                            l859 172A                            l883 16B6  
                          l975 1270                            _GIE 005F                            _RA1 0029  
                          _RB0 0030                            _RA2 002A                            _RB1 0031  
                          _RA3 002B                            _RC0 0038                            _RB2 0032  
                          _RA4 002C                            _RC1 0039                            _RB3 0033  
                          _RA5 002D                            _RB4 0034                            _RC3 003B  
                          _RB5 0035                            _RC4 003C                            _RB6 0036  
                          _RC5 003D                            _RB7 0037                   __CFG_CPD$OFF 0000  
                          _co2 00AD                            _isr 0802                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0078                   __CFG_IESO$ON 0000  
                 __CFG_FOSC$HS 0000                   ?_readDS18B20 0071                    _zeljena_co2 007A  
                         PL100 17FA                   __CFG_LVP$OFF 0000                           l3103 144E  
                         l3051 0E99                           l3115 1465                           l3131 147C  
                         l3055 0EA1                           l3119 146D                           l3143 148F  
                         l3151 14A2                           l3135 1483                           l4201 03E4  
                         l3067 151E                           l5011 14F7                           l5003 14EB  
                         l3323 1297                           l3315 1283                           l3155 14AA  
                         l4203 03EC                           l4115 00FA                           l3411 027C  
                         l3501 0FFE                           l3093 1440                           l3421 029C  
                         l5015 1500                           l5031 126A                           l3087 1437  
                         l3351 07C5                           l4151 00D2                           l4127 008C  
                         l5201 1CE1                           l5113 1243                           l5105 11F5  
                         l4137 00B1                           l3611 0E03                           l5211 0EBF  
                         l5203 1CEB                           l3339 07AE                           l4163 038A  
                         l5045 127D                           l4165 038C                           l5055 05F0  
                         l3607 0DF4                           l5135 134B                           l4175 03A8  
                         l5225 0E63                           l4361 1B90                           l5049 05EE  
                         l3641 0F9A                           l3713 0E21                           l3721 0E46  
                         l5161 1C8F                           l5153 1412                           l5129 130A  
                         l4169 0394                           l3643 0F9F                           l5147 13D0  
                         l5139 1363                           l5411 0C30                           l5403 0C19  
                         l5331 0A97                           l5067 06B5                           l4099 1C6A  
                         l4187 03C6                           l5237 0E8E                           l5245 1157  
                         l3573 1E81                           l3557 1E4B                           l5077 06EE  
                         l3671 0FD4                           l3663 0FC6                           l5247 1162  
                         l3591 1EDC                           l3559 1E50                           l5191 1CD5  
                         l5175 1CAC                           l5159 1C8A                           l5415 0C61  
                         l5343 0AF9                           l5335 0ACD                           l5327 0A85  
                         l5319 0A4B                           l5087 0726                           l5433 0CDD  
                         l5361 0B75                           l5281 099C                           l5273 0962  
                         l5521 066B                           l3675 0FE2                           l3659 0FBE  
                         l3587 1ED4                           l5195 1CDD                           l5451 0D18  
                         l5347 0B0B                           l5435 0CE8                           l5283 09B1  
                         l5275 0995                           l5259 094E                           l3747 0454  
                         l5515 0659                           l5603 022D                           l5611 0252  
                         l3669 0FCA                           l3597 1EE0                           l5445 0D0C  
                         l5381 0BBD                           l5357 0B34                           l5533 0690  
                         l4831 170B                           l4903 165D                           l3599 1EEA  
                         l5375 0BB5                           l5367 0B77                           l5527 067E  
                         l4841 171F                           l4833 1710                           l4913 1673  
                         l5473 0D89                           l5465 0D58                           l5457 0D1A  
                         l5289 09C1                           l5561 160F                           l5537 063E  
                         l4835 171A                           l4931 1690                           l4907 1664  
                         l5299 09F3                           l5643 007E                           l5619 0178  
                         l4861 0763                           l4829 1706                           l4933 1695  
                         l4925 1681                           l5485 0D95                           l5397 0BF4  
                         l5389 0BF1                           l5565 1628                           l3789 0419  
                         l5725 1DB0                           l5717 1D8E                           l5813 10C3  
                         l5805 108A                           l4839 1728                           l4951 16C1  
                         l4943 16AD                           l4935 169A                           l5479 0D9E  
                         l5399 0C08                           l5487 0938                           l4945 16B2  
                         l4937 169E                           l5489 0DE0                           l5825 10FD  
                         l5817 10E1                           ?_isr 0071                           l4957 16CC  
                         l4981 14D1                           l5589 01C5                           l5597 01EA  
                         l5861 05BC                           l5847 0553                           l5855 0578  
                         l5951 08A9                           l4969 16E8                           l4977 14C0  
                         l5777 04BD                           l5697 0317                           l5961 08DD  
                         l5891 1D18                           l5875 0505                           l5955 08AE  
                         l5939 086A                           l5877 05EA                           l5869 05E1  
                         l5797 105C                           l5957 08BF                           l5965 08EE  
                         l5973 0902                           l4999 14E2                           l5983 0921  
                         l5959 08D0                           l5967 08FC                           l5897 1D37  
                         l5993 092E                           l5899 1D45                           STR_1 1910  
                         STR_2 1945                           STR_3 18EE                           STR_4 192B  
                         STR_5 1945                           STR_6 1888                           STR_7 191E  
                         STR_8 1899                           STR_9 1938                           _BRGH 04C2  
                         _CREN 00C4                           u4000 0416                           u3275 07B7  
                         u2805 1457                           u6105 0BAE                           u6035 0AA1  
                         u3805 0FA3                           u6045 0AD8                           u7007 00FC  
                         u4544 0092                           u7017 00D4                           u4545 0090  
                         u7107 1C0A                           u3675 1EA5                           u2875 1495  
                         u6155 0BFD                           u6075 0AF7                           u7027 030F  
                         u6165 0C13                           u7037 0460                           u3935 0E2F  
                         u7047 041C                           u4584 00CD                           u7057 078C  
                         u6265 0D51                           u4585 00CB                           u7067 0799  
                         u7077 1BBF                           u6285 0D6C                           u7087 1BCC  
                         u6295 0D80                           u7097 1BD9                           u6743 1D08  
                         u6753 1D16                           u6665 10F8                           u5795 1CBB  
                         u6907 02A4                           u6675 110E                           u6917 02B7  
                         u5895 0E76                           u6927 1DCE                           u6847 0909  
                         u6937 1E11                           u6857 091C                           u5995 0A08  
                         u6947 002B                           u6867 0264                           u6957 00A2  
                         u6877 0277                           u6967 00AB                           u6887 0284  
                         u6977 00E3                           u6897 0297                           u6987 00EC  
                         u6997 00F5                           _TMR0 0001                           _SPEN 00C7  
                         _WREN 0C62                           _TXEN 04C5                           _SYNC 04C4  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                ?_tranStartSHT71 0071  
                         _disp 00AF                           _main 081D                   ___ftpack@arg 0073  
                         _menu 04C8                           _humi 00C4                   ___ftpack@exp 0076  
                         _temp 00C7                           _test 0000                           btemp 007E  
                __CFG_BOREN$ON 0000                ?_displayAirTemp 005E                           ltemp 007E  
                         start 000C                           ttemp 007E                           wtemp 007E  
          __end_of_LcdWriteInt 074D                   _sprintf$1130 00CA                __end_of_LcdInit 1BFB  
              __end_of_LcdPort 07E2              ___bmul@multiplier 0025                  __CFG_MCLRE$ON 0000  
             readByteSHT71@ack 0074                   ___ftmul@cntr 0035               ??_writeByteSHT71 0073  
             readByteSHT71@res 0075                   ___ftmul@sign 0036                   ___itoee@addr 0025  
                 ___itoee@data 0023                   ___fttol@exp1 004E            _zeljena_temperatura 00A7  
         __end_of_LcdSetCursor 077B                   ___fttol@lval 004A                          ??_isr 0071  
        __size_of_writeDS18B20 0030                    ?_IOPinsInit 0071                          ?_main 0071  
              __end_of___eetoi 1C60                          ?_menu 0071                __end_of_adcInit 1B5D  
              __end_of_adcRead 1E2F                __end_of___awdiv 1472                __end_of___lbdiv 127F  
                        _EEADR 010D                __end_of___ftadd 16FA                          STR_10 18AA  
                        STR_11 194B                          STR_20 1945                          STR_12 18FF  
                        STR_13 192B                          STR_21 1945                          STR_22 1945  
                        STR_14 18DD                          STR_15 1920                          STR_23 18BB  
                        STR_16 1922                          STR_24 1921                          _BRG16 0C3B  
                        STR_25 1945                          STR_17 1945                  __CFG_WDTE$OFF 0000  
                        STR_26 1945                          STR_18 18CC                          STR_19 1922  
              __end_of___awmod 14AF                __end_of___lbmod 129B                          _CARRY 0018  
              __end_of___ftneg 0EB8                          _ANSEL 0188                __end_of___lldiv 0E97  
              __end_of___ftmul 151C                ___awdiv@divisor 0020                __end_of___llmod 0E4F  
              __end_of___ftsub 0ED5                __end_of___fttol 0FEB                __end_of___itoee 1B83  
              __end_of___lwdiv 07CA                ___awdiv@counter 0024                          _SPBRG 0099  
                        _TRISA 0085                          _TRISB 0086                          _TRISC 0087  
                 ___lltoft@exp 0078               __end_of_UARTInit 1D59                __end_of_menuCO2 0699  
              __end_of_dpowers 1888                          _scale 129B                __end_of_isdigit 1000  
                ___ftpack@sign 0077               ?_displayAirMoist 005E                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                __end_of_sprintf 0DE5  
              ___lbdiv@divisor 0078           __end_of_LcdWriteChar 07A0                   __end_ofPL100 1800  
              ___lbdiv@counter 0021               LcdSetCursor@temp 0023                   _writeDS18B20 0087  
              __initialization 07F3                  ?_measureSHT71 0077                writeDS18B20@Cmd 0074  
                 __end_of_main 0934                   __end_of_menu 05EE               _zeljena_vlaznost 00AA  
       __size_of_readByteSHT71 0030                 _manage_buttons 025D                         ??_main 006E  
                ___fttol@sign1 0049                   adcRead@tempH 0022                         ??_menu 007A  
                 adcRead@tempL 0020               ?_displaySoilTemp 005E           __size_of__tdiv_to_l_ 0078  
         __size_of_getResSHT71 009B                         _ADCON0 001F                         _ADCON1 009F  
             ___llmod@dividend 002C                         ?_scale 0037                         _ADRESH 001E  
                       _ADRESL 009E                         _EEDATA 010C                         _EECON1 018C  
                       _EECON2 018D               ___awdiv@dividend 0022               __end_of___ftpack 173C  
                       _ANSELH 0189               __end_of___lltoft 1173               getResSHT71@error 00CF  
                  _LcdWriteInt 0699                         i1l4723 080D                         i1l4727 0813  
                       _INTCON 000B               __end_of___lwtoft 0383                      ??_LcdInit 0077  
                       _SPBRGH 009A                      ??_LcdPort 0073                   ?_resetValues 0071  
          __size_of_IOPinsInit 0007                         _LcdCmd 1BFB                 __CFG_PWRTE$OFF 0000  
             __end_of_eecpymem 1C7C                 ??_measureSHT71 0079               __end_of__powers_ 1860  
                       ___bmul 151C                         ___ftge 0DE5                   readDS18B20@i 0075  
                       ___wmul 0E97                      ??___eetoi 007A                      ??_adcInit 0073  
                    ??_adcRead 0075                      ??___awdiv 0079                      ??___lbdiv 0079  
                    ??___ftadd 0048                      ??___awmod 0077                      ??___lbmod 0074  
                    ??___ftneg 0076                      ??___lldiv 0073                      ??___ftmul 002E  
                    ??___llmod 0078                      ??___ftsub 0079                      ??___fttol 0046  
                    ??___itoee 007A         __end_of_manage_buttons 02BD                      ??___lwdiv 0077  
                  memcpyee@ptr 0075        __size_of_measureTGS4161 0088               __end_of_memcpyee 1BAE  
             __end_of_menuHumi 025D                         _fround 1173               ___awdiv@quotient 0026  
              ___awmod@divisor 0073                ___awmod@counter 0077          ___ftmul@f3_as_product 0032  
                    ??_menuCO2 007A                      ??_isdigit 0073                         saved_w 007E  
                    ??_sprintf 0059               ___lbdiv@dividend 0020           __size_of_readDS18B20 0027  
                _readByteSHT71 03F4                ___lbmod@divisor 0073        __end_of__initialization 07FC  
      __size_of_LcdWriteString 0018                ___lbmod@counter 0076                     ___ftadd@f1 0042  
                   ___ftadd@f2 0045                     ___ftge@ff1 004E                     ___ftge@ff2 0051  
           __size_of_calcSHT71 0110                     ___ftneg@f1 0073          __size_of_LcdSetCursor 002E  
          ___bmul@multiplicand 0023                     ___ftmul@f1 0028                     ___ftmul@f2 002B  
                   ___ftsub@f1 0051                     ___ftsub@f2 004E                     ___fttol@f1 0042  
               __pcstackCOMMON 0071                      ?_UARTInit 0028                     ___lltoft@c 0023  
              ?_manage_buttons 0071                  __end_of_scale 142D                     __end_ofPL2 0EFB  
                   __end_ofPL4 0F0D                     __end_ofPL6 1D6F                     __end_ofPL8 1F00  
             ___lbdiv@quotient 0022                     ___lwtoft@c 0023                     __div_to_l_ 1E35  
               _OPTION_REGbits 0081               ??_tranStartSHT71 0073                __div_to_l_@exp1 002D  
              __div_to_l_@cntr 002C                        ??_scale 003A                 ?_readByteSHT71 0071  
              __div_to_l_@quot 0028               ??_displayAirTemp 007A          __size_of_LcdWriteChar 0025  
                 calcSHT71@t_C 005E    __size_of_readStatusRegSHT71 0019                   _LcdSetCursor 074D  
                   __pbssBANK1 00A0             __size_of_initSHT71 0004                  ?_resetDS18B20 0071  
                      ?_LcdCmd 0071                  __div_to_l_@f1 0073                  __div_to_l_@f2 0076  
                   calcSHT71@t 005B                 _calcSHT71$1124 0061                 _calcSHT71$1125 0064  
__size_of_connectionResetSHT71 0017                     __pmaintext 081D                 displayCO2@co22 002B  
                      ?___bmul 0023                        ?___ftge 004E                        ?___wmul 0073  
                   ??_UARTInit 0078          connectionResetSHT71@i 0073                  ?_IOPinsConfig 0071  
                   __pintentry 0004                        ?_fround 0037              LcdWriteInt@column 0027  
                    ?___ftpack 0073                   ??_IOPinsInit 0073                      UARTInit@x 0031  
                    ?___lltoft 0023                      ?___lwtoft 0023              writeByteSHT71@cmd 0074  
            __end_of_calcSHT71 163A              getResSHT71@p_humi 006D                   _LcdWriteChar 077B  
            getResSHT71@p_temp 00CE            getTempDS18B20@tempH 0059            getTempDS18B20@tempL 0057  
                      LcdCmd@a 0076        __size_of_getTempDS18B20 0072                     _disp_count 00B0  
         __end_of_measureSHT71 03F4      readStatusRegSHT71@p_value 0078                      ?_eecpymem 0073  
                   _displayCO2 0495                     __stringtab 1800                        _LcdInit 1BAE  
                      _LcdPort 07CA                      ?_memcpyee 0073                      ?_menuHumi 0071  
               ??_resetDS18B20 0073                __size_of_LcdCmd 0018             __end_of_IOPinsInit 1B34  
            __end_of__npowers_ 1839                     _scale$1129 003E           __size_of_resetValues 001F  
               ??_IOPinsConfig 0073                __size_of___bmul 000E                __size_of___ftge 002C  
                      ___eetoi 1C53                        _adcInit 1B51                     _initTimer0 1B3C  
                      _adcRead 1E06                        ___awdiv 142D                        ___lbdiv 1264  
                      ___ftadd 163A                        ___awmod 1472                        ___lbmod 127F  
                      ___ftneg 0EB0                        ___lldiv 0E4F                __size_of___wmul 0019  
                      ___ftmul 14AF                        ___llmod 0E11                        ___ftsub 0EB8  
                      ___fttol 0F90                        ___itoee 1B7C            getResSHT71@checksum 00D3  
               _measureTGS4161 1D7E                        ___lwdiv 07A0              __end_of_initSHT71 0015  
                   ??___ftpack 0020                __size_of_fround 00F1                   memcpyee@from 0073  
                   ??___lltoft 0078                        __ptext1 1B5D                        __ptext2 1044  
                      __ptext3 04C8                        __ptext4 013B                        __ptext5 0606  
                      __ptext6 025D                        __ptext7 1D7E                        __ptext8 1E06  
                      __ptext9 1B3C                 LcdWriteInt@row 0026                   memcpyee@size 0074  
                   ??___lwtoft 0078                        _menuCO2 0606                    ?__div_to_l_ 0073  
                      _dpowers 1860                        _measure 00B1                        _isdigit 0FF2  
                 __size_of_isr 001B                        _ok_flag 00B5            writeByteSHT71@error 0075  
             ___awmod@dividend 0075                ??_readByteSHT71 0073                     ??_eecpymem 0075  
          getResSHT71@humi_val 00D0                        _sprintf 0934                        clrloop0 1B35  
         end_of_initialization 07FC                     _minus_flag 00B4                   ?_LcdWriteInt 0024  
             measureSHT71@mode 0078            getResSHT71@temp_val 00D4               measureSHT71@temp 0023  
               _LcdWriteString 05EE                     _regulacija 1044                     ??_memcpyee 0075  
                   ??_menuHumi 007A                     eecpymem@cp 0075                     eecpymem@to 0076  
              ___lldiv@divisor 0020                ___lldiv@counter 0077            measureTGS4161@krez1 002A  
          measureTGS4161@krez2 002C       __size_of_displayAirMoist 0034         __end_of_measureTGS4161 1E06  
                 __pstringtext 1800                 __tdiv_to_l_@f1 0073                 __tdiv_to_l_@f2 0076  
                ??__tdiv_to_l_ 0020                calcSHT71@rh_lin 0058                  ??_getResSHT71 00CA  
      __size_of_writeByteSHT71 0030               ___lbmod@dividend 0075                      _TRISBbits 0086  
                    _TRISCbits 0087                    ?_displayCO2 002B         __end_of_LcdWriteString 0606  
     __size_of_displaySoilTemp 0040                  LcdSetCursor@a 0020                  LcdSetCursor@b 0077  
                LcdSetCursor@y 0022                  LcdSetCursor@z 0021                    ___lbmod@rem 0077  
               readByteSHT71@i 0076            __size_of__div_to_l_ 00BE               ??_manage_buttons 0073  
               __end_of_LcdCmd 1C13                    ___ftmul@exp 0031                ?_measureTGS4161 0026  
                  ?_initTimer0 0071                 __end_of___bmul 152A                 __end_of___ftge 0E11  
               getResSHT71@inp 00CD                 __end_of___wmul 0EB0              readDS18B20@result 0074  
            __size_of_UARTInit 0065          __size_of_measureSHT71 0071                 __end_of_fround 1264  
         __end_of_resetDS18B20 0101              displaySoilTemp@t2 005E                    __end_ofPL10 0F21  
                  __end_ofPL20 111F                    __end_ofPL12 0F2D                    __end_ofPL30 1751  
                  __end_ofPL22 112D                    __end_ofPL14 0F35                    __end_ofPL40 1148  
                  __end_ofPL32 1758                    __end_ofPL24 0F43                    __end_ofPL16 07F3  
                  __end_ofPL50 1791                    __end_ofPL42 0F5D                    __end_ofPL34 1765  
                  __end_ofPL26 113B                    __end_ofPL18 1D7E                    __end_ofPL60 17AE  
                  __end_ofPL52 0F74                    __end_ofPL44 177A                    __end_ofPL36 0F50  
                  __end_ofPL28 174A                    __end_ofPL70 114E                    __end_ofPL62 17B5  
                  __end_ofPL54 1798                    __end_ofPL46 0F69                    __end_ofPL38 1772  
                  __end_ofPL80 0FF2                    __end_ofPL72 17CD                    __end_ofPL64 17BD  
                  __end_ofPL56 17A0                    __end_ofPL48 1786                    __end_ofPL90 17FA  
                  __end_ofPL82 17EC                    __end_ofPL74 17D5                    __end_ofPL66 0F7C  
                  __end_ofPL58 17A7                    __end_ofPL92 1155                    __end_ofPL84 0107  
                  __end_ofPL76 17DD                    __end_ofPL68 17C5                    __end_ofPL94 0F8A  
                  __end_ofPL86 17F3                    __end_ofPL78 17E5                    __end_ofPL96 0F90  
                  __end_ofPL88 0F83                    __end_ofPL98 1E35            start_initialization 07F3  
               _getTempDS18B20 0015                  ??_readDS18B20 0073            __end_of__tdiv_to_l_ 1CF4  
                  __end_of_isr 081D            __end_of_getResSHT71 0371                ?_LcdWriteString 0078  
         __end_of_IOPinsConfig 1B51                    adcRead@temp 0024            measureSHT71@p_value 0020  
                  ?_regulacija 0071                ___llmod@divisor 0028         measureSHT71@p_checksum 0077  
              ___llmod@counter 0078                       ??_LcdCmd 0074                   _measureSHT71 0383  
                     ??___bmul 0079                       ??___ftge 0079                     memcpyee@to 0076  
                     ??___wmul 0077            __size_of_displayCO2 0033                       ??_fround 0079  
            ??_displayAirMoist 007A                  sprintf@tmpval 00D0         __end_of_getTempDS18B20 0087  
                   fround@prec 0041              __size_of___ftpack 0042                    __pbssEEDATA 0000  
            __size_of___lltoft 001E   __end_of_connectionResetSHT71 0495                    __pbssCOMMON 007A  
                    ___latbits 0002              __size_of___lwtoft 0012                  __pcstackBANK0 0020  
                __pcstackBANK1 00CA               LcdWriteChar@temp 0075     __end_of_readStatusRegSHT71 02D6  
                    _calcSHT71 152A      getTempDS18B20@temperatura 0054              __size_of_eecpymem 001C  
          __size_of_initTimer0 0009            __end_of_readDS18B20 00DE                       ?_LcdInit 0071  
                  sprintf@flag 00CE                       ?_LcdPort 0071                    sprintf@fval 00DC  
                  sprintf@prec 00DA                    calcSHT71@rh 006A           __size_of_LcdWriteInt 00B4  
                _UARTInit$1126 002C                  ?_writeDS18B20 0071              ??_displaySoilTemp 007A  
            __size_of_memcpyee 002B              __size_of_menuHumi 0122               ___lwdiv@dividend 0075  
         displayAirMoist@humi2 005E                       ?___eetoi 0077                       ?_adcInit 0071  
                     ?_adcRead 0073                       ?___awdiv 0020                       ?___lbdiv 0078  
                     ?___ftadd 0042                       ?___awmod 0073                       ?___lbmod 0073  
                     ?___ftneg 0073                       ?___lldiv 0020                       ?___ftmul 0028  
                     ?___llmod 0028                       ?___ftsub 004E                      __npowers_ 1812  
                     ?___fttol 0042                       ?___itoee 0023                       ?___lwdiv 0073  
                 _ok_flag_humi 00B7             getTempDS18B20@temp 005B                    __tdiv_to_l_ 1C7C  
                  _getResSHT71 02D6            __size_of_regulacija 00CD                   ??__div_to_l_ 0020  
              ?_getTempDS18B20 004E                 _writeByteSHT71 044E                       ?_menuCO2 0071  
                     ?_isdigit 0071                      _initSHT71 0011                     ?_calcSHT71 0054  
                LcdWriteChar@a 0077                  LcdWriteChar@y 0076               ___lwdiv@quotient 0077  
                     ?_sprintf 0054                 __size_of_scale 0192                  LcdWriteInt@ch 002A  
                    _menu_flag 00B3                measureTGS4161@i 0030              interrupt_function 0004  
               ___wmul@product 0077                  ??_resetValues 0073                 ??_writeDS18B20 0073  
                    clear_ram0 1B34                       _PIE1bits 008C         measureTGS4161@ppm_temp 002E  
      __size_of_tranStartSHT71 002A             __end_of__div_to_l_ 1EF3             measureTGS4161@temp 0031  
      __size_of_displayAirTemp 003E                       LcdPort@a 0073            calcSHT71@p_humidity 0054  
                     _UARTInit 1CF4          __size_of_resetDS18B20 0023                      _plus_flag 00B8  
       __end_of_writeByteSHT71 047E                      _tmr_count 00B9                     _ADCON0bits 001F  
                  __stringbase 1812              ___wmul@multiplier 0073          __size_of_IOPinsConfig 000C  
                   ?_initSHT71 0071                    _readDS18B20 00B7                   ??_displayCO2 007A  
        __end_of_readByteSHT71 0424                  writeDS18B20@i 0075               ??_measureTGS4161 0028  
             __size_of_LcdInit 004D               __size_of_LcdPort 0018                   _resetDS18B20 00DE  
         _connectionResetSHT71 047E                   ??_initTimer0 0073                    _measure_co2 00B2  
          __end_of_resetValues 1B7C                   _IOPinsConfig 1B45             __end_of_displayCO2 04C8  
             __size_of___eetoi 000D               __size_of_adcInit 000C               __size_of_adcRead 0029  
             __size_of___awdiv 0045               __size_of___lbdiv 001B               __size_of___ftadd 00C0  
             __size_of___awmod 003D               __size_of___lbmod 001C               __size_of___ftneg 0008  
             __size_of___lldiv 0048               __size_of___ftmul 006D               __size_of___llmod 003E  
             __size_of___ftsub 001D               __size_of___fttol 005B               __size_of___itoee 0007  
             __size_of___lwdiv 002A                ?_writeByteSHT71 0071                       ___ftpack 16FA  
                  _fround$1127 003E                    _fround$1128 003B             __end_of__stringtab 1812  
                     ___lltoft 1155                    _isdigit$829 0073                       ___lwtoft 0371  
             ??_LcdWriteString 0020                     sprintf@exp 00D8                     sprintf@val 00D4  
             __size_of_menuCO2 0093               __size_of_isdigit 000E                ___lwdiv@divisor 0073  
                 eecpymem@from 0073                       _eecpymem 1C60                    ??_calcSHT71 0079  
                 eecpymem@size 0074                ___lwdiv@counter 0079                    _ok_flag_co2 00B6  
                     __ptext10 0011                       __ptext11 0015                       __ptext20 047E  
                     __ptext12 0087                       __ptext21 0424                       __ptext13 00DE  
                     __ptext30 1006                       __ptext22 152A                       __ptext14 00B7  
                     __ptext31 0107                       __ptext23 0371                       __ptext15 02D6  
                     __ptext40 14AF                       __ptext32 0934                       __ptext24 1C13  
                     __ptext16 02BD                       __ptext41 151C                       __ptext33 129B  
                     __ptext25 1C53                       __ptext17 0383                       __ptext50 16FA  
                     __ptext42 1C7C                       __ptext34 1472                       __ptext26 1C60  
                     __ptext18 044E                       __ptext51 0EB0                       __ptext43 1E35  
                     __ptext35 142D                       __ptext27 0495                       __ptext19 03F4  
                     __ptext60 0E4F                       __ptext52 0DE5                       __ptext44 0E97  
                     __ptext36 0FF2                       __ptext28 0699                       __ptext61 1BAE  
                     __ptext53 05EE                       __ptext45 1155                       __ptext37 1173  
                     __ptext29 07A0                       __ptext62 1BFB                       __ptext54 077B  
                     __ptext46 0E11                       __ptext38 127F                       __ptext63 07CA  
                     __ptext55 074D                       __ptext47 0F90                       __ptext39 1264  
                     __ptext64 1B2D                       __ptext56 1B51                       __ptext48 0EB8  
                     __ptext65 1B45                       __ptext57 1B7C                       __ptext49 163A  
                     __ptext66 0802                       __ptext58 1B83                       __ptext59 1CF4  
            __CFG_BOR4V$BOR40V 0000                writeByteSHT71@i 0076                       __powers_ 1839  
          displayAirTemp@temp2 005E                  ?_LcdSetCursor 0077               __size_of_sprintf 04B1  
           __end_of_initTimer0 1B45                   ??_regulacija 0054                       _memcpyee 1B83  
                     _menuHumi 013B                  __size_of_main 0117   readStatusRegSHT71@p_checksum 0077  
                __size_of_menu 0126                   LcdWriteInt@i 0024                       _humidity 00BA  
              _displayAirMoist 0107          ?_connectionResetSHT71 0071              measureTGS4161@ppm 0033  
              LcdWriteString@a 0078                LcdWriteString@i 0023                  ?_LcdWriteChar 0071  
           __end_of_regulacija 1111           __end_of_writeDS18B20 00B7                    ??_initSHT71 0073  
                   _INTCONbits 000B              measureSHT71@error 0021                       isdigit@c 0074  
              _displaySoilTemp 1C13                       scale@scl 0041                 ??_LcdSetCursor 0078  
                     intlevel1 0000                      sprintf@ap 00CD               __tdiv_to_l_@exp1 0028  
             __tdiv_to_l_@cntr 0027                      sprintf@sp 00DF               __tdiv_to_l_@quot 0023  
             ___lldiv@dividend 0024                    _resetValues 1B5D                 _tranStartSHT71 0424  
           _readStatusRegSHT71 02BD                      stringcode 180A                 _displayAirTemp 1006  
     LcdWriteInt@ch_manje_1000 0029               ??_getTempDS18B20 0051            ?_readStatusRegSHT71 0077  
      readStatusRegSHT71@error 0079                   ?__tdiv_to_l_ 0073                 ??_LcdWriteChar 0074  
                   _IOPinsInit 1B2D        __size_of_manage_buttons 0060                   ?_getResSHT71 006D  
                   _OPTION_REG 0081                    _temperature 00BF                       sprintf@c 00E0  
                     sprintf@f 0054                    _tempervalue 00A0               ___lldiv@quotient 0073  
                     stringtab 1800        LcdWriteInt@ch_manje_100 0028               calcSHT71@rh_true 0067  
         ??_readStatusRegSHT71 0078                  ??_LcdWriteInt 007A        __end_of_displayAirMoist 013B  
       __end_of_tranStartSHT71 044E         __end_of_displayAirTemp 1044         ??_connectionResetSHT71 0073  
       calcSHT71@p_temperature 0057                   ___eetoi@addr 0020                   ___eetoi@data 0021  
