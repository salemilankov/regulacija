

Microchip Technology PIC PRO Macro Assembler V1.35 build -356382666 
                                                                                               Mon Feb 27 19:07:42 2017

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text23,local,class=CODE,merge=1,delta=2
    21                           	psect	text24,local,class=CODE,merge=1,delta=2
    22                           	psect	text27,local,class=CODE,merge=1,delta=2
    23                           	psect	text28,local,class=CODE,merge=1,delta=2
    24                           	psect	text29,local,class=CODE,merge=1,delta=2
    25                           	psect	text34,local,class=CODE,merge=1,delta=2
    26                           	psect	text39,local,class=CODE,merge=1,delta=2
    27                           	psect	text40,local,class=CODE,merge=1,delta=2
    28                           	psect	text53,local,class=CODE,merge=1,delta=2
    29                           	psect	text54,local,class=CODE,merge=1,delta=2
    30                           	psect	text59,local,class=CODE,merge=1,delta=2
    31                           	psect	text60,local,class=CODE,merge=1,delta=2
    32                           	psect	text61,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     	;# 
    37  0001                     	;# 
    38  0002                     	;# 
    39  0003                     	;# 
    40  0004                     	;# 
    41  0005                     	;# 
    42  0006                     	;# 
    43  0007                     	;# 
    44  0009                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000D                     	;# 
    49  000E                     	;# 
    50  000E                     	;# 
    51  000F                     	;# 
    52  0010                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0013                     	;# 
    56  0014                     	;# 
    57  0015                     	;# 
    58  0015                     	;# 
    59  0016                     	;# 
    60  0017                     	;# 
    61  0018                     	;# 
    62  0019                     	;# 
    63  001A                     	;# 
    64  001B                     	;# 
    65  001B                     	;# 
    66  001C                     	;# 
    67  001D                     	;# 
    68  001E                     	;# 
    69  001F                     	;# 
    70  0081                     	;# 
    71  0085                     	;# 
    72  0086                     	;# 
    73  0087                     	;# 
    74  0089                     	;# 
    75  008C                     	;# 
    76  008D                     	;# 
    77  008E                     	;# 
    78  008F                     	;# 
    79  0090                     	;# 
    80  0091                     	;# 
    81  0092                     	;# 
    82  0093                     	;# 
    83  0093                     	;# 
    84  0093                     	;# 
    85  0094                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  0105                     	;# 
    98  0107                     	;# 
    99  0108                     	;# 
   100  0109                     	;# 
   101  010C                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  0185                     	;# 
   107  0187                     	;# 
   108  0188                     	;# 
   109  0189                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  008F                     	;# 
   155  0090                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0093                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0097                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009A                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  0105                     	;# 
   174  0107                     	;# 
   175  0108                     	;# 
   176  0109                     	;# 
   177  010C                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  0185                     	;# 
   183  0187                     	;# 
   184  0188                     	;# 
   185  0189                     	;# 
   186  018C                     	;# 
   187  018D                     	;# 
   188  0000                     	;# 
   189  0001                     	;# 
   190  0002                     	;# 
   191  0003                     	;# 
   192  0004                     	;# 
   193  0005                     	;# 
   194  0006                     	;# 
   195  0007                     	;# 
   196  0009                     	;# 
   197  000A                     	;# 
   198  000B                     	;# 
   199  000C                     	;# 
   200  000D                     	;# 
   201  000E                     	;# 
   202  000E                     	;# 
   203  000F                     	;# 
   204  0010                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0013                     	;# 
   208  0014                     	;# 
   209  0015                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001B                     	;# 
   218  001C                     	;# 
   219  001D                     	;# 
   220  001E                     	;# 
   221  001F                     	;# 
   222  0081                     	;# 
   223  0085                     	;# 
   224  0086                     	;# 
   225  0087                     	;# 
   226  0089                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  008F                     	;# 
   231  0090                     	;# 
   232  0091                     	;# 
   233  0092                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0093                     	;# 
   237  0094                     	;# 
   238  0095                     	;# 
   239  0096                     	;# 
   240  0097                     	;# 
   241  0098                     	;# 
   242  0099                     	;# 
   243  009A                     	;# 
   244  009B                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  009F                     	;# 
   249  0105                     	;# 
   250  0107                     	;# 
   251  0108                     	;# 
   252  0109                     	;# 
   253  010C                     	;# 
   254  010C                     	;# 
   255  010D                     	;# 
   256  010E                     	;# 
   257  010F                     	;# 
   258  0185                     	;# 
   259  0187                     	;# 
   260  0188                     	;# 
   261  0189                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  000E                     	;# 
   279  000F                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0013                     	;# 
   284  0014                     	;# 
   285  0015                     	;# 
   286  0015                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001B                     	;# 
   294  001C                     	;# 
   295  001D                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  0081                     	;# 
   299  0085                     	;# 
   300  0086                     	;# 
   301  0087                     	;# 
   302  0089                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  008F                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0093                     	;# 
   312  0093                     	;# 
   313  0094                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0098                     	;# 
   318  0099                     	;# 
   319  009A                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  009F                     	;# 
   325  0105                     	;# 
   326  0107                     	;# 
   327  0108                     	;# 
   328  0109                     	;# 
   329  010C                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  010F                     	;# 
   334  0185                     	;# 
   335  0187                     	;# 
   336  0188                     	;# 
   337  0189                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  000E                     	;# 
   355  000F                     	;# 
   356  0010                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0013                     	;# 
   360  0014                     	;# 
   361  0015                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0017                     	;# 
   365  0018                     	;# 
   366  0019                     	;# 
   367  001A                     	;# 
   368  001B                     	;# 
   369  001B                     	;# 
   370  001C                     	;# 
   371  001D                     	;# 
   372  001E                     	;# 
   373  001F                     	;# 
   374  0081                     	;# 
   375  0085                     	;# 
   376  0086                     	;# 
   377  0087                     	;# 
   378  0089                     	;# 
   379  008C                     	;# 
   380  008D                     	;# 
   381  008E                     	;# 
   382  008F                     	;# 
   383  0090                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0095                     	;# 
   391  0096                     	;# 
   392  0097                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009C                     	;# 
   398  009D                     	;# 
   399  009E                     	;# 
   400  009F                     	;# 
   401  0105                     	;# 
   402  0107                     	;# 
   403  0108                     	;# 
   404  0109                     	;# 
   405  010C                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  010F                     	;# 
   410  0185                     	;# 
   411  0187                     	;# 
   412  0188                     	;# 
   413  0189                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0009                     	;# 
   425  000A                     	;# 
   426  000B                     	;# 
   427  000C                     	;# 
   428  000D                     	;# 
   429  000E                     	;# 
   430  000E                     	;# 
   431  000F                     	;# 
   432  0010                     	;# 
   433  0011                     	;# 
   434  0012                     	;# 
   435  0013                     	;# 
   436  0014                     	;# 
   437  0015                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0017                     	;# 
   441  0018                     	;# 
   442  0019                     	;# 
   443  001A                     	;# 
   444  001B                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  001D                     	;# 
   448  001E                     	;# 
   449  001F                     	;# 
   450  0081                     	;# 
   451  0085                     	;# 
   452  0086                     	;# 
   453  0087                     	;# 
   454  0089                     	;# 
   455  008C                     	;# 
   456  008D                     	;# 
   457  008E                     	;# 
   458  008F                     	;# 
   459  0090                     	;# 
   460  0091                     	;# 
   461  0092                     	;# 
   462  0093                     	;# 
   463  0093                     	;# 
   464  0093                     	;# 
   465  0094                     	;# 
   466  0095                     	;# 
   467  0096                     	;# 
   468  0097                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009A                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  0105                     	;# 
   478  0107                     	;# 
   479  0108                     	;# 
   480  0109                     	;# 
   481  010C                     	;# 
   482  010C                     	;# 
   483  010D                     	;# 
   484  010E                     	;# 
   485  010F                     	;# 
   486  0185                     	;# 
   487  0187                     	;# 
   488  0188                     	;# 
   489  0189                     	;# 
   490  018C                     	;# 
   491  018D                     	;# 
   492                           
   493                           	psect	stringtext
   494  1800                     __pstringtext:	
   495  1800                     stringtab:	
   496  1800                     __stringtab:	
   497                           
   498                           ;	String table - string pointers are 2 bytes each
   499  1800  1BFF               	btfsc	btemp+1,7
   500  1801  280A               	ljmp	stringcode
   501  1802  1383               	bcf	3,7
   502  1803  187F               	btfsc	btemp+1,0
   503  1804  1783               	bsf	3,7
   504  1805  0800               	movf	0,w
   505  1806  0A84               	incf	4,f
   506  1807  1903               	skipnz
   507  1808  0AFF               	incf	btemp+1,f
   508  1809  0008               	return
   509  180A                     stringcode:	
   510  180A  087F               	movf	btemp+1,w
   511  180B  397F               	andlw	127
   512  180C  008A               	movwf	10
   513  180D  0804               	movf	4,w
   514  180E  0A84               	incf	4,f
   515  180F  1903               	skipnz
   516  1810  0AFF               	incf	btemp+1,f
   517  1811  0082               	movwf	2
   518  1812                     __stringbase:	
   519  1812                     __end_of__stringtab:	
   520  1812                     __npowers_:	
   521  1812  3400               	retlw	0
   522  1813  3480               	retlw	128
   523  1814  343F               	retlw	63
   524  1815  34CD               	retlw	205
   525  1816  34CC               	retlw	204
   526  1817  343D               	retlw	61
   527  1818  34D7               	retlw	215
   528  1819  3423               	retlw	35
   529  181A  343C               	retlw	60
   530  181B  3412               	retlw	18
   531  181C  3483               	retlw	131
   532  181D  343A               	retlw	58
   533  181E  34B7               	retlw	183
   534  181F  34D1               	retlw	209
   535  1820  3438               	retlw	56
   536  1821  34C6               	retlw	198
   537  1822  3427               	retlw	39
   538  1823  3437               	retlw	55
   539  1824  3438               	retlw	56
   540  1825  3486               	retlw	134
   541  1826  3435               	retlw	53
   542  1827  34C0               	retlw	192
   543  1828  34D6               	retlw	214
   544  1829  3433               	retlw	51
   545  182A  34CC               	retlw	204
   546  182B  342B               	retlw	43
   547  182C  3432               	retlw	50
   548  182D  3470               	retlw	112
   549  182E  3489               	retlw	137
   550  182F  3430               	retlw	48
   551  1830  34E7               	retlw	231
   552  1831  34DB               	retlw	219
   553  1832  342E               	retlw	46
   554  1833  34E5               	retlw	229
   555  1834  343C               	retlw	60
   556  1835  341E               	retlw	30
   557  1836  3442               	retlw	66
   558  1837  34A2               	retlw	162
   559  1838  340D               	retlw	13
   560  1839                     __end_of__npowers_:	
   561  1839                     __powers_:	
   562  1839  3400               	retlw	0
   563  183A  3480               	retlw	128
   564  183B  343F               	retlw	63
   565  183C  3400               	retlw	0
   566  183D  3420               	retlw	32
   567  183E  3441               	retlw	65
   568  183F  3400               	retlw	0
   569  1840  34C8               	retlw	200
   570  1841  3442               	retlw	66
   571  1842  3400               	retlw	0
   572  1843  347A               	retlw	122
   573  1844  3444               	retlw	68
   574  1845  3440               	retlw	64
   575  1846  341C               	retlw	28
   576  1847  3446               	retlw	70
   577  1848  3450               	retlw	80
   578  1849  34C3               	retlw	195
   579  184A  3447               	retlw	71
   580  184B  3424               	retlw	36
   581  184C  3474               	retlw	116
   582  184D  3449               	retlw	73
   583  184E  3497               	retlw	151
   584  184F  3418               	retlw	24
   585  1850  344B               	retlw	75
   586  1851  34BC               	retlw	188
   587  1852  34BE               	retlw	190
   588  1853  344C               	retlw	76
   589  1854  346B               	retlw	107
   590  1855  346E               	retlw	110
   591  1856  344E               	retlw	78
   592  1857  3403               	retlw	3
   593  1858  3415               	retlw	21
   594  1859  3450               	retlw	80
   595  185A  3479               	retlw	121
   596  185B  34AD               	retlw	173
   597  185C  3460               	retlw	96
   598  185D  34F3               	retlw	243
   599  185E  3449               	retlw	73
   600  185F  3471               	retlw	113
   601  1860                     __end_of__powers_:	
   602  1860                     _dpowers:	
   603  1860  3401               	retlw	1
   604  1861  3400               	retlw	0
   605  1862  3400               	retlw	0
   606  1863  3400               	retlw	0
   607  1864  340A               	retlw	10
   608  1865  3400               	retlw	0
   609  1866  3400               	retlw	0
   610  1867  3400               	retlw	0
   611  1868  3464               	retlw	100
   612  1869  3400               	retlw	0
   613  186A  3400               	retlw	0
   614  186B  3400               	retlw	0
   615  186C  34E8               	retlw	232
   616  186D  3403               	retlw	3
   617  186E  3400               	retlw	0
   618  186F  3400               	retlw	0
   619  1870  3410               	retlw	16
   620  1871  3427               	retlw	39
   621  1872  3400               	retlw	0
   622  1873  3400               	retlw	0
   623  1874  34A0               	retlw	160
   624  1875  3486               	retlw	134
   625  1876  3401               	retlw	1
   626  1877  3400               	retlw	0
   627  1878  3440               	retlw	64
   628  1879  3442               	retlw	66
   629  187A  340F               	retlw	15
   630  187B  3400               	retlw	0
   631  187C  3480               	retlw	128
   632  187D  3496               	retlw	150
   633  187E  3498               	retlw	152
   634  187F  3400               	retlw	0
   635  1880  3400               	retlw	0
   636  1881  34E1               	retlw	225
   637  1882  34F5               	retlw	245
   638  1883  3405               	retlw	5
   639  1884  3400               	retlw	0
   640  1885  34CA               	retlw	202
   641  1886  349A               	retlw	154
   642  1887  343B               	retlw	59
   643  1888                     __end_of_dpowers:	
   644  001F                     _ADCON0	set	31
   645  001F                     _ADCON0bits	set	31
   646  001E                     _ADRESH	set	30
   647  000B                     _INTCON	set	11
   648  000B                     _INTCONbits	set	11
   649  0001                     _TMR0	set	1
   650  00C4                     _CREN	set	196
   651  0029                     _RA1	set	41
   652  002A                     _RA2	set	42
   653  002B                     _RA3	set	43
   654  002C                     _RA4	set	44
   655  002D                     _RA5	set	45
   656  0030                     _RB0	set	48
   657  0031                     _RB1	set	49
   658  0032                     _RB2	set	50
   659  0033                     _RB3	set	51
   660  0034                     _RB4	set	52
   661  0035                     _RB5	set	53
   662  0036                     _RB6	set	54
   663  0037                     _RB7	set	55
   664  0038                     _RC0	set	56
   665  0039                     _RC1	set	57
   666  003B                     _RC3	set	59
   667  003C                     _RC4	set	60
   668  003D                     _RC5	set	61
   669  00C7                     _SPEN	set	199
   670  009F                     _ADCON1	set	159
   671  009E                     _ADRESL	set	158
   672  0081                     _OPTION_REG	set	129
   673  0081                     _OPTION_REGbits	set	129
   674  008C                     _PIE1bits	set	140
   675  0099                     _SPBRG	set	153
   676  009A                     _SPBRGH	set	154
   677  0085                     _TRISA	set	133
   678  0086                     _TRISB	set	134
   679  0086                     _TRISBbits	set	134
   680  0087                     _TRISC	set	135
   681  0087                     _TRISCbits	set	135
   682  04C2                     _BRGH	set	1218
   683  04C4                     _SYNC	set	1220
   684  04C5                     _TXEN	set	1221
   685  0188                     _ANSEL	set	392
   686  0189                     _ANSELH	set	393
   687  0C3B                     _BRG16	set	3131
   688  1888                     STR_6:	
   689  1888  3441               	retlw	65	;'A'
   690  1889  3469               	retlw	105	;'i'
   691  188A  3472               	retlw	114	;'r'
   692  188B  3420               	retlw	32	;' '
   693  188C  346D               	retlw	109	;'m'
   694  188D  346F               	retlw	111	;'o'
   695  188E  3469               	retlw	105	;'i'
   696  188F  3473               	retlw	115	;'s'
   697  1890  3474               	retlw	116	;'t'
   698  1891  3420               	retlw	32	;' '
   699  1892  3420               	retlw	32	;' '
   700  1893  3420               	retlw	32	;' '
   701  1894  3420               	retlw	32	;' '
   702  1895  3420               	retlw	32	;' '
   703  1896  3420               	retlw	32	;' '
   704  1897  3420               	retlw	32	;' '
   705  1898  3400               	retlw	0
   706  1899                     STR_8:	
   707  1899  3443               	retlw	67	;'C'
   708  189A  344F               	retlw	79	;'O'
   709  189B  3432               	retlw	50	;'2'
   710  189C  3420               	retlw	32	;' '
   711  189D  3469               	retlw	105	;'i'
   712  189E  346E               	retlw	110	;'n'
   713  189F  3420               	retlw	32	;' '
   714  18A0  3461               	retlw	97	;'a'
   715  18A1  3469               	retlw	105	;'i'
   716  18A2  3472               	retlw	114	;'r'
   717  18A3  3420               	retlw	32	;' '
   718  18A4  3420               	retlw	32	;' '
   719  18A5  3420               	retlw	32	;' '
   720  18A6  3420               	retlw	32	;' '
   721  18A7  3420               	retlw	32	;' '
   722  18A8  3420               	retlw	32	;' '
   723  18A9  3400               	retlw	0
   724  18AA                     STR_10:	
   725  18AA  344D               	retlw	77	;'M'
   726  18AB  3465               	retlw	101	;'e'
   727  18AC  3461               	retlw	97	;'a'
   728  18AD  3473               	retlw	115	;'s'
   729  18AE  3475               	retlw	117	;'u'
   730  18AF  3472               	retlw	114	;'r'
   731  18B0  3469               	retlw	105	;'i'
   732  18B1  346E               	retlw	110	;'n'
   733  18B2  3467               	retlw	103	;'g'
   734  18B3  342E               	retlw	46	;'.'
   735  18B4  342E               	retlw	46	;'.'
   736  18B5  342E               	retlw	46	;'.'
   737  18B6  3420               	retlw	32	;' '
   738  18B7  3420               	retlw	32	;' '
   739  18B8  3420               	retlw	32	;' '
   740  18B9  3420               	retlw	32	;' '
   741  18BA  3400               	retlw	0
   742  18BB                     STR_23:	
   743  18BB  3453               	retlw	83	;'S'
   744  18BC  3465               	retlw	101	;'e'
   745  18BD  3474               	retlw	116	;'t'
   746  18BE  3420               	retlw	32	;' '
   747  18BF  3461               	retlw	97	;'a'
   748  18C0  3469               	retlw	105	;'i'
   749  18C1  3472               	retlw	114	;'r'
   750  18C2  3420               	retlw	32	;' '
   751  18C3  3474               	retlw	116	;'t'
   752  18C4  3465               	retlw	101	;'e'
   753  18C5  346D               	retlw	109	;'m'
   754  18C6  3470               	retlw	112	;'p'
   755  18C7  342E               	retlw	46	;'.'
   756  18C8  3420               	retlw	32	;' '
   757  18C9  3420               	retlw	32	;' '
   758  18CA  3420               	retlw	32	;' '
   759  18CB  3400               	retlw	0
   760  18CC                     STR_18:	
   761  18CC  3453               	retlw	83	;'S'
   762  18CD  3465               	retlw	101	;'e'
   763  18CE  3474               	retlw	116	;'t'
   764  18CF  3420               	retlw	32	;' '
   765  18D0  3461               	retlw	97	;'a'
   766  18D1  3469               	retlw	105	;'i'
   767  18D2  3472               	retlw	114	;'r'
   768  18D3  3420               	retlw	32	;' '
   769  18D4  346D               	retlw	109	;'m'
   770  18D5  346F               	retlw	111	;'o'
   771  18D6  3469               	retlw	105	;'i'
   772  18D7  3473               	retlw	115	;'s'
   773  18D8  3474               	retlw	116	;'t'
   774  18D9  3420               	retlw	32	;' '
   775  18DA  3420               	retlw	32	;' '
   776  18DB  3420               	retlw	32	;' '
   777  18DC  3400               	retlw	0
   778  18DD                     STR_14:	
   779  18DD  3453               	retlw	83	;'S'
   780  18DE  3465               	retlw	101	;'e'
   781  18DF  3474               	retlw	116	;'t'
   782  18E0  3420               	retlw	32	;' '
   783  18E1  3443               	retlw	67	;'C'
   784  18E2  344F               	retlw	79	;'O'
   785  18E3  3432               	retlw	50	;'2'
   786  18E4  3420               	retlw	32	;' '
   787  18E5  3469               	retlw	105	;'i'
   788  18E6  346E               	retlw	110	;'n'
   789  18E7  3420               	retlw	32	;' '
   790  18E8  3461               	retlw	97	;'a'
   791  18E9  3469               	retlw	105	;'i'
   792  18EA  3472               	retlw	114	;'r'
   793  18EB  3420               	retlw	32	;' '
   794  18EC  3420               	retlw	32	;' '
   795  18ED  3400               	retlw	0
   796  18EE                     STR_3:	
   797  18EE  3441               	retlw	65	;'A'
   798  18EF  3469               	retlw	105	;'i'
   799  18F0  3472               	retlw	114	;'r'
   800  18F1  3420               	retlw	32	;' '
   801  18F2  3474               	retlw	116	;'t'
   802  18F3  3465               	retlw	101	;'e'
   803  18F4  346D               	retlw	109	;'m'
   804  18F5  3470               	retlw	112	;'p'
   805  18F6  3465               	retlw	101	;'e'
   806  18F7  3472               	retlw	114	;'r'
   807  18F8  3461               	retlw	97	;'a'
   808  18F9  3474               	retlw	116	;'t'
   809  18FA  3475               	retlw	117	;'u'
   810  18FB  3472               	retlw	114	;'r'
   811  18FC  3465               	retlw	101	;'e'
   812  18FD  3420               	retlw	32	;' '
   813  18FE  3400               	retlw	0
   814  18FF                     STR_12:	
   815  18FF  3453               	retlw	83	;'S'
   816  1900  346F               	retlw	111	;'o'
   817  1901  3469               	retlw	105	;'i'
   818  1902  346C               	retlw	108	;'l'
   819  1903  3420               	retlw	32	;' '
   820  1904  3474               	retlw	116	;'t'
   821  1905  3465               	retlw	101	;'e'
   822  1906  346D               	retlw	109	;'m'
   823  1907  3470               	retlw	112	;'p'
   824  1908  3465               	retlw	101	;'e'
   825  1909  3472               	retlw	114	;'r'
   826  190A  3461               	retlw	97	;'a'
   827  190B  3474               	retlw	116	;'t'
   828  190C  3475               	retlw	117	;'u'
   829  190D  3472               	retlw	114	;'r'
   830  190E  3465               	retlw	101	;'e'
   831  190F  3400               	retlw	0
   832  1910                     STR_1:	
   833  1910  3447               	retlw	71	;'G'
   834  1911  3472               	retlw	114	;'r'
   835  1912  3465               	retlw	101	;'e'
   836  1913  3473               	retlw	115	;'s'
   837  1914  346B               	retlw	107	;'k'
   838  1915  3461               	retlw	97	;'a'
   839  1916  3420               	retlw	32	;' '
   840  1917  3453               	retlw	83	;'S'
   841  1918  3448               	retlw	72	;'H'
   842  1919  3454               	retlw	84	;'T'
   843  191A  3437               	retlw	55	;'7'
   844  191B  3431               	retlw	49	;'1'
   845  191C  3421               	retlw	33	;'!'
   846  191D  3400               	retlw	0
   847  191E                     STR_7:	
   848  191E  3420               	retlw	32	;' '
   849  191F  3425               	retlw	37	;'%'
   850  1920  3420               	retlw	32	;' '
   851  1921  3420               	retlw	32	;' '
   852  1922  3420               	retlw	32	;' '
   853  1923  3420               	retlw	32	;' '
   854  1924  3420               	retlw	32	;' '
   855  1925  3420               	retlw	32	;' '
   856  1926  3420               	retlw	32	;' '
   857  1927  3420               	retlw	32	;' '
   858  1928  3420               	retlw	32	;' '
   859  1929  3420               	retlw	32	;' '
   860  192A  3400               	retlw	0
   861  192B                     STR_4:	
   862  192B  3420               	retlw	32	;' '
   863  192C  3464               	retlw	100	;'d'
   864  192D  3465               	retlw	101	;'e'
   865  192E  3467               	retlw	103	;'g'
   866  192F  3420               	retlw	32	;' '
   867  1930  3420               	retlw	32	;' '
   868  1931  3420               	retlw	32	;' '
   869  1932  3420               	retlw	32	;' '
   870  1933  3420               	retlw	32	;' '
   871  1934  3420               	retlw	32	;' '
   872  1935  3420               	retlw	32	;' '
   873  1936  3420               	retlw	32	;' '
   874  1937  3400               	retlw	0
   875  1938                     STR_9:	
   876  1938  3420               	retlw	32	;' '
   877  1939  3470               	retlw	112	;'p'
   878  193A  3470               	retlw	112	;'p'
   879  193B  346D               	retlw	109	;'m'
   880  193C  3420               	retlw	32	;' '
   881  193D  3420               	retlw	32	;' '
   882  193E  3420               	retlw	32	;' '
   883  193F  3420               	retlw	32	;' '
   884  1940  3420               	retlw	32	;' '
   885  1941  3420               	retlw	32	;' '
   886  1942  3420               	retlw	32	;' '
   887  1943  3420               	retlw	32	;' '
   888  1944  3400               	retlw	0
   889  1945                     STR_2:	
   890  1945  3420               	retlw	32	;' '
   891  1946  3425               	retlw	37	;'%'
   892  1947  342E               	retlw	46	;'.'
   893  1948  3431               	retlw	49	;'1'
   894  1949  3466               	retlw	102	;'f'
   895  194A  3400               	retlw	0
   896  194B                     STR_30:	
   897  194B  3425               	retlw	37	;'%'
   898  194C  3434               	retlw	52	;'4'
   899  194D  3464               	retlw	100	;'d'
   900  194E  3400               	retlw	0
   901  1922                     
   902                           ; #config settings
   903  0000                     
   904                           	psect	cinit
   905  000F                     start_initialization:	
   906  000F                     __initialization:	
   907  000F  30A0               	movlw	low __pbssBANK1
   908                           
   909                           ; Clear objects allocated to COMMON
   910  0010  01FA               	clrf	__pbssCOMMON& (0+127)
   911  0011  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   912                           
   913                           ; Clear objects allocated to BANK0
   914  0012  01EE               	clrf	__pbssBANK0& (0+127)
   915                           
   916                           ; Clear objects allocated to BANK1
   917  0013  1383               	bcf	3,7	;select IRP bank0
   918  0014  0084               	movwf	4
   919  0015  30CE               	movlw	low (__pbssBANK1+46)
   920  0016  160A  158A  2308  120A  118A  	fcall	clear_ram0
   921  001B  3090               	movlw	low __pbssBANK3
   922                           
   923                           ; Clear objects allocated to BANK3
   924  001C  1783               	bsf	3,7	;select IRP bank2
   925  001D  0084               	movwf	4
   926  001E  30AE               	movlw	low (__pbssBANK3+30)
   927  001F  160A  158A  2308   	fcall	clear_ram0
   928  0022                     end_of_initialization:	
   929                           ;End of C runtime variable initialization code
   930                           
   931  0022                     __end_of__initialization:	
   932  0022  0183               	clrf	3
   933  0023  160A  158A  2DEB   	ljmp	_main	;jump to C main() function
   934                           
   935                           	psect	bssCOMMON
   936  007A                     __pbssCOMMON:	
   937  007A                     _zeljena_co2:	
   938  007A                     	ds	2
   939                           
   940                           	psect	bssBANK0
   941  006E                     __pbssBANK0:	
   942  006E                     _ok_flag:	
   943  006E                     	ds	1
   944                           
   945                           	psect	bssBANK1
   946  00A0                     __pbssBANK1:	
   947  00A0                     _tempervalue:	
   948  00A0                     	ds	4
   949  00A4                     _t:	
   950  00A4                     	ds	3
   951  00A7                     _zeljena_temperatura:	
   952  00A7                     	ds	3
   953  00AA                     _zeljena_vlaznost:	
   954  00AA                     	ds	3
   955  00AD                     _co2:	
   956  00AD                     	ds	2
   957  00AF                     _disp:	
   958  00AF                     	ds	1
   959  00B0                     _disp_count:	
   960  00B0                     	ds	1
   961  00B1                     _measure:	
   962  00B1                     	ds	1
   963  00B2                     _measure_co2:	
   964  00B2                     	ds	1
   965  00B3                     _menu_flag:	
   966  00B3                     	ds	1
   967  00B4                     _minus_flag:	
   968  00B4                     	ds	1
   969  00B5                     _ok_flag_co2:	
   970  00B5                     	ds	1
   971  00B6                     _ok_flag_humi:	
   972  00B6                     	ds	1
   973  00B7                     _plus_flag:	
   974  00B7                     	ds	1
   975  00B8                     _tmr_count:	
   976  00B8                     	ds	1
   977  00B9                     _humidity:	
   978  00B9                     	ds	5
   979  00BE                     _str:	
   980  00BE                     	ds	5
   981  00C3                     _temperature:	
   982  00C3                     	ds	5
   983  00C8                     _humi:	
   984  00C8                     	ds	3
   985  00CB                     _temp:	
   986  00CB                     	ds	3
   987                           
   988                           	psect	bssBANK3
   989  0190                     __pbssBANK3:	
   990  0190                     _uart_data:	
   991  0190                     	ds	30
   992                           
   993                           	psect	clrtext
   994  1B08                     clear_ram0:	
   995                           ;	Called with FSR containing the base address, and
   996                           ;	W with the last address+1
   997                           
   998  1B08  0064               	clrwdt	;clear the watchdog before getting into this loop
   999  1B09                     clrloop0:	
  1000  1B09  0180               	clrf	0	;clear RAM location pointed to by FSR
  1001  1B0A  0A84               	incf	4,f	;increment pointer
  1002  1B0B  0604               	xorwf	4,w	;XOR with final address
  1003  1B0C  1903               	btfsc	3,2	;have we reached the end yet?
  1004  1B0D  3400               	retlw	0	;all done for this memory range, return
  1005  1B0E  0604               	xorwf	4,w	;XOR again to restore value
  1006  1B0F  2B09               	goto	clrloop0	;do the next byte
  1007                           
  1008                           	psect	cstackBANK1
  1009  00CE                     __pcstackBANK1:	
  1010  00CE                     ??_getResSHT71:	
  1011  00CE                     _sprintf$1149:	
  1012                           ; 0 bytes @ 0x0
  1013                           
  1014                           
  1015                           ; 3 bytes @ 0x0
  1016  00CE                     	ds	3
  1017  00D1                     getResSHT71@inp:	
  1018  00D1                     sprintf@ap:	
  1019                           ; 1 bytes @ 0x3
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0x3
  1023  00D1                     	ds	1
  1024  00D2                     getResSHT71@p_temp:	
  1025  00D2                     sprintf@flag:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028                           
  1029                           ; 2 bytes @ 0x4
  1030  00D2                     	ds	1
  1031  00D3                     getResSHT71@error:	
  1032                           
  1033                           ; 1 bytes @ 0x5
  1034  00D3                     	ds	1
  1035  00D4                     sprintf@width:	
  1036  00D4                     getResSHT71@humi_val:	
  1037                           ; 2 bytes @ 0x6
  1038                           
  1039                           
  1040                           ; 3 bytes @ 0x6
  1041  00D4                     	ds	2
  1042  00D6                     sprintf@tmpval:	
  1043                           
  1044                           ; 4 bytes @ 0x8
  1045  00D6                     	ds	1
  1046  00D7                     getResSHT71@checksum:	
  1047                           
  1048                           ; 1 bytes @ 0x9
  1049  00D7                     	ds	1
  1050  00D8                     getResSHT71@temp_val:	
  1051                           
  1052                           ; 3 bytes @ 0xA
  1053  00D8                     	ds	2
  1054  00DA                     sprintf@val:	
  1055                           
  1056                           ; 4 bytes @ 0xC
  1057  00DA                     	ds	4
  1058  00DE                     sprintf@exp:	
  1059                           
  1060                           ; 2 bytes @ 0x10
  1061  00DE                     	ds	2
  1062  00E0                     sprintf@fval:	
  1063                           
  1064                           ; 3 bytes @ 0x12
  1065  00E0                     	ds	3
  1066  00E3                     sprintf@prec:	
  1067                           
  1068                           ; 2 bytes @ 0x15
  1069  00E3                     	ds	2
  1070  00E5                     sprintf@sp:	
  1071                           
  1072                           ; 1 bytes @ 0x17
  1073  00E5                     	ds	1
  1074  00E6                     sprintf@c:	
  1075                           
  1076                           ; 1 bytes @ 0x18
  1077  00E6                     	ds	1
  1078  00E7                     ??_main:	
  1079                           
  1080                           ; 0 bytes @ 0x19
  1081  00E7                     	ds	2
  1082                           
  1083                           	psect	cstackCOMMON
  1084  0070                     __pcstackCOMMON:	
  1085  0070                     ?_isdigit:	
  1086  0070                     ?_writeDS18B20:	
  1087                           ; 1 bit 
  1088                           
  1089  0070                     ?_LcdPort:	
  1090                           ; 0 bytes @ 0x0
  1091                           
  1092  0070                     ?_LcdCmd:	
  1093                           ; 0 bytes @ 0x0
  1094                           
  1095  0070                     ?_LcdInit:	
  1096                           ; 0 bytes @ 0x0
  1097                           
  1098  0070                     ?_LcdWriteChar:	
  1099                           ; 0 bytes @ 0x0
  1100                           
  1101  0070                     ?_initSHT71:	
  1102                           ; 0 bytes @ 0x0
  1103                           
  1104  0070                     ?_tranStartSHT71:	
  1105                           ; 0 bytes @ 0x0
  1106                           
  1107  0070                     ?_connectionResetSHT71:	
  1108                           ; 0 bytes @ 0x0
  1109                           
  1110  0070                     ?_adcInit:	
  1111                           ; 0 bytes @ 0x0
  1112                           
  1113  0070                     ?_isr:	
  1114                           ; 0 bytes @ 0x0
  1115                           
  1116  0070                     ??_isr:	
  1117                           ; 0 bytes @ 0x0
  1118                           
  1119  0070                     ?_IOPinsConfig:	
  1120                           ; 0 bytes @ 0x0
  1121                           
  1122  0070                     ?_IOPinsInit:	
  1123                           ; 0 bytes @ 0x0
  1124                           
  1125  0070                     ?_resetValues:	
  1126                           ; 0 bytes @ 0x0
  1127                           
  1128  0070                     ?_initTimer0:	
  1129                           ; 0 bytes @ 0x0
  1130                           
  1131  0070                     ?_regulacija:	
  1132                           ; 0 bytes @ 0x0
  1133                           
  1134  0070                     ?_menuCO2:	
  1135                           ; 0 bytes @ 0x0
  1136                           
  1137  0070                     ?_menuHumi:	
  1138                           ; 0 bytes @ 0x0
  1139                           
  1140  0070                     ?_menu:	
  1141                           ; 0 bytes @ 0x0
  1142                           
  1143  0070                     ?_main:	
  1144                           ; 0 bytes @ 0x0
  1145                           
  1146  0070                     ?_writeByteSHT71:	
  1147                           ; 0 bytes @ 0x0
  1148                           
  1149  0070                     ?_readByteSHT71:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_resetDS18B20:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_readDS18B20:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158                           
  1159                           ; 1 bytes @ 0x0
  1160  0070                     	ds	2
  1161  0072                     ??_writeByteSHT71:	
  1162  0072                     ??_readByteSHT71:	
  1163                           ; 0 bytes @ 0x2
  1164                           
  1165  0072                     ??_isdigit:	
  1166                           ; 0 bytes @ 0x2
  1167                           
  1168  0072                     ??_resetDS18B20:	
  1169                           ; 0 bytes @ 0x2
  1170                           
  1171  0072                     ??_writeDS18B20:	
  1172                           ; 0 bytes @ 0x2
  1173                           
  1174  0072                     ??_readDS18B20:	
  1175                           ; 0 bytes @ 0x2
  1176                           
  1177  0072                     ??_LcdPort:	
  1178                           ; 0 bytes @ 0x2
  1179                           
  1180  0072                     ??_initSHT71:	
  1181                           ; 0 bytes @ 0x2
  1182                           
  1183  0072                     ??_tranStartSHT71:	
  1184                           ; 0 bytes @ 0x2
  1185                           
  1186  0072                     ??_connectionResetSHT71:	
  1187                           ; 0 bytes @ 0x2
  1188                           
  1189  0072                     ??_adcInit:	
  1190                           ; 0 bytes @ 0x2
  1191                           
  1192  0072                     ??_IOPinsConfig:	
  1193                           ; 0 bytes @ 0x2
  1194                           
  1195  0072                     ??_IOPinsInit:	
  1196                           ; 0 bytes @ 0x2
  1197                           
  1198  0072                     ??_resetValues:	
  1199                           ; 0 bytes @ 0x2
  1200                           
  1201  0072                     ??_initTimer0:	
  1202                           ; 0 bytes @ 0x2
  1203                           
  1204  0072                     ?___lbmod:	
  1205                           ; 0 bytes @ 0x2
  1206                           
  1207  0072                     ?_adcRead:	
  1208                           ; 1 bytes @ 0x2
  1209                           
  1210  0072                     ?___wmul:	
  1211                           ; 2 bytes @ 0x2
  1212                           
  1213  0072                     ?___awmod:	
  1214                           ; 2 bytes @ 0x2
  1215                           
  1216  0072                     ?___lwdiv:	
  1217                           ; 2 bytes @ 0x2
  1218                           
  1219  0072                     ?___ftpack:	
  1220                           ; 2 bytes @ 0x2
  1221                           
  1222  0072                     ?___ftneg:	
  1223                           ; 3 bytes @ 0x2
  1224                           
  1225  0072                     ?__tdiv_to_l_:	
  1226                           ; 3 bytes @ 0x2
  1227                           
  1228  0072                     ?__div_to_l_:	
  1229                           ; 4 bytes @ 0x2
  1230                           
  1231  0072                     ?___lldiv:	
  1232                           ; 4 bytes @ 0x2
  1233                           
  1234  0072                     LcdPort@a:	
  1235                           ; 4 bytes @ 0x2
  1236                           
  1237  0072                     connectionResetSHT71@i:	
  1238                           ; 1 bytes @ 0x2
  1239                           
  1240  0072                     _isdigit$845:	
  1241                           ; 1 bytes @ 0x2
  1242                           
  1243  0072                     ___lbmod@divisor:	
  1244                           ; 1 bytes @ 0x2
  1245                           
  1246  0072                     ___wmul@multiplier:	
  1247                           ; 1 bytes @ 0x2
  1248                           
  1249  0072                     ___awmod@divisor:	
  1250                           ; 2 bytes @ 0x2
  1251                           
  1252  0072                     ___lwdiv@divisor:	
  1253                           ; 2 bytes @ 0x2
  1254                           
  1255  0072                     __div_to_l_@f1:	
  1256                           ; 2 bytes @ 0x2
  1257                           
  1258  0072                     ___ftpack@arg:	
  1259                           ; 3 bytes @ 0x2
  1260                           
  1261  0072                     __tdiv_to_l_@f1:	
  1262                           ; 3 bytes @ 0x2
  1263                           
  1264  0072                     ___ftneg@f1:	
  1265                           ; 3 bytes @ 0x2
  1266                           
  1267  0072                     ___lldiv@divisor:	
  1268                           ; 3 bytes @ 0x2
  1269                           
  1270                           
  1271                           ; 4 bytes @ 0x2
  1272  0072                     	ds	1
  1273  0073                     ??_LcdCmd:	
  1274  0073                     ??_LcdWriteChar:	
  1275                           ; 0 bytes @ 0x3
  1276                           
  1277  0073                     ??___lbmod:	
  1278                           ; 0 bytes @ 0x3
  1279                           
  1280  0073                     writeDS18B20@Cmd:	
  1281                           ; 0 bytes @ 0x3
  1282                           
  1283  0073                     readDS18B20@result:	
  1284                           ; 1 bytes @ 0x3
  1285                           
  1286  0073                     readByteSHT71@ack:	
  1287                           ; 1 bytes @ 0x3
  1288                           
  1289  0073                     writeByteSHT71@cmd:	
  1290                           ; 1 bytes @ 0x3
  1291                           
  1292  0073                     isdigit@c:	
  1293                           ; 1 bytes @ 0x3
  1294                           
  1295                           
  1296                           ; 1 bytes @ 0x3
  1297  0073                     	ds	1
  1298  0074                     ??_adcRead:	
  1299  0074                     writeDS18B20@i:	
  1300                           ; 0 bytes @ 0x4
  1301                           
  1302  0074                     readDS18B20@i:	
  1303                           ; 1 bytes @ 0x4
  1304                           
  1305  0074                     LcdWriteChar@temp:	
  1306                           ; 1 bytes @ 0x4
  1307                           
  1308  0074                     readByteSHT71@res:	
  1309                           ; 1 bytes @ 0x4
  1310                           
  1311  0074                     writeByteSHT71@error:	
  1312                           ; 1 bytes @ 0x4
  1313                           
  1314  0074                     ___lbmod@dividend:	
  1315                           ; 1 bytes @ 0x4
  1316                           
  1317  0074                     ___wmul@multiplicand:	
  1318                           ; 1 bytes @ 0x4
  1319                           
  1320  0074                     ___awmod@dividend:	
  1321                           ; 2 bytes @ 0x4
  1322                           
  1323  0074                     ___lwdiv@dividend:	
  1324                           ; 2 bytes @ 0x4
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x4
  1328  0074                     	ds	1
  1329  0075                     ??___ftneg:	
  1330  0075                     LcdCmd@a:	
  1331                           ; 0 bytes @ 0x5
  1332                           
  1333  0075                     LcdWriteChar@y:	
  1334                           ; 1 bytes @ 0x5
  1335                           
  1336  0075                     readByteSHT71@i:	
  1337                           ; 1 bytes @ 0x5
  1338                           
  1339  0075                     writeByteSHT71@i:	
  1340                           ; 1 bytes @ 0x5
  1341                           
  1342  0075                     ___ftpack@exp:	
  1343                           ; 1 bytes @ 0x5
  1344                           
  1345  0075                     ___lbmod@counter:	
  1346                           ; 1 bytes @ 0x5
  1347                           
  1348  0075                     __div_to_l_@f2:	
  1349                           ; 1 bytes @ 0x5
  1350                           
  1351  0075                     __tdiv_to_l_@f2:	
  1352                           ; 3 bytes @ 0x5
  1353                           
  1354                           
  1355                           ; 3 bytes @ 0x5
  1356  0075                     	ds	1
  1357  0076                     ?_LcdSetCursor:	
  1358  0076                     ??_LcdInit:	
  1359                           ; 0 bytes @ 0x6
  1360                           
  1361  0076                     ??___wmul:	
  1362                           ; 0 bytes @ 0x6
  1363                           
  1364  0076                     ??___awmod:	
  1365                           ; 0 bytes @ 0x6
  1366                           
  1367  0076                     ??___lwdiv:	
  1368                           ; 0 bytes @ 0x6
  1369                           
  1370  0076                     ?_measureSHT71:	
  1371                           ; 0 bytes @ 0x6
  1372                           
  1373  0076                     ?_readStatusRegSHT71:	
  1374                           ; 1 bytes @ 0x6
  1375                           
  1376  0076                     LcdSetCursor@b:	
  1377                           ; 1 bytes @ 0x6
  1378                           
  1379  0076                     LcdWriteChar@a:	
  1380                           ; 1 bytes @ 0x6
  1381                           
  1382  0076                     measureSHT71@p_checksum:	
  1383                           ; 1 bytes @ 0x6
  1384                           
  1385  0076                     readStatusRegSHT71@p_checksum:	
  1386                           ; 1 bytes @ 0x6
  1387                           
  1388  0076                     ___awmod@counter:	
  1389                           ; 1 bytes @ 0x6
  1390                           
  1391  0076                     ___ftpack@sign:	
  1392                           ; 1 bytes @ 0x6
  1393                           
  1394  0076                     ___lbmod@rem:	
  1395                           ; 1 bytes @ 0x6
  1396                           
  1397  0076                     ___wmul@product:	
  1398                           ; 1 bytes @ 0x6
  1399                           
  1400  0076                     ___lwdiv@quotient:	
  1401                           ; 2 bytes @ 0x6
  1402                           
  1403  0076                     ___lldiv@dividend:	
  1404                           ; 2 bytes @ 0x6
  1405                           
  1406                           
  1407                           ; 4 bytes @ 0x6
  1408  0076                     	ds	1
  1409  0077                     ??___ftpack:	
  1410  0077                     ??_LcdSetCursor:	
  1411                           ; 0 bytes @ 0x7
  1412                           
  1413  0077                     ?_LcdWriteString:	
  1414                           ; 0 bytes @ 0x7
  1415                           
  1416  0077                     ??_readStatusRegSHT71:	
  1417                           ; 0 bytes @ 0x7
  1418                           
  1419  0077                     ?___lbdiv:	
  1420                           ; 0 bytes @ 0x7
  1421                           
  1422  0077                     measureSHT71@mode:	
  1423                           ; 1 bytes @ 0x7
  1424                           
  1425  0077                     readStatusRegSHT71@p_value:	
  1426                           ; 1 bytes @ 0x7
  1427                           
  1428  0077                     ___awmod@sign:	
  1429                           ; 1 bytes @ 0x7
  1430                           
  1431  0077                     ___lbdiv@divisor:	
  1432                           ; 1 bytes @ 0x7
  1433                           
  1434  0077                     LcdWriteString@a:	
  1435                           ; 1 bytes @ 0x7
  1436                           
  1437                           
  1438                           ; 2 bytes @ 0x7
  1439  0077                     	ds	1
  1440  0078                     ??_measureSHT71:	
  1441  0078                     ??___awdiv:	
  1442                           ; 0 bytes @ 0x8
  1443                           
  1444  0078                     ??___lbdiv:	
  1445                           ; 0 bytes @ 0x8
  1446                           
  1447  0078                     ?___bmul:	
  1448                           ; 0 bytes @ 0x8
  1449                           
  1450  0078                     readStatusRegSHT71@error:	
  1451                           ; 1 bytes @ 0x8
  1452                           
  1453  0078                     ___bmul@multiplicand:	
  1454                           ; 1 bytes @ 0x8
  1455                           
  1456  0078                     ___lwdiv@counter:	
  1457                           ; 1 bytes @ 0x8
  1458                           
  1459                           
  1460                           ; 1 bytes @ 0x8
  1461  0078                     	ds	1
  1462  0079                     ??_LcdWriteInt:	
  1463  0079                     ??_displayCO2:	
  1464                           ; 0 bytes @ 0x9
  1465                           
  1466  0079                     ??___bmul:	
  1467                           ; 0 bytes @ 0x9
  1468                           
  1469                           
  1470                           ; 0 bytes @ 0x9
  1471  0079                     	ds	1
  1472  007A                     ??_UARTInit:	
  1473  007A                     ??_calcSHT71:	
  1474                           ; 0 bytes @ 0xA
  1475                           
  1476  007A                     ??_displayAirTemp:	
  1477                           ; 0 bytes @ 0xA
  1478                           
  1479  007A                     ??_displayAirMoist:	
  1480                           ; 0 bytes @ 0xA
  1481                           
  1482  007A                     ??_displaySoilTemp:	
  1483                           ; 0 bytes @ 0xA
  1484                           
  1485  007A                     ??_fround:	
  1486                           ; 0 bytes @ 0xA
  1487                           
  1488  007A                     ??___ftge:	
  1489                           ; 0 bytes @ 0xA
  1490                           
  1491  007A                     ??___ftsub:	
  1492                           ; 0 bytes @ 0xA
  1493                           
  1494  007A                     ??___lldiv:	
  1495                           ; 0 bytes @ 0xA
  1496                           
  1497  007A                     ??___llmod:	
  1498                           ; 0 bytes @ 0xA
  1499                           
  1500  007A                     ??___lltoft:	
  1501                           ; 0 bytes @ 0xA
  1502                           
  1503  007A                     ??___lwtoft:	
  1504                           ; 0 bytes @ 0xA
  1505                           
  1506                           
  1507                           	psect	cstackBANK0
  1508  0020                     __pcstackBANK0:	
  1509                           ; 0 bytes @ 0xA
  1510                           
  1511  0020                     ??__tdiv_to_l_:	
  1512  0020                     ??__div_to_l_:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0020                     ??_LcdWriteString:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0020                     ?___awdiv:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0020                     ?___lltoft:	
  1522                           ; 2 bytes @ 0x0
  1523                           
  1524  0020                     ?___lwtoft:	
  1525                           ; 3 bytes @ 0x0
  1526                           
  1527  0020                     LcdSetCursor@a:	
  1528                           ; 3 bytes @ 0x0
  1529                           
  1530  0020                     measureSHT71@p_value:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0020                     ___lbdiv@dividend:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0020                     adcRead@tempL:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0020                     ___awdiv@divisor:	
  1540                           ; 2 bytes @ 0x0
  1541                           
  1542  0020                     ___lwtoft@c:	
  1543                           ; 2 bytes @ 0x0
  1544                           
  1545  0020                     ___lldiv@quotient:	
  1546                           ; 2 bytes @ 0x0
  1547                           
  1548  0020                     ___lltoft@c:	
  1549                           ; 4 bytes @ 0x0
  1550                           
  1551                           
  1552                           ; 4 bytes @ 0x0
  1553  0020                     	ds	1
  1554  0021                     LcdSetCursor@z:	
  1555  0021                     ___lbdiv@counter:	
  1556                           ; 1 bytes @ 0x1
  1557                           
  1558  0021                     measureSHT71@error:	
  1559                           ; 1 bytes @ 0x1
  1560                           
  1561                           
  1562                           ; 2 bytes @ 0x1
  1563  0021                     	ds	1
  1564  0022                     LcdSetCursor@y:	
  1565  0022                     ___lbdiv@quotient:	
  1566                           ; 1 bytes @ 0x2
  1567                           
  1568  0022                     adcRead@tempH:	
  1569                           ; 1 bytes @ 0x2
  1570                           
  1571  0022                     ___awdiv@dividend:	
  1572                           ; 2 bytes @ 0x2
  1573                           
  1574                           
  1575                           ; 2 bytes @ 0x2
  1576  0022                     	ds	1
  1577  0023                     LcdSetCursor@temp:	
  1578  0023                     ___bmul@product:	
  1579                           ; 1 bytes @ 0x3
  1580                           
  1581  0023                     LcdWriteString@i:	
  1582                           ; 1 bytes @ 0x3
  1583                           
  1584  0023                     measureSHT71@temp:	
  1585                           ; 2 bytes @ 0x3
  1586                           
  1587  0023                     __tdiv_to_l_@quot:	
  1588                           ; 2 bytes @ 0x3
  1589                           
  1590                           
  1591                           ; 4 bytes @ 0x3
  1592  0023                     	ds	1
  1593  0024                     ?_LcdWriteInt:	
  1594  0024                     ___bmul@multiplier:	
  1595                           ; 0 bytes @ 0x4
  1596                           
  1597  0024                     ___awdiv@counter:	
  1598                           ; 1 bytes @ 0x4
  1599                           
  1600  0024                     ___lldiv@counter:	
  1601                           ; 1 bytes @ 0x4
  1602                           
  1603  0024                     ___lltoft@exp:	
  1604                           ; 1 bytes @ 0x4
  1605                           
  1606  0024                     LcdWriteInt@i:	
  1607                           ; 1 bytes @ 0x4
  1608                           
  1609  0024                     adcRead@temp:	
  1610                           ; 2 bytes @ 0x4
  1611                           
  1612                           
  1613                           ; 2 bytes @ 0x4
  1614  0024                     	ds	1
  1615  0025                     ?_UARTInit:	
  1616  0025                     ?___llmod:	
  1617                           ; 1 bytes @ 0x5
  1618                           
  1619  0025                     ___awdiv@sign:	
  1620                           ; 4 bytes @ 0x5
  1621                           
  1622  0025                     UARTInit@baud_rate:	
  1623                           ; 1 bytes @ 0x5
  1624                           
  1625  0025                     ___llmod@divisor:	
  1626                           ; 4 bytes @ 0x5
  1627                           
  1628                           
  1629                           ; 4 bytes @ 0x5
  1630  0025                     	ds	1
  1631  0026                     ?_measureTGS4161:	
  1632  0026                     LcdWriteInt@row:	
  1633                           ; 2 bytes @ 0x6
  1634                           
  1635  0026                     ___awdiv@quotient:	
  1636                           ; 1 bytes @ 0x6
  1637                           
  1638                           
  1639                           ; 2 bytes @ 0x6
  1640  0026                     	ds	1
  1641  0027                     LcdWriteInt@column:	
  1642  0027                     __tdiv_to_l_@cntr:	
  1643                           ; 1 bytes @ 0x7
  1644                           
  1645                           
  1646                           ; 1 bytes @ 0x7
  1647  0027                     	ds	1
  1648  0028                     ??_measureTGS4161:	
  1649  0028                     ?___ftmul:	
  1650                           ; 0 bytes @ 0x8
  1651                           
  1652  0028                     LcdWriteInt@ch_manje_100:	
  1653                           ; 3 bytes @ 0x8
  1654                           
  1655  0028                     __tdiv_to_l_@exp1:	
  1656                           ; 1 bytes @ 0x8
  1657                           
  1658  0028                     ___ftmul@f1:	
  1659                           ; 1 bytes @ 0x8
  1660                           
  1661  0028                     __div_to_l_@quot:	
  1662                           ; 3 bytes @ 0x8
  1663                           
  1664                           
  1665                           ; 4 bytes @ 0x8
  1666  0028                     	ds	1
  1667  0029                     LcdWriteInt@ch_manje_1000:	
  1668  0029                     ___llmod@dividend:	
  1669                           ; 1 bytes @ 0x9
  1670                           
  1671  0029                     _UARTInit$1145:	
  1672                           ; 4 bytes @ 0x9
  1673                           
  1674                           
  1675                           ; 4 bytes @ 0x9
  1676  0029                     	ds	1
  1677  002A                     LcdWriteInt@ch:	
  1678  002A                     measureTGS4161@krez1:	
  1679                           ; 1 bytes @ 0xA
  1680                           
  1681                           
  1682                           ; 2 bytes @ 0xA
  1683  002A                     	ds	1
  1684  002B                     ?_displayCO2:	
  1685  002B                     ??_menuCO2:	
  1686                           ; 0 bytes @ 0xB
  1687                           
  1688  002B                     displayCO2@co22:	
  1689                           ; 0 bytes @ 0xB
  1690                           
  1691  002B                     ___ftmul@f2:	
  1692                           ; 2 bytes @ 0xB
  1693                           
  1694                           
  1695                           ; 3 bytes @ 0xB
  1696  002B                     	ds	1
  1697  002C                     __div_to_l_@cntr:	
  1698  002C                     measureTGS4161@krez2:	
  1699                           ; 1 bytes @ 0xC
  1700                           
  1701                           
  1702                           ; 2 bytes @ 0xC
  1703  002C                     	ds	1
  1704  002D                     __div_to_l_@exp1:	
  1705  002D                     ___llmod@counter:	
  1706                           ; 1 bytes @ 0xD
  1707                           
  1708                           
  1709                           ; 1 bytes @ 0xD
  1710  002D                     	ds	1
  1711  002E                     ??___ftmul:	
  1712  002E                     measureTGS4161@ppm_temp:	
  1713                           ; 0 bytes @ 0xE
  1714                           
  1715  002E                     UARTInit@x:	
  1716                           ; 2 bytes @ 0xE
  1717                           
  1718                           
  1719                           ; 2 bytes @ 0xE
  1720  002E                     	ds	2
  1721  0030                     measureTGS4161@i:	
  1722                           
  1723                           ; 1 bytes @ 0x10
  1724  0030                     	ds	1
  1725  0031                     ___ftmul@exp:	
  1726  0031                     measureTGS4161@temp:	
  1727                           ; 1 bytes @ 0x11
  1728                           
  1729                           
  1730                           ; 2 bytes @ 0x11
  1731  0031                     	ds	1
  1732  0032                     ___ftmul@f3_as_product:	
  1733                           
  1734                           ; 3 bytes @ 0x12
  1735  0032                     	ds	1
  1736  0033                     measureTGS4161@ppm:	
  1737                           
  1738                           ; 2 bytes @ 0x13
  1739  0033                     	ds	2
  1740  0035                     ___ftmul@cntr:	
  1741                           
  1742                           ; 1 bytes @ 0x15
  1743  0035                     	ds	1
  1744  0036                     ___ftmul@sign:	
  1745                           
  1746                           ; 1 bytes @ 0x16
  1747  0036                     	ds	1
  1748  0037                     ?_fround:	
  1749  0037                     ?_scale:	
  1750                           ; 3 bytes @ 0x17
  1751                           
  1752                           
  1753                           ; 3 bytes @ 0x17
  1754  0037                     	ds	3
  1755  003A                     ??_scale:	
  1756                           
  1757                           ; 0 bytes @ 0x1A
  1758  003A                     	ds	1
  1759  003B                     _fround$1147:	
  1760                           
  1761                           ; 3 bytes @ 0x1B
  1762  003B                     	ds	3
  1763  003E                     _fround$1146:	
  1764  003E                     _scale$1148:	
  1765                           ; 3 bytes @ 0x1E
  1766                           
  1767                           
  1768                           ; 3 bytes @ 0x1E
  1769  003E                     	ds	3
  1770  0041                     fround@prec:	
  1771  0041                     scale@scl:	
  1772                           ; 1 bytes @ 0x21
  1773                           
  1774                           
  1775                           ; 1 bytes @ 0x21
  1776  0041                     	ds	1
  1777  0042                     ?___ftadd:	
  1778  0042                     ?___fttol:	
  1779                           ; 3 bytes @ 0x22
  1780                           
  1781  0042                     ___ftadd@f1:	
  1782                           ; 4 bytes @ 0x22
  1783                           
  1784  0042                     ___fttol@f1:	
  1785                           ; 3 bytes @ 0x22
  1786                           
  1787                           
  1788                           ; 3 bytes @ 0x22
  1789  0042                     	ds	3
  1790  0045                     ___ftadd@f2:	
  1791                           
  1792                           ; 3 bytes @ 0x25
  1793  0045                     	ds	1
  1794  0046                     ??___fttol:	
  1795                           
  1796                           ; 0 bytes @ 0x26
  1797  0046                     	ds	2
  1798  0048                     ??___ftadd:	
  1799                           
  1800                           ; 0 bytes @ 0x28
  1801  0048                     	ds	1
  1802  0049                     ___fttol@sign1:	
  1803                           
  1804                           ; 1 bytes @ 0x29
  1805  0049                     	ds	1
  1806  004A                     ___fttol@lval:	
  1807                           
  1808                           ; 4 bytes @ 0x2A
  1809  004A                     	ds	1
  1810  004B                     ___ftadd@sign:	
  1811                           
  1812                           ; 1 bytes @ 0x2B
  1813  004B                     	ds	1
  1814  004C                     ___ftadd@exp2:	
  1815                           
  1816                           ; 1 bytes @ 0x2C
  1817  004C                     	ds	1
  1818  004D                     ___ftadd@exp1:	
  1819                           
  1820                           ; 1 bytes @ 0x2D
  1821  004D                     	ds	1
  1822  004E                     ?___ftge:	
  1823  004E                     ?_getTempDS18B20:	
  1824                           ; 1 bit 
  1825                           
  1826  004E                     ?___ftsub:	
  1827                           ; 3 bytes @ 0x2E
  1828                           
  1829  004E                     ___fttol@exp1:	
  1830                           ; 3 bytes @ 0x2E
  1831                           
  1832  004E                     ___ftge@ff1:	
  1833                           ; 1 bytes @ 0x2E
  1834                           
  1835  004E                     ___ftsub@f2:	
  1836                           ; 3 bytes @ 0x2E
  1837                           
  1838                           
  1839                           ; 3 bytes @ 0x2E
  1840  004E                     	ds	3
  1841  0051                     ??_getTempDS18B20:	
  1842  0051                     ___ftge@ff2:	
  1843                           ; 0 bytes @ 0x31
  1844                           
  1845  0051                     ___ftsub@f1:	
  1846                           ; 3 bytes @ 0x31
  1847                           
  1848                           
  1849                           ; 3 bytes @ 0x31
  1850  0051                     	ds	3
  1851  0054                     ??_regulacija:	
  1852  0054                     ?_sprintf:	
  1853                           ; 0 bytes @ 0x34
  1854                           
  1855  0054                     ?_calcSHT71:	
  1856                           ; 2 bytes @ 0x34
  1857                           
  1858  0054                     sprintf@f:	
  1859                           ; 3 bytes @ 0x34
  1860                           
  1861  0054                     getTempDS18B20@temperatura:	
  1862                           ; 2 bytes @ 0x34
  1863                           
  1864  0054                     calcSHT71@p_humidity:	
  1865                           ; 3 bytes @ 0x34
  1866                           
  1867                           
  1868                           ; 3 bytes @ 0x34
  1869  0054                     	ds	3
  1870  0057                     calcSHT71@p_temperature:	
  1871  0057                     getTempDS18B20@tempL:	
  1872                           ; 1 bytes @ 0x37
  1873                           
  1874                           
  1875                           ; 2 bytes @ 0x37
  1876  0057                     	ds	1
  1877  0058                     calcSHT71@rh_lin:	
  1878                           
  1879                           ; 3 bytes @ 0x38
  1880  0058                     	ds	1
  1881  0059                     ??_sprintf:	
  1882  0059                     getTempDS18B20@tempH:	
  1883                           ; 0 bytes @ 0x39
  1884                           
  1885                           
  1886                           ; 2 bytes @ 0x39
  1887  0059                     	ds	2
  1888  005B                     getTempDS18B20@temp:	
  1889  005B                     calcSHT71@t:	
  1890                           ; 2 bytes @ 0x3B
  1891                           
  1892                           
  1893                           ; 3 bytes @ 0x3B
  1894  005B                     	ds	3
  1895  005E                     ?_displayAirTemp:	
  1896  005E                     ?_displayAirMoist:	
  1897                           ; 0 bytes @ 0x3E
  1898                           
  1899  005E                     ?_displaySoilTemp:	
  1900                           ; 0 bytes @ 0x3E
  1901                           
  1902  005E                     ??_menuHumi:	
  1903                           ; 0 bytes @ 0x3E
  1904                           
  1905  005E                     calcSHT71@t_C:	
  1906                           ; 0 bytes @ 0x3E
  1907                           
  1908  005E                     displayAirTemp@temp2:	
  1909                           ; 3 bytes @ 0x3E
  1910                           
  1911  005E                     displayAirMoist@humi2:	
  1912                           ; 3 bytes @ 0x3E
  1913                           
  1914  005E                     displaySoilTemp@t2:	
  1915                           ; 3 bytes @ 0x3E
  1916                           
  1917                           
  1918                           ; 3 bytes @ 0x3E
  1919  005E                     	ds	2
  1920  0060                     ??_menu:	
  1921                           
  1922                           ; 0 bytes @ 0x40
  1923  0060                     	ds	1
  1924  0061                     _calcSHT71$1143:	
  1925                           
  1926                           ; 3 bytes @ 0x41
  1927  0061                     	ds	3
  1928  0064                     _calcSHT71$1144:	
  1929                           
  1930                           ; 3 bytes @ 0x44
  1931  0064                     	ds	3
  1932  0067                     calcSHT71@rh_true:	
  1933                           
  1934                           ; 3 bytes @ 0x47
  1935  0067                     	ds	3
  1936  006A                     calcSHT71@rh:	
  1937                           
  1938                           ; 3 bytes @ 0x4A
  1939  006A                     	ds	3
  1940  006D                     ?_getResSHT71:	
  1941  006D                     getResSHT71@p_humi:	
  1942                           ; 0 bytes @ 0x4D
  1943                           
  1944                           
  1945                           ; 1 bytes @ 0x4D
  1946  006D                     	ds	1
  1947                           
  1948                           	psect	maintext
  1949  1DEB                     __pmaintext:	
  1950 ;;
  1951 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1952 ;;
  1953 ;; *************** function _main *****************
  1954 ;; Defined at:
  1955 ;;		line 457 in file "main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : B00/0
  1966 ;;		On exit  : 200/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1969 ;;      Params:         0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0
  1971 ;;      Temps:          0       0       2       0       0
  1972 ;;      Totals:         0       0       2       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels required when called:    8
  1975 ;; This function calls:
  1976 ;;		_IOPinsConfig
  1977 ;;		_IOPinsInit
  1978 ;;		_LcdInit
  1979 ;;		_UARTInit
  1980 ;;		_adcInit
  1981 ;;		_displayAirMoist
  1982 ;;		_displayAirTemp
  1983 ;;		_displayCO2
  1984 ;;		_displaySoilTemp
  1985 ;;		_getResSHT71
  1986 ;;		_getTempDS18B20
  1987 ;;		_initSHT71
  1988 ;;		_initTimer0
  1989 ;;		_measureTGS4161
  1990 ;;		_menu
  1991 ;;		_regulacija
  1992 ;;		_resetDS18B20
  1993 ;;		_resetValues
  1994 ;; This function is called by:
  1995 ;;		Startup code after reset
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _main
  2001  1DEB                     _main:	
  2002                           
  2003                           ;main.c: 459: LcdInit();
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2007  1DEB  120A  158A  275F  160A  158A  	fcall	_LcdInit
  2008                           
  2009                           ;main.c: 460: initSHT71();
  2010  1DF0  160A  158A  22FD  160A  158A  	fcall	_initSHT71
  2011                           
  2012                           ;main.c: 461: resetDS18B20();
  2013  1DF5  160A  118A  2281  160A  158A  	fcall	_resetDS18B20
  2014                           
  2015                           ;main.c: 462: adcInit();
  2016  1DFA  120A  158A  2003  160A  158A  	fcall	_adcInit
  2017                           
  2018                           ;main.c: 463: UARTInit(9600);
  2019  1DFF  3000               	movlw	0
  2020  1E00  1283               	bcf	3,5	;RP0=0, select bank0
  2021  1E01  00A8               	movwf	UARTInit@baud_rate+3
  2022  1E02  00A7               	movwf	UARTInit@baud_rate+2
  2023  1E03  3025               	movlw	37
  2024  1E04  00A6               	movwf	UARTInit@baud_rate+1
  2025  1E05  3080               	movlw	128
  2026  1E06  00A5               	movwf	UARTInit@baud_rate
  2027  1E07  160A  118A  200A  160A  158A  	fcall	_UARTInit
  2028                           
  2029                           ;main.c: 464: IOPinsConfig();
  2030  1E0C  160A  158A  2310  160A  158A  	fcall	_IOPinsConfig
  2031                           
  2032                           ;main.c: 465: IOPinsInit();
  2033  1E11  160A  158A  2301  160A  158A  	fcall	_IOPinsInit
  2034                           
  2035                           ;main.c: 466: resetValues();
  2036  1E16  120A  158A  200F  160A  158A  	fcall	_resetValues
  2037                           
  2038                           ;main.c: 467: initTimer0();
  2039  1E1B  160A  118A  2001  160A  158A  	fcall	_initTimer0
  2040                           
  2041                           ;main.c: 469: getResSHT71(&temp, &humi);
  2042  1E20  30C8               	movlw	(low (_humi| 0))& (0+255)
  2043  1E21  00ED               	movwf	getResSHT71@p_humi
  2044  1E22  30CB               	movlw	(low (_temp| 0))& (0+255)
  2045  1E23  160A  118A  22BD  160A  158A  	fcall	_getResSHT71
  2046                           
  2047                           ;main.c: 471: t = getTempDS18B20();
  2048  1E28  160A  118A  21BC  160A  158A  	fcall	_getTempDS18B20
  2049  1E2D  084E               	movf	?_getTempDS18B20,w
  2050  1E2E  1683               	bsf	3,5	;RP0=1, select bank1
  2051  1E2F  00A4               	movwf	_t^(0+128)
  2052  1E30  1283               	bcf	3,5	;RP0=0, select bank0
  2053  1E31  084F               	movf	?_getTempDS18B20+1,w
  2054  1E32  1683               	bsf	3,5	;RP0=1, select bank1
  2055  1E33  00A5               	movwf	(_t+1)^(0+128)
  2056  1E34  1283               	bcf	3,5	;RP0=0, select bank0
  2057  1E35  0850               	movf	?_getTempDS18B20+2,w
  2058  1E36  1683               	bsf	3,5	;RP0=1, select bank1
  2059  1E37  00A6               	movwf	(_t+2)^(0+128)
  2060  1E38                     l6240:	
  2061                           
  2062                           ;main.c: 474: {
  2063                           ;main.c: 475: if(measure)
  2064  1E38  1683               	bsf	3,5	;RP0=1, select bank1
  2065  1E39  0831               	movf	_measure^(0+128),w
  2066  1E3A  1903               	btfsc	3,2
  2067  1E3B  2E62               	goto	l6250
  2068  1E3C  30C8               	movlw	(low (_humi| 0))& (0+255)
  2069                           
  2070                           ;main.c: 476: {
  2071                           ;main.c: 477: measure = 0;
  2072  1E3D  01B1               	clrf	_measure^(0+128)
  2073                           
  2074                           ;main.c: 478: getResSHT71(&temp, &humi);
  2075  1E3E  1283               	bcf	3,5	;RP0=0, select bank0
  2076  1E3F  00ED               	movwf	getResSHT71@p_humi
  2077  1E40  30CB               	movlw	(low (_temp| 0))& (0+255)
  2078  1E41  160A  118A  22BD  160A  158A  	fcall	_getResSHT71
  2079                           
  2080                           ;main.c: 482: co2 = measureTGS4161();
  2081  1E46  160A  158A  2469  160A  158A  	fcall	_measureTGS4161
  2082  1E4B  0827               	movf	?_measureTGS4161+1,w
  2083  1E4C  1683               	bsf	3,5	;RP0=1, select bank1
  2084  1E4D  00AE               	movwf	(_co2+1)^(0+128)
  2085  1E4E  1283               	bcf	3,5	;RP0=0, select bank0
  2086  1E4F  0826               	movf	?_measureTGS4161,w
  2087  1E50  1683               	bsf	3,5	;RP0=1, select bank1
  2088  1E51  00AD               	movwf	_co2^(0+128)
  2089                           
  2090                           ;main.c: 485: t = getTempDS18B20();
  2091  1E52  160A  118A  21BC  160A  158A  	fcall	_getTempDS18B20
  2092  1E57  084E               	movf	?_getTempDS18B20,w
  2093  1E58  1683               	bsf	3,5	;RP0=1, select bank1
  2094  1E59  00A4               	movwf	_t^(0+128)
  2095  1E5A  1283               	bcf	3,5	;RP0=0, select bank0
  2096  1E5B  084F               	movf	?_getTempDS18B20+1,w
  2097  1E5C  1683               	bsf	3,5	;RP0=1, select bank1
  2098  1E5D  00A5               	movwf	(_t+1)^(0+128)
  2099  1E5E  1283               	bcf	3,5	;RP0=0, select bank0
  2100  1E5F  0850               	movf	?_getTempDS18B20+2,w
  2101  1E60  1683               	bsf	3,5	;RP0=1, select bank1
  2102  1E61  00A6               	movwf	(_t+2)^(0+128)
  2103  1E62                     l6250:	
  2104                           
  2105                           ;main.c: 486: }
  2106                           ;main.c: 488: if(disp)
  2107  1E62  082F               	movf	_disp^(0+128),w
  2108  1E63  1903               	btfsc	3,2
  2109  1E64  2EBB               	goto	l6272
  2110                           
  2111                           ;main.c: 489: {
  2112                           ;main.c: 490: disp = 0;
  2113  1E65  01AF               	clrf	_disp^(0+128)
  2114                           
  2115                           ;main.c: 492: switch(disp_count)
  2116  1E66  2EA7               	goto	l6264
  2117  1E67                     l6254:	
  2118                           
  2119                           ;main.c: 495: displayAirTemp(temp);
  2120  1E67  084B               	movf	_temp^(0+128),w
  2121  1E68  1283               	bcf	3,5	;RP0=0, select bank0
  2122  1E69  00DE               	movwf	displayAirTemp@temp2
  2123  1E6A  1683               	bsf	3,5	;RP0=1, select bank1
  2124  1E6B  084C               	movf	(_temp+1)^(0+128),w
  2125  1E6C  1283               	bcf	3,5	;RP0=0, select bank0
  2126  1E6D  00DF               	movwf	displayAirTemp@temp2+1
  2127  1E6E  1683               	bsf	3,5	;RP0=1, select bank1
  2128  1E6F  084D               	movf	(_temp+2)^(0+128),w
  2129  1E70  1283               	bcf	3,5	;RP0=0, select bank0
  2130  1E71  00E0               	movwf	displayAirTemp@temp2+2
  2131  1E72  160A  158A  2375  160A  158A  	fcall	_displayAirTemp
  2132                           
  2133                           ;main.c: 496: break;
  2134  1E77  2EB5               	goto	l6266
  2135  1E78                     l6256:	
  2136                           
  2137                           ;main.c: 498: displayAirMoist(humi);
  2138  1E78  0848               	movf	_humi^(0+128),w
  2139  1E79  1283               	bcf	3,5	;RP0=0, select bank0
  2140  1E7A  00DE               	movwf	displayAirMoist@humi2
  2141  1E7B  1683               	bsf	3,5	;RP0=1, select bank1
  2142  1E7C  0849               	movf	(_humi+1)^(0+128),w
  2143  1E7D  1283               	bcf	3,5	;RP0=0, select bank0
  2144  1E7E  00DF               	movwf	displayAirMoist@humi2+1
  2145  1E7F  1683               	bsf	3,5	;RP0=1, select bank1
  2146  1E80  084A               	movf	(_humi+2)^(0+128),w
  2147  1E81  1283               	bcf	3,5	;RP0=0, select bank0
  2148  1E82  00E0               	movwf	displayAirMoist@humi2+2
  2149  1E83  160A  158A  2337  160A  158A  	fcall	_displayAirMoist
  2150                           
  2151                           ;main.c: 499: break;
  2152  1E88  2EB5               	goto	l6266
  2153  1E89                     l6258:	
  2154                           
  2155                           ;main.c: 501: displayCO2(co2);
  2156  1E89  082E               	movf	(_co2+1)^(0+128),w
  2157  1E8A  1283               	bcf	3,5	;RP0=0, select bank0
  2158  1E8B  00AC               	movwf	displayCO2@co22+1
  2159  1E8C  1683               	bsf	3,5	;RP0=1, select bank1
  2160  1E8D  082D               	movf	_co2^(0+128),w
  2161  1E8E  1283               	bcf	3,5	;RP0=0, select bank0
  2162  1E8F  00AB               	movwf	displayCO2@co22
  2163  1E90  120A  158A  202E  160A  158A  	fcall	_displayCO2
  2164                           
  2165                           ;main.c: 502: break;
  2166  1E95  2EB5               	goto	l6266
  2167  1E96                     l6260:	
  2168                           
  2169                           ;main.c: 504: displaySoilTemp(t);
  2170  1E96  0824               	movf	_t^(0+128),w
  2171  1E97  1283               	bcf	3,5	;RP0=0, select bank0
  2172  1E98  00DE               	movwf	displaySoilTemp@t2
  2173  1E99  1683               	bsf	3,5	;RP0=1, select bank1
  2174  1E9A  0825               	movf	(_t+1)^(0+128),w
  2175  1E9B  1283               	bcf	3,5	;RP0=0, select bank0
  2176  1E9C  00DF               	movwf	displaySoilTemp@t2+1
  2177  1E9D  1683               	bsf	3,5	;RP0=1, select bank1
  2178  1E9E  0826               	movf	(_t+2)^(0+128),w
  2179  1E9F  1283               	bcf	3,5	;RP0=0, select bank0
  2180  1EA0  00E0               	movwf	displaySoilTemp@t2+2
  2181  1EA1  160A  158A  23B3  160A  158A  	fcall	_displaySoilTemp
  2182                           
  2183                           ;main.c: 505: break;
  2184  1EA6  2EB5               	goto	l6266
  2185  1EA7                     l6264:	
  2186  1EA7  0830               	movf	_disp_count^(0+128),w
  2187                           
  2188                           ; Switch size 1, requested type "space"
  2189                           ; Number of cases is 4, Range of values is 1 to 4
  2190                           ; switch strategies available:
  2191                           ; Name         Instructions Cycles
  2192                           ; simple_byte           13     7 (average)
  2193                           ; direct_byte           23    11 (fixed)
  2194                           ; jumptable            263     9 (fixed)
  2195                           ;	Chosen strategy is simple_byte
  2196  1EA8  3A01               	xorlw	1	; case 1
  2197  1EA9  1903               	skipnz
  2198  1EAA  2E67               	goto	l6254
  2199  1EAB  3A03               	xorlw	3	; case 2
  2200  1EAC  1903               	skipnz
  2201  1EAD  2E78               	goto	l6256
  2202  1EAE  3A01               	xorlw	1	; case 3
  2203  1EAF  1903               	skipnz
  2204  1EB0  2E89               	goto	l6258
  2205  1EB1  3A07               	xorlw	7	; case 4
  2206  1EB2  1903               	skipnz
  2207  1EB3  2E96               	goto	l6260
  2208  1EB4  2EB5               	goto	l6266
  2209  1EB5                     l6266:	
  2210                           
  2211                           ;main.c: 508: disp_count++;
  2212  1EB5  1683               	bsf	3,5	;RP0=1, select bank1
  2213  1EB6  3005               	movlw	5
  2214  1EB7  0AB0               	incf	_disp_count^(0+128),f
  2215                           
  2216                           ;main.c: 509: if(disp_count > 4) disp_count = 0;
  2217  1EB8  0230               	subwf	_disp_count^(0+128),w
  2218  1EB9  1803               	btfsc	3,0
  2219  1EBA  01B0               	clrf	_disp_count^(0+128)
  2220  1EBB                     l6272:	
  2221                           
  2222                           ;main.c: 510: }
  2223                           ;main.c: 512: if (RA4)
  2224  1EBB  1283               	bcf	3,5	;RP0=0, select bank0
  2225  1EBC  1E05               	btfss	5,4	;volatile
  2226  1EBD  2EDC               	goto	l6282
  2227                           
  2228                           ;main.c: 513: {
  2229                           ;main.c: 514: _delay((unsigned long)((20)*(8000000/4000.0)));
  2230  1EBE  3034               	movlw	52
  2231  1EBF  1683               	bsf	3,5	;RP0=1, select bank1
  2232  1EC0  00E8               	movwf	(??_main^(0+128)+1)
  2233  1EC1  30F1               	movlw	241
  2234  1EC2  00E7               	movwf	??_main^(0+128)
  2235  1EC3                     u7727:	
  2236  1EC3  0BE7               	decfsz	??_main^(0+128),f
  2237  1EC4  2EC3               	goto	u7727
  2238  1EC5  0BE8               	decfsz	(??_main^(0+128)+1),f
  2239  1EC6  2EC3               	goto	u7727
  2240  1EC7  2EC8               	nop2
  2241                           
  2242                           ;main.c: 515: if(RA4) menu_flag = 1;
  2243  1EC8  1283               	bcf	3,5	;RP0=0, select bank0
  2244  1EC9  1303               	bcf	3,6	;RP1=0, select bank0
  2245  1ECA  1E05               	btfss	5,4	;volatile
  2246  1ECB  2ECF               	goto	l468
  2247  1ECC  1683               	bsf	3,5	;RP0=1, select bank1
  2248  1ECD  01B3               	clrf	_menu_flag^(0+128)
  2249  1ECE  0AB3               	incf	_menu_flag^(0+128),f
  2250  1ECF                     l468:	
  2251  1ECF  1283               	bcf	3,5	;RP0=0, select bank0
  2252  1ED0  1A05               	btfsc	5,4	;volatile
  2253  1ED1  2ECF               	goto	l468
  2254                           
  2255                           ;main.c: 517: _delay((unsigned long)((20)*(8000000/4000.0)));
  2256  1ED2  3034               	movlw	52
  2257  1ED3  1683               	bsf	3,5	;RP0=1, select bank1
  2258  1ED4  00E8               	movwf	(??_main^(0+128)+1)
  2259  1ED5  30F1               	movlw	241
  2260  1ED6  00E7               	movwf	??_main^(0+128)
  2261  1ED7                     u7737:	
  2262  1ED7  0BE7               	decfsz	??_main^(0+128),f
  2263  1ED8  2ED7               	goto	u7737
  2264  1ED9  0BE8               	decfsz	(??_main^(0+128)+1),f
  2265  1EDA  2ED7               	goto	u7737
  2266  1EDB  2EDC               	nop2
  2267  1EDC                     l6282:	
  2268                           
  2269                           ;main.c: 518: }
  2270                           ;main.c: 519: if(menu_flag)
  2271  1EDC  1683               	bsf	3,5	;RP0=1, select bank1
  2272  1EDD  1303               	bcf	3,6	;RP1=0, select bank1
  2273  1EDE  0833               	movf	_menu_flag^(0+128),w
  2274  1EDF  1903               	btfsc	3,2
  2275  1EE0  2EE9               	goto	l6292
  2276                           
  2277                           ;main.c: 520: {
  2278                           ;main.c: 521: menu_flag = 0;
  2279  1EE1  01B3               	clrf	_menu_flag^(0+128)
  2280                           
  2281                           ;main.c: 522: INTCONbits.T0IE = 0;
  2282  1EE2  128B               	bcf	11,5	;volatile
  2283                           
  2284                           ;main.c: 523: menu();
  2285  1EE3  120A  158A  23B0  160A  158A  	fcall	_menu
  2286                           
  2287                           ;main.c: 524: INTCONbits.T0IE = 1;
  2288  1EE8  168B               	bsf	11,5	;volatile
  2289  1EE9                     l6292:	
  2290                           
  2291                           ;main.c: 525: }
  2292                           ;main.c: 527: regulacija();
  2293  1EE9  160A  158A  26EF  160A  158A  	fcall	_regulacija
  2294  1EEE  2E38               	goto	l6240
  2295  1EEF                     __end_of_main:	
  2296                           
  2297                           	psect	text1
  2298  080F                     __ptext1:	
  2299 ;; *************** function _resetValues *****************
  2300 ;; Defined at:
  2301 ;;		line 155 in file "main.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;		None               void
  2308 ;; Registers used:
  2309 ;;		wreg, status,2
  2310 ;; Tracked objects:
  2311 ;;		On entry : 300/0
  2312 ;;		On exit  : 300/100
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2315 ;;      Params:         0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0
  2318 ;;      Totals:         0       0       0       0       0
  2319 ;;Total ram usage:        0 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           
  2330                           ;psect for function _resetValues
  2331  080F                     _resetValues:	
  2332                           
  2333                           ;main.c: 156: ok_flag = 0;
  2334                           
  2335                           ;incstack = 0
  2336                           ; Regs used in _resetValues: [wreg+status,2]
  2337  080F  01EE               	clrf	_ok_flag
  2338                           
  2339                           ;main.c: 157: menu_flag = 0;
  2340  0810  1683               	bsf	3,5	;RP0=1, select bank1
  2341  0811  30C0               	movlw	192
  2342  0812  01B3               	clrf	_menu_flag^(0+128)
  2343                           
  2344                           ;main.c: 158: plus_flag = 0;
  2345  0813  01B7               	clrf	_plus_flag^(0+128)
  2346                           
  2347                           ;main.c: 159: minus_flag = 0;
  2348  0814  01B4               	clrf	_minus_flag^(0+128)
  2349                           
  2350                           ;main.c: 160: tmr_count = 0;
  2351  0815  01B8               	clrf	_tmr_count^(0+128)
  2352                           
  2353                           ;main.c: 161: measure = 0;
  2354  0816  01B1               	clrf	_measure^(0+128)
  2355                           
  2356                           ;main.c: 162: disp_count = 0;
  2357  0817  01B0               	clrf	_disp_count^(0+128)
  2358                           
  2359                           ;main.c: 163: disp = 1;
  2360  0818  01AF               	clrf	_disp^(0+128)
  2361  0819  0AAF               	incf	_disp^(0+128),f
  2362                           
  2363                           ;main.c: 164: zeljena_temperatura = 24;
  2364  081A  01A7               	clrf	_zeljena_temperatura^(0+128)
  2365  081B  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  2366  081C  3041               	movlw	65
  2367  081D  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  2368                           
  2369                           ;main.c: 165: zeljena_vlaznost = 90;
  2370  081E  30B4               	movlw	180
  2371  081F  01AA               	clrf	_zeljena_vlaznost^(0+128)
  2372  0820  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  2373  0821  3042               	movlw	66
  2374  0822  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  2375                           
  2376                           ;main.c: 166: zeljena_co2 = 1000;
  2377  0823  30E8               	movlw	232
  2378  0824  00FA               	movwf	_zeljena_co2
  2379  0825  3003               	movlw	3
  2380  0826  00FB               	movwf	_zeljena_co2+1
  2381                           
  2382                           ;main.c: 167: ok_flag_humi = 0;
  2383  0827  01B6               	clrf	_ok_flag_humi^(0+128)
  2384                           
  2385                           ;main.c: 169: tmr_co2 = 0;
  2386  0828  01B5               	clrf	_ok_flag_co2^(0+128)
  2387                           
  2388                           ;main.c: 170: measure_co2 = 1;
  2389  0829  01B2               	clrf	_measure_co2^(0+128)
  2390  082A  0AB2               	incf	_measure_co2^(0+128),f
  2391                           
  2392                           ;main.c: 171: co2 = 0;
  2393  082B  01AD               	clrf	_co2^(0+128)
  2394  082C  01AE               	clrf	(_co2+1)^(0+128)
  2395  082D  0008               	return
  2396  082E                     __end_of_resetValues:	
  2397                           
  2398                           	psect	text2
  2399  1EEF                     __ptext2:	
  2400 ;; *************** function _regulacija *****************
  2401 ;; Defined at:
  2402 ;;		line 183 in file "main.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;		None               void
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 300/100
  2413 ;;		On exit  : 200/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         0       0       0       0       0
  2418 ;;      Temps:          0       2       0       0       0
  2419 ;;      Totals:         0       2       0       0       0
  2420 ;;Total ram usage:        2 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    3
  2423 ;; This function calls:
  2424 ;;		___ftadd
  2425 ;;		___ftge
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _regulacija
  2433  1EEF                     _regulacija:	
  2434                           
  2435                           ;main.c: 185: if(RC4)
  2436                           
  2437                           ;incstack = 0
  2438                           ; Regs used in _regulacija: [wreg+status,2+status,0+pclath+cstack]
  2439  1EEF  1283               	bcf	3,5	;RP0=0, select bank0
  2440  1EF0  1E07               	btfss	7,4	;volatile
  2441  1EF1  2F07               	goto	l6114
  2442                           
  2443                           ;main.c: 186: {
  2444                           ;main.c: 187: if(temp > zeljena_temperatura)
  2445  1EF2  1683               	bsf	3,5	;RP0=1, select bank1
  2446  1EF3  0827               	movf	_zeljena_temperatura^(0+128),w
  2447  1EF4  1283               	bcf	3,5	;RP0=0, select bank0
  2448  1EF5  00CE               	movwf	___ftge@ff1
  2449  1EF6  1683               	bsf	3,5	;RP0=1, select bank1
  2450  1EF7  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2451  1EF8  1283               	bcf	3,5	;RP0=0, select bank0
  2452  1EF9  00CF               	movwf	___ftge@ff1+1
  2453  1EFA  1683               	bsf	3,5	;RP0=1, select bank1
  2454  1EFB  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2455  1EFC  1283               	bcf	3,5	;RP0=0, select bank0
  2456  1EFD  27BC               	fcall	PL20	;call to abstracted procedure
  2457  1EFE  120A  118A  25C1  160A  158A  	fcall	___ftge
  2458  1F03  1803               	btfsc	3,0
  2459  1F04  2F1D               	goto	l357
  2460                           
  2461                           ;main.c: 188: {
  2462                           ;main.c: 189: RC4 = 0;
  2463  1F05  1207               	bcf	7,4	;volatile
  2464  1F06  2F1D               	goto	l357
  2465  1F07                     l6114:	
  2466                           
  2467                           ;main.c: 192: else if(temp < (zeljena_temperatura - 0.4))
  2468  1F07  27E6  160A  158A   	fcall	PL36	;call to abstracted procedure
  2469  1F0A  30CD               	movlw	205
  2470  1F0B  00C2               	movwf	___ftadd@f1
  2471  1F0C  30CC               	movlw	204
  2472  1F0D  00C3               	movwf	___ftadd@f1+1
  2473  1F0E  30BE               	movlw	190
  2474  1F0F  27D8               	fcall	PL26	;call to abstracted procedure
  2475  1F10  120A  158A  22EE  160A  158A  	fcall	___ftadd
  2476  1F15  27F9               	fcall	PL96	;call to abstracted procedure
  2477  1F16  120A  118A  25C1  160A  158A  	fcall	___ftge
  2478  1F1B  1C03               	btfss	3,0
  2479                           
  2480                           ;main.c: 193: {
  2481                           ;main.c: 194: RC4 = 1;
  2482  1F1C  1607               	bsf	7,4	;volatile
  2483  1F1D                     l357:	
  2484                           
  2485                           ;main.c: 195: }
  2486                           ;main.c: 197: if(RC3)
  2487  1F1D  1D87               	btfss	7,3	;volatile
  2488  1F1E  2F35               	goto	l6122
  2489                           
  2490                           ;main.c: 198: {
  2491                           ;main.c: 199: if(temp < zeljena_temperatura)
  2492  1F1F  27E6               	fcall	PL36	;call to abstracted procedure
  2493  1F20  1683               	bsf	3,5	;RP0=1, select bank1
  2494  1F21  0827               	movf	_zeljena_temperatura^(0+128),w
  2495  1F22  1283               	bcf	3,5	;RP0=0, select bank0
  2496  1F23  00D1               	movwf	___ftge@ff2
  2497  1F24  1683               	bsf	3,5	;RP0=1, select bank1
  2498  1F25  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2499  1F26  1283               	bcf	3,5	;RP0=0, select bank0
  2500  1F27  00D2               	movwf	___ftge@ff2+1
  2501  1F28  1683               	bsf	3,5	;RP0=1, select bank1
  2502  1F29  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2503  1F2A  1283               	bcf	3,5	;RP0=0, select bank0
  2504  1F2B  00D3               	movwf	___ftge@ff2+2
  2505  1F2C  120A  118A  25C1  160A  158A  	fcall	___ftge
  2506  1F31  1803               	btfsc	3,0
  2507  1F32  2F4B               	goto	l361
  2508                           
  2509                           ;main.c: 200: {
  2510                           ;main.c: 201: RC3 = 0;
  2511  1F33  1187               	bcf	7,3	;volatile
  2512  1F34  2F4B               	goto	l361
  2513  1F35                     l6122:	
  2514                           
  2515                           ;main.c: 204: else if(temp > (zeljena_temperatura + 0.4))
  2516  1F35  30CD               	movlw	205
  2517  1F36  00C2               	movwf	___ftadd@f1
  2518  1F37  30CC               	movlw	204
  2519  1F38  00C3               	movwf	___ftadd@f1+1
  2520  1F39  303E               	movlw	62
  2521  1F3A  27D8               	fcall	PL26	;call to abstracted procedure
  2522  1F3B  120A  158A  22EE  160A  158A  	fcall	___ftadd
  2523  1F40  27F3  160A  158A   	fcall	PL76	;call to abstracted procedure
  2524  1F43  27BC               	fcall	PL20	;call to abstracted procedure
  2525  1F44  120A  118A  25C1  160A  158A  	fcall	___ftge
  2526  1F49  1C03               	btfss	3,0
  2527                           
  2528                           ;main.c: 205: {
  2529                           ;main.c: 206: RC3 = 1;
  2530  1F4A  1587               	bsf	7,3	;volatile
  2531  1F4B                     l361:	
  2532                           
  2533                           ;main.c: 207: }
  2534                           ;main.c: 212: if(RC1)
  2535  1F4B  1C87               	btfss	7,1	;volatile
  2536  1F4C  2F6E               	goto	l6130
  2537                           
  2538                           ;main.c: 213: {
  2539                           ;main.c: 214: if(humi > (zeljena_vlaznost + 2.5))
  2540  1F4D  3020               	movlw	32
  2541  1F4E  01C2               	clrf	___ftadd@f1
  2542  1F4F  00C3               	movwf	___ftadd@f1+1
  2543  1F50  3040               	movlw	64
  2544  1F51  27CA               	fcall	PL24	;call to abstracted procedure
  2545  1F52  120A  158A  22EE  160A  158A  	fcall	___ftadd
  2546  1F57  27F3               	fcall	PL76	;call to abstracted procedure
  2547  1F58  00D0               	movwf	___ftge@ff1+2
  2548  1F59  1683               	bsf	3,5	;RP0=1, select bank1
  2549  1F5A  0848               	movf	_humi^(0+128),w
  2550  1F5B  1283               	bcf	3,5	;RP0=0, select bank0
  2551  1F5C  00D1               	movwf	___ftge@ff2
  2552  1F5D  1683               	bsf	3,5	;RP0=1, select bank1
  2553  1F5E  0849               	movf	(_humi+1)^(0+128),w
  2554  1F5F  1283               	bcf	3,5	;RP0=0, select bank0
  2555  1F60  00D2               	movwf	___ftge@ff2+1
  2556  1F61  1683               	bsf	3,5	;RP0=1, select bank1
  2557  1F62  084A               	movf	(_humi+2)^(0+128),w
  2558  1F63  1283               	bcf	3,5	;RP0=0, select bank0
  2559  1F64  00D3               	movwf	___ftge@ff2+2
  2560  1F65  120A  118A  25C1  160A  158A  	fcall	___ftge
  2561  1F6A  1803               	btfsc	3,0
  2562  1F6B  2F8C               	goto	l6134
  2563                           
  2564                           ;main.c: 215: {
  2565                           ;main.c: 216: RC1 = 0;
  2566  1F6C  1087               	bcf	7,1	;volatile
  2567  1F6D  2F8C               	goto	l6134
  2568  1F6E                     l6130:	
  2569                           
  2570                           ;main.c: 220: else if(humi < (zeljena_vlaznost - 2.5))
  2571  1F6E  1683               	bsf	3,5	;RP0=1, select bank1
  2572  1F6F  0848               	movf	_humi^(0+128),w
  2573  1F70  1283               	bcf	3,5	;RP0=0, select bank0
  2574  1F71  00CE               	movwf	___ftge@ff1
  2575  1F72  1683               	bsf	3,5	;RP0=1, select bank1
  2576  1F73  0849               	movf	(_humi+1)^(0+128),w
  2577  1F74  1283               	bcf	3,5	;RP0=0, select bank0
  2578  1F75  00CF               	movwf	___ftge@ff1+1
  2579  1F76  1683               	bsf	3,5	;RP0=1, select bank1
  2580  1F77  084A               	movf	(_humi+2)^(0+128),w
  2581  1F78  1283               	bcf	3,5	;RP0=0, select bank0
  2582  1F79  00D0               	movwf	___ftge@ff1+2
  2583  1F7A  3020               	movlw	32
  2584  1F7B  01C2               	clrf	___ftadd@f1
  2585  1F7C  00C3               	movwf	___ftadd@f1+1
  2586  1F7D  30C0               	movlw	192
  2587  1F7E  27CA               	fcall	PL24	;call to abstracted procedure
  2588  1F7F  120A  158A  22EE  160A  158A  	fcall	___ftadd
  2589  1F84  27F9               	fcall	PL96	;call to abstracted procedure
  2590  1F85  120A  118A  25C1  160A  158A  	fcall	___ftge
  2591  1F8A  1C03               	btfss	3,0
  2592                           
  2593                           ;main.c: 221: {
  2594                           ;main.c: 222: RC1 = 1;
  2595  1F8B  1487               	bsf	7,1	;volatile
  2596  1F8C                     l6134:	
  2597                           
  2598                           ;main.c: 223: }
  2599                           ;main.c: 227: if(measure_co2)
  2600  1F8C  1683               	bsf	3,5	;RP0=1, select bank1
  2601  1F8D  0832               	movf	_measure_co2^(0+128),w
  2602  1F8E  1903               	btfsc	3,2
  2603  1F8F  0008               	return
  2604                           
  2605                           ;main.c: 228: {
  2606                           ;main.c: 229: if (RC0)
  2607  1F90  1283               	bcf	3,5	;RP0=0, select bank0
  2608  1F91  1C07               	btfss	7,0	;volatile
  2609  1F92  2FA8               	goto	l6142
  2610                           
  2611                           ;main.c: 230: {
  2612                           ;main.c: 231: if(co2 < (zeljena_co2 - 250))
  2613  1F93  087A               	movf	_zeljena_co2,w
  2614  1F94  3E06               	addlw	6
  2615  1F95  00D4               	movwf	??_regulacija
  2616  1F96  087B               	movf	_zeljena_co2+1,w
  2617  1F97  1803               	skipnc
  2618  1F98  3E01               	addlw	1
  2619  1F99  3EFF               	addlw	255
  2620  1F9A  00D5               	movwf	??_regulacija+1
  2621  1F9B  1683               	bsf	3,5	;RP0=1, select bank1
  2622  1F9C  022E               	subwf	(_co2+1)^(0+128),w
  2623  1F9D  1D03               	skipz
  2624  1F9E  2FA3               	goto	u7485
  2625  1F9F  1283               	bcf	3,5	;RP0=0, select bank0
  2626  1FA0  0854               	movf	??_regulacija,w
  2627  1FA1  1683               	bsf	3,5	;RP0=1, select bank1
  2628  1FA2  022D               	subwf	_co2^(0+128),w
  2629  1FA3                     u7485:	
  2630  1FA3  1803               	skipnc
  2631  1FA4  0008               	return
  2632                           
  2633                           ;main.c: 232: {
  2634                           ;main.c: 233: RC0 = 0;
  2635  1FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2636  1FA6  1007               	bcf	7,0	;volatile
  2637  1FA7  0008               	return
  2638  1FA8                     l6142:	
  2639                           
  2640                           ;main.c: 237: else if(co2 > (zeljena_co2 + 250))
  2641  1FA8  087A               	movf	_zeljena_co2,w
  2642  1FA9  3EFA               	addlw	250
  2643  1FAA  00D4               	movwf	??_regulacija
  2644  1FAB  087B               	movf	_zeljena_co2+1,w
  2645  1FAC  1803               	skipnc
  2646  1FAD  3E01               	addlw	1
  2647  1FAE  00D5               	movwf	??_regulacija+1
  2648  1FAF  1683               	bsf	3,5	;RP0=1, select bank1
  2649  1FB0  082E               	movf	(_co2+1)^(0+128),w
  2650  1FB1  1283               	bcf	3,5	;RP0=0, select bank0
  2651  1FB2  0255               	subwf	??_regulacija+1,w
  2652  1FB3  1D03               	skipz
  2653  1FB4  2FB9               	goto	u7495
  2654  1FB5  1683               	bsf	3,5	;RP0=1, select bank1
  2655  1FB6  082D               	movf	_co2^(0+128),w
  2656  1FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2657  1FB8  0254               	subwf	??_regulacija,w
  2658  1FB9                     u7495:	
  2659  1FB9  1C03               	btfss	3,0
  2660                           
  2661                           ;main.c: 238: {
  2662                           ;main.c: 239: RC0 = 1;
  2663  1FBA  1407               	bsf	7,0	;volatile
  2664  1FBB  0008               	return
  2665  1FBC                     __end_of_regulacija:	
  2666  1FBC                     PL20:	
  2667  1FBC  00D0               	movwf	___ftge@ff1+2
  2668  1FBD  1683               	bsf	3,5	;RP0=1, select bank1
  2669  1FBE  084B               	movf	_temp^(0+128),w
  2670  1FBF  1283               	bcf	3,5	;RP0=0, select bank0
  2671  1FC0  00D1               	movwf	___ftge@ff2
  2672  1FC1  1683               	bsf	3,5	;RP0=1, select bank1
  2673  1FC2  084C               	movf	(_temp+1)^(0+128),w
  2674  1FC3  1283               	bcf	3,5	;RP0=0, select bank0
  2675  1FC4  00D2               	movwf	___ftge@ff2+1
  2676  1FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2677  1FC6  084D               	movf	(_temp+2)^(0+128),w
  2678  1FC7  1283               	bcf	3,5	;RP0=0, select bank0
  2679  1FC8  00D3               	movwf	___ftge@ff2+2
  2680  1FC9  0008               	return
  2681  1FCA                     __end_ofPL20:	
  2682  1FCA                     PL24:	
  2683  1FCA  00C4               	movwf	___ftadd@f1+2
  2684  1FCB  1683               	bsf	3,5	;RP0=1, select bank1
  2685  1FCC  082A               	movf	_zeljena_vlaznost^(0+128),w
  2686  1FCD  1283               	bcf	3,5	;RP0=0, select bank0
  2687  1FCE  00C5               	movwf	___ftadd@f2
  2688  1FCF  1683               	bsf	3,5	;RP0=1, select bank1
  2689  1FD0  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  2690  1FD1  1283               	bcf	3,5	;RP0=0, select bank0
  2691  1FD2  00C6               	movwf	___ftadd@f2+1
  2692  1FD3  1683               	bsf	3,5	;RP0=1, select bank1
  2693  1FD4  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  2694  1FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2695  1FD6  00C7               	movwf	___ftadd@f2+2
  2696  1FD7  0008               	return
  2697  1FD8                     __end_ofPL24:	
  2698  1FD8                     PL26:	
  2699  1FD8  00C4               	movwf	___ftadd@f1+2
  2700  1FD9  1683               	bsf	3,5	;RP0=1, select bank1
  2701  1FDA  0827               	movf	_zeljena_temperatura^(0+128),w
  2702  1FDB  1283               	bcf	3,5	;RP0=0, select bank0
  2703  1FDC  00C5               	movwf	___ftadd@f2
  2704  1FDD  1683               	bsf	3,5	;RP0=1, select bank1
  2705  1FDE  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  2706  1FDF  1283               	bcf	3,5	;RP0=0, select bank0
  2707  1FE0  00C6               	movwf	___ftadd@f2+1
  2708  1FE1  1683               	bsf	3,5	;RP0=1, select bank1
  2709  1FE2  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  2710  1FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2711  1FE4  00C7               	movwf	___ftadd@f2+2
  2712  1FE5  0008               	return
  2713  1FE6                     __end_ofPL26:	
  2714  1FE6                     PL36:	
  2715  1FE6  1683               	bsf	3,5	;RP0=1, select bank1
  2716  1FE7  084B               	movf	_temp^(0+128),w
  2717  1FE8  1283               	bcf	3,5	;RP0=0, select bank0
  2718  1FE9  00CE               	movwf	___ftge@ff1
  2719  1FEA  1683               	bsf	3,5	;RP0=1, select bank1
  2720  1FEB  084C               	movf	(_temp+1)^(0+128),w
  2721  1FEC  1283               	bcf	3,5	;RP0=0, select bank0
  2722  1FED  00CF               	movwf	___ftge@ff1+1
  2723  1FEE  1683               	bsf	3,5	;RP0=1, select bank1
  2724  1FEF  084D               	movf	(_temp+2)^(0+128),w
  2725  1FF0  1283               	bcf	3,5	;RP0=0, select bank0
  2726  1FF1  00D0               	movwf	___ftge@ff1+2
  2727  1FF2  0008               	return
  2728  1FF3                     __end_ofPL36:	
  2729  1FF3                     PL76:	
  2730  1FF3  0842               	movf	?___ftadd,w
  2731  1FF4  00CE               	movwf	___ftge@ff1
  2732  1FF5  0843               	movf	?___ftadd+1,w
  2733  1FF6  00CF               	movwf	___ftge@ff1+1
  2734  1FF7  0844               	movf	?___ftadd+2,w
  2735  1FF8  0008               	return
  2736  1FF9                     __end_ofPL76:	
  2737  1FF9                     PL96:	
  2738  1FF9  0842               	movf	?___ftadd,w
  2739  1FFA  00D1               	movwf	___ftge@ff2
  2740  1FFB  0843               	movf	?___ftadd+1,w
  2741  1FFC  00D2               	movwf	___ftge@ff2+1
  2742  1FFD  0844               	movf	?___ftadd+2,w
  2743  1FFE  00D3               	movwf	___ftge@ff2+2
  2744  1FFF  0008               	return
  2745  2000                     __end_ofPL96:	
  2746                           
  2747                           	psect	text6
  2748  1C69                     __ptext6:	
  2749 ;; *************** function _measureTGS4161 *****************
  2750 ;; Defined at:
  2751 ;;		line 30 in file "tgs4161.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;  ppm             2   19[BANK0 ] unsigned int 
  2756 ;;  temp            2   17[BANK0 ] unsigned int 
  2757 ;;  ppm_temp        2   14[BANK0 ] unsigned int 
  2758 ;;  krez2           2   12[BANK0 ] unsigned int 
  2759 ;;  krez1           2   10[BANK0 ] unsigned int 
  2760 ;;  i               1   16[BANK0 ] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2    6[BANK0 ] unsigned int 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0, pclath, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/100
  2767 ;;		On exit  : 300/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2770 ;;      Params:         0       2       0       0       0
  2771 ;;      Locals:         0      11       0       0       0
  2772 ;;      Temps:          0       2       0       0       0
  2773 ;;      Totals:         0      15       0       0       0
  2774 ;;Total ram usage:       15 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    2
  2777 ;; This function calls:
  2778 ;;		___lwdiv
  2779 ;;		___wmul
  2780 ;;		_adcRead
  2781 ;; This function is called by:
  2782 ;;		_main
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           
  2787                           ;psect for function _measureTGS4161
  2788  1C69                     _measureTGS4161:	
  2789                           
  2790                           ;incstack = 0
  2791                           ; Regs used in _measureTGS4161: [wreg+status,2+status,0+pclath+cstack]
  2792  1C69  1283               	bcf	3,5	;RP0=0, select bank0
  2793  1C6A  1303               	bcf	3,6	;RP1=0, select bank0
  2794  1C6B  30E9               	movlw	233
  2795  1C6C  01B3               	clrf	measureTGS4161@ppm
  2796  1C6D  01B4               	clrf	measureTGS4161@ppm+1
  2797  1C6E  01AE               	clrf	measureTGS4161@ppm_temp
  2798  1C6F  01AF               	clrf	measureTGS4161@ppm_temp+1
  2799                           
  2800                           ;tgs4161.c: 32: char i;
  2801                           ;tgs4161.c: 34: krez1 = -23.43;
  2802  1C70  00AA               	movwf	measureTGS4161@krez1
  2803  1C71  30FF               	movlw	255
  2804  1C72  00AB               	movwf	measureTGS4161@krez1+1
  2805                           
  2806                           ;tgs4161.c: 35: krez2 = -53.63;
  2807  1C73  30CB               	movlw	203
  2808  1C74  00AC               	movwf	measureTGS4161@krez2
  2809  1C75  30FF               	movlw	255
  2810  1C76  00AD               	movwf	measureTGS4161@krez2+1
  2811                           
  2812                           ;tgs4161.c: 37: INTCONbits.T0IE = 0;
  2813  1C77  128B               	bcf	11,5	;volatile
  2814                           
  2815                           ;tgs4161.c: 38: for(i=0;i<7;i++)
  2816  1C78  01B0               	clrf	measureTGS4161@i
  2817  1C79                     l6034:	
  2818                           
  2819                           ;tgs4161.c: 39: {
  2820                           ;tgs4161.c: 40: temp = adcRead();
  2821  1C79  24F1  160A  158A   	fcall	_adcRead
  2822  1C7C  0873               	movf	?_adcRead+1,w
  2823  1C7D  00B2               	movwf	measureTGS4161@temp+1
  2824  1C7E  0872               	movf	?_adcRead,w
  2825  1C7F  00B1               	movwf	measureTGS4161@temp
  2826                           
  2827                           ;tgs4161.c: 42: if(temp > 236) ppm = krez1*temp + 6650;
  2828  1C80  3000               	movlw	0
  2829  1C81  0232               	subwf	measureTGS4161@temp+1,w
  2830  1C82  30ED               	movlw	237
  2831  1C83  1903               	skipnz
  2832  1C84  0231               	subwf	measureTGS4161@temp,w
  2833  1C85  1C03               	skipc
  2834  1C86  2C9B               	goto	l6042
  2835  1C87  082B               	movf	measureTGS4161@krez1+1,w
  2836  1C88  00F3               	movwf	___wmul@multiplier+1
  2837  1C89  082A               	movf	measureTGS4161@krez1,w
  2838  1C8A  251A               	fcall	PL100	;call to abstracted procedure
  2839  1C8B  120A  118A  2674  160A  158A  	fcall	___wmul
  2840  1C90  0873               	movf	?___wmul+1,w
  2841  1C91  1283               	bcf	3,5	;RP0=0, select bank0
  2842  1C92  00B4               	movwf	measureTGS4161@ppm+1
  2843  1C93  0872               	movf	?___wmul,w
  2844  1C94  00B3               	movwf	measureTGS4161@ppm
  2845  1C95  30FA               	movlw	250
  2846  1C96  07B3               	addwf	measureTGS4161@ppm,f
  2847  1C97  1803               	skipnc
  2848  1C98  0AB4               	incf	measureTGS4161@ppm+1,f
  2849  1C99  3019               	movlw	25
  2850  1C9A  2CAE               	goto	L1
  2851  1C9B                     l6042:	
  2852                           
  2853                           ;tgs4161.c: 43: else ppm = krez2*temp + 13500;
  2854  1C9B  082D               	movf	measureTGS4161@krez2+1,w
  2855  1C9C  00F3               	movwf	___wmul@multiplier+1
  2856  1C9D  082C               	movf	measureTGS4161@krez2,w
  2857  1C9E  251A               	fcall	PL100	;call to abstracted procedure
  2858  1C9F  120A  118A  2674  160A  158A  	fcall	___wmul
  2859  1CA4  0873               	movf	?___wmul+1,w
  2860  1CA5  1283               	bcf	3,5	;RP0=0, select bank0
  2861  1CA6  00B4               	movwf	measureTGS4161@ppm+1
  2862  1CA7  0872               	movf	?___wmul,w
  2863  1CA8  00B3               	movwf	measureTGS4161@ppm
  2864  1CA9  30BC               	movlw	188
  2865  1CAA  07B3               	addwf	measureTGS4161@ppm,f
  2866  1CAB  1803               	skipnc
  2867  1CAC  0AB4               	incf	measureTGS4161@ppm+1,f
  2868  1CAD  3034               	movlw	52
  2869  1CAE                     L1:	
  2870  1CAE  07B4               	addwf	measureTGS4161@ppm+1,f
  2871                           
  2872                           ;tgs4161.c: 44: ppm_temp += ppm;
  2873  1CAF  0833               	movf	measureTGS4161@ppm,w
  2874  1CB0  07AE               	addwf	measureTGS4161@ppm_temp,f
  2875  1CB1  1803               	skipnc
  2876  1CB2  0AAF               	incf	measureTGS4161@ppm_temp+1,f
  2877  1CB3  0834               	movf	measureTGS4161@ppm+1,w
  2878  1CB4  07AF               	addwf	measureTGS4161@ppm_temp+1,f
  2879                           
  2880                           ;tgs4161.c: 45: _delay((unsigned long)((20)*(8000000/4000.0)));
  2881  1CB5  3034               	movlw	52
  2882  1CB6  00A9               	movwf	??_measureTGS4161+1
  2883  1CB7  30F1               	movlw	241
  2884  1CB8  00A8               	movwf	??_measureTGS4161
  2885  1CB9                     u7927:	
  2886  1CB9  0BA8               	decfsz	??_measureTGS4161,f
  2887  1CBA  2CB9               	goto	u7927
  2888  1CBB  0BA9               	decfsz	??_measureTGS4161+1,f
  2889  1CBC  2CB9               	goto	u7927
  2890  1CBD  2CBE               	nop2
  2891  1CBE  1283               	bcf	3,5	;RP0=0, select bank0
  2892  1CBF  1303               	bcf	3,6	;RP1=0, select bank0
  2893  1CC0  3007               	movlw	7
  2894  1CC1  0AB0               	incf	measureTGS4161@i,f
  2895  1CC2  0230               	subwf	measureTGS4161@i,w
  2896  1CC3  1C03               	skipc
  2897  1CC4  2C79               	goto	l6034
  2898                           
  2899                           ;tgs4161.c: 46: }
  2900                           ;tgs4161.c: 47: INTCONbits.T0IE = 1;
  2901  1CC5  168B               	bsf	11,5	;volatile
  2902                           
  2903                           ;tgs4161.c: 49: ppm = ppm_temp/7;
  2904  1CC6  3007               	movlw	7
  2905  1CC7  00F2               	movwf	___lwdiv@divisor
  2906  1CC8  01F3               	clrf	___lwdiv@divisor+1
  2907  1CC9  082F               	movf	measureTGS4161@ppm_temp+1,w
  2908  1CCA  00F5               	movwf	___lwdiv@dividend+1
  2909  1CCB  082E               	movf	measureTGS4161@ppm_temp,w
  2910  1CCC  00F4               	movwf	___lwdiv@dividend
  2911  1CCD  120A  158A  2735  160A  158A  	fcall	___lwdiv
  2912  1CD2  0873               	movf	?___lwdiv+1,w
  2913  1CD3  00B4               	movwf	measureTGS4161@ppm+1
  2914  1CD4  0872               	movf	?___lwdiv,w
  2915  1CD5  00B3               	movwf	measureTGS4161@ppm
  2916                           
  2917                           ;tgs4161.c: 50: if(ppm < 350) ppm = 350;
  2918  1CD6  3001               	movlw	1
  2919  1CD7  0234               	subwf	measureTGS4161@ppm+1,w
  2920  1CD8  305E               	movlw	94
  2921  1CD9  1903               	skipnz
  2922  1CDA  0233               	subwf	measureTGS4161@ppm,w
  2923  1CDB  1803               	skipnc
  2924  1CDC  2CE1               	goto	l210
  2925  1CDD  305E               	movlw	94
  2926  1CDE  00B3               	movwf	measureTGS4161@ppm
  2927  1CDF  3001               	movlw	1
  2928  1CE0  00B4               	movwf	measureTGS4161@ppm+1
  2929  1CE1                     l210:	
  2930                           
  2931                           ;tgs4161.c: 51: if(ppm > 5500) ppm = 5500;
  2932  1CE1  3015               	movlw	21
  2933  1CE2  0234               	subwf	measureTGS4161@ppm+1,w
  2934  1CE3  307D               	movlw	125
  2935  1CE4  1903               	skipnz
  2936  1CE5  0233               	subwf	measureTGS4161@ppm,w
  2937  1CE6  1C03               	skipc
  2938  1CE7  2CEC               	goto	l211
  2939  1CE8  307C               	movlw	124
  2940  1CE9  00B3               	movwf	measureTGS4161@ppm
  2941  1CEA  3015               	movlw	21
  2942  1CEB  00B4               	movwf	measureTGS4161@ppm+1
  2943  1CEC                     l211:	
  2944                           
  2945                           ;tgs4161.c: 53: return ppm;
  2946  1CEC  0834               	movf	measureTGS4161@ppm+1,w
  2947  1CED  00A7               	movwf	?_measureTGS4161+1
  2948  1CEE  0833               	movf	measureTGS4161@ppm,w
  2949  1CEF  00A6               	movwf	?_measureTGS4161
  2950  1CF0  0008               	return
  2951  1CF1                     __end_of_measureTGS4161:	
  2952  1CF1                     __ptext7:	
  2953 ;; *************** function _adcRead *****************
  2954 ;; Defined at:
  2955 ;;		line 12 in file "tgs4161.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  temp            2    4[BANK0 ] unsigned int 
  2960 ;;  tempH           2    2[BANK0 ] unsigned short 
  2961 ;;  tempL           2    0[BANK0 ] unsigned short 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  2    2[COMMON] unsigned int 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 300/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2971 ;;      Params:         2       0       0       0       0
  2972 ;;      Locals:         0       6       0       0       0
  2973 ;;      Temps:          2       0       0       0       0
  2974 ;;      Totals:         4       6       0       0       0
  2975 ;;Total ram usage:       10 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_measureTGS4161
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _adcRead
  2987  1CF1                     _adcRead:	
  2988                           
  2989                           ;tgs4161.c: 14: unsigned short tempL=0, tempH=0;
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _adcRead: [wreg+status,2]
  2993  1CF1  1283               	bcf	3,5	;RP0=0, select bank0
  2994  1CF2  1303               	bcf	3,6	;RP1=0, select bank0
  2995  1CF3  01A0               	clrf	adcRead@tempL
  2996  1CF4  01A1               	clrf	adcRead@tempL+1
  2997  1CF5  01A2               	clrf	adcRead@tempH
  2998  1CF6  01A3               	clrf	adcRead@tempH+1
  2999                           
  3000                           ;tgs4161.c: 16: ADCON0bits.ADON = 1;
  3001  1CF7  141F               	bsf	31,0	;volatile
  3002                           
  3003                           ;tgs4161.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  3004  1CF8  3003               	movlw	3
  3005  1CF9  00F5               	movwf	??_adcRead+1
  3006  1CFA  3097               	movlw	151
  3007  1CFB  00F4               	movwf	??_adcRead
  3008  1CFC                     u7937:	
  3009  1CFC  0BF4               	decfsz	??_adcRead,f
  3010  1CFD  2CFC               	goto	u7937
  3011  1CFE  0BF5               	decfsz	??_adcRead+1,f
  3012  1CFF  2CFC               	goto	u7937
  3013  1D00  2D01               	nop2
  3014                           
  3015                           ;tgs4161.c: 18: ADCON0bits.GO = 1;
  3016  1D01  1283               	bcf	3,5	;RP0=0, select bank0
  3017  1D02  1303               	bcf	3,6	;RP1=0, select bank0
  3018  1D03  149F               	bsf	31,1	;volatile
  3019  1D04                     l200:	
  3020                           ;tgs4161.c: 20: while(ADCON0bits.GO);
  3021                           
  3022  1D04  189F               	btfsc	31,1	;volatile
  3023  1D05  2D04               	goto	l200
  3024                           
  3025                           ;tgs4161.c: 22: tempL |= ADRESL;
  3026  1D06  1683               	bsf	3,5	;RP0=1, select bank1
  3027  1D07  081E               	movf	30,w	;volatile
  3028  1D08  1283               	bcf	3,5	;RP0=0, select bank0
  3029  1D09  04A0               	iorwf	adcRead@tempL,f
  3030                           
  3031                           ;tgs4161.c: 23: tempH |= ADRESH;
  3032  1D0A  081E               	movf	30,w	;volatile
  3033  1D0B  04A2               	iorwf	adcRead@tempH,f
  3034                           
  3035                           ;tgs4161.c: 25: temp = ((unsigned int)tempH <<8) + (unsigned int)tempL;
  3036  1D0C  0822               	movf	adcRead@tempH,w
  3037  1D0D  00A5               	movwf	adcRead@temp+1
  3038  1D0E  01A4               	clrf	adcRead@temp
  3039  1D0F  0820               	movf	adcRead@tempL,w
  3040  1D10  07A4               	addwf	adcRead@temp,f
  3041  1D11  1803               	skipnc
  3042  1D12  0AA5               	incf	adcRead@temp+1,f
  3043  1D13  0821               	movf	adcRead@tempL+1,w
  3044  1D14  07A5               	addwf	adcRead@temp+1,f
  3045                           
  3046                           ;tgs4161.c: 27: return temp;
  3047  1D15  0825               	movf	adcRead@temp+1,w
  3048  1D16  00F3               	movwf	?_adcRead+1
  3049  1D17  0824               	movf	adcRead@temp,w
  3050  1D18  00F2               	movwf	?_adcRead
  3051  1D19  0008               	return
  3052  1D1A                     __end_of_adcRead:	
  3053  1D1A                     PL100:	
  3054  1D1A  00F2               	movwf	___wmul@multiplier
  3055  1D1B  0832               	movf	measureTGS4161@temp+1,w
  3056  1D1C  00F5               	movwf	___wmul@multiplicand+1
  3057  1D1D  0831               	movf	measureTGS4161@temp,w
  3058  1D1E  00F4               	movwf	___wmul@multiplicand
  3059  1D1F  0008               	return
  3060  1D20                     __end_ofPL100:	
  3061                           
  3062                           	psect	text8
  3063  1001                     __ptext8:	
  3064 ;; *************** function _initTimer0 *****************
  3065 ;; Defined at:
  3066 ;;		line 174 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;		None               void
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 300/100
  3077 ;;		On exit  : 300/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3080 ;;      Params:         0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0
  3083 ;;      Totals:         0       0       0       0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    1
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _initTimer0
  3096  1001                     _initTimer0:	
  3097                           
  3098                           ;main.c: 175: OPTION_REGbits.T0CS = 0;
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _initTimer0: [wreg+status,2+status,0]
  3102  1001  1281               	bcf	1,5	;volatile
  3103                           
  3104                           ;main.c: 176: OPTION_REGbits.PSA = 0;
  3105  1002  1181               	bcf	1,3	;volatile
  3106                           
  3107                           ;main.c: 177: OPTION_REG |= 0b00000111;
  3108  1003  3007               	movlw	7
  3109  1004  0481               	iorwf	1,f	;volatile
  3110                           
  3111                           ;main.c: 178: INTCONbits.GIE = 1;
  3112  1005  178B               	bsf	11,7	;volatile
  3113                           
  3114                           ;main.c: 179: TMR0 = 0;
  3115  1006  1283               	bcf	3,5	;RP0=0, select bank0
  3116  1007  0181               	clrf	1	;volatile
  3117                           
  3118                           ;main.c: 180: INTCONbits.T0IE = 1;
  3119  1008  168B               	bsf	11,5	;volatile
  3120  1009  0008               	return
  3121  100A                     __end_of_initTimer0:	
  3122                           
  3123                           	psect	text9
  3124  1AFD                     __ptext9:	
  3125 ;; *************** function _initSHT71 *****************
  3126 ;; Defined at:
  3127 ;;		line 10 in file "sht71.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		None
  3136 ;; Tracked objects:
  3137 ;;		On entry : 300/0
  3138 ;;		On exit  : 300/100
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3141 ;;      Params:         0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0
  3144 ;;      Totals:         0       0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _initSHT71
  3157  1AFD                     _initSHT71:	
  3158                           
  3159                           ;sht71.c: 11: TRISBbits.TRISB7 = 0;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _initSHT71: []
  3163  1AFD  1683               	bsf	3,5	;RP0=1, select bank1
  3164  1AFE  1386               	bcf	6,7	;volatile
  3165                           
  3166                           ;sht71.c: 12: TRISBbits.TRISB7 = 0;
  3167  1AFF  1386               	bcf	6,7	;volatile
  3168  1B00  0008               	return
  3169  1B01                     __end_of_initSHT71:	
  3170                           
  3171                           	psect	text23
  3172  1BB3                     __ptext23:	
  3173 ;; *************** function _displaySoilTemp *****************
  3174 ;; Defined at:
  3175 ;;		line 145 in file "main.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  t2              3   62[BANK0 ] float 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;		None               void
  3182 ;; Registers used:
  3183 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 300/0
  3186 ;;		On exit  : 300/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3189 ;;      Params:         0       3       0       0       0
  3190 ;;      Locals:         0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0
  3192 ;;      Totals:         0       3       0       0       0
  3193 ;;Total ram usage:        3 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    5
  3196 ;; This function calls:
  3197 ;;		_LcdSetCursor
  3198 ;;		_LcdWriteString
  3199 ;;		_sprintf
  3200 ;; This function is called by:
  3201 ;;		_main
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           
  3206                           ;psect for function _displaySoilTemp
  3207  1BB3                     _displaySoilTemp:	
  3208                           
  3209                           ;main.c: 146: sprintf(temperature, " %.1f", t2);
  3210                           
  3211                           ;incstack = 0
  3212                           ; Regs used in _displaySoilTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3213  1BB3  3045               	movlw	low (STR_2| (0+32768))
  3214  1BB4  00D4               	movwf	sprintf@f
  3215  1BB5  3099               	movlw	high (STR_2| (0+32768))
  3216  1BB6  00D5               	movwf	sprintf@f+1
  3217  1BB7  085E               	movf	displaySoilTemp@t2,w
  3218  1BB8  00D6               	movwf	?_sprintf+2
  3219  1BB9  085F               	movf	displaySoilTemp@t2+1,w
  3220  1BBA  00D7               	movwf	?_sprintf+3
  3221  1BBB  0860               	movf	displaySoilTemp@t2+2,w
  3222  1BBC  00D8               	movwf	?_sprintf+4
  3223  1BBD  30C3               	movlw	(low (_temperature| 0))& (0+255)
  3224  1BBE  120A  118A  2026  160A  158A  	fcall	_sprintf
  3225  1BC3  3001               	movlw	1
  3226                           
  3227                           ;main.c: 147: LcdSetCursor(1,1);
  3228  1BC4  01F6               	clrf	LcdSetCursor@b
  3229  1BC5  0AF6               	incf	LcdSetCursor@b,f
  3230  1BC6  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  3231                           
  3232                           ;main.c: 148: LcdWriteString("Soil temperature");
  3233  1BCB  30FF               	movlw	low (STR_12| (0+32768))
  3234  1BCC  00F7               	movwf	LcdWriteString@a
  3235  1BCD  3098               	movlw	high (STR_12| (0+32768))
  3236  1BCE  00F8               	movwf	LcdWriteString@a+1
  3237  1BCF  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  3238  1BD4  3002               	movlw	2
  3239                           
  3240                           ;main.c: 149: LcdSetCursor(2,1);
  3241  1BD5  01F6               	clrf	LcdSetCursor@b
  3242  1BD6  0AF6               	incf	LcdSetCursor@b,f
  3243  1BD7  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  3244                           
  3245                           ;main.c: 150: LcdWriteString(temperature);
  3246  1BDC  30C3               	movlw	(low (_temperature| 0))& (0+255)
  3247  1BDD  00F7               	movwf	LcdWriteString@a
  3248  1BDE  01F8               	clrf	LcdWriteString@a+1
  3249  1BDF  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  3250                           
  3251                           ;main.c: 151: LcdSetCursor(2,6);
  3252  1BE4  3006               	movlw	6
  3253  1BE5  00F6               	movwf	LcdSetCursor@b
  3254  1BE6  3002               	movlw	2
  3255  1BE7  120A  158A  26E8   	fcall	_LcdSetCursor
  3256                           
  3257                           ;main.c: 152: LcdWriteString(" deg        ");
  3258  1BEA  302B               	movlw	low (STR_4| (0+32768))
  3259  1BEB  00F7               	movwf	LcdWriteString@a
  3260  1BEC  3099               	movlw	high (STR_4| (0+32768))
  3261  1BED  00F8               	movwf	LcdWriteString@a+1
  3262  1BEE  120A  158A  2D2F   	ljmp	l5254
  3263  1BF1                     __end_of_displaySoilTemp:	
  3264                           
  3265                           	psect	text24
  3266  082E                     __ptext24:	
  3267 ;; *************** function _displayCO2 *****************
  3268 ;; Defined at:
  3269 ;;		line 129 in file "main.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  co22            2   11[BANK0 ] unsigned int 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;		None
  3274 ;; Return value:  Size  Location     Type
  3275 ;;		None               void
  3276 ;; Registers used:
  3277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 300/0
  3280 ;;		On exit  : 300/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3283 ;;      Params:         0       2       0       0       0
  3284 ;;      Locals:         0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0
  3286 ;;      Totals:         0       2       0       0       0
  3287 ;;Total ram usage:        2 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    5
  3290 ;; This function calls:
  3291 ;;		_LcdSetCursor
  3292 ;;		_LcdWriteInt
  3293 ;;		_LcdWriteString
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _displayCO2
  3301  082E                     _displayCO2:	
  3302                           
  3303                           ;incstack = 0
  3304                           ; Regs used in _displayCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3305  082E  3001               	movlw	1
  3306                           
  3307                           ;main.c: 130: LcdSetCursor(1,1);
  3308  082F  01F6               	clrf	LcdSetCursor@b
  3309  0830  0AF6               	incf	LcdSetCursor@b,f
  3310  0831  26E8  120A  158A   	fcall	_LcdSetCursor
  3311                           
  3312                           ;main.c: 131: LcdWriteString("CO2 in air      ");
  3313  0834  3099               	movlw	low (STR_8| (0+32768))
  3314  0835  00F7               	movwf	LcdWriteString@a
  3315  0836  3098               	movlw	high (STR_8| (0+32768))
  3316  0837  00F8               	movwf	LcdWriteString@a+1
  3317  0838  252F  120A  158A   	fcall	_LcdWriteString
  3318                           
  3319                           ;main.c: 132: if(measure_co2)
  3320  083B  1683               	bsf	3,5	;RP0=1, select bank1
  3321  083C  0832               	movf	_measure_co2^(0+128),w
  3322  083D  1903               	btfsc	3,2
  3323  083E  2856               	goto	l6094
  3324                           
  3325                           ;main.c: 133: {
  3326                           ;main.c: 134: LcdWriteInt(co22,2,1);
  3327  083F  1283               	bcf	3,5	;RP0=0, select bank0
  3328  0840  082C               	movf	displayCO2@co22+1,w
  3329  0841  00A5               	movwf	LcdWriteInt@i+1
  3330  0842  082B               	movf	displayCO2@co22,w
  3331  0843  00A4               	movwf	LcdWriteInt@i
  3332  0844  3002               	movlw	2
  3333  0845  00A6               	movwf	LcdWriteInt@row
  3334  0846  01A7               	clrf	LcdWriteInt@column
  3335  0847  0AA7               	incf	LcdWriteInt@column,f
  3336  0848  2634  120A  158A   	fcall	_LcdWriteInt
  3337                           
  3338                           ;main.c: 135: LcdSetCursor(2,5);
  3339  084B  3005               	movlw	5
  3340  084C  00F6               	movwf	LcdSetCursor@b
  3341  084D  3002               	movlw	2
  3342  084E  26E8  120A  158A   	fcall	_LcdSetCursor
  3343                           
  3344                           ;main.c: 136: LcdWriteString(" ppm        ");
  3345  0851  3038               	movlw	low (STR_9| (0+32768))
  3346  0852  00F7               	movwf	LcdWriteString@a
  3347  0853  3099               	movlw	high (STR_9| (0+32768))
  3348  0854  00F8               	movwf	LcdWriteString@a+1
  3349  0855  2D2F               	ljmp	l5254
  3350  0856                     l6094:	
  3351                           ;main.c: 137: }
  3352                           
  3353  0856  3002               	movlw	2
  3354                           
  3355                           ;main.c: 138: else
  3356                           ;main.c: 139: {
  3357                           ;main.c: 140: LcdSetCursor(2,1);
  3358  0857  01F6               	clrf	LcdSetCursor@b
  3359  0858  0AF6               	incf	LcdSetCursor@b,f
  3360  0859  26E8  120A  158A   	fcall	_LcdSetCursor
  3361                           
  3362                           ;main.c: 141: LcdWriteString("Measuring...    ");
  3363  085C  30AA               	movlw	low (STR_10| (0+32768))
  3364  085D  00F7               	movwf	LcdWriteString@a
  3365  085E  3098               	movlw	high (STR_10| (0+32768))
  3366  085F  00F8               	movwf	LcdWriteString@a+1
  3367  0860  2D2F               	ljmp	l5254
  3368  0861                     __end_of_displayCO2:	
  3369  0861                     __ptext21:	
  3370 ;; *************** function _calcSHT71 *****************
  3371 ;; Defined at:
  3372 ;;		line 129 in file "sht71.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  p_humidity      3   52[BANK0 ] float 
  3375 ;;  p_temperatur    1   55[BANK0 ] PTR float 
  3376 ;;		 -> getResSHT71@temp_val(3), 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  rh              3   74[BANK0 ] float 
  3379 ;;  rh_true         3   71[BANK0 ] float 
  3380 ;;  t_C             3   62[BANK0 ] float 
  3381 ;;  t               3   59[BANK0 ] float 
  3382 ;;  rh_lin          3   56[BANK0 ] float 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  3   52[BANK0 ] float 
  3385 ;; Registers used:
  3386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 300/0
  3389 ;;		On exit  : B00/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3392 ;;      Params:         0       4       0       0       0
  3393 ;;      Locals:         0      21       0       0       0
  3394 ;;      Temps:          0       0       0       0       0
  3395 ;;      Totals:         0      25       0       0       0
  3396 ;;Total ram usage:       25 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		___ftadd
  3401 ;;		___ftge
  3402 ;;		___ftmul
  3403 ;; This function is called by:
  3404 ;;		_getResSHT71
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _calcSHT71
  3410  0861                     _calcSHT71:	
  3411                           
  3412                           ;sht71.c: 130: float rh_lin;
  3413                           ;sht71.c: 131: float rh_true;
  3414                           ;sht71.c: 132: float t = *p_temperature;
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _calcSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3418  0861  0857               	movf	calcSHT71@p_temperature,w
  3419  0862  0084               	movwf	4
  3420  0863  1383               	bcf	3,7	;select IRP bank0
  3421  0864  0800               	movf	0,w
  3422  0865  00DB               	movwf	calcSHT71@t
  3423  0866  0A84               	incf	4,f
  3424  0867  0800               	movf	0,w
  3425  0868  00DC               	movwf	calcSHT71@t+1
  3426  0869  0A84               	incf	4,f
  3427  086A  0800               	movf	0,w
  3428  086B  00DD               	movwf	calcSHT71@t+2
  3429                           
  3430                           ;sht71.c: 133: float rh = p_humidity;
  3431  086C  0854               	movf	calcSHT71@p_humidity,w
  3432  086D  00EA               	movwf	calcSHT71@rh
  3433  086E  0855               	movf	calcSHT71@p_humidity+1,w
  3434  086F  00EB               	movwf	calcSHT71@rh+1
  3435  0870  0856               	movf	calcSHT71@p_humidity+2,w
  3436  0871  00EC               	movwf	calcSHT71@rh+2
  3437                           
  3438                           ;sht71.c: 134: float t_C;
  3439                           ;sht71.c: 136: t_C = t*0.01 + -40.1 - 1;
  3440  0872  3066               	movlw	102
  3441  0873  00C2               	movwf	___ftadd@f1
  3442  0874  3024               	movlw	36
  3443  0875  00C3               	movwf	___ftadd@f1+1
  3444  0876  30C2               	movlw	194
  3445  0877  00C4               	movwf	___ftadd@f1+2
  3446  0878  30D7               	movlw	215
  3447  0879  00A8               	movwf	___ftmul@f1
  3448  087A  3023               	movlw	35
  3449  087B  00A9               	movwf	___ftmul@f1+1
  3450  087C  303C               	movlw	60
  3451  087D  00AA               	movwf	___ftmul@f1+2
  3452  087E  085B               	movf	calcSHT71@t,w
  3453  087F  00AB               	movwf	___ftmul@f2
  3454  0880  085C               	movf	calcSHT71@t+1,w
  3455  0881  00AC               	movwf	___ftmul@f2+1
  3456  0882  085D               	movf	calcSHT71@t+2,w
  3457  0883  00AD               	movwf	___ftmul@f2+2
  3458  0884  160A  118A  2690  120A  158A  	fcall	___ftmul
  3459  0889  27F1  120A  158A   	fcall	PL60	;call to abstracted procedure
  3460  088C  22EE  120A  158A   	fcall	___ftadd
  3461  088F  0842               	movf	?___ftadd,w
  3462  0890  00DE               	movwf	calcSHT71@t_C
  3463  0891  0843               	movf	?___ftadd+1,w
  3464  0892  00DF               	movwf	calcSHT71@t_C+1
  3465  0893  0844               	movf	?___ftadd+2,w
  3466  0894  00E0               	movwf	calcSHT71@t_C+2
  3467                           
  3468                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  3469  0895  086A               	movf	calcSHT71@rh,w
  3470  0896  00A8               	movwf	___ftmul@f1
  3471  0897  086B               	movf	calcSHT71@rh+1,w
  3472  0898  00A9               	movwf	___ftmul@f1+1
  3473  0899  086C               	movf	calcSHT71@rh+2,w
  3474  089A  27E9               	fcall	PL58	;call to abstracted procedure
  3475  089B  160A  118A  2690  120A  158A  	fcall	___ftmul
  3476  08A0  0828               	movf	?___ftmul,w
  3477  08A1  00E1               	movwf	_calcSHT71$1143
  3478  08A2  0829               	movf	?___ftmul+1,w
  3479  08A3  00E2               	movwf	_calcSHT71$1143+1
  3480  08A4  082A               	movf	?___ftmul+2,w
  3481  08A5  00E3               	movwf	_calcSHT71$1143+2
  3482                           
  3483                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  3484  08A6  30E3               	movlw	227
  3485  08A7  00A8               	movwf	___ftmul@f1
  3486  08A8  3025               	movlw	37
  3487  08A9  00A9               	movwf	___ftmul@f1+1
  3488  08AA  303D               	movlw	61
  3489  08AB  27E9               	fcall	PL58	;call to abstracted procedure
  3490  08AC  160A  118A  2690  120A  158A  	fcall	___ftmul
  3491  08B1  0828               	movf	?___ftmul,w
  3492  08B2  00C2               	movwf	___ftadd@f1
  3493  08B3  0829               	movf	?___ftmul+1,w
  3494  08B4  00C3               	movwf	___ftadd@f1+1
  3495  08B5  082A               	movf	?___ftmul+2,w
  3496  08B6  00C4               	movwf	___ftadd@f1+2
  3497  08B7  30E8               	movlw	232
  3498  08B8  00A8               	movwf	___ftmul@f1
  3499  08B9  303B               	movlw	59
  3500  08BA  00A9               	movwf	___ftmul@f1+1
  3501  08BB  30B6               	movlw	182
  3502  08BC  00AA               	movwf	___ftmul@f1+2
  3503  08BD  0861               	movf	_calcSHT71$1143,w
  3504  08BE  00AB               	movwf	___ftmul@f2
  3505  08BF  0862               	movf	_calcSHT71$1143+1,w
  3506  08C0  00AC               	movwf	___ftmul@f2+1
  3507  08C1  0863               	movf	_calcSHT71$1143+2,w
  3508  08C2  00AD               	movwf	___ftmul@f2+2
  3509  08C3  160A  118A  2690  120A  158A  	fcall	___ftmul
  3510  08C8  27F1  120A  158A   	fcall	PL60	;call to abstracted procedure
  3511  08CB  22EE  120A  158A   	fcall	___ftadd
  3512  08CE  0842               	movf	?___ftadd,w
  3513  08CF  00E4               	movwf	_calcSHT71$1144
  3514  08D0  0843               	movf	?___ftadd+1,w
  3515  08D1  00E5               	movwf	_calcSHT71$1144+1
  3516  08D2  0844               	movf	?___ftadd+2,w
  3517  08D3  00E6               	movwf	_calcSHT71$1144+2
  3518                           
  3519                           ;sht71.c: 138: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  3520  08D4  3080               	movlw	128
  3521  08D5  01C2               	clrf	___ftadd@f1
  3522  08D6  00C3               	movwf	___ftadd@f1+1
  3523  08D7  30C0               	movlw	192
  3524  08D8  27F8  120A  158A   	fcall	PL82	;call to abstracted procedure
  3525  08DB  22EE  120A  158A   	fcall	___ftadd
  3526  08DE  0842               	movf	?___ftadd,w
  3527  08DF  00D8               	movwf	calcSHT71@rh_lin
  3528  08E0  0843               	movf	?___ftadd+1,w
  3529  08E1  00D9               	movwf	calcSHT71@rh_lin+1
  3530  08E2  0844               	movf	?___ftadd+2,w
  3531  08E3  00DA               	movwf	calcSHT71@rh_lin+2
  3532                           
  3533                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  3534  08E4  30D7               	movlw	215
  3535  08E5  00C2               	movwf	___ftadd@f1
  3536  08E6  3023               	movlw	35
  3537  08E7  00C3               	movwf	___ftadd@f1+1
  3538  08E8  303C               	movlw	60
  3539  08E9  00C4               	movwf	___ftadd@f1+2
  3540  08EA  30C6               	movlw	198
  3541  08EB  00A8               	movwf	___ftmul@f1
  3542  08EC  30A7               	movlw	167
  3543  08ED  00A9               	movwf	___ftmul@f1+1
  3544  08EE  3038               	movlw	56
  3545  08EF  27E9               	fcall	PL58	;call to abstracted procedure
  3546  08F0  160A  118A  2690  120A  158A  	fcall	___ftmul
  3547  08F5  27F1  120A  158A   	fcall	PL60	;call to abstracted procedure
  3548  08F8  22EE  120A  158A   	fcall	___ftadd
  3549  08FB  0842               	movf	?___ftadd,w
  3550  08FC  00E1               	movwf	_calcSHT71$1143
  3551  08FD  0843               	movf	?___ftadd+1,w
  3552  08FE  00E2               	movwf	_calcSHT71$1143+1
  3553  08FF  0844               	movf	?___ftadd+2,w
  3554  0900  00E3               	movwf	_calcSHT71$1143+2
  3555                           
  3556                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  3557  0901  0861               	movf	_calcSHT71$1143,w
  3558  0902  00A8               	movwf	___ftmul@f1
  3559  0903  0862               	movf	_calcSHT71$1143+1,w
  3560  0904  00A9               	movwf	___ftmul@f1+1
  3561  0905  0863               	movf	_calcSHT71$1143+2,w
  3562  0906  00AA               	movwf	___ftmul@f1+2
  3563  0907  30C8               	movlw	200
  3564  0908  01C2               	clrf	___ftadd@f1
  3565  0909  00C3               	movwf	___ftadd@f1+1
  3566  090A  30C1               	movlw	193
  3567  090B  00C4               	movwf	___ftadd@f1+2
  3568  090C  085E               	movf	calcSHT71@t_C,w
  3569  090D  00C5               	movwf	___ftadd@f2
  3570  090E  085F               	movf	calcSHT71@t_C+1,w
  3571  090F  00C6               	movwf	___ftadd@f2+1
  3572  0910  0860               	movf	calcSHT71@t_C+2,w
  3573  0911  00C7               	movwf	___ftadd@f2+2
  3574  0912  22EE               	fcall	___ftadd
  3575  0913  0842               	movf	?___ftadd,w
  3576  0914  00AB               	movwf	___ftmul@f2
  3577  0915  0843               	movf	?___ftadd+1,w
  3578  0916  00AC               	movwf	___ftmul@f2+1
  3579  0917  0844               	movf	?___ftadd+2,w
  3580  0918  00AD               	movwf	___ftmul@f2+2
  3581  0919  160A  118A  2690  120A  158A  	fcall	___ftmul
  3582  091E  0828               	movf	?___ftmul,w
  3583  091F  00E4               	movwf	_calcSHT71$1144
  3584  0920  0829               	movf	?___ftmul+1,w
  3585  0921  00E5               	movwf	_calcSHT71$1144+1
  3586  0922  082A               	movf	?___ftmul+2,w
  3587  0923  00E6               	movwf	_calcSHT71$1144+2
  3588                           
  3589                           ;sht71.c: 139: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  3590  0924  0858               	movf	calcSHT71@rh_lin,w
  3591  0925  00C2               	movwf	___ftadd@f1
  3592  0926  0859               	movf	calcSHT71@rh_lin+1,w
  3593  0927  00C3               	movwf	___ftadd@f1+1
  3594  0928  085A               	movf	calcSHT71@rh_lin+2,w
  3595  0929  27F8  120A  158A   	fcall	PL82	;call to abstracted procedure
  3596  092C  22EE               	fcall	___ftadd
  3597  092D  0842               	movf	?___ftadd,w
  3598  092E  00E7               	movwf	calcSHT71@rh_true
  3599  092F  0843               	movf	?___ftadd+1,w
  3600  0930  00E8               	movwf	calcSHT71@rh_true+1
  3601  0931  0844               	movf	?___ftadd+2,w
  3602  0932  00E9               	movwf	calcSHT71@rh_true+2
  3603                           
  3604                           ;sht71.c: 141: if(rh_true > 99) rh_true = 99;
  3605  0933  30C6               	movlw	198
  3606  0934  01CE               	clrf	___ftge@ff1
  3607  0935  00CF               	movwf	___ftge@ff1+1
  3608  0936  3042               	movlw	66
  3609  0937  00D0               	movwf	___ftge@ff1+2
  3610  0938  0867               	movf	calcSHT71@rh_true,w
  3611  0939  00D1               	movwf	___ftge@ff2
  3612  093A  0868               	movf	calcSHT71@rh_true+1,w
  3613  093B  00D2               	movwf	___ftge@ff2+1
  3614  093C  0869               	movf	calcSHT71@rh_true+2,w
  3615  093D  00D3               	movwf	___ftge@ff2+2
  3616  093E  120A  118A  25C1  120A  158A  	fcall	___ftge
  3617  0943  1803               	btfsc	3,0
  3618  0944  294A               	goto	l5840
  3619  0945  30C6               	movlw	198
  3620  0946  01E7               	clrf	calcSHT71@rh_true
  3621  0947  00E8               	movwf	calcSHT71@rh_true+1
  3622  0948  3042               	movlw	66
  3623  0949  00E9               	movwf	calcSHT71@rh_true+2
  3624  094A                     l5840:	
  3625                           
  3626                           ;sht71.c: 142: if(rh_true < 0.1) rh_true = 0.1;
  3627  094A  0867               	movf	calcSHT71@rh_true,w
  3628  094B  00CE               	movwf	___ftge@ff1
  3629  094C  0868               	movf	calcSHT71@rh_true+1,w
  3630  094D  00CF               	movwf	___ftge@ff1+1
  3631  094E  0869               	movf	calcSHT71@rh_true+2,w
  3632  094F  00D0               	movwf	___ftge@ff1+2
  3633  0950  30CD               	movlw	205
  3634  0951  00D1               	movwf	___ftge@ff2
  3635  0952  30CC               	movlw	204
  3636  0953  00D2               	movwf	___ftge@ff2+1
  3637  0954  303D               	movlw	61
  3638  0955  00D3               	movwf	___ftge@ff2+2
  3639  0956  120A  118A  25C1  120A  158A  	fcall	___ftge
  3640  095B  1803               	btfsc	3,0
  3641  095C  2963               	goto	l5844
  3642  095D  30CD               	movlw	205
  3643  095E  00E7               	movwf	calcSHT71@rh_true
  3644  095F  30CC               	movlw	204
  3645  0960  00E8               	movwf	calcSHT71@rh_true+1
  3646  0961  303D               	movlw	61
  3647  0962  00E9               	movwf	calcSHT71@rh_true+2
  3648  0963                     l5844:	
  3649                           
  3650                           ;sht71.c: 144: *p_temperature = t_C;
  3651  0963  0857               	movf	calcSHT71@p_temperature,w
  3652  0964  0084               	movwf	4
  3653  0965  085E               	movf	calcSHT71@t_C,w
  3654  0966  1383               	bcf	3,7	;select IRP bank0
  3655  0967  0080               	movwf	0
  3656  0968  0A84               	incf	4,f
  3657  0969  085F               	movf	calcSHT71@t_C+1,w
  3658  096A  0080               	movwf	0
  3659  096B  0A84               	incf	4,f
  3660  096C  0860               	movf	calcSHT71@t_C+2,w
  3661  096D  0080               	movwf	0
  3662                           
  3663                           ;sht71.c: 145: return rh_true;
  3664  096E  0867               	movf	calcSHT71@rh_true,w
  3665  096F  00D4               	movwf	?_calcSHT71
  3666  0970  0868               	movf	calcSHT71@rh_true+1,w
  3667  0971  00D5               	movwf	?_calcSHT71+1
  3668  0972  0869               	movf	calcSHT71@rh_true+2,w
  3669  0973  00D6               	movwf	?_calcSHT71+2
  3670  0974  0008               	return
  3671  0975                     __end_of_calcSHT71:	
  3672  0975                     __ptext4:	
  3673 ;; *************** function _menuHumi *****************
  3674 ;; Defined at:
  3675 ;;		line 307 in file "main.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;		None               void
  3682 ;; Registers used:
  3683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 300/0
  3686 ;;		On exit  : 300/100
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3689 ;;      Params:         0       0       0       0       0
  3690 ;;      Locals:         0       0       0       0       0
  3691 ;;      Temps:          0       2       0       0       0
  3692 ;;      Totals:         0       2       0       0       0
  3693 ;;Total ram usage:        2 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    6
  3696 ;; This function calls:
  3697 ;;		_LcdSetCursor
  3698 ;;		_LcdWriteString
  3699 ;;		___ftadd
  3700 ;;		___ftge
  3701 ;;		___ftsub
  3702 ;;		_menuCO2
  3703 ;;		_sprintf
  3704 ;; This function is called by:
  3705 ;;		_menu
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _menuHumi
  3711  0975                     _menuHumi:	
  3712                           
  3713                           ;main.c: 308: sprintf(humidity, " %.1f", zeljena_vlaznost);
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _menuHumi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3717  0975  3045               	movlw	low (STR_2| (0+32768))
  3718  0976  00D4               	movwf	sprintf@f
  3719  0977  3099               	movlw	high (STR_2| (0+32768))
  3720  0978  00D5               	movwf	sprintf@f+1
  3721  0979  1683               	bsf	3,5	;RP0=1, select bank1
  3722  097A  082A               	movf	_zeljena_vlaznost^(0+128),w
  3723  097B  1283               	bcf	3,5	;RP0=0, select bank0
  3724  097C  00D6               	movwf	?_sprintf+2
  3725  097D  1683               	bsf	3,5	;RP0=1, select bank1
  3726  097E  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  3727  097F  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0980  00D7               	movwf	?_sprintf+3
  3729  0981  1683               	bsf	3,5	;RP0=1, select bank1
  3730  0982  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  3731  0983  1283               	bcf	3,5	;RP0=0, select bank0
  3732  0984  00D8               	movwf	?_sprintf+4
  3733  0985  30B9               	movlw	(low (_humidity| 0))& (0+255)
  3734  0986  120A  118A  2026  120A  158A  	fcall	_sprintf
  3735  098B  3001               	movlw	1
  3736                           
  3737                           ;main.c: 309: LcdSetCursor(1,1);
  3738  098C  01F6               	clrf	LcdSetCursor@b
  3739  098D  0AF6               	incf	LcdSetCursor@b,f
  3740  098E  26E8  120A  158A   	fcall	_LcdSetCursor
  3741                           
  3742                           ;main.c: 310: LcdWriteString("Set air moist   ");
  3743  0991  30CC               	movlw	low (STR_18| (0+32768))
  3744  0992  00F7               	movwf	LcdWriteString@a
  3745  0993  3098               	movlw	high (STR_18| (0+32768))
  3746  0994  00F8               	movwf	LcdWriteString@a+1
  3747  0995  252F  120A  158A   	fcall	_LcdWriteString
  3748  0998  3002               	movlw	2
  3749                           
  3750                           ;main.c: 311: LcdSetCursor(2,1);
  3751  0999  01F6               	clrf	LcdSetCursor@b
  3752  099A  0AF6               	incf	LcdSetCursor@b,f
  3753  099B  26E8  120A  158A   	fcall	_LcdSetCursor
  3754                           
  3755                           ;main.c: 312: LcdWriteString(humidity);
  3756  099E  30B9               	movlw	(low (_humidity| 0))& (0+255)
  3757  099F  00F7               	movwf	LcdWriteString@a
  3758  09A0  01F8               	clrf	LcdWriteString@a+1
  3759  09A1  252F  120A  158A   	fcall	_LcdWriteString
  3760                           
  3761                           ;main.c: 313: LcdSetCursor(2,6);
  3762  09A4  3006               	movlw	6
  3763  09A5  00F6               	movwf	LcdSetCursor@b
  3764  09A6  3002               	movlw	2
  3765  09A7  26E8  120A  158A   	fcall	_LcdSetCursor
  3766                           
  3767                           ;main.c: 314: LcdWriteString("        ");
  3768  09AA  3022               	movlw	low ((STR_7+4)| (0+32768))
  3769  09AB  00F7               	movwf	LcdWriteString@a
  3770  09AC  3099               	movlw	high ((STR_7+4)| (0+32768))
  3771  09AD  00F8               	movwf	LcdWriteString@a+1
  3772  09AE  252F  120A  158A   	fcall	_LcdWriteString
  3773  09B1                     l5936:	
  3774                           ;main.c: 316: while(!ok_flag_co2)
  3775                           
  3776  09B1  1683               	bsf	3,5	;RP0=1, select bank1
  3777  09B2  0835               	movf	_ok_flag_co2^(0+128),w
  3778  09B3  1D03               	btfss	3,2
  3779  09B4  0008               	return
  3780                           
  3781                           ;main.c: 317: {
  3782                           ;main.c: 318: if(RA2)
  3783  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  3784  09B6  1D05               	btfss	5,2	;volatile
  3785  09B7  29D4               	goto	l5880
  3786                           
  3787                           ;main.c: 319: {
  3788                           ;main.c: 320: _delay((unsigned long)((20)*(8000000/4000.0)));
  3789  09B8  3034               	movlw	52
  3790  09B9  00DF               	movwf	??_menuHumi+1
  3791  09BA  30F1               	movlw	241
  3792  09BB  00DE               	movwf	??_menuHumi
  3793  09BC                     u7807:	
  3794  09BC  0BDE               	decfsz	??_menuHumi,f
  3795  09BD  29BC               	goto	u7807
  3796  09BE  0BDF               	decfsz	??_menuHumi+1,f
  3797  09BF  29BC               	goto	u7807
  3798  09C0  29C1               	nop2
  3799                           
  3800                           ;main.c: 321: if(RA2) plus_flag = 1;
  3801  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  3802  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  3803  09C3  1D05               	btfss	5,2	;volatile
  3804  09C4  29C8               	goto	l405
  3805  09C5  1683               	bsf	3,5	;RP0=1, select bank1
  3806  09C6  01B7               	clrf	_plus_flag^(0+128)
  3807  09C7  0AB7               	incf	_plus_flag^(0+128),f
  3808  09C8                     l405:	
  3809  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  3810  09C9  1905               	btfsc	5,2	;volatile
  3811  09CA  29C8               	goto	l405
  3812                           
  3813                           ;main.c: 323: _delay((unsigned long)((20)*(8000000/4000.0)));
  3814  09CB  3034               	movlw	52
  3815  09CC  00DF               	movwf	??_menuHumi+1
  3816  09CD  30F1               	movlw	241
  3817  09CE  00DE               	movwf	??_menuHumi
  3818  09CF                     u7817:	
  3819  09CF  0BDE               	decfsz	??_menuHumi,f
  3820  09D0  29CF               	goto	u7817
  3821  09D1  0BDF               	decfsz	??_menuHumi+1,f
  3822  09D2  29CF               	goto	u7817
  3823  09D3  29D4               	nop2
  3824  09D4                     l5880:	
  3825                           
  3826                           ;main.c: 324: }
  3827                           ;main.c: 326: if(RA3)
  3828  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  3829  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  3830  09D6  1D85               	btfss	5,3	;volatile
  3831  09D7  29F4               	goto	l5890
  3832                           
  3833                           ;main.c: 327: {
  3834                           ;main.c: 328: _delay((unsigned long)((20)*(8000000/4000.0)));
  3835  09D8  3034               	movlw	52
  3836  09D9  00DF               	movwf	??_menuHumi+1
  3837  09DA  30F1               	movlw	241
  3838  09DB  00DE               	movwf	??_menuHumi
  3839  09DC                     u7827:	
  3840  09DC  0BDE               	decfsz	??_menuHumi,f
  3841  09DD  29DC               	goto	u7827
  3842  09DE  0BDF               	decfsz	??_menuHumi+1,f
  3843  09DF  29DC               	goto	u7827
  3844  09E0  29E1               	nop2
  3845                           
  3846                           ;main.c: 329: if(RA3) minus_flag = 1;
  3847  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  3848  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  3849  09E3  1D85               	btfss	5,3	;volatile
  3850  09E4  29E8               	goto	l410
  3851  09E5  1683               	bsf	3,5	;RP0=1, select bank1
  3852  09E6  01B4               	clrf	_minus_flag^(0+128)
  3853  09E7  0AB4               	incf	_minus_flag^(0+128),f
  3854  09E8                     l410:	
  3855  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  3856  09E9  1985               	btfsc	5,3	;volatile
  3857  09EA  29E8               	goto	l410
  3858                           
  3859                           ;main.c: 331: _delay((unsigned long)((20)*(8000000/4000.0)));
  3860  09EB  3034               	movlw	52
  3861  09EC  00DF               	movwf	??_menuHumi+1
  3862  09ED  30F1               	movlw	241
  3863  09EE  00DE               	movwf	??_menuHumi
  3864  09EF                     u7837:	
  3865  09EF  0BDE               	decfsz	??_menuHumi,f
  3866  09F0  29EF               	goto	u7837
  3867  09F1  0BDF               	decfsz	??_menuHumi+1,f
  3868  09F2  29EF               	goto	u7837
  3869  09F3  29F4               	nop2
  3870  09F4                     l5890:	
  3871                           
  3872                           ;main.c: 332: }
  3873                           ;main.c: 334: if(plus_flag)
  3874  09F4  1683               	bsf	3,5	;RP0=1, select bank1
  3875  09F5  1303               	bcf	3,6	;RP1=0, select bank1
  3876  09F6  0837               	movf	_plus_flag^(0+128),w
  3877  09F7  1903               	btfsc	3,2
  3878  09F8  2A5B               	goto	l5904
  3879                           
  3880                           ;main.c: 335: {
  3881                           ;main.c: 336: zeljena_vlaznost += 1;
  3882  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  3883  09FA  3080               	movlw	128
  3884  09FB  01C2               	clrf	___ftadd@f1
  3885  09FC  00C3               	movwf	___ftadd@f1+1
  3886  09FD  303F               	movlw	63
  3887  09FE  00C4               	movwf	___ftadd@f1+2
  3888  09FF  1683               	bsf	3,5	;RP0=1, select bank1
  3889  0A00  082A               	movf	_zeljena_vlaznost^(0+128),w
  3890  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  3891  0A02  00C5               	movwf	___ftadd@f2
  3892  0A03  1683               	bsf	3,5	;RP0=1, select bank1
  3893  0A04  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  3894  0A05  1283               	bcf	3,5	;RP0=0, select bank0
  3895  0A06  00C6               	movwf	___ftadd@f2+1
  3896  0A07  1683               	bsf	3,5	;RP0=1, select bank1
  3897  0A08  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  3898  0A09  1283               	bcf	3,5	;RP0=0, select bank0
  3899  0A0A  00C7               	movwf	___ftadd@f2+2
  3900  0A0B  22EE               	fcall	___ftadd
  3901  0A0C  0842               	movf	?___ftadd,w
  3902  0A0D  1683               	bsf	3,5	;RP0=1, select bank1
  3903  0A0E  00AA               	movwf	_zeljena_vlaznost^(0+128)
  3904  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  3905  0A10  0843               	movf	?___ftadd+1,w
  3906  0A11  1683               	bsf	3,5	;RP0=1, select bank1
  3907  0A12  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  3908  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  3909  0A14  0844               	movf	?___ftadd+2,w
  3910  0A15  1683               	bsf	3,5	;RP0=1, select bank1
  3911  0A16  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  3912                           
  3913                           ;main.c: 337: if(zeljena_vlaznost > 99) zeljena_vlaznost = 99;
  3914  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  3915  0A18  30C6               	movlw	198
  3916  0A19  01CE               	clrf	___ftge@ff1
  3917  0A1A  00CF               	movwf	___ftge@ff1+1
  3918  0A1B  3042               	movlw	66
  3919  0A1C  00D0               	movwf	___ftge@ff1+2
  3920  0A1D  1683               	bsf	3,5	;RP0=1, select bank1
  3921  0A1E  082A               	movf	_zeljena_vlaznost^(0+128),w
  3922  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  3923  0A20  00D1               	movwf	___ftge@ff2
  3924  0A21  1683               	bsf	3,5	;RP0=1, select bank1
  3925  0A22  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  3926  0A23  1283               	bcf	3,5	;RP0=0, select bank0
  3927  0A24  00D2               	movwf	___ftge@ff2+1
  3928  0A25  1683               	bsf	3,5	;RP0=1, select bank1
  3929  0A26  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  3930  0A27  1283               	bcf	3,5	;RP0=0, select bank0
  3931  0A28  00D3               	movwf	___ftge@ff2+2
  3932  0A29  120A  118A  25C1  120A  158A  	fcall	___ftge
  3933  0A2E  1803               	btfsc	3,0
  3934  0A2F  2A36               	goto	l5896
  3935  0A30  1683               	bsf	3,5	;RP0=1, select bank1
  3936  0A31  30C6               	movlw	198
  3937  0A32  01AA               	clrf	_zeljena_vlaznost^(0+128)
  3938  0A33  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  3939  0A34  3042               	movlw	66
  3940  0A35  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  3941  0A36                     l5896:	
  3942                           
  3943                           ;main.c: 338: plus_flag = 0;
  3944  0A36  1683               	bsf	3,5	;RP0=1, select bank1
  3945  0A37  3045               	movlw	low (STR_2| (0+32768))
  3946  0A38  01B7               	clrf	_plus_flag^(0+128)
  3947                           
  3948                           ;main.c: 340: sprintf(humidity, " %.1f", zeljena_vlaznost);
  3949  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  3950  0A3A  00D4               	movwf	sprintf@f
  3951  0A3B  3099               	movlw	high (STR_2| (0+32768))
  3952  0A3C  00D5               	movwf	sprintf@f+1
  3953  0A3D  1683               	bsf	3,5	;RP0=1, select bank1
  3954  0A3E  082A               	movf	_zeljena_vlaznost^(0+128),w
  3955  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  3956  0A40  00D6               	movwf	?_sprintf+2
  3957  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  3958  0A42  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  3959  0A43  1283               	bcf	3,5	;RP0=0, select bank0
  3960  0A44  00D7               	movwf	?_sprintf+3
  3961  0A45  1683               	bsf	3,5	;RP0=1, select bank1
  3962  0A46  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  3963  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0A48  00D8               	movwf	?_sprintf+4
  3965  0A49  30B9               	movlw	(low (_humidity| 0))& (0+255)
  3966  0A4A  120A  118A  2026  120A  158A  	fcall	_sprintf
  3967  0A4F  3002               	movlw	2
  3968                           
  3969                           ;main.c: 341: LcdSetCursor(2,1);
  3970  0A50  01F6               	clrf	LcdSetCursor@b
  3971  0A51  0AF6               	incf	LcdSetCursor@b,f
  3972  0A52  26E8  120A  158A   	fcall	_LcdSetCursor
  3973                           
  3974                           ;main.c: 342: LcdWriteString(humidity);
  3975  0A55  30B9               	movlw	(low (_humidity| 0))& (0+255)
  3976  0A56  00F7               	movwf	LcdWriteString@a
  3977  0A57  01F8               	clrf	LcdWriteString@a+1
  3978  0A58  252F  120A  158A   	fcall	_LcdWriteString
  3979  0A5B                     l5904:	
  3980                           
  3981                           ;main.c: 343: }
  3982                           ;main.c: 345: if(minus_flag)
  3983  0A5B  1683               	bsf	3,5	;RP0=1, select bank1
  3984  0A5C  0834               	movf	_minus_flag^(0+128),w
  3985  0A5D  1903               	btfsc	3,2
  3986  0A5E  2AC4               	goto	l5918
  3987                           
  3988                           ;main.c: 346: {
  3989                           ;main.c: 347: zeljena_vlaznost -= 1;
  3990  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  3991  0A60  3080               	movlw	128
  3992  0A61  01CE               	clrf	___ftsub@f2
  3993  0A62  00CF               	movwf	___ftsub@f2+1
  3994  0A63  303F               	movlw	63
  3995  0A64  00D0               	movwf	___ftsub@f2+2
  3996  0A65  1683               	bsf	3,5	;RP0=1, select bank1
  3997  0A66  082A               	movf	_zeljena_vlaznost^(0+128),w
  3998  0A67  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0A68  00D1               	movwf	___ftsub@f1
  4000  0A69  1683               	bsf	3,5	;RP0=1, select bank1
  4001  0A6A  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4002  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0A6C  00D2               	movwf	___ftsub@f1+1
  4004  0A6D  1683               	bsf	3,5	;RP0=1, select bank1
  4005  0A6E  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4006  0A6F  1283               	bcf	3,5	;RP0=0, select bank0
  4007  0A70  00D3               	movwf	___ftsub@f1+2
  4008  0A71  120A  118A  26A3  120A  158A  	fcall	___ftsub
  4009  0A76  084E               	movf	?___ftsub,w
  4010  0A77  1683               	bsf	3,5	;RP0=1, select bank1
  4011  0A78  00AA               	movwf	_zeljena_vlaznost^(0+128)
  4012  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0A7A  084F               	movf	?___ftsub+1,w
  4014  0A7B  1683               	bsf	3,5	;RP0=1, select bank1
  4015  0A7C  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4016  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0A7E  0850               	movf	?___ftsub+2,w
  4018  0A7F  1683               	bsf	3,5	;RP0=1, select bank1
  4019  0A80  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4020                           
  4021                           ;main.c: 348: if(zeljena_vlaznost < 30) zeljena_vlaznost = 30;
  4022  0A81  082A               	movf	_zeljena_vlaznost^(0+128),w
  4023  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  4024  0A83  00CE               	movwf	___ftge@ff1
  4025  0A84  1683               	bsf	3,5	;RP0=1, select bank1
  4026  0A85  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4027  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0A87  00CF               	movwf	___ftge@ff1+1
  4029  0A88  1683               	bsf	3,5	;RP0=1, select bank1
  4030  0A89  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4031  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
  4032  0A8B  00D0               	movwf	___ftge@ff1+2
  4033  0A8C  30F0               	movlw	240
  4034  0A8D  01D1               	clrf	___ftge@ff2
  4035  0A8E  00D2               	movwf	___ftge@ff2+1
  4036  0A8F  3041               	movlw	65
  4037  0A90  00D3               	movwf	___ftge@ff2+2
  4038  0A91  120A  118A  25C1  120A  158A  	fcall	___ftge
  4039  0A96  1803               	btfsc	3,0
  4040  0A97  2A9E               	goto	l5910
  4041  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  4042  0A99  30F0               	movlw	240
  4043  0A9A  01AA               	clrf	_zeljena_vlaznost^(0+128)
  4044  0A9B  00AB               	movwf	(_zeljena_vlaznost+1)^(0+128)
  4045  0A9C  3041               	movlw	65
  4046  0A9D  00AC               	movwf	(_zeljena_vlaznost+2)^(0+128)
  4047  0A9E                     l5910:	
  4048                           
  4049                           ;main.c: 349: minus_flag = 0;
  4050  0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  4051  0A9F  3045               	movlw	low (STR_2| (0+32768))
  4052  0AA0  01B4               	clrf	_minus_flag^(0+128)
  4053                           
  4054                           ;main.c: 351: sprintf(humidity, " %.1f", zeljena_vlaznost);
  4055  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  4056  0AA2  00D4               	movwf	sprintf@f
  4057  0AA3  3099               	movlw	high (STR_2| (0+32768))
  4058  0AA4  00D5               	movwf	sprintf@f+1
  4059  0AA5  1683               	bsf	3,5	;RP0=1, select bank1
  4060  0AA6  082A               	movf	_zeljena_vlaznost^(0+128),w
  4061  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  4062  0AA8  00D6               	movwf	?_sprintf+2
  4063  0AA9  1683               	bsf	3,5	;RP0=1, select bank1
  4064  0AAA  082B               	movf	(_zeljena_vlaznost+1)^(0+128),w
  4065  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0AAC  00D7               	movwf	?_sprintf+3
  4067  0AAD  1683               	bsf	3,5	;RP0=1, select bank1
  4068  0AAE  082C               	movf	(_zeljena_vlaznost+2)^(0+128),w
  4069  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0AB0  00D8               	movwf	?_sprintf+4
  4071  0AB1  30B9               	movlw	(low (_humidity| 0))& (0+255)
  4072  0AB2  120A  118A  2026  120A  158A  	fcall	_sprintf
  4073  0AB7  3002               	movlw	2
  4074                           
  4075                           ;main.c: 352: LcdSetCursor(2,1);
  4076  0AB8  01F6               	clrf	LcdSetCursor@b
  4077  0AB9  0AF6               	incf	LcdSetCursor@b,f
  4078  0ABA  26E8  120A  158A   	fcall	_LcdSetCursor
  4079                           
  4080                           ;main.c: 353: LcdWriteString(humidity);
  4081  0ABD  30B9               	movlw	(low (_humidity| 0))& (0+255)
  4082  0ABE  00F7               	movwf	LcdWriteString@a
  4083  0ABF  3000               	movlw	0
  4084  0AC0  00F8               	movwf	LcdWriteString@a+1
  4085  0AC1  252F  120A  158A   	fcall	_LcdWriteString
  4086  0AC4                     l5918:	
  4087                           
  4088                           ;main.c: 354: }
  4089                           ;main.c: 356: if(RA1)
  4090  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  4091  0AC5  1C85               	btfss	5,1	;volatile
  4092  0AC6  2AE1               	goto	l5928
  4093                           
  4094                           ;main.c: 357: {
  4095                           ;main.c: 358: _delay((unsigned long)((20)*(8000000/4000.0)));
  4096  0AC7  3034               	movlw	52
  4097  0AC8  00DF               	movwf	??_menuHumi+1
  4098  0AC9  30F1               	movlw	241
  4099  0ACA  00DE               	movwf	??_menuHumi
  4100  0ACB                     u7847:	
  4101  0ACB  0BDE               	decfsz	??_menuHumi,f
  4102  0ACC  2ACB               	goto	u7847
  4103  0ACD  0BDF               	decfsz	??_menuHumi+1,f
  4104  0ACE  2ACB               	goto	u7847
  4105  0ACF  2AD0               	nop2
  4106                           
  4107                           ;main.c: 359: if(RA1) ok_flag = 1;
  4108  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
  4109  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
  4110  0AD2  1C85               	btfss	5,1	;volatile
  4111  0AD3  2AD6               	goto	l419
  4112  0AD4  01EE               	clrf	_ok_flag
  4113  0AD5  0AEE               	incf	_ok_flag,f
  4114  0AD6                     l419:	
  4115  0AD6  1885               	btfsc	5,1	;volatile
  4116  0AD7  2AD6               	goto	l419
  4117                           
  4118                           ;main.c: 361: _delay((unsigned long)((20)*(8000000/4000.0)));
  4119  0AD8  3034               	movlw	52
  4120  0AD9  00DF               	movwf	??_menuHumi+1
  4121  0ADA  30F1               	movlw	241
  4122  0ADB  00DE               	movwf	??_menuHumi
  4123  0ADC                     u7857:	
  4124  0ADC  0BDE               	decfsz	??_menuHumi,f
  4125  0ADD  2ADC               	goto	u7857
  4126  0ADE  0BDF               	decfsz	??_menuHumi+1,f
  4127  0ADF  2ADC               	goto	u7857
  4128  0AE0  2AE1               	nop2
  4129  0AE1                     l5928:	
  4130                           
  4131                           ;main.c: 362: }
  4132                           ;main.c: 363: if(ok_flag)
  4133  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  4134  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  4135  0AE3  086E               	movf	_ok_flag,w
  4136  0AE4  1903               	btfsc	3,2
  4137  0AE5  29B1               	goto	l5936
  4138                           
  4139                           ;main.c: 364: {
  4140                           ;main.c: 365: ok_flag = 0;
  4141  0AE6  01EE               	clrf	_ok_flag
  4142                           
  4143                           ;main.c: 366: ok_flag_humi = 1;
  4144  0AE7  1683               	bsf	3,5	;RP0=1, select bank1
  4145  0AE8  01B6               	clrf	_ok_flag_humi^(0+128)
  4146  0AE9  0AB6               	incf	_ok_flag_humi^(0+128),f
  4147                           
  4148                           ;main.c: 367: menuCO2();
  4149  0AEA  2547  120A  158A   	fcall	_menuCO2
  4150  0AED  29B1               	goto	l5936
  4151  0AEE                     __end_of_menuHumi:	
  4152  0AEE                     __ptext46:	
  4153 ;; *************** function ___ftadd *****************
  4154 ;; Defined at:
  4155 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftadd.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  f1              3   34[BANK0 ] float 
  4158 ;;  f2              3   37[BANK0 ] float 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  exp1            1   45[BANK0 ] unsigned char 
  4161 ;;  exp2            1   44[BANK0 ] unsigned char 
  4162 ;;  sign            1   43[BANK0 ] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  3   34[BANK0 ] float 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0, pclath, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 300/0
  4169 ;;		On exit  : 300/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4172 ;;      Params:         0       6       0       0       0
  4173 ;;      Locals:         0       3       0       0       0
  4174 ;;      Temps:          0       3       0       0       0
  4175 ;;      Totals:         0      12       0       0       0
  4176 ;;Total ram usage:       12 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    2
  4179 ;; This function calls:
  4180 ;;		___ftpack
  4181 ;; This function is called by:
  4182 ;;		_getTempDS18B20
  4183 ;;		_calcSHT71
  4184 ;;		_regulacija
  4185 ;;		_menuHumi
  4186 ;;		_menu
  4187 ;;		_sprintf
  4188 ;;		___ftsub
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function ___ftadd
  4194  0AEE                     ___ftadd:	
  4195                           
  4196                           ;incstack = 0
  4197                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4198  0AEE  0842               	movf	___ftadd@f1,w
  4199  0AEF  00C8               	movwf	??___ftadd
  4200  0AF0  0843               	movf	___ftadd@f1+1,w
  4201  0AF1  00C9               	movwf	??___ftadd+1
  4202  0AF2  0844               	movf	___ftadd@f1+2,w
  4203  0AF3  00CA               	movwf	??___ftadd+2
  4204  0AF4  1003               	clrc
  4205  0AF5  0D49               	rlf	??___ftadd+1,w
  4206  0AF6  0D4A               	rlf	??___ftadd+2,w
  4207  0AF7  00CD               	movwf	___ftadd@exp1
  4208  0AF8  0845               	movf	___ftadd@f2,w
  4209  0AF9  00C8               	movwf	??___ftadd
  4210  0AFA  0846               	movf	___ftadd@f2+1,w
  4211  0AFB  00C9               	movwf	??___ftadd+1
  4212  0AFC  0847               	movf	___ftadd@f2+2,w
  4213  0AFD  00CA               	movwf	??___ftadd+2
  4214  0AFE  1003               	clrc
  4215  0AFF  0D49               	rlf	??___ftadd+1,w
  4216  0B00  0D4A               	rlf	??___ftadd+2,w
  4217  0B01  00CC               	movwf	___ftadd@exp2
  4218  0B02  084D               	movf	___ftadd@exp1,w
  4219  0B03  1903               	btfsc	3,2
  4220  0B04  2B11               	goto	l5108
  4221  0B05  084C               	movf	___ftadd@exp2,w
  4222  0B06  024D               	subwf	___ftadd@exp1,w
  4223  0B07  084C               	movf	___ftadd@exp2,w
  4224  0B08  1803               	skipnc
  4225  0B09  2B19               	goto	L29
  4226  0B0A  00C8               	movwf	??___ftadd
  4227  0B0B  084D               	movf	___ftadd@exp1,w
  4228  0B0C  02C8               	subwf	??___ftadd,f
  4229  0B0D  3019               	movlw	25
  4230  0B0E  0248               	subwf	??___ftadd,w
  4231  0B0F  1C03               	skipc
  4232  0B10  2B18               	goto	l5112
  4233  0B11                     l5108:	
  4234  0B11  0845               	movf	___ftadd@f2,w
  4235  0B12  00C2               	movwf	?___ftadd
  4236  0B13  0846               	movf	___ftadd@f2+1,w
  4237  0B14  00C3               	movwf	?___ftadd+1
  4238  0B15  0847               	movf	___ftadd@f2+2,w
  4239  0B16  00C4               	movwf	?___ftadd+2
  4240  0B17  0008               	return
  4241  0B18                     l5112:	
  4242  0B18  084C               	movf	___ftadd@exp2,w
  4243  0B19                     L29:	
  4244  0B19  1903               	btfsc	3,2
  4245  0B1A  0008               	return
  4246  0B1B  084D               	movf	___ftadd@exp1,w
  4247  0B1C  024C               	subwf	___ftadd@exp2,w
  4248  0B1D  1803               	skipnc
  4249  0B1E  2B27               	goto	l5118
  4250  0B1F  084D               	movf	___ftadd@exp1,w
  4251  0B20  00C8               	movwf	??___ftadd
  4252  0B21  084C               	movf	___ftadd@exp2,w
  4253  0B22  02C8               	subwf	??___ftadd,f
  4254  0B23  3019               	movlw	25
  4255  0B24  0248               	subwf	??___ftadd,w
  4256  0B25  1803               	btfsc	3,0
  4257  0B26  0008               	return
  4258  0B27                     l5118:	
  4259  0B27  3006               	movlw	6
  4260  0B28  00CB               	movwf	___ftadd@sign
  4261  0B29  1BC4               	btfsc	___ftadd@f1+2,7
  4262  0B2A  17CB               	bsf	___ftadd@sign,7
  4263  0B2B  1BC7               	btfsc	___ftadd@f2+2,7
  4264  0B2C  174B               	bsf	___ftadd@sign,6
  4265  0B2D  17C3               	bsf	___ftadd@f1+1,7
  4266  0B2E  01C4               	clrf	___ftadd@f1+2
  4267  0B2F  17C6               	bsf	___ftadd@f2+1,7
  4268  0B30  01C7               	clrf	___ftadd@f2+2
  4269  0B31  084C               	movf	___ftadd@exp2,w
  4270  0B32  024D               	subwf	___ftadd@exp1,w
  4271  0B33  1803               	skipnc
  4272  0B34  2B4E               	goto	l5140
  4273  0B35                     l5130:	
  4274  0B35  1003               	clrc
  4275  0B36  0DC5               	rlf	___ftadd@f2,f
  4276  0B37  0DC6               	rlf	___ftadd@f2+1,f
  4277  0B38  0DC7               	rlf	___ftadd@f2+2,f
  4278  0B39  03CC               	decf	___ftadd@exp2,f
  4279  0B3A  084C               	movf	___ftadd@exp2,w
  4280  0B3B  064D               	xorwf	___ftadd@exp1,w
  4281  0B3C  1903               	skipnz
  4282  0B3D  2B49               	goto	l5138
  4283  0B3E  03CB               	decf	___ftadd@sign,f
  4284  0B3F  084B               	movf	___ftadd@sign,w
  4285  0B40  3907               	andlw	7
  4286  0B41  1903               	btfsc	3,2
  4287  0B42  2B49               	goto	l5138
  4288  0B43  2B35               	goto	l5130
  4289  0B44                     l5136:	
  4290  0B44  1003               	clrc
  4291  0B45  0CC4               	rrf	___ftadd@f1+2,f
  4292  0B46  0CC3               	rrf	___ftadd@f1+1,f
  4293  0B47  0CC2               	rrf	___ftadd@f1,f
  4294  0B48  0ACD               	incf	___ftadd@exp1,f
  4295  0B49                     l5138:	
  4296  0B49  084D               	movf	___ftadd@exp1,w
  4297  0B4A  064C               	xorwf	___ftadd@exp2,w
  4298  0B4B  1903               	btfsc	3,2
  4299  0B4C  2B6A               	goto	l936
  4300  0B4D  2B44               	goto	l5136
  4301  0B4E                     l5140:	
  4302  0B4E  084D               	movf	___ftadd@exp1,w
  4303  0B4F  024C               	subwf	___ftadd@exp2,w
  4304  0B50  1803               	skipnc
  4305  0B51  2B6A               	goto	l936
  4306  0B52                     l5142:	
  4307  0B52  1003               	clrc
  4308  0B53  0DC2               	rlf	___ftadd@f1,f
  4309  0B54  0DC3               	rlf	___ftadd@f1+1,f
  4310  0B55  0DC4               	rlf	___ftadd@f1+2,f
  4311  0B56  03CD               	decf	___ftadd@exp1,f
  4312  0B57  084C               	movf	___ftadd@exp2,w
  4313  0B58  064D               	xorwf	___ftadd@exp1,w
  4314  0B59  1903               	skipnz
  4315  0B5A  2B66               	goto	l5150
  4316  0B5B  03CB               	decf	___ftadd@sign,f
  4317  0B5C  084B               	movf	___ftadd@sign,w
  4318  0B5D  3907               	andlw	7
  4319  0B5E  1903               	btfsc	3,2
  4320  0B5F  2B66               	goto	l5150
  4321  0B60  2B52               	goto	l5142
  4322  0B61                     l5148:	
  4323  0B61  1003               	clrc
  4324  0B62  0CC7               	rrf	___ftadd@f2+2,f
  4325  0B63  0CC6               	rrf	___ftadd@f2+1,f
  4326  0B64  0CC5               	rrf	___ftadd@f2,f
  4327  0B65  0ACC               	incf	___ftadd@exp2,f
  4328  0B66                     l5150:	
  4329  0B66  084D               	movf	___ftadd@exp1,w
  4330  0B67  064C               	xorwf	___ftadd@exp2,w
  4331  0B68  1D03               	skipz
  4332  0B69  2B61               	goto	l5148
  4333  0B6A                     l936:	
  4334  0B6A  1FCB               	btfss	___ftadd@sign,7
  4335  0B6B  2B75               	goto	l5156
  4336  0B6C  30FF               	movlw	255
  4337  0B6D  06C2               	xorwf	___ftadd@f1,f
  4338  0B6E  06C3               	xorwf	___ftadd@f1+1,f
  4339  0B6F  06C4               	xorwf	___ftadd@f1+2,f
  4340  0B70  0AC2               	incf	___ftadd@f1,f
  4341  0B71  1903               	skipnz
  4342  0B72  0AC3               	incf	___ftadd@f1+1,f
  4343  0B73  1903               	skipnz
  4344  0B74  0AC4               	incf	___ftadd@f1+2,f
  4345  0B75                     l5156:	
  4346  0B75  1F4B               	btfss	___ftadd@sign,6
  4347  0B76  2B80               	goto	l5162
  4348  0B77  30FF               	movlw	255
  4349  0B78  06C5               	xorwf	___ftadd@f2,f
  4350  0B79  06C6               	xorwf	___ftadd@f2+1,f
  4351  0B7A  06C7               	xorwf	___ftadd@f2+2,f
  4352  0B7B  0AC5               	incf	___ftadd@f2,f
  4353  0B7C  1903               	skipnz
  4354  0B7D  0AC6               	incf	___ftadd@f2+1,f
  4355  0B7E  1903               	skipnz
  4356  0B7F  0AC7               	incf	___ftadd@f2+2,f
  4357  0B80                     l5162:	
  4358  0B80  01CB               	clrf	___ftadd@sign
  4359  0B81  0842               	movf	___ftadd@f1,w
  4360  0B82  07C5               	addwf	___ftadd@f2,f
  4361  0B83  0843               	movf	___ftadd@f1+1,w
  4362  0B84  1103               	clrz
  4363  0B85  1803               	skipnc
  4364  0B86  0A43               	incf	___ftadd@f1+1,w
  4365  0B87  1D03               	btfss	3,2
  4366  0B88  07C6               	addwf	___ftadd@f2+1,f
  4367  0B89  0844               	movf	___ftadd@f1+2,w
  4368  0B8A  1103               	clrz
  4369  0B8B  1803               	skipnc
  4370  0B8C  0A44               	incf	___ftadd@f1+2,w
  4371  0B8D  1D03               	btfss	3,2
  4372  0B8E  07C7               	addwf	___ftadd@f2+2,f
  4373  0B8F  1FC7               	btfss	___ftadd@f2+2,7
  4374  0B90  2B9C               	goto	l5174
  4375  0B91  30FF               	movlw	255
  4376  0B92  06C5               	xorwf	___ftadd@f2,f
  4377  0B93  06C6               	xorwf	___ftadd@f2+1,f
  4378  0B94  06C7               	xorwf	___ftadd@f2+2,f
  4379  0B95  0AC5               	incf	___ftadd@f2,f
  4380  0B96  1903               	skipnz
  4381  0B97  0AC6               	incf	___ftadd@f2+1,f
  4382  0B98  1903               	skipnz
  4383  0B99  0AC7               	incf	___ftadd@f2+2,f
  4384  0B9A  01CB               	clrf	___ftadd@sign
  4385  0B9B  0ACB               	incf	___ftadd@sign,f
  4386  0B9C                     l5174:	
  4387  0B9C  0845               	movf	___ftadd@f2,w
  4388  0B9D  00F2               	movwf	___ftpack@arg
  4389  0B9E  0846               	movf	___ftadd@f2+1,w
  4390  0B9F  00F3               	movwf	___ftpack@arg+1
  4391  0BA0  0847               	movf	___ftadd@f2+2,w
  4392  0BA1  00F4               	movwf	___ftpack@arg+2
  4393  0BA2  084D               	movf	___ftadd@exp1,w
  4394  0BA3  00F5               	movwf	___ftpack@exp
  4395  0BA4  084B               	movf	___ftadd@sign,w
  4396  0BA5  00F6               	movwf	___ftpack@sign
  4397  0BA6  160A  118A  270B   	fcall	___ftpack
  4398  0BA9  0872               	movf	?___ftpack,w
  4399  0BAA  00C2               	movwf	?___ftadd
  4400  0BAB  0873               	movf	?___ftpack+1,w
  4401  0BAC  00C3               	movwf	?___ftadd+1
  4402  0BAD  0874               	movf	?___ftpack+2,w
  4403  0BAE  00C4               	movwf	?___ftadd+2
  4404  0BAF  0008               	return
  4405  0BB0                     __end_of___ftadd:	
  4406  0BB0                     __ptext3:	
  4407 ;; *************** function _menu *****************
  4408 ;; Defined at:
  4409 ;;		line 373 in file "main.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;		None
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;		None
  4414 ;; Return value:  Size  Location     Type
  4415 ;;		None               void
  4416 ;; Registers used:
  4417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 300/100
  4420 ;;		On exit  : 300/100
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4423 ;;      Params:         0       0       0       0       0
  4424 ;;      Locals:         0       0       0       0       0
  4425 ;;      Temps:          0       2       0       0       0
  4426 ;;      Totals:         0       2       0       0       0
  4427 ;;Total ram usage:        2 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    7
  4430 ;; This function calls:
  4431 ;;		_LcdSetCursor
  4432 ;;		_LcdWriteString
  4433 ;;		___ftadd
  4434 ;;		___ftge
  4435 ;;		___ftsub
  4436 ;;		_menuHumi
  4437 ;;		_sprintf
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _menu
  4445  0BB0                     _menu:	
  4446                           
  4447                           ;main.c: 375: sprintf(temperature, " %.1f", zeljena_temperatura);
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4451  0BB0  3045               	movlw	low (STR_2| (0+32768))
  4452  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0BB2  00D4               	movwf	sprintf@f
  4454  0BB3  3099               	movlw	high (STR_2| (0+32768))
  4455  0BB4  00D5               	movwf	sprintf@f+1
  4456  0BB5  1683               	bsf	3,5	;RP0=1, select bank1
  4457  0BB6  0827               	movf	_zeljena_temperatura^(0+128),w
  4458  0BB7  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0BB8  00D6               	movwf	?_sprintf+2
  4460  0BB9  1683               	bsf	3,5	;RP0=1, select bank1
  4461  0BBA  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4462  0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  4463  0BBC  00D7               	movwf	?_sprintf+3
  4464  0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  4465  0BBE  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4466  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0BC0  00D8               	movwf	?_sprintf+4
  4468  0BC1  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4469  0BC2  120A  118A  2026  120A  158A  	fcall	_sprintf
  4470  0BC7  3001               	movlw	1
  4471                           
  4472                           ;main.c: 376: LcdSetCursor(1,1);
  4473  0BC8  01F6               	clrf	LcdSetCursor@b
  4474  0BC9  0AF6               	incf	LcdSetCursor@b,f
  4475  0BCA  26E8  120A  158A   	fcall	_LcdSetCursor
  4476                           
  4477                           ;main.c: 377: LcdWriteString("Set air temp.   ");
  4478  0BCD  30BB               	movlw	low (STR_23| (0+32768))
  4479  0BCE  00F7               	movwf	LcdWriteString@a
  4480  0BCF  3098               	movlw	high (STR_23| (0+32768))
  4481  0BD0  00F8               	movwf	LcdWriteString@a+1
  4482  0BD1  252F  120A  158A   	fcall	_LcdWriteString
  4483  0BD4  3002               	movlw	2
  4484                           
  4485                           ;main.c: 378: LcdSetCursor(2,1);
  4486  0BD5  01F6               	clrf	LcdSetCursor@b
  4487  0BD6  0AF6               	incf	LcdSetCursor@b,f
  4488  0BD7  26E8  120A  158A   	fcall	_LcdSetCursor
  4489                           
  4490                           ;main.c: 379: LcdWriteString(temperature);
  4491  0BDA  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4492  0BDB  00F7               	movwf	LcdWriteString@a
  4493  0BDC  01F8               	clrf	LcdWriteString@a+1
  4494  0BDD  252F  120A  158A   	fcall	_LcdWriteString
  4495                           
  4496                           ;main.c: 380: LcdSetCursor(2,6);
  4497  0BE0  3006               	movlw	6
  4498  0BE1  00F6               	movwf	LcdSetCursor@b
  4499  0BE2  3002               	movlw	2
  4500  0BE3  26E8  120A  158A   	fcall	_LcdSetCursor
  4501                           
  4502                           ;main.c: 381: LcdWriteString("         ");
  4503  0BE6  3021               	movlw	low ((STR_7+3)| (0+32768))
  4504  0BE7  00F7               	movwf	LcdWriteString@a
  4505  0BE8  3099               	movlw	high ((STR_7+3)| (0+32768))
  4506  0BE9  00F8               	movwf	LcdWriteString@a+1
  4507  0BEA  252F  120A  158A   	fcall	_LcdWriteString
  4508  0BED                     l6218:	
  4509                           ;main.c: 383: while(!ok_flag_humi)
  4510                           
  4511  0BED  1683               	bsf	3,5	;RP0=1, select bank1
  4512  0BEE  0836               	movf	_ok_flag_humi^(0+128),w
  4513  0BEF  1D03               	btfss	3,2
  4514  0BF0  2D29               	goto	l6220
  4515                           
  4516                           ;main.c: 384: {
  4517                           ;main.c: 385: if(RA2)
  4518  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  4519  0BF2  1D05               	btfss	5,2	;volatile
  4520  0BF3  2C10               	goto	l6164
  4521                           
  4522                           ;main.c: 386: {
  4523                           ;main.c: 387: _delay((unsigned long)((20)*(8000000/4000.0)));
  4524  0BF4  3034               	movlw	52
  4525  0BF5  00E1               	movwf	??_menu+1
  4526  0BF6  30F1               	movlw	241
  4527  0BF7  00E0               	movwf	??_menu
  4528  0BF8                     u7747:	
  4529  0BF8  0BE0               	decfsz	??_menu,f
  4530  0BF9  2BF8               	goto	u7747
  4531  0BFA  0BE1               	decfsz	??_menu+1,f
  4532  0BFB  2BF8               	goto	u7747
  4533  0BFC  2BFD               	nop2
  4534                           
  4535                           ;main.c: 388: if(RA2) plus_flag = 1;
  4536  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  4537  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  4538  0BFF  1D05               	btfss	5,2	;volatile
  4539  0C00  2C04               	goto	l431
  4540  0C01  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0C02  01B7               	clrf	_plus_flag^(0+128)
  4542  0C03  0AB7               	incf	_plus_flag^(0+128),f
  4543  0C04                     l431:	
  4544  0C04  1283               	bcf	3,5	;RP0=0, select bank0
  4545  0C05  1905               	btfsc	5,2	;volatile
  4546  0C06  2C04               	goto	l431
  4547                           
  4548                           ;main.c: 390: _delay((unsigned long)((20)*(8000000/4000.0)));
  4549  0C07  3034               	movlw	52
  4550  0C08  00E1               	movwf	??_menu+1
  4551  0C09  30F1               	movlw	241
  4552  0C0A  00E0               	movwf	??_menu
  4553  0C0B                     u7757:	
  4554  0C0B  0BE0               	decfsz	??_menu,f
  4555  0C0C  2C0B               	goto	u7757
  4556  0C0D  0BE1               	decfsz	??_menu+1,f
  4557  0C0E  2C0B               	goto	u7757
  4558  0C0F  2C10               	nop2
  4559  0C10                     l6164:	
  4560                           
  4561                           ;main.c: 391: }
  4562                           ;main.c: 393: if(RA3)
  4563  0C10  1283               	bcf	3,5	;RP0=0, select bank0
  4564  0C11  1303               	bcf	3,6	;RP1=0, select bank0
  4565  0C12  1D85               	btfss	5,3	;volatile
  4566  0C13  2C30               	goto	l6174
  4567                           
  4568                           ;main.c: 394: {
  4569                           ;main.c: 395: _delay((unsigned long)((20)*(8000000/4000.0)));
  4570  0C14  3034               	movlw	52
  4571  0C15  00E1               	movwf	??_menu+1
  4572  0C16  30F1               	movlw	241
  4573  0C17  00E0               	movwf	??_menu
  4574  0C18                     u7767:	
  4575  0C18  0BE0               	decfsz	??_menu,f
  4576  0C19  2C18               	goto	u7767
  4577  0C1A  0BE1               	decfsz	??_menu+1,f
  4578  0C1B  2C18               	goto	u7767
  4579  0C1C  2C1D               	nop2
  4580                           
  4581                           ;main.c: 396: if(RA3) minus_flag = 1;
  4582  0C1D  1283               	bcf	3,5	;RP0=0, select bank0
  4583  0C1E  1303               	bcf	3,6	;RP1=0, select bank0
  4584  0C1F  1D85               	btfss	5,3	;volatile
  4585  0C20  2C24               	goto	l436
  4586  0C21  1683               	bsf	3,5	;RP0=1, select bank1
  4587  0C22  01B4               	clrf	_minus_flag^(0+128)
  4588  0C23  0AB4               	incf	_minus_flag^(0+128),f
  4589  0C24                     l436:	
  4590  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4591  0C25  1985               	btfsc	5,3	;volatile
  4592  0C26  2C24               	goto	l436
  4593                           
  4594                           ;main.c: 398: _delay((unsigned long)((20)*(8000000/4000.0)));
  4595  0C27  3034               	movlw	52
  4596  0C28  00E1               	movwf	??_menu+1
  4597  0C29  30F1               	movlw	241
  4598  0C2A  00E0               	movwf	??_menu
  4599  0C2B                     u7777:	
  4600  0C2B  0BE0               	decfsz	??_menu,f
  4601  0C2C  2C2B               	goto	u7777
  4602  0C2D  0BE1               	decfsz	??_menu+1,f
  4603  0C2E  2C2B               	goto	u7777
  4604  0C2F  2C30               	nop2
  4605  0C30                     l6174:	
  4606                           
  4607                           ;main.c: 399: }
  4608                           ;main.c: 401: if(plus_flag)
  4609  0C30  1683               	bsf	3,5	;RP0=1, select bank1
  4610  0C31  1303               	bcf	3,6	;RP1=0, select bank1
  4611  0C32  0837               	movf	_plus_flag^(0+128),w
  4612  0C33  1903               	btfsc	3,2
  4613  0C34  2C98               	goto	l6188
  4614                           
  4615                           ;main.c: 402: {
  4616                           ;main.c: 403: zeljena_temperatura += 0.1;
  4617  0C35  30CD               	movlw	205
  4618  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  4619  0C37  00C2               	movwf	___ftadd@f1
  4620  0C38  30CC               	movlw	204
  4621  0C39  00C3               	movwf	___ftadd@f1+1
  4622  0C3A  303D               	movlw	61
  4623  0C3B  00C4               	movwf	___ftadd@f1+2
  4624  0C3C  1683               	bsf	3,5	;RP0=1, select bank1
  4625  0C3D  0827               	movf	_zeljena_temperatura^(0+128),w
  4626  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  4627  0C3F  00C5               	movwf	___ftadd@f2
  4628  0C40  1683               	bsf	3,5	;RP0=1, select bank1
  4629  0C41  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4630  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  4631  0C43  00C6               	movwf	___ftadd@f2+1
  4632  0C44  1683               	bsf	3,5	;RP0=1, select bank1
  4633  0C45  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4634  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  4635  0C47  00C7               	movwf	___ftadd@f2+2
  4636  0C48  22EE               	fcall	___ftadd
  4637  0C49  0842               	movf	?___ftadd,w
  4638  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  4639  0C4B  00A7               	movwf	_zeljena_temperatura^(0+128)
  4640  0C4C  1283               	bcf	3,5	;RP0=0, select bank0
  4641  0C4D  0843               	movf	?___ftadd+1,w
  4642  0C4E  1683               	bsf	3,5	;RP0=1, select bank1
  4643  0C4F  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  4644  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  4645  0C51  0844               	movf	?___ftadd+2,w
  4646  0C52  1683               	bsf	3,5	;RP0=1, select bank1
  4647  0C53  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  4648                           
  4649                           ;main.c: 404: if(zeljena_temperatura > 40) zeljena_temperatura = 40;
  4650  0C54  1283               	bcf	3,5	;RP0=0, select bank0
  4651  0C55  3020               	movlw	32
  4652  0C56  01CE               	clrf	___ftge@ff1
  4653  0C57  00CF               	movwf	___ftge@ff1+1
  4654  0C58  3042               	movlw	66
  4655  0C59  00D0               	movwf	___ftge@ff1+2
  4656  0C5A  1683               	bsf	3,5	;RP0=1, select bank1
  4657  0C5B  0827               	movf	_zeljena_temperatura^(0+128),w
  4658  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  4659  0C5D  00D1               	movwf	___ftge@ff2
  4660  0C5E  1683               	bsf	3,5	;RP0=1, select bank1
  4661  0C5F  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4662  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  4663  0C61  00D2               	movwf	___ftge@ff2+1
  4664  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  4665  0C63  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4666  0C64  1283               	bcf	3,5	;RP0=0, select bank0
  4667  0C65  00D3               	movwf	___ftge@ff2+2
  4668  0C66  120A  118A  25C1  120A  158A  	fcall	___ftge
  4669  0C6B  1803               	btfsc	3,0
  4670  0C6C  2C73               	goto	l6180
  4671  0C6D  1683               	bsf	3,5	;RP0=1, select bank1
  4672  0C6E  3020               	movlw	32
  4673  0C6F  01A7               	clrf	_zeljena_temperatura^(0+128)
  4674  0C70  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  4675  0C71  3042               	movlw	66
  4676  0C72  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  4677  0C73                     l6180:	
  4678                           
  4679                           ;main.c: 405: plus_flag = 0;
  4680  0C73  1683               	bsf	3,5	;RP0=1, select bank1
  4681  0C74  3045               	movlw	low (STR_2| (0+32768))
  4682  0C75  01B7               	clrf	_plus_flag^(0+128)
  4683                           
  4684                           ;main.c: 407: sprintf(temperature, " %.1f", zeljena_temperatura);
  4685  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0C77  00D4               	movwf	sprintf@f
  4687  0C78  3099               	movlw	high (STR_2| (0+32768))
  4688  0C79  00D5               	movwf	sprintf@f+1
  4689  0C7A  1683               	bsf	3,5	;RP0=1, select bank1
  4690  0C7B  0827               	movf	_zeljena_temperatura^(0+128),w
  4691  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0C7D  00D6               	movwf	?_sprintf+2
  4693  0C7E  1683               	bsf	3,5	;RP0=1, select bank1
  4694  0C7F  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4695  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  4696  0C81  00D7               	movwf	?_sprintf+3
  4697  0C82  1683               	bsf	3,5	;RP0=1, select bank1
  4698  0C83  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4699  0C84  1283               	bcf	3,5	;RP0=0, select bank0
  4700  0C85  00D8               	movwf	?_sprintf+4
  4701  0C86  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4702  0C87  120A  118A  2026  120A  158A  	fcall	_sprintf
  4703  0C8C  3002               	movlw	2
  4704                           
  4705                           ;main.c: 408: LcdSetCursor(2,1);
  4706  0C8D  01F6               	clrf	LcdSetCursor@b
  4707  0C8E  0AF6               	incf	LcdSetCursor@b,f
  4708  0C8F  26E8  120A  158A   	fcall	_LcdSetCursor
  4709                           
  4710                           ;main.c: 409: LcdWriteString(temperature);
  4711  0C92  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4712  0C93  00F7               	movwf	LcdWriteString@a
  4713  0C94  01F8               	clrf	LcdWriteString@a+1
  4714  0C95  252F  120A  158A   	fcall	_LcdWriteString
  4715  0C98                     l6188:	
  4716                           
  4717                           ;main.c: 410: }
  4718                           ;main.c: 412: if(minus_flag)
  4719  0C98  1683               	bsf	3,5	;RP0=1, select bank1
  4720  0C99  0834               	movf	_minus_flag^(0+128),w
  4721  0C9A  1903               	btfsc	3,2
  4722  0C9B  2D02               	goto	l6202
  4723                           
  4724                           ;main.c: 413: {
  4725                           ;main.c: 414: zeljena_temperatura -= 0.1;
  4726  0C9C  30CD               	movlw	205
  4727  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  4728  0C9E  00CE               	movwf	___ftsub@f2
  4729  0C9F  30CC               	movlw	204
  4730  0CA0  00CF               	movwf	___ftsub@f2+1
  4731  0CA1  303D               	movlw	61
  4732  0CA2  00D0               	movwf	___ftsub@f2+2
  4733  0CA3  1683               	bsf	3,5	;RP0=1, select bank1
  4734  0CA4  0827               	movf	_zeljena_temperatura^(0+128),w
  4735  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  4736  0CA6  00D1               	movwf	___ftsub@f1
  4737  0CA7  1683               	bsf	3,5	;RP0=1, select bank1
  4738  0CA8  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4739  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  4740  0CAA  00D2               	movwf	___ftsub@f1+1
  4741  0CAB  1683               	bsf	3,5	;RP0=1, select bank1
  4742  0CAC  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4743  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  4744  0CAE  00D3               	movwf	___ftsub@f1+2
  4745  0CAF  120A  118A  26A3  120A  158A  	fcall	___ftsub
  4746  0CB4  084E               	movf	?___ftsub,w
  4747  0CB5  1683               	bsf	3,5	;RP0=1, select bank1
  4748  0CB6  00A7               	movwf	_zeljena_temperatura^(0+128)
  4749  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0CB8  084F               	movf	?___ftsub+1,w
  4751  0CB9  1683               	bsf	3,5	;RP0=1, select bank1
  4752  0CBA  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  4753  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0CBC  0850               	movf	?___ftsub+2,w
  4755  0CBD  1683               	bsf	3,5	;RP0=1, select bank1
  4756  0CBE  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  4757                           
  4758                           ;main.c: 415: if(zeljena_temperatura < 15) zeljena_temperatura = 15;
  4759  0CBF  0827               	movf	_zeljena_temperatura^(0+128),w
  4760  0CC0  1283               	bcf	3,5	;RP0=0, select bank0
  4761  0CC1  00CE               	movwf	___ftge@ff1
  4762  0CC2  1683               	bsf	3,5	;RP0=1, select bank1
  4763  0CC3  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4764  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0CC5  00CF               	movwf	___ftge@ff1+1
  4766  0CC6  1683               	bsf	3,5	;RP0=1, select bank1
  4767  0CC7  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4768  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  4769  0CC9  00D0               	movwf	___ftge@ff1+2
  4770  0CCA  3070               	movlw	112
  4771  0CCB  01D1               	clrf	___ftge@ff2
  4772  0CCC  00D2               	movwf	___ftge@ff2+1
  4773  0CCD  3041               	movlw	65
  4774  0CCE  00D3               	movwf	___ftge@ff2+2
  4775  0CCF  120A  118A  25C1  120A  158A  	fcall	___ftge
  4776  0CD4  1803               	btfsc	3,0
  4777  0CD5  2CDC               	goto	l6194
  4778  0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  4779  0CD7  3070               	movlw	112
  4780  0CD8  01A7               	clrf	_zeljena_temperatura^(0+128)
  4781  0CD9  00A8               	movwf	(_zeljena_temperatura+1)^(0+128)
  4782  0CDA  3041               	movlw	65
  4783  0CDB  00A9               	movwf	(_zeljena_temperatura+2)^(0+128)
  4784  0CDC                     l6194:	
  4785                           
  4786                           ;main.c: 416: minus_flag = 0;
  4787  0CDC  1683               	bsf	3,5	;RP0=1, select bank1
  4788  0CDD  3045               	movlw	low (STR_2| (0+32768))
  4789  0CDE  01B4               	clrf	_minus_flag^(0+128)
  4790                           
  4791                           ;main.c: 418: sprintf(temperature, " %.1f", zeljena_temperatura);
  4792  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4793  0CE0  00D4               	movwf	sprintf@f
  4794  0CE1  3099               	movlw	high (STR_2| (0+32768))
  4795  0CE2  00D5               	movwf	sprintf@f+1
  4796  0CE3  1683               	bsf	3,5	;RP0=1, select bank1
  4797  0CE4  0827               	movf	_zeljena_temperatura^(0+128),w
  4798  0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0CE6  00D6               	movwf	?_sprintf+2
  4800  0CE7  1683               	bsf	3,5	;RP0=1, select bank1
  4801  0CE8  0828               	movf	(_zeljena_temperatura+1)^(0+128),w
  4802  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0CEA  00D7               	movwf	?_sprintf+3
  4804  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  4805  0CEC  0829               	movf	(_zeljena_temperatura+2)^(0+128),w
  4806  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  4807  0CEE  00D8               	movwf	?_sprintf+4
  4808  0CEF  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4809  0CF0  120A  118A  2026  120A  158A  	fcall	_sprintf
  4810  0CF5  3002               	movlw	2
  4811                           
  4812                           ;main.c: 419: LcdSetCursor(2,1);
  4813  0CF6  01F6               	clrf	LcdSetCursor@b
  4814  0CF7  0AF6               	incf	LcdSetCursor@b,f
  4815  0CF8  26E8  120A  158A   	fcall	_LcdSetCursor
  4816                           
  4817                           ;main.c: 420: LcdWriteString(temperature);
  4818  0CFB  30C3               	movlw	(low (_temperature| 0))& (0+255)
  4819  0CFC  00F7               	movwf	LcdWriteString@a
  4820  0CFD  3000               	movlw	0
  4821  0CFE  00F8               	movwf	LcdWriteString@a+1
  4822  0CFF  252F  120A  158A   	fcall	_LcdWriteString
  4823  0D02                     l6202:	
  4824                           
  4825                           ;main.c: 421: }
  4826                           ;main.c: 423: if(RA1)
  4827  0D02  1283               	bcf	3,5	;RP0=0, select bank0
  4828  0D03  1C85               	btfss	5,1	;volatile
  4829  0D04  2D1F               	goto	l6212
  4830                           
  4831                           ;main.c: 424: {
  4832                           ;main.c: 425: _delay((unsigned long)((20)*(8000000/4000.0)));
  4833  0D05  3034               	movlw	52
  4834  0D06  00E1               	movwf	??_menu+1
  4835  0D07  30F1               	movlw	241
  4836  0D08  00E0               	movwf	??_menu
  4837  0D09                     u7787:	
  4838  0D09  0BE0               	decfsz	??_menu,f
  4839  0D0A  2D09               	goto	u7787
  4840  0D0B  0BE1               	decfsz	??_menu+1,f
  4841  0D0C  2D09               	goto	u7787
  4842  0D0D  2D0E               	nop2
  4843                           
  4844                           ;main.c: 426: if(RA1) ok_flag = 1;
  4845  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  4846  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  4847  0D10  1C85               	btfss	5,1	;volatile
  4848  0D11  2D14               	goto	l445
  4849  0D12  01EE               	clrf	_ok_flag
  4850  0D13  0AEE               	incf	_ok_flag,f
  4851  0D14                     l445:	
  4852  0D14  1885               	btfsc	5,1	;volatile
  4853  0D15  2D14               	goto	l445
  4854                           
  4855                           ;main.c: 428: _delay((unsigned long)((20)*(8000000/4000.0)));
  4856  0D16  3034               	movlw	52
  4857  0D17  00E1               	movwf	??_menu+1
  4858  0D18  30F1               	movlw	241
  4859  0D19  00E0               	movwf	??_menu
  4860  0D1A                     u7797:	
  4861  0D1A  0BE0               	decfsz	??_menu,f
  4862  0D1B  2D1A               	goto	u7797
  4863  0D1C  0BE1               	decfsz	??_menu+1,f
  4864  0D1D  2D1A               	goto	u7797
  4865  0D1E  2D1F               	nop2
  4866  0D1F                     l6212:	
  4867                           
  4868                           ;main.c: 429: }
  4869                           ;main.c: 430: if(ok_flag)
  4870  0D1F  1283               	bcf	3,5	;RP0=0, select bank0
  4871  0D20  1303               	bcf	3,6	;RP1=0, select bank0
  4872  0D21  086E               	movf	_ok_flag,w
  4873  0D22  1903               	btfsc	3,2
  4874  0D23  2BED               	goto	l6218
  4875                           
  4876                           ;main.c: 431: {
  4877                           ;main.c: 432: ok_flag = 0;
  4878  0D24  01EE               	clrf	_ok_flag
  4879                           
  4880                           ;main.c: 433: menuHumi();
  4881  0D25  2175  120A  158A   	fcall	_menuHumi
  4882  0D28  2BED               	goto	l6218
  4883  0D29                     l6220:	
  4884                           
  4885                           ;main.c: 434: }
  4886                           ;main.c: 435: }
  4887                           ;main.c: 436: ok_flag = 0;
  4888  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  4889  0D2A  01EE               	clrf	_ok_flag
  4890                           
  4891                           ;main.c: 437: ok_flag_humi = 0;
  4892  0D2B  1683               	bsf	3,5	;RP0=1, select bank1
  4893  0D2C  01B6               	clrf	_ok_flag_humi^(0+128)
  4894                           
  4895                           ;main.c: 438: ok_flag_co2 = 0;
  4896  0D2D  01B5               	clrf	_ok_flag_co2^(0+128)
  4897  0D2E  0008               	return
  4898  0D2F                     __end_of_menu:	
  4899  0D2F                     __ptext50:	
  4900 ;; *************** function _LcdWriteString *****************
  4901 ;; Defined at:
  4902 ;;		line 106 in file "lcd.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  a               2    7[COMMON] PTR unsigned char 
  4905 ;;		 -> STR_24(10), STR_23(17), STR_19(9), STR_18(17), 
  4906 ;;		 -> STR_16(9), STR_15(11), STR_14(17), STR_13(13), 
  4907 ;;		 -> STR_12(17), STR_10(17), STR_9(13), STR_8(17), 
  4908 ;;		 -> STR_7(13), STR_6(17), humidity(5), STR_4(13), 
  4909 ;;		 -> STR_3(17), temperature(5), STR_1(14), 
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;  i               2    3[BANK0 ] int 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;		None               void
  4914 ;; Registers used:
  4915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 300/0
  4918 ;;		On exit  : 300/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4921 ;;      Params:         2       0       0       0       0
  4922 ;;      Locals:         0       2       0       0       0
  4923 ;;      Temps:          0       3       0       0       0
  4924 ;;      Totals:         2       5       0       0       0
  4925 ;;Total ram usage:        7 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    3
  4928 ;; This function calls:
  4929 ;;		_LcdWriteChar
  4930 ;; This function is called by:
  4931 ;;		_getResSHT71
  4932 ;;		_displayAirTemp
  4933 ;;		_displayAirMoist
  4934 ;;		_displayCO2
  4935 ;;		_displaySoilTemp
  4936 ;;		_menuCO2
  4937 ;;		_menuHumi
  4938 ;;		_menu
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _LcdWriteString
  4944  0D2F                     _LcdWriteString:	
  4945  0D2F                     l5254:	
  4946                           ;incstack = 0
  4947                           ; Regs used in _LcdWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4948                           
  4949                           
  4950                           ;lcd.c: 108: int i;
  4951                           ;lcd.c: 109: for(i=0;a[i]!='\0';i++)
  4952  0D2F  01A3               	clrf	LcdWriteString@i
  4953  0D30  01A4               	clrf	LcdWriteString@i+1
  4954  0D31                     l5260:	
  4955  0D31  27D8               	fcall	PL14	;call to abstracted procedure
  4956  0D32  160A  158A  2000  120A  158A  	fcall	stringtab
  4957  0D37  3A00               	xorlw	0
  4958  0D38  1903               	btfsc	3,2
  4959  0D39  0008               	return
  4960                           
  4961                           ;lcd.c: 110: LcdWriteChar(a[i]);
  4962  0D3A  27D8               	fcall	PL14	;call to abstracted procedure
  4963  0D3B  160A  158A  2000  120A  158A  	fcall	stringtab
  4964  0D40  2710  120A  158A   	fcall	_LcdWriteChar
  4965  0D43  0AA3               	incf	LcdWriteString@i,f
  4966  0D44  1903               	skipnz
  4967  0D45  0AA4               	incf	LcdWriteString@i+1,f
  4968  0D46  2D31               	goto	l5260
  4969  0D47                     __end_of_LcdWriteString:	
  4970  0D47                     __ptext5:	
  4971 ;; *************** function _menuCO2 *****************
  4972 ;; Defined at:
  4973 ;;		line 244 in file "main.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : 300/100
  4984 ;;		On exit  : 300/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4987 ;;      Params:         0       0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0
  4989 ;;      Temps:          0       2       0       0       0
  4990 ;;      Totals:         0       2       0       0       0
  4991 ;;Total ram usage:        2 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    5
  4994 ;; This function calls:
  4995 ;;		_LcdSetCursor
  4996 ;;		_LcdWriteInt
  4997 ;;		_LcdWriteString
  4998 ;; This function is called by:
  4999 ;;		_menuHumi
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _menuCO2
  5005  0D47                     _menuCO2:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in _menuCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5009  0D47  3001               	movlw	1
  5010                           
  5011                           ;main.c: 245: LcdSetCursor(1,1);
  5012  0D48  01F6               	clrf	LcdSetCursor@b
  5013  0D49  0AF6               	incf	LcdSetCursor@b,f
  5014  0D4A  26E8  120A  158A   	fcall	_LcdSetCursor
  5015                           
  5016                           ;main.c: 246: LcdWriteString("Set CO2 in air  ");
  5017  0D4D  30DD               	movlw	low (STR_14| (0+32768))
  5018  0D4E  00F7               	movwf	LcdWriteString@a
  5019  0D4F  3098               	movlw	high (STR_14| (0+32768))
  5020  0D50  00F8               	movwf	LcdWriteString@a+1
  5021  0D51  252F  120A  158A   	fcall	_LcdWriteString
  5022  0D54  3002               	movlw	2
  5023                           
  5024                           ;main.c: 247: LcdSetCursor(2,1);
  5025  0D55  01F6               	clrf	LcdSetCursor@b
  5026  0D56  0AF6               	incf	LcdSetCursor@b,f
  5027  0D57  26E8  120A  158A   	fcall	_LcdSetCursor
  5028                           
  5029                           ;main.c: 248: LcdWriteString("          ");
  5030  0D5A  3020               	movlw	low ((STR_7+2)| (0+32768))
  5031  0D5B  00F7               	movwf	LcdWriteString@a
  5032  0D5C  3099               	movlw	high ((STR_7+2)| (0+32768))
  5033  0D5D  00F8               	movwf	LcdWriteString@a+1
  5034  0D5E  252F  120A  158A   	fcall	_LcdWriteString
  5035  0D61  3002               	movlw	2
  5036                           
  5037                           ;main.c: 249: LcdSetCursor(2,1);
  5038  0D62  01F6               	clrf	LcdSetCursor@b
  5039  0D63  0AF6               	incf	LcdSetCursor@b,f
  5040  0D64  26E8  120A  158A   	fcall	_LcdSetCursor
  5041                           
  5042                           ;main.c: 250: LcdWriteInt(zeljena_co2,2,1);
  5043  0D67  087B               	movf	_zeljena_co2+1,w
  5044  0D68  00A5               	movwf	LcdWriteInt@i+1
  5045  0D69  087A               	movf	_zeljena_co2,w
  5046  0D6A  00A4               	movwf	LcdWriteInt@i
  5047  0D6B  3002               	movlw	2
  5048  0D6C  00A6               	movwf	LcdWriteInt@row
  5049  0D6D  01A7               	clrf	LcdWriteInt@column
  5050  0D6E  0AA7               	incf	LcdWriteInt@column,f
  5051  0D6F  2634  120A  158A   	fcall	_LcdWriteInt
  5052                           
  5053                           ;main.c: 251: LcdSetCursor(2,6);
  5054  0D72  3006               	movlw	6
  5055  0D73  00F6               	movwf	LcdSetCursor@b
  5056  0D74  3002               	movlw	2
  5057  0D75  26E8  120A  158A   	fcall	_LcdSetCursor
  5058                           
  5059                           ;main.c: 252: LcdWriteString("        ");
  5060  0D78  3022               	movlw	low ((STR_7+4)| (0+32768))
  5061  0D79  00F7               	movwf	LcdWriteString@a
  5062  0D7A  3099               	movlw	high ((STR_7+4)| (0+32768))
  5063  0D7B  00F8               	movwf	LcdWriteString@a+1
  5064  0D7C  252F  120A  158A   	fcall	_LcdWriteString
  5065  0D7F                     l5816:	
  5066                           ;main.c: 253: while(!ok_flag)
  5067                           
  5068  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  5069  0D80  086E               	movf	_ok_flag,w
  5070  0D81  1D03               	btfss	3,2
  5071  0D82  0008               	return
  5072                           
  5073                           ;main.c: 254: {
  5074                           ;main.c: 255: if(RA2)
  5075  0D83  1D05               	btfss	5,2	;volatile
  5076  0D84  2DA1               	goto	l5768
  5077                           
  5078                           ;main.c: 256: {
  5079                           ;main.c: 257: _delay((unsigned long)((20)*(8000000/4000.0)));
  5080  0D85  3034               	movlw	52
  5081  0D86  00AC               	movwf	??_menuCO2+1
  5082  0D87  30F1               	movlw	241
  5083  0D88  00AB               	movwf	??_menuCO2
  5084  0D89                     u7867:	
  5085  0D89  0BAB               	decfsz	??_menuCO2,f
  5086  0D8A  2D89               	goto	u7867
  5087  0D8B  0BAC               	decfsz	??_menuCO2+1,f
  5088  0D8C  2D89               	goto	u7867
  5089  0D8D  2D8E               	nop2
  5090                           
  5091                           ;main.c: 258: if(RA2) plus_flag = 1;
  5092  0D8E  1283               	bcf	3,5	;RP0=0, select bank0
  5093  0D8F  1303               	bcf	3,6	;RP1=0, select bank0
  5094  0D90  1D05               	btfss	5,2	;volatile
  5095  0D91  2D95               	goto	l379
  5096  0D92  1683               	bsf	3,5	;RP0=1, select bank1
  5097  0D93  01B7               	clrf	_plus_flag^(0+128)
  5098  0D94  0AB7               	incf	_plus_flag^(0+128),f
  5099  0D95                     l379:	
  5100  0D95  1283               	bcf	3,5	;RP0=0, select bank0
  5101  0D96  1905               	btfsc	5,2	;volatile
  5102  0D97  2D95               	goto	l379
  5103                           
  5104                           ;main.c: 260: _delay((unsigned long)((20)*(8000000/4000.0)));
  5105  0D98  3034               	movlw	52
  5106  0D99  00AC               	movwf	??_menuCO2+1
  5107  0D9A  30F1               	movlw	241
  5108  0D9B  00AB               	movwf	??_menuCO2
  5109  0D9C                     u7877:	
  5110  0D9C  0BAB               	decfsz	??_menuCO2,f
  5111  0D9D  2D9C               	goto	u7877
  5112  0D9E  0BAC               	decfsz	??_menuCO2+1,f
  5113  0D9F  2D9C               	goto	u7877
  5114  0DA0  2DA1               	nop2
  5115  0DA1                     l5768:	
  5116                           
  5117                           ;main.c: 261: }
  5118                           ;main.c: 263: if(RA3)
  5119  0DA1  1283               	bcf	3,5	;RP0=0, select bank0
  5120  0DA2  1303               	bcf	3,6	;RP1=0, select bank0
  5121  0DA3  1D85               	btfss	5,3	;volatile
  5122  0DA4  2DC1               	goto	l5778
  5123                           
  5124                           ;main.c: 264: {
  5125                           ;main.c: 265: _delay((unsigned long)((20)*(8000000/4000.0)));
  5126  0DA5  3034               	movlw	52
  5127  0DA6  00AC               	movwf	??_menuCO2+1
  5128  0DA7  30F1               	movlw	241
  5129  0DA8  00AB               	movwf	??_menuCO2
  5130  0DA9                     u7887:	
  5131  0DA9  0BAB               	decfsz	??_menuCO2,f
  5132  0DAA  2DA9               	goto	u7887
  5133  0DAB  0BAC               	decfsz	??_menuCO2+1,f
  5134  0DAC  2DA9               	goto	u7887
  5135  0DAD  2DAE               	nop2
  5136                           
  5137                           ;main.c: 266: if(RA3) minus_flag = 1;
  5138  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0DB0  1D85               	btfss	5,3	;volatile
  5141  0DB1  2DB5               	goto	l384
  5142  0DB2  1683               	bsf	3,5	;RP0=1, select bank1
  5143  0DB3  01B4               	clrf	_minus_flag^(0+128)
  5144  0DB4  0AB4               	incf	_minus_flag^(0+128),f
  5145  0DB5                     l384:	
  5146  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  5147  0DB6  1985               	btfsc	5,3	;volatile
  5148  0DB7  2DB5               	goto	l384
  5149                           
  5150                           ;main.c: 268: _delay((unsigned long)((20)*(8000000/4000.0)));
  5151  0DB8  3034               	movlw	52
  5152  0DB9  00AC               	movwf	??_menuCO2+1
  5153  0DBA  30F1               	movlw	241
  5154  0DBB  00AB               	movwf	??_menuCO2
  5155  0DBC                     u7897:	
  5156  0DBC  0BAB               	decfsz	??_menuCO2,f
  5157  0DBD  2DBC               	goto	u7897
  5158  0DBE  0BAC               	decfsz	??_menuCO2+1,f
  5159  0DBF  2DBC               	goto	u7897
  5160  0DC0  2DC1               	nop2
  5161  0DC1                     l5778:	
  5162                           
  5163                           ;main.c: 269: }
  5164                           ;main.c: 271: if(plus_flag)
  5165  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  5166  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  5167  0DC3  0837               	movf	_plus_flag^(0+128),w
  5168  0DC4  1903               	btfsc	3,2
  5169  0DC5  2DE7               	goto	l5790
  5170                           
  5171                           ;main.c: 272: {
  5172                           ;main.c: 273: zeljena_co2 += 100;
  5173  0DC6  3064               	movlw	100
  5174  0DC7  07FA               	addwf	_zeljena_co2,f
  5175  0DC8  1803               	skipnc
  5176  0DC9  0AFB               	incf	_zeljena_co2+1,f
  5177                           
  5178                           ;main.c: 274: if(zeljena_co2 > 5000) zeljena_co2 = 5000;
  5179  0DCA  3013               	movlw	19
  5180  0DCB  027B               	subwf	_zeljena_co2+1,w
  5181  0DCC  3089               	movlw	137
  5182  0DCD  1903               	skipnz
  5183  0DCE  027A               	subwf	_zeljena_co2,w
  5184  0DCF  1C03               	skipc
  5185  0DD0  2DD5               	goto	l5784
  5186  0DD1  3088               	movlw	136
  5187  0DD2  00FA               	movwf	_zeljena_co2
  5188  0DD3  3013               	movlw	19
  5189  0DD4  00FB               	movwf	_zeljena_co2+1
  5190  0DD5                     l5784:	
  5191  0DD5  3002               	movlw	2
  5192                           
  5193                           ;main.c: 275: plus_flag = 0;
  5194  0DD6  01B7               	clrf	_plus_flag^(0+128)
  5195  0DD7  01F6               	clrf	LcdSetCursor@b
  5196  0DD8  0AF6               	incf	LcdSetCursor@b,f
  5197  0DD9  26E8  120A  158A   	fcall	_LcdSetCursor
  5198                           
  5199                           ;main.c: 278: LcdWriteInt(zeljena_co2,2,1);
  5200  0DDC  087B               	movf	_zeljena_co2+1,w
  5201  0DDD  00A5               	movwf	LcdWriteInt@i+1
  5202  0DDE  087A               	movf	_zeljena_co2,w
  5203  0DDF  00A4               	movwf	LcdWriteInt@i
  5204  0DE0  3002               	movlw	2
  5205  0DE1  00A6               	movwf	LcdWriteInt@row
  5206  0DE2  01A7               	clrf	LcdWriteInt@column
  5207  0DE3  0AA7               	incf	LcdWriteInt@column,f
  5208  0DE4  2634  120A  158A   	fcall	_LcdWriteInt
  5209  0DE7                     l5790:	
  5210                           
  5211                           ;main.c: 279: }
  5212                           ;main.c: 281: if(minus_flag)
  5213  0DE7  1683               	bsf	3,5	;RP0=1, select bank1
  5214  0DE8  0834               	movf	_minus_flag^(0+128),w
  5215  0DE9  1903               	btfsc	3,2
  5216  0DEA  2E0C               	goto	l5802
  5217                           
  5218                           ;main.c: 282: {
  5219                           ;main.c: 283: zeljena_co2 -= 100;
  5220  0DEB  3064               	movlw	100
  5221  0DEC  02FA               	subwf	_zeljena_co2,f
  5222  0DED  1C03               	skipc
  5223  0DEE  03FB               	decf	_zeljena_co2+1,f
  5224                           
  5225                           ;main.c: 284: if(zeljena_co2 < 300) zeljena_co2 = 300;
  5226  0DEF  3001               	movlw	1
  5227  0DF0  027B               	subwf	_zeljena_co2+1,w
  5228  0DF1  302C               	movlw	44
  5229  0DF2  1903               	skipnz
  5230  0DF3  027A               	subwf	_zeljena_co2,w
  5231  0DF4  1803               	skipnc
  5232  0DF5  2DFA               	goto	l5796
  5233  0DF6  302C               	movlw	44
  5234  0DF7  00FA               	movwf	_zeljena_co2
  5235  0DF8  3001               	movlw	1
  5236  0DF9  00FB               	movwf	_zeljena_co2+1
  5237  0DFA                     l5796:	
  5238  0DFA  3002               	movlw	2
  5239                           
  5240                           ;main.c: 285: minus_flag = 0;
  5241  0DFB  01B4               	clrf	_minus_flag^(0+128)
  5242  0DFC  01F6               	clrf	LcdSetCursor@b
  5243  0DFD  0AF6               	incf	LcdSetCursor@b,f
  5244  0DFE  26E8  120A  158A   	fcall	_LcdSetCursor
  5245                           
  5246                           ;main.c: 288: LcdWriteInt(zeljena_co2,2,1);
  5247  0E01  087B               	movf	_zeljena_co2+1,w
  5248  0E02  00A5               	movwf	LcdWriteInt@i+1
  5249  0E03  087A               	movf	_zeljena_co2,w
  5250  0E04  00A4               	movwf	LcdWriteInt@i
  5251  0E05  3002               	movlw	2
  5252  0E06  00A6               	movwf	LcdWriteInt@row
  5253  0E07  01A7               	clrf	LcdWriteInt@column
  5254  0E08  0AA7               	incf	LcdWriteInt@column,f
  5255  0E09  2634  120A  158A   	fcall	_LcdWriteInt
  5256  0E0C                     l5802:	
  5257                           
  5258                           ;main.c: 290: }
  5259                           ;main.c: 292: if(RA1)
  5260  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  5261  0E0D  1C85               	btfss	5,1	;volatile
  5262  0E0E  2E29               	goto	l5812
  5263                           
  5264                           ;main.c: 293: {
  5265                           ;main.c: 294: _delay((unsigned long)((20)*(8000000/4000.0)));
  5266  0E0F  3034               	movlw	52
  5267  0E10  00AC               	movwf	??_menuCO2+1
  5268  0E11  30F1               	movlw	241
  5269  0E12  00AB               	movwf	??_menuCO2
  5270  0E13                     u7907:	
  5271  0E13  0BAB               	decfsz	??_menuCO2,f
  5272  0E14  2E13               	goto	u7907
  5273  0E15  0BAC               	decfsz	??_menuCO2+1,f
  5274  0E16  2E13               	goto	u7907
  5275  0E17  2E18               	nop2
  5276                           
  5277                           ;main.c: 295: if(RA1) ok_flag = 1;
  5278  0E18  1283               	bcf	3,5	;RP0=0, select bank0
  5279  0E19  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0E1A  1C85               	btfss	5,1	;volatile
  5281  0E1B  2E1E               	goto	l393
  5282  0E1C  01EE               	clrf	_ok_flag
  5283  0E1D  0AEE               	incf	_ok_flag,f
  5284  0E1E                     l393:	
  5285  0E1E  1885               	btfsc	5,1	;volatile
  5286  0E1F  2E1E               	goto	l393
  5287                           
  5288                           ;main.c: 297: _delay((unsigned long)((20)*(8000000/4000.0)));
  5289  0E20  3034               	movlw	52
  5290  0E21  00AC               	movwf	??_menuCO2+1
  5291  0E22  30F1               	movlw	241
  5292  0E23  00AB               	movwf	??_menuCO2
  5293  0E24                     u7917:	
  5294  0E24  0BAB               	decfsz	??_menuCO2,f
  5295  0E25  2E24               	goto	u7917
  5296  0E26  0BAC               	decfsz	??_menuCO2+1,f
  5297  0E27  2E24               	goto	u7917
  5298  0E28  2E29               	nop2
  5299  0E29                     l5812:	
  5300                           
  5301                           ;main.c: 298: }
  5302                           ;main.c: 299: if(ok_flag)
  5303  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5304  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5305  0E2B  086E               	movf	_ok_flag,w
  5306  0E2C  1903               	btfsc	3,2
  5307  0E2D  2D7F               	goto	l5816
  5308                           
  5309                           ;main.c: 300: {
  5310                           ;main.c: 301: ok_flag = 1;
  5311  0E2E  01EE               	clrf	_ok_flag
  5312  0E2F  0AEE               	incf	_ok_flag,f
  5313                           
  5314                           ;main.c: 302: ok_flag_co2 = 1;
  5315  0E30  1683               	bsf	3,5	;RP0=1, select bank1
  5316  0E31  01B5               	clrf	_ok_flag_co2^(0+128)
  5317  0E32  0AB5               	incf	_ok_flag_co2^(0+128),f
  5318  0E33  2D7F               	goto	l5816
  5319  0E34                     __end_of_menuCO2:	
  5320  0E34                     __ptext25:	
  5321 ;; *************** function _LcdWriteInt *****************
  5322 ;; Defined at:
  5323 ;;		line 125 in file "lcd.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  i               2    4[BANK0 ] unsigned int 
  5326 ;;  row             1    6[BANK0 ] unsigned char 
  5327 ;;  column          1    7[BANK0 ] unsigned char 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  ch              1   10[BANK0 ] unsigned char 
  5330 ;;  ch_manje_100    1    9[BANK0 ] unsigned char 
  5331 ;;  ch_manje_100    1    8[BANK0 ] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 300/0
  5338 ;;		On exit  : 300/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5341 ;;      Params:         0       4       0       0       0
  5342 ;;      Locals:         0       3       0       0       0
  5343 ;;      Temps:          0       0       0       0       0
  5344 ;;      Totals:         0       7       0       0       0
  5345 ;;Total ram usage:        7 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    4
  5348 ;; This function calls:
  5349 ;;		_LcdSetCursor
  5350 ;;		_LcdWriteChar
  5351 ;;		___lwdiv
  5352 ;;		___wmul
  5353 ;; This function is called by:
  5354 ;;		_displayCO2
  5355 ;;		_menuCO2
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _LcdWriteInt
  5361  0E34                     _LcdWriteInt:	
  5362  0E34  30E8               	movlw	232
  5363                           
  5364                           ;lcd.c: 126: unsigned char ch, ch_manje_1000=0, ch_manje_100=0;
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _LcdWriteInt: [wreg+status,2+status,0+pclath+cstack]
  5368  0E35  01A9               	clrf	LcdWriteInt@ch_manje_1000
  5369  0E36  01A8               	clrf	LcdWriteInt@ch_manje_100
  5370                           
  5371                           ;lcd.c: 128: ch = i/1000;
  5372  0E37  00F2               	movwf	___lwdiv@divisor
  5373  0E38  3003               	movlw	3
  5374  0E39  00F3               	movwf	___lwdiv@divisor+1
  5375  0E3A  0825               	movf	LcdWriteInt@i+1,w
  5376  0E3B  00F5               	movwf	___lwdiv@dividend+1
  5377  0E3C  0824               	movf	LcdWriteInt@i,w
  5378  0E3D  00F4               	movwf	___lwdiv@dividend
  5379  0E3E  2735  120A  158A   	fcall	___lwdiv
  5380  0E41  0872               	movf	?___lwdiv,w
  5381  0E42  00AA               	movwf	LcdWriteInt@ch
  5382                           
  5383                           ;lcd.c: 129: if(ch == 0)
  5384  0E43  082A               	movf	LcdWriteInt@ch,w
  5385  0E44  1D03               	btfss	3,2
  5386  0E45  2E50               	goto	l5272
  5387                           
  5388                           ;lcd.c: 130: {
  5389                           ;lcd.c: 131: ch_manje_1000 = 1;
  5390  0E46  01A9               	clrf	LcdWriteInt@ch_manje_1000
  5391  0E47  0AA9               	incf	LcdWriteInt@ch_manje_1000,f
  5392                           
  5393                           ;lcd.c: 132: LcdSetCursor(row,column);
  5394  0E48  0827               	movf	LcdWriteInt@column,w
  5395  0E49  00F6               	movwf	LcdSetCursor@b
  5396  0E4A  0826               	movf	LcdWriteInt@row,w
  5397  0E4B  26E8  120A  158A   	fcall	_LcdSetCursor
  5398                           
  5399                           ;lcd.c: 133: LcdWriteChar(' ');
  5400  0E4E  3020               	movlw	32
  5401  0E4F  2E58               	goto	L4
  5402  0E50                     l5272:	
  5403                           ;lcd.c: 134: }
  5404                           
  5405  0E50  3002               	movlw	2
  5406                           
  5407                           ;lcd.c: 135: else
  5408                           ;lcd.c: 136: {
  5409                           ;lcd.c: 137: LcdSetCursor(2,1);
  5410  0E51  01F6               	clrf	LcdSetCursor@b
  5411  0E52  0AF6               	incf	LcdSetCursor@b,f
  5412  0E53  26E8  120A  158A   	fcall	_LcdSetCursor
  5413                           
  5414                           ;lcd.c: 138: LcdWriteChar(ch+'0');
  5415  0E56  082A               	movf	LcdWriteInt@ch,w
  5416  0E57  3E30               	addlw	48
  5417  0E58                     L4:	
  5418  0E58  2710               	fcall	_LcdWriteChar
  5419                           
  5420                           ;lcd.c: 139: }
  5421                           ;lcd.c: 142: i = (i - ch*1000);
  5422  0E59  082A               	movf	LcdWriteInt@ch,w
  5423  0E5A  00F2               	movwf	___wmul@multiplier
  5424  0E5B  30E8               	movlw	232
  5425  0E5C  01F3               	clrf	___wmul@multiplier+1
  5426  0E5D  00F4               	movwf	___wmul@multiplicand
  5427  0E5E  3003               	movlw	3
  5428  0E5F  00F5               	movwf	___wmul@multiplicand+1
  5429  0E60  120A  118A  2674  120A  158A  	fcall	___wmul
  5430  0E65  0872               	movf	?___wmul,w
  5431  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  5432  0E67  02A4               	subwf	LcdWriteInt@i,f
  5433  0E68  0873               	movf	?___wmul+1,w
  5434  0E69  1C03               	skipc
  5435  0E6A  03A5               	decf	LcdWriteInt@i+1,f
  5436  0E6B  02A5               	subwf	LcdWriteInt@i+1,f
  5437                           
  5438                           ;lcd.c: 143: ch = i/100;
  5439  0E6C  3064               	movlw	100
  5440  0E6D  00F2               	movwf	___lwdiv@divisor
  5441  0E6E  01F3               	clrf	___lwdiv@divisor+1
  5442  0E6F  0825               	movf	LcdWriteInt@i+1,w
  5443  0E70  00F5               	movwf	___lwdiv@dividend+1
  5444  0E71  0824               	movf	LcdWriteInt@i,w
  5445  0E72  00F4               	movwf	___lwdiv@dividend
  5446  0E73  2735  120A  158A   	fcall	___lwdiv
  5447  0E76  0872               	movf	?___lwdiv,w
  5448  0E77  00AA               	movwf	LcdWriteInt@ch
  5449                           
  5450                           ;lcd.c: 144: if((ch == 0) && (ch_manje_1000))
  5451  0E78  082A               	movf	LcdWriteInt@ch,w
  5452  0E79  1D03               	btfss	3,2
  5453  0E7A  2E89               	goto	l5282
  5454  0E7B  0829               	movf	LcdWriteInt@ch_manje_1000,w
  5455  0E7C  1903               	btfsc	3,2
  5456  0E7D  2E89               	goto	l5282
  5457                           
  5458                           ;lcd.c: 145: {
  5459                           ;lcd.c: 146: ch_manje_100 = 1;
  5460  0E7E  01A8               	clrf	LcdWriteInt@ch_manje_100
  5461  0E7F  0AA8               	incf	LcdWriteInt@ch_manje_100,f
  5462                           
  5463                           ;lcd.c: 147: LcdSetCursor(row,column+1);
  5464  0E80  0827               	movf	LcdWriteInt@column,w
  5465  0E81  3E01               	addlw	1
  5466  0E82  00F6               	movwf	LcdSetCursor@b
  5467  0E83  0826               	movf	LcdWriteInt@row,w
  5468  0E84  26E8  120A  158A   	fcall	_LcdSetCursor
  5469                           
  5470                           ;lcd.c: 148: LcdWriteChar(' ');
  5471  0E87  3020               	movlw	32
  5472  0E88  2E90               	goto	L5
  5473  0E89                     l5282:	
  5474                           ;lcd.c: 149: }
  5475                           
  5476                           
  5477                           ;lcd.c: 150: else
  5478                           ;lcd.c: 151: {
  5479                           ;lcd.c: 152: LcdSetCursor(2,2);
  5480  0E89  3002               	movlw	2
  5481  0E8A  00F6               	movwf	LcdSetCursor@b
  5482  0E8B  26E8  120A  158A   	fcall	_LcdSetCursor
  5483                           
  5484                           ;lcd.c: 153: LcdWriteChar(ch+'0');
  5485  0E8E  082A               	movf	LcdWriteInt@ch,w
  5486  0E8F  3E30               	addlw	48
  5487  0E90                     L5:	
  5488  0E90  2710               	fcall	_LcdWriteChar
  5489                           
  5490                           ;lcd.c: 154: }
  5491                           ;lcd.c: 157: i = (i - ch*100);
  5492  0E91  082A               	movf	LcdWriteInt@ch,w
  5493  0E92  00F2               	movwf	___wmul@multiplier
  5494  0E93  3064               	movlw	100
  5495  0E94  01F3               	clrf	___wmul@multiplier+1
  5496  0E95  00F4               	movwf	___wmul@multiplicand
  5497  0E96  01F5               	clrf	___wmul@multiplicand+1
  5498  0E97  120A  118A  2674  120A  158A  	fcall	___wmul
  5499  0E9C  0872               	movf	?___wmul,w
  5500  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  5501  0E9E  02A4               	subwf	LcdWriteInt@i,f
  5502  0E9F  0873               	movf	?___wmul+1,w
  5503  0EA0  1C03               	skipc
  5504  0EA1  03A5               	decf	LcdWriteInt@i+1,f
  5505  0EA2  02A5               	subwf	LcdWriteInt@i+1,f
  5506                           
  5507                           ;lcd.c: 158: ch = i/10;
  5508  0EA3  300A               	movlw	10
  5509  0EA4  00F2               	movwf	___lwdiv@divisor
  5510  0EA5  01F3               	clrf	___lwdiv@divisor+1
  5511  0EA6  0825               	movf	LcdWriteInt@i+1,w
  5512  0EA7  00F5               	movwf	___lwdiv@dividend+1
  5513  0EA8  0824               	movf	LcdWriteInt@i,w
  5514  0EA9  00F4               	movwf	___lwdiv@dividend
  5515  0EAA  2735  120A  158A   	fcall	___lwdiv
  5516  0EAD  0872               	movf	?___lwdiv,w
  5517  0EAE  00AA               	movwf	LcdWriteInt@ch
  5518                           
  5519                           ;lcd.c: 159: if((ch == 0) && (ch_manje_1000) && (ch_manje_100))
  5520  0EAF  082A               	movf	LcdWriteInt@ch,w
  5521  0EB0  1D03               	btfss	3,2
  5522  0EB1  2EC1               	goto	l5292
  5523  0EB2  0829               	movf	LcdWriteInt@ch_manje_1000,w
  5524  0EB3  1903               	btfsc	3,2
  5525  0EB4  2EC1               	goto	l5292
  5526  0EB5  0828               	movf	LcdWriteInt@ch_manje_100,w
  5527  0EB6  1903               	btfsc	3,2
  5528  0EB7  2EC1               	goto	l5292
  5529                           
  5530                           ;lcd.c: 160: {
  5531                           ;lcd.c: 161: LcdSetCursor(row,column+2);
  5532  0EB8  0827               	movf	LcdWriteInt@column,w
  5533  0EB9  3E02               	addlw	2
  5534  0EBA  00F6               	movwf	LcdSetCursor@b
  5535  0EBB  0826               	movf	LcdWriteInt@row,w
  5536  0EBC  26E8  120A  158A   	fcall	_LcdSetCursor
  5537                           
  5538                           ;lcd.c: 162: LcdWriteChar(' ');
  5539  0EBF  3020               	movlw	32
  5540  0EC0  2EC9               	goto	L6
  5541  0EC1                     l5292:	
  5542                           ;lcd.c: 163: }
  5543                           
  5544                           
  5545                           ;lcd.c: 164: else
  5546                           ;lcd.c: 165: {
  5547                           ;lcd.c: 166: LcdSetCursor(2,3);
  5548  0EC1  3003               	movlw	3
  5549  0EC2  00F6               	movwf	LcdSetCursor@b
  5550  0EC3  3002               	movlw	2
  5551  0EC4  26E8  120A  158A   	fcall	_LcdSetCursor
  5552                           
  5553                           ;lcd.c: 167: LcdWriteChar(ch+'0');
  5554  0EC7  082A               	movf	LcdWriteInt@ch,w
  5555  0EC8  3E30               	addlw	48
  5556  0EC9                     L6:	
  5557  0EC9  2710               	fcall	_LcdWriteChar
  5558                           
  5559                           ;lcd.c: 168: }
  5560                           ;lcd.c: 171: i = (i - ch*10);
  5561  0ECA  082A               	movf	LcdWriteInt@ch,w
  5562  0ECB  00F2               	movwf	___wmul@multiplier
  5563  0ECC  300A               	movlw	10
  5564  0ECD  01F3               	clrf	___wmul@multiplier+1
  5565  0ECE  00F4               	movwf	___wmul@multiplicand
  5566  0ECF  01F5               	clrf	___wmul@multiplicand+1
  5567  0ED0  120A  118A  2674  120A  158A  	fcall	___wmul
  5568  0ED5  0872               	movf	?___wmul,w
  5569  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  5570  0ED7  02A4               	subwf	LcdWriteInt@i,f
  5571  0ED8  0873               	movf	?___wmul+1,w
  5572  0ED9  1C03               	skipc
  5573  0EDA  03A5               	decf	LcdWriteInt@i+1,f
  5574  0EDB  02A5               	subwf	LcdWriteInt@i+1,f
  5575                           
  5576                           ;lcd.c: 172: ch = i;
  5577  0EDC  0824               	movf	LcdWriteInt@i,w
  5578  0EDD  00AA               	movwf	LcdWriteInt@ch
  5579                           
  5580                           ;lcd.c: 173: LcdSetCursor(row,column+3);
  5581  0EDE  0827               	movf	LcdWriteInt@column,w
  5582  0EDF  3E03               	addlw	3
  5583  0EE0  00F6               	movwf	LcdSetCursor@b
  5584  0EE1  0826               	movf	LcdWriteInt@row,w
  5585  0EE2  26E8  120A  158A   	fcall	_LcdSetCursor
  5586                           
  5587                           ;lcd.c: 174: LcdWriteChar(ch+'0');
  5588  0EE5  082A               	movf	LcdWriteInt@ch,w
  5589  0EE6  3E30               	addlw	48
  5590  0EE7  2F10               	ljmp	_LcdWriteChar
  5591  0EE8                     __end_of_LcdWriteInt:	
  5592  0EE8                     __ptext52:	
  5593 ;; *************** function _LcdSetCursor *****************
  5594 ;; Defined at:
  5595 ;;		line 45 in file "lcd.c"
  5596 ;; Parameters:    Size  Location     Type
  5597 ;;  a               1    wreg     unsigned char 
  5598 ;;  b               1    6[COMMON] unsigned char 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  a               1    0[BANK0 ] unsigned char 
  5601 ;;  temp            1    3[BANK0 ] unsigned char 
  5602 ;;  y               1    2[BANK0 ] unsigned char 
  5603 ;;  z               1    1[BANK0 ] unsigned char 
  5604 ;; Return value:  Size  Location     Type
  5605 ;;		None               void
  5606 ;; Registers used:
  5607 ;;		wreg, status,2, status,0, pclath, cstack
  5608 ;; Tracked objects:
  5609 ;;		On entry : 200/100
  5610 ;;		On exit  : 300/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5613 ;;      Params:         1       0       0       0       0
  5614 ;;      Locals:         0       4       0       0       0
  5615 ;;      Temps:          0       0       0       0       0
  5616 ;;      Totals:         1       4       0       0       0
  5617 ;;Total ram usage:        5 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    3
  5620 ;; This function calls:
  5621 ;;		_LcdCmd
  5622 ;; This function is called by:
  5623 ;;		_LcdWriteInt
  5624 ;;		_getResSHT71
  5625 ;;		_displayAirTemp
  5626 ;;		_displayAirMoist
  5627 ;;		_displayCO2
  5628 ;;		_displaySoilTemp
  5629 ;;		_menuCO2
  5630 ;;		_menuHumi
  5631 ;;		_menu
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           
  5636                           ;psect for function _LcdSetCursor
  5637  0EE8                     _LcdSetCursor:	
  5638                           
  5639                           ;incstack = 0
  5640                           ; Regs used in _LcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  5641                           ;LcdSetCursor@a stored from wreg
  5642  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  5643  0EE9  00A0               	movwf	LcdSetCursor@a
  5644                           
  5645                           ;lcd.c: 47: char temp,z,y;
  5646                           ;lcd.c: 48: if(a == 1)
  5647  0EEA  0B20               	decfsz	LcdSetCursor@a,w
  5648  0EEB  2EFC               	goto	l5022
  5649                           
  5650                           ;lcd.c: 49: {
  5651                           ;lcd.c: 50: temp = 0x80 + b - 1;
  5652  0EEC  0876               	movf	LcdSetCursor@b,w
  5653  0EED  3E7F               	addlw	127
  5654  0EEE  00A3               	movwf	LcdSetCursor@temp
  5655                           
  5656                           ;lcd.c: 51: z = temp>>4;
  5657  0EEF  0E23               	swapf	LcdSetCursor@temp,w
  5658  0EF0  390F               	andlw	15
  5659  0EF1  00A1               	movwf	LcdSetCursor@z
  5660                           
  5661                           ;lcd.c: 52: y = temp & 0x0F;
  5662  0EF2  0823               	movf	LcdSetCursor@temp,w
  5663  0EF3  00A2               	movwf	LcdSetCursor@y
  5664  0EF4  300F               	movlw	15
  5665  0EF5  05A2               	andwf	LcdSetCursor@y,f
  5666                           
  5667                           ;lcd.c: 53: LcdCmd(z);
  5668  0EF6  0821               	movf	LcdSetCursor@z,w
  5669  0EF7  27AA  120A  158A   	fcall	_LcdCmd
  5670                           
  5671                           ;lcd.c: 54: LcdCmd(y);
  5672  0EFA  0822               	movf	LcdSetCursor@y,w
  5673  0EFB  2FAA               	ljmp	_LcdCmd
  5674  0EFC                     l5022:	
  5675                           ;lcd.c: 55: }
  5676                           
  5677                           
  5678                           ;lcd.c: 56: else if(a == 2)
  5679  0EFC  3002               	movlw	2
  5680  0EFD  0620               	xorwf	LcdSetCursor@a,w
  5681  0EFE  1D03               	btfss	3,2
  5682  0EFF  0008               	return
  5683                           
  5684                           ;lcd.c: 57: {
  5685                           ;lcd.c: 58: temp = 0xC0 + b - 1;
  5686  0F00  0876               	movf	LcdSetCursor@b,w
  5687  0F01  3EBF               	addlw	191
  5688  0F02  00A3               	movwf	LcdSetCursor@temp
  5689                           
  5690                           ;lcd.c: 59: z = temp>>4;
  5691  0F03  0E23               	swapf	LcdSetCursor@temp,w
  5692  0F04  390F               	andlw	15
  5693  0F05  00A1               	movwf	LcdSetCursor@z
  5694                           
  5695                           ;lcd.c: 60: y = temp & 0x0F;
  5696  0F06  0823               	movf	LcdSetCursor@temp,w
  5697  0F07  00A2               	movwf	LcdSetCursor@y
  5698  0F08  300F               	movlw	15
  5699  0F09  05A2               	andwf	LcdSetCursor@y,f
  5700                           
  5701                           ;lcd.c: 61: LcdCmd(z);
  5702  0F0A  0821               	movf	LcdSetCursor@z,w
  5703  0F0B  27AA  120A  158A   	fcall	_LcdCmd
  5704                           
  5705                           ;lcd.c: 62: LcdCmd(y);
  5706  0F0E  0822               	movf	LcdSetCursor@y,w
  5707  0F0F  2FAA               	ljmp	_LcdCmd
  5708  0F10                     __end_of_LcdSetCursor:	
  5709  0F10                     __ptext51:	
  5710 ;; *************** function _LcdWriteChar *****************
  5711 ;; Defined at:
  5712 ;;		line 90 in file "lcd.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  a               1    wreg     unsigned char 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  a               1    6[COMMON] unsigned char 
  5717 ;;  y               1    5[COMMON] unsigned char 
  5718 ;;  temp            1    4[COMMON] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;		None               void
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0, pclath, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 300/0
  5725 ;;		On exit  : 300/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5728 ;;      Params:         0       0       0       0       0
  5729 ;;      Locals:         3       0       0       0       0
  5730 ;;      Temps:          1       0       0       0       0
  5731 ;;      Totals:         4       0       0       0       0
  5732 ;;Total ram usage:        4 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    2
  5735 ;; This function calls:
  5736 ;;		_LcdPort
  5737 ;; This function is called by:
  5738 ;;		_LcdWriteString
  5739 ;;		_LcdWriteInt
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           
  5744                           ;psect for function _LcdWriteChar
  5745  0F10                     _LcdWriteChar:	
  5746                           
  5747                           ;incstack = 0
  5748                           ; Regs used in _LcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  5749                           ;LcdWriteChar@a stored from wreg
  5750  0F10  00F6               	movwf	LcdWriteChar@a
  5751                           
  5752                           ;lcd.c: 92: char temp,y;
  5753                           ;lcd.c: 93: temp = a&0x0F;
  5754  0F11  00F4               	movwf	LcdWriteChar@temp
  5755  0F12  300F               	movlw	15
  5756  0F13  05F4               	andwf	LcdWriteChar@temp,f
  5757                           
  5758                           ;lcd.c: 94: y = a&0xF0;
  5759  0F14  0876               	movf	LcdWriteChar@a,w
  5760  0F15  00F5               	movwf	LcdWriteChar@y
  5761  0F16  30F0               	movlw	240
  5762  0F17  05F5               	andwf	LcdWriteChar@y,f
  5763                           
  5764                           ;lcd.c: 95: RB5 = 1;
  5765  0F18  1686               	bsf	6,5	;volatile
  5766                           
  5767                           ;lcd.c: 96: LcdPort(y>>4);
  5768  0F19  0E75               	swapf	LcdWriteChar@y,w
  5769  0F1A  390F               	andlw	15
  5770  0F1B  27C0  120A  158A   	fcall	_LcdPort
  5771                           
  5772                           ;lcd.c: 97: RB4 = 1;
  5773  0F1E  1606               	bsf	6,4	;volatile
  5774                           
  5775                           ;lcd.c: 98: _delay((unsigned long)((40)*(8000000/4000000.0)));
  5776  0F1F  301A               	movlw	26
  5777  0F20  00F3               	movwf	??_LcdWriteChar
  5778  0F21                     u8057:	
  5779  0F21  0BF3               	decfsz	??_LcdWriteChar,f
  5780  0F22  2F21               	goto	u8057
  5781  0F23  0000               	nop
  5782                           
  5783                           ;lcd.c: 99: RB4 = 0;
  5784  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  5785  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  5786  0F26  1206               	bcf	6,4	;volatile
  5787                           
  5788                           ;lcd.c: 100: LcdPort(temp);
  5789  0F27  0874               	movf	LcdWriteChar@temp,w
  5790  0F28  27C0  120A  158A   	fcall	_LcdPort
  5791                           
  5792                           ;lcd.c: 101: RB4 = 1;
  5793  0F2B  1606               	bsf	6,4	;volatile
  5794                           
  5795                           ;lcd.c: 102: _delay((unsigned long)((40)*(8000000/4000000.0)));
  5796  0F2C  301A               	movlw	26
  5797  0F2D  00F3               	movwf	??_LcdWriteChar
  5798  0F2E                     u8067:	
  5799  0F2E  0BF3               	decfsz	??_LcdWriteChar,f
  5800  0F2F  2F2E               	goto	u8067
  5801  0F30  0000               	nop
  5802                           
  5803                           ;lcd.c: 103: RB4 = 0;
  5804  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  5805  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  5806  0F33  1206               	bcf	6,4	;volatile
  5807  0F34  0008               	return
  5808  0F35                     __end_of_LcdWriteChar:	
  5809  0F35                     __ptext26:	
  5810 ;; *************** function ___lwdiv *****************
  5811 ;; Defined at:
  5812 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  divisor         2    2[COMMON] unsigned int 
  5815 ;;  dividend        2    4[COMMON] unsigned int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  quotient        2    6[COMMON] unsigned int 
  5818 ;;  counter         1    8[COMMON] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  2    2[COMMON] unsigned int 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 300/0
  5825 ;;		On exit  : 300/0
  5826 ;;		Unchanged: 300/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5828 ;;      Params:         4       0       0       0       0
  5829 ;;      Locals:         3       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0
  5831 ;;      Totals:         7       0       0       0       0
  5832 ;;Total ram usage:        7 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    1
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_LcdWriteInt
  5839 ;;		_measureTGS4161
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function ___lwdiv
  5845  0F35                     ___lwdiv:	
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5849  0F35  01F6               	clrf	___lwdiv@quotient
  5850  0F36  01F7               	clrf	___lwdiv@quotient+1
  5851  0F37  0872               	movf	___lwdiv@divisor,w
  5852  0F38  0473               	iorwf	___lwdiv@divisor+1,w
  5853  0F39  1903               	btfsc	3,2
  5854  0F3A  2F5A               	goto	l3464
  5855  0F3B  01F8               	clrf	___lwdiv@counter
  5856  0F3C                     L7:	
  5857  0F3C  0AF8               	incf	___lwdiv@counter,f
  5858  0F3D  1BF3               	btfsc	___lwdiv@divisor+1,7
  5859  0F3E  2F43               	goto	l3452
  5860  0F3F  1003               	clrc
  5861  0F40  0DF2               	rlf	___lwdiv@divisor,f
  5862  0F41  0DF3               	rlf	___lwdiv@divisor+1,f
  5863  0F42  2F3C               	goto	L7
  5864  0F43                     l3452:	
  5865  0F43  1003               	clrc
  5866  0F44  0DF6               	rlf	___lwdiv@quotient,f
  5867  0F45  0DF7               	rlf	___lwdiv@quotient+1,f
  5868  0F46  0873               	movf	___lwdiv@divisor+1,w
  5869  0F47  0275               	subwf	___lwdiv@dividend+1,w
  5870  0F48  1D03               	skipz
  5871  0F49  2F4C               	goto	u3495
  5872  0F4A  0872               	movf	___lwdiv@divisor,w
  5873  0F4B  0274               	subwf	___lwdiv@dividend,w
  5874  0F4C                     u3495:	
  5875  0F4C  1C03               	skipc
  5876  0F4D  2F56               	goto	L8
  5877  0F4E  0872               	movf	___lwdiv@divisor,w
  5878  0F4F  02F4               	subwf	___lwdiv@dividend,f
  5879  0F50  0873               	movf	___lwdiv@divisor+1,w
  5880  0F51  1C03               	skipc
  5881  0F52  03F5               	decf	___lwdiv@dividend+1,f
  5882  0F53  02F5               	subwf	___lwdiv@dividend+1,f
  5883  0F54  1476               	bsf	___lwdiv@quotient,0
  5884  0F55  1003               	clrc
  5885  0F56                     L8:	
  5886  0F56  0CF3               	rrf	___lwdiv@divisor+1,f
  5887  0F57  0CF2               	rrf	___lwdiv@divisor,f
  5888  0F58  0BF8               	decfsz	___lwdiv@counter,f
  5889  0F59  2F43               	goto	l3452
  5890  0F5A                     l3464:	
  5891  0F5A  0877               	movf	___lwdiv@quotient+1,w
  5892  0F5B  00F3               	movwf	?___lwdiv+1
  5893  0F5C  0876               	movf	___lwdiv@quotient,w
  5894  0F5D  00F2               	movwf	?___lwdiv
  5895  0F5E  0008               	return
  5896  0F5F                     __end_of___lwdiv:	
  5897  0F5F                     __ptext56:	
  5898 ;; *************** function _LcdInit *****************
  5899 ;; Defined at:
  5900 ;;		line 66 in file "lcd.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;		None
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;		None
  5905 ;; Return value:  Size  Location     Type
  5906 ;;		None               void
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, pclath, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : B00/0
  5911 ;;		On exit  : 300/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5914 ;;      Params:         0       0       0       0       0
  5915 ;;      Locals:         0       0       0       0       0
  5916 ;;      Temps:          2       0       0       0       0
  5917 ;;      Totals:         2       0       0       0       0
  5918 ;;Total ram usage:        2 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    3
  5921 ;; This function calls:
  5922 ;;		_LcdCmd
  5923 ;;		_LcdPort
  5924 ;; This function is called by:
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _LcdInit
  5931  0F5F                     _LcdInit:	
  5932                           
  5933                           ;lcd.c: 69: OPTION_REG |= 0b10000000;
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _LcdInit: [wreg+status,2+status,0+pclath+cstack]
  5937  0F5F  1683               	bsf	3,5	;RP0=1, select bank1
  5938  0F60  1781               	bsf	1,7	;volatile
  5939                           
  5940                           ;lcd.c: 70: ANSELH &= 0b11000000;
  5941  0F61  30C0               	movlw	192
  5942  0F62  1703               	bsf	3,6	;RP1=1, select bank3
  5943  0F63  0589               	andwf	9,f	;volatile
  5944                           
  5945                           ;lcd.c: 71: TRISB = 0b00000000;
  5946  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  5947  0F65  0186               	clrf	6	;volatile
  5948                           
  5949                           ;lcd.c: 73: LcdPort(0x00);
  5950  0F66  3000               	movlw	0
  5951  0F67  27C0  120A  158A   	fcall	_LcdPort
  5952                           
  5953                           ;lcd.c: 74: _delay((unsigned long)((20)*(8000000/4000.0)));
  5954  0F6A  3034               	movlw	52
  5955  0F6B  00F7               	movwf	??_LcdInit+1
  5956  0F6C  30F1               	movlw	241
  5957  0F6D  00F6               	movwf	??_LcdInit
  5958  0F6E                     u8077:	
  5959  0F6E  0BF6               	decfsz	??_LcdInit,f
  5960  0F6F  2F6E               	goto	u8077
  5961  0F70  0BF7               	decfsz	??_LcdInit+1,f
  5962  0F71  2F6E               	goto	u8077
  5963  0F72  2F73               	nop2
  5964                           
  5965                           ;lcd.c: 75: LcdCmd(0x03);
  5966  0F73  3003               	movlw	3
  5967  0F74  27AA  120A  158A   	fcall	_LcdCmd
  5968                           
  5969                           ;lcd.c: 76: _delay((unsigned long)((5)*(8000000/4000.0)));
  5970  0F77  300D               	movlw	13
  5971  0F78  00F7               	movwf	??_LcdInit+1
  5972  0F79  30FB               	movlw	251
  5973  0F7A  00F6               	movwf	??_LcdInit
  5974  0F7B                     u8087:	
  5975  0F7B  0BF6               	decfsz	??_LcdInit,f
  5976  0F7C  2F7B               	goto	u8087
  5977  0F7D  0BF7               	decfsz	??_LcdInit+1,f
  5978  0F7E  2F7B               	goto	u8087
  5979  0F7F  2F80               	nop2
  5980                           
  5981                           ;lcd.c: 77: LcdCmd(0x03);
  5982  0F80  3003               	movlw	3
  5983  0F81  27AA  120A  158A   	fcall	_LcdCmd
  5984                           
  5985                           ;lcd.c: 78: _delay((unsigned long)((11)*(8000000/4000.0)));
  5986  0F84  301D               	movlw	29
  5987  0F85  00F7               	movwf	??_LcdInit+1
  5988  0F86  3091               	movlw	145
  5989  0F87  00F6               	movwf	??_LcdInit
  5990  0F88                     u8097:	
  5991  0F88  0BF6               	decfsz	??_LcdInit,f
  5992  0F89  2F88               	goto	u8097
  5993  0F8A  0BF7               	decfsz	??_LcdInit+1,f
  5994  0F8B  2F88               	goto	u8097
  5995                           
  5996                           ;lcd.c: 79: LcdCmd(0x03);
  5997  0F8C  3003               	movlw	3
  5998  0F8D  27AA  120A  158A   	fcall	_LcdCmd
  5999                           
  6000                           ;lcd.c: 81: LcdCmd(0x02);
  6001  0F90  3002               	movlw	2
  6002  0F91  27AA  120A  158A   	fcall	_LcdCmd
  6003                           
  6004                           ;lcd.c: 82: LcdCmd(0x02);
  6005  0F94  3002               	movlw	2
  6006  0F95  27AA  120A  158A   	fcall	_LcdCmd
  6007                           
  6008                           ;lcd.c: 83: LcdCmd(0x08);
  6009  0F98  3008               	movlw	8
  6010  0F99  27AA  120A  158A   	fcall	_LcdCmd
  6011                           
  6012                           ;lcd.c: 84: LcdCmd(0x00);
  6013  0F9C  3000               	movlw	0
  6014  0F9D  27AA  120A  158A   	fcall	_LcdCmd
  6015                           
  6016                           ;lcd.c: 85: LcdCmd(0x0C);
  6017  0FA0  300C               	movlw	12
  6018  0FA1  27AA  120A  158A   	fcall	_LcdCmd
  6019                           
  6020                           ;lcd.c: 86: LcdCmd(0x00);
  6021  0FA4  3000               	movlw	0
  6022  0FA5  27AA  120A  158A   	fcall	_LcdCmd
  6023                           
  6024                           ;lcd.c: 87: LcdCmd(0x06);
  6025  0FA8  3006               	movlw	6
  6026  0FA9  2FAA               	ljmp	_LcdCmd
  6027  0FAA                     __end_of_LcdInit:	
  6028  0FAA                     __ptext57:	
  6029 ;; *************** function _LcdCmd *****************
  6030 ;; Defined at:
  6031 ;;		line 30 in file "lcd.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  a               1    wreg     unsigned char 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  a               1    5[COMMON] unsigned char 
  6036 ;; Return value:  Size  Location     Type
  6037 ;;		None               void
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0, pclath, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 300/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6045 ;;      Params:         0       0       0       0       0
  6046 ;;      Locals:         1       0       0       0       0
  6047 ;;      Temps:          2       0       0       0       0
  6048 ;;      Totals:         3       0       0       0       0
  6049 ;;Total ram usage:        3 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    2
  6052 ;; This function calls:
  6053 ;;		_LcdPort
  6054 ;; This function is called by:
  6055 ;;		_LcdSetCursor
  6056 ;;		_LcdInit
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           
  6061                           ;psect for function _LcdCmd
  6062  0FAA                     _LcdCmd:	
  6063                           
  6064                           ;incstack = 0
  6065                           ; Regs used in _LcdCmd: [wreg+status,2+status,0+pclath+cstack]
  6066                           ;LcdCmd@a stored from wreg
  6067  0FAA  00F5               	movwf	LcdCmd@a
  6068                           
  6069                           ;lcd.c: 32: RB5 = 0;
  6070  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  6071  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  6072  0FAD  1286               	bcf	6,5	;volatile
  6073                           
  6074                           ;lcd.c: 33: LcdPort(a);
  6075  0FAE  0875               	movf	LcdCmd@a,w
  6076  0FAF  27C0  120A  158A   	fcall	_LcdPort
  6077                           
  6078                           ;lcd.c: 34: RB4 = 1;
  6079  0FB2  1606               	bsf	6,4	;volatile
  6080                           
  6081                           ;lcd.c: 35: _delay((unsigned long)((4)*(8000000/4000.0)));
  6082  0FB3  300B               	movlw	11
  6083  0FB4  00F4               	movwf	??_LcdCmd+1
  6084  0FB5  3062               	movlw	98
  6085  0FB6  00F3               	movwf	??_LcdCmd
  6086  0FB7                     u8107:	
  6087  0FB7  0BF3               	decfsz	??_LcdCmd,f
  6088  0FB8  2FB7               	goto	u8107
  6089  0FB9  0BF4               	decfsz	??_LcdCmd+1,f
  6090  0FBA  2FB7               	goto	u8107
  6091  0FBB  0000               	nop
  6092                           
  6093                           ;lcd.c: 36: RB4 = 0;
  6094  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  6095  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  6096  0FBE  1206               	bcf	6,4	;volatile
  6097  0FBF  0008               	return
  6098  0FC0                     __end_of_LcdCmd:	
  6099  0FC0                     __ptext58:	
  6100 ;; *************** function _LcdPort *****************
  6101 ;; Defined at:
  6102 ;;		line 8 in file "lcd.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  a               1    wreg     unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  a               1    2[COMMON] unsigned char 
  6107 ;; Return value:  Size  Location     Type
  6108 ;;		None               void
  6109 ;; Registers used:
  6110 ;;		wreg
  6111 ;; Tracked objects:
  6112 ;;		On entry : 200/0
  6113 ;;		On exit  : 300/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6116 ;;      Params:         0       0       0       0       0
  6117 ;;      Locals:         1       0       0       0       0
  6118 ;;      Temps:          0       0       0       0       0
  6119 ;;      Totals:         1       0       0       0       0
  6120 ;;Total ram usage:        1 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    1
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_LcdCmd
  6127 ;;		_LcdInit
  6128 ;;		_LcdWriteChar
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           
  6133                           ;psect for function _LcdPort
  6134  0FC0                     _LcdPort:	
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in _LcdPort: [wreg]
  6138                           ;LcdPort@a stored from wreg
  6139  0FC0  00F2               	movwf	LcdPort@a
  6140                           
  6141                           ;lcd.c: 10: if(a & 1)
  6142  0FC1  1C72               	btfss	LcdPort@a,0
  6143  0FC2  2FC6               	goto	l51
  6144                           
  6145                           ;lcd.c: 11: RB0 = 1;
  6146  0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  6147  0FC4  1406               	bsf	6,0	;volatile
  6148  0FC5  2FC8               	goto	l52
  6149  0FC6                     l51:	
  6150                           
  6151                           ;lcd.c: 12: else
  6152                           ;lcd.c: 13: RB0 = 0;
  6153  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  6154  0FC7  1006               	bcf	6,0	;volatile
  6155  0FC8                     l52:	
  6156                           
  6157                           ;lcd.c: 15: if(a & 2)
  6158  0FC8  1CF2               	btfss	LcdPort@a,1
  6159  0FC9  2FCC               	goto	l53
  6160                           
  6161                           ;lcd.c: 16: RB1 = 1;
  6162  0FCA  1486               	bsf	6,1	;volatile
  6163  0FCB  2FCD               	goto	l54
  6164  0FCC                     l53:	
  6165                           
  6166                           ;lcd.c: 17: else
  6167                           ;lcd.c: 18: RB1 = 0;
  6168  0FCC  1086               	bcf	6,1	;volatile
  6169  0FCD                     l54:	
  6170                           
  6171                           ;lcd.c: 20: if(a & 4)
  6172  0FCD  1D72               	btfss	LcdPort@a,2
  6173  0FCE  2FD1               	goto	l55
  6174                           
  6175                           ;lcd.c: 21: RB2 = 1;
  6176  0FCF  1506               	bsf	6,2	;volatile
  6177  0FD0  2FD2               	goto	l56
  6178  0FD1                     l55:	
  6179                           
  6180                           ;lcd.c: 22: else
  6181                           ;lcd.c: 23: RB2 = 0;
  6182  0FD1  1106               	bcf	6,2	;volatile
  6183  0FD2                     l56:	
  6184                           
  6185                           ;lcd.c: 25: if(a & 8)
  6186  0FD2  1DF2               	btfss	LcdPort@a,3
  6187  0FD3  2FD6               	goto	l57
  6188                           
  6189                           ;lcd.c: 26: RB3 = 1;
  6190  0FD4  1586               	bsf	6,3	;volatile
  6191  0FD5  0008               	return
  6192  0FD6                     l57:	
  6193                           
  6194                           ;lcd.c: 27: else
  6195                           ;lcd.c: 28: RB3 = 0;
  6196  0FD6  1186               	bcf	6,3	;volatile
  6197  0FD7  0008               	return
  6198  0FD8                     __end_of_LcdPort:	
  6199  0FD8                     PL14:	
  6200  0FD8  0823               	movf	LcdWriteString@i,w
  6201  0FD9  0777               	addwf	LcdWriteString@a,w
  6202  0FDA  00A1               	movwf	??_LcdWriteString+1
  6203  0FDB  0878               	movf	LcdWriteString@a+1,w
  6204  0FDC  00A0               	movwf	??_LcdWriteString
  6205  0FDD  1803               	skipnc
  6206  0FDE  0AA0               	incf	??_LcdWriteString,f
  6207  0FDF  1BA3               	btfsc	LcdWriteString@i,7
  6208  0FE0  03A0               	decf	??_LcdWriteString,f
  6209  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0FE3  0820               	movf	??_LcdWriteString,w
  6212  0FE4  00A2               	movwf	??_LcdWriteString+2
  6213  0FE5  00FF               	movwf	127
  6214  0FE6  0821               	movf	??_LcdWriteString+1,w
  6215  0FE7  0084               	movwf	4
  6216  0FE8  0008               	return
  6217  0FE9                     __end_ofPL14:	
  6218  0FE9                     PL58:	
  6219  0FE9  00AA               	movwf	___ftmul@f1+2
  6220  0FEA  086A               	movf	calcSHT71@rh,w
  6221  0FEB  00AB               	movwf	___ftmul@f2
  6222  0FEC  086B               	movf	calcSHT71@rh+1,w
  6223  0FED  00AC               	movwf	___ftmul@f2+1
  6224  0FEE  086C               	movf	calcSHT71@rh+2,w
  6225  0FEF  00AD               	movwf	___ftmul@f2+2
  6226  0FF0  0008               	return
  6227  0FF1                     __end_ofPL58:	
  6228  0FF1                     PL60:	
  6229  0FF1  0828               	movf	?___ftmul,w
  6230  0FF2  00C5               	movwf	___ftadd@f2
  6231  0FF3  0829               	movf	?___ftmul+1,w
  6232  0FF4  00C6               	movwf	___ftadd@f2+1
  6233  0FF5  082A               	movf	?___ftmul+2,w
  6234  0FF6  00C7               	movwf	___ftadd@f2+2
  6235  0FF7  0008               	return
  6236  0FF8                     __end_ofPL60:	
  6237  0FF8                     PL82:	
  6238  0FF8  00C4               	movwf	___ftadd@f1+2
  6239  0FF9  0864               	movf	_calcSHT71$1144,w
  6240  0FFA  00C5               	movwf	___ftadd@f2
  6241  0FFB  0865               	movf	_calcSHT71$1144+1,w
  6242  0FFC  00C6               	movwf	___ftadd@f2+1
  6243  0FFD  0866               	movf	_calcSHT71$1144+2,w
  6244  0FFE  00C7               	movwf	___ftadd@f2+2
  6245  0FFF  0008               	return
  6246  1000                     __end_ofPL82:	
  6247                           
  6248                           	psect	text27
  6249  1B75                     __ptext27:	
  6250 ;; *************** function _displayAirTemp *****************
  6251 ;; Defined at:
  6252 ;;		line 109 in file "main.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  temp2           3   62[BANK0 ] float 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;		None               void
  6259 ;; Registers used:
  6260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6261 ;; Tracked objects:
  6262 ;;		On entry : 300/0
  6263 ;;		On exit  : 300/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6266 ;;      Params:         0       3       0       0       0
  6267 ;;      Locals:         0       0       0       0       0
  6268 ;;      Temps:          0       0       0       0       0
  6269 ;;      Totals:         0       3       0       0       0
  6270 ;;Total ram usage:        3 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    5
  6273 ;; This function calls:
  6274 ;;		_LcdSetCursor
  6275 ;;		_LcdWriteString
  6276 ;;		_sprintf
  6277 ;; This function is called by:
  6278 ;;		_main
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _displayAirTemp
  6284  1B75                     _displayAirTemp:	
  6285                           
  6286                           ;main.c: 110: sprintf(temperature, " %.1f", temp2);
  6287                           
  6288                           ;incstack = 0
  6289                           ; Regs used in _displayAirTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6290  1B75  3045               	movlw	low (STR_2| (0+32768))
  6291  1B76  00D4               	movwf	sprintf@f
  6292  1B77  3099               	movlw	high (STR_2| (0+32768))
  6293  1B78  00D5               	movwf	sprintf@f+1
  6294  1B79  085E               	movf	displayAirTemp@temp2,w
  6295  1B7A  00D6               	movwf	?_sprintf+2
  6296  1B7B  085F               	movf	displayAirTemp@temp2+1,w
  6297  1B7C  00D7               	movwf	?_sprintf+3
  6298  1B7D  0860               	movf	displayAirTemp@temp2+2,w
  6299  1B7E  00D8               	movwf	?_sprintf+4
  6300  1B7F  30C3               	movlw	(low (_temperature| 0))& (0+255)
  6301  1B80  120A  118A  2026  160A  158A  	fcall	_sprintf
  6302  1B85  3001               	movlw	1
  6303                           
  6304                           ;main.c: 111: LcdSetCursor(1,1);
  6305  1B86  01F6               	clrf	LcdSetCursor@b
  6306  1B87  0AF6               	incf	LcdSetCursor@b,f
  6307  1B88  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  6308                           
  6309                           ;main.c: 112: LcdWriteString("Air temperature ");
  6310  1B8D  30EE               	movlw	low (STR_3| (0+32768))
  6311  1B8E  00F7               	movwf	LcdWriteString@a
  6312  1B8F  3098               	movlw	high (STR_3| (0+32768))
  6313  1B90  00F8               	movwf	LcdWriteString@a+1
  6314  1B91  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  6315  1B96  3002               	movlw	2
  6316                           
  6317                           ;main.c: 113: LcdSetCursor(2,1);
  6318  1B97  01F6               	clrf	LcdSetCursor@b
  6319  1B98  0AF6               	incf	LcdSetCursor@b,f
  6320  1B99  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  6321                           
  6322                           ;main.c: 114: LcdWriteString(temperature);
  6323  1B9E  30C3               	movlw	(low (_temperature| 0))& (0+255)
  6324  1B9F  00F7               	movwf	LcdWriteString@a
  6325  1BA0  01F8               	clrf	LcdWriteString@a+1
  6326  1BA1  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  6327                           
  6328                           ;main.c: 115: LcdSetCursor(2,6);
  6329  1BA6  3006               	movlw	6
  6330  1BA7  00F6               	movwf	LcdSetCursor@b
  6331  1BA8  3002               	movlw	2
  6332  1BA9  120A  158A  26E8   	fcall	_LcdSetCursor
  6333                           
  6334                           ;main.c: 116: LcdWriteString(" deg        ");
  6335  1BAC  302B               	movlw	low (STR_4| (0+32768))
  6336  1BAD  00F7               	movwf	LcdWriteString@a
  6337  1BAE  3099               	movlw	high (STR_4| (0+32768))
  6338  1BAF  00F8               	movwf	LcdWriteString@a+1
  6339  1BB0  120A  158A  2D2F   	ljmp	l5254
  6340  1BB3                     __end_of_displayAirTemp:	
  6341                           
  6342                           	psect	text28
  6343  1B37                     __ptext28:	
  6344 ;; *************** function _displayAirMoist *****************
  6345 ;; Defined at:
  6346 ;;		line 119 in file "main.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  humi2           3   62[BANK0 ] float 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;		None
  6351 ;; Return value:  Size  Location     Type
  6352 ;;		None               void
  6353 ;; Registers used:
  6354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 300/0
  6357 ;;		On exit  : 300/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6360 ;;      Params:         0       3       0       0       0
  6361 ;;      Locals:         0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0
  6363 ;;      Totals:         0       3       0       0       0
  6364 ;;Total ram usage:        3 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    5
  6367 ;; This function calls:
  6368 ;;		_LcdSetCursor
  6369 ;;		_LcdWriteString
  6370 ;;		_sprintf
  6371 ;; This function is called by:
  6372 ;;		_main
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           
  6377                           ;psect for function _displayAirMoist
  6378  1B37                     _displayAirMoist:	
  6379                           
  6380                           ;main.c: 120: sprintf(humidity, " %.1f", humi2);
  6381                           
  6382                           ;incstack = 0
  6383                           ; Regs used in _displayAirMoist: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6384  1B37  3045               	movlw	low (STR_2| (0+32768))
  6385  1B38  00D4               	movwf	sprintf@f
  6386  1B39  3099               	movlw	high (STR_2| (0+32768))
  6387  1B3A  00D5               	movwf	sprintf@f+1
  6388  1B3B  085E               	movf	displayAirMoist@humi2,w
  6389  1B3C  00D6               	movwf	?_sprintf+2
  6390  1B3D  085F               	movf	displayAirMoist@humi2+1,w
  6391  1B3E  00D7               	movwf	?_sprintf+3
  6392  1B3F  0860               	movf	displayAirMoist@humi2+2,w
  6393  1B40  00D8               	movwf	?_sprintf+4
  6394  1B41  30B9               	movlw	(low (_humidity| 0))& (0+255)
  6395  1B42  120A  118A  2026  160A  158A  	fcall	_sprintf
  6396  1B47  3001               	movlw	1
  6397                           
  6398                           ;main.c: 121: LcdSetCursor(1,1);
  6399  1B48  01F6               	clrf	LcdSetCursor@b
  6400  1B49  0AF6               	incf	LcdSetCursor@b,f
  6401  1B4A  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  6402                           
  6403                           ;main.c: 122: LcdWriteString("Air moist       ");
  6404  1B4F  3088               	movlw	low (STR_6| (0+32768))
  6405  1B50  00F7               	movwf	LcdWriteString@a
  6406  1B51  3098               	movlw	high (STR_6| (0+32768))
  6407  1B52  00F8               	movwf	LcdWriteString@a+1
  6408  1B53  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  6409  1B58  3002               	movlw	2
  6410                           
  6411                           ;main.c: 123: LcdSetCursor(2,1);
  6412  1B59  01F6               	clrf	LcdSetCursor@b
  6413  1B5A  0AF6               	incf	LcdSetCursor@b,f
  6414  1B5B  120A  158A  26E8  160A  158A  	fcall	_LcdSetCursor
  6415                           
  6416                           ;main.c: 124: LcdWriteString(humidity);
  6417  1B60  30B9               	movlw	(low (_humidity| 0))& (0+255)
  6418  1B61  00F7               	movwf	LcdWriteString@a
  6419  1B62  01F8               	clrf	LcdWriteString@a+1
  6420  1B63  120A  158A  252F  160A  158A  	fcall	_LcdWriteString
  6421                           
  6422                           ;main.c: 125: LcdSetCursor(2,6);
  6423  1B68  3006               	movlw	6
  6424  1B69  00F6               	movwf	LcdSetCursor@b
  6425  1B6A  3002               	movlw	2
  6426  1B6B  120A  158A  26E8   	fcall	_LcdSetCursor
  6427                           
  6428                           ;main.c: 126: LcdWriteString(" %          ");
  6429  1B6E  301E               	movlw	low (STR_7| (0+32768))
  6430  1B6F  00F7               	movwf	LcdWriteString@a
  6431  1B70  3099               	movlw	high (STR_7| (0+32768))
  6432  1B71  00F8               	movwf	LcdWriteString@a+1
  6433  1B72  120A  158A  2D2F   	ljmp	l5254
  6434  1B75                     __end_of_displayAirMoist:	
  6435                           
  6436                           	psect	text29
  6437  0026                     __ptext29:	
  6438 ;; *************** function _sprintf *****************
  6439 ;; Defined at:
  6440 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  sp              1    wreg     PTR unsigned char 
  6443 ;;		 -> str(5), humidity(5), temperature(5), 
  6444 ;;  f               2   52[BANK0 ] PTR const unsigned char 
  6445 ;;		 -> STR_30(4), STR_29(5), STR_28(5), STR_27(5), 
  6446 ;;		 -> STR_26(6), STR_25(6), STR_22(6), STR_21(6), 
  6447 ;;		 -> STR_20(6), STR_17(6), STR_11(6), STR_5(6), 
  6448 ;;		 -> STR_2(6), 
  6449 ;; Auto vars:     Size  Location     Type
  6450 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  6451 ;;		 -> str(5), humidity(5), temperature(5), 
  6452 ;;  val             4   12[BANK1 ] unsigned long 
  6453 ;;  tmpval          4    8[BANK1 ] struct .
  6454 ;;  fval            3   18[BANK1 ] struct .
  6455 ;;  prec            2   21[BANK1 ] int 
  6456 ;;  exp             2   16[BANK1 ] int 
  6457 ;;  width           2    6[BANK1 ] int 
  6458 ;;  flag            2    4[BANK1 ] unsigned short 
  6459 ;;  cp              2    0        PTR const unsigned char 
  6460 ;;  len             2    0        unsigned int 
  6461 ;;  c               1   24[BANK1 ] char 
  6462 ;;  ap              1    3[BANK1 ] PTR void [1]
  6463 ;;		 -> ?_sprintf(2), 
  6464 ;;  d               1    0        unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  2   52[BANK0 ] int 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 300/0
  6471 ;;		On exit  : B00/100
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6474 ;;      Params:         0       5       0       0       0
  6475 ;;      Locals:         0       0      25       0       0
  6476 ;;      Temps:          0       5       0       0       0
  6477 ;;      Totals:         0      10      25       0       0
  6478 ;;Total ram usage:       35 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    4
  6481 ;; This function calls:
  6482 ;;		___awdiv
  6483 ;;		___ftadd
  6484 ;;		___ftge
  6485 ;;		___ftmul
  6486 ;;		___ftneg
  6487 ;;		___ftsub
  6488 ;;		___fttol
  6489 ;;		___lldiv
  6490 ;;		___llmod
  6491 ;;		___lltoft
  6492 ;;		___wmul
  6493 ;;		__div_to_l_
  6494 ;;		__tdiv_to_l_
  6495 ;;		_fround
  6496 ;;		_isdigit
  6497 ;;		_scale
  6498 ;; This function is called by:
  6499 ;;		_displayAirTemp
  6500 ;;		_displayAirMoist
  6501 ;;		_displaySoilTemp
  6502 ;;		_menuHumi
  6503 ;;		_menu
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _sprintf
  6509  0026                     _sprintf:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6513                           ;sprintf@sp stored from wreg
  6514  0026  1683               	bsf	3,5	;RP0=1, select bank1
  6515  0027  00E5               	movwf	sprintf@sp^(0+128)
  6516                           
  6517                           ;doprnt.c: 494: va_list ap;
  6518                           ;doprnt.c: 499: signed char c;
  6519                           ;doprnt.c: 501: int width;
  6520                           ;doprnt.c: 504: int prec;
  6521                           ;doprnt.c: 508: unsigned short flag;
  6522                           ;doprnt.c: 515: char d;
  6523                           ;doprnt.c: 516: double fval;
  6524                           ;doprnt.c: 517: int exp;
  6525                           ;doprnt.c: 523: union {
  6526                           ;doprnt.c: 524: unsigned long vd;
  6527                           ;doprnt.c: 525: double integ;
  6528                           ;doprnt.c: 526: } tmpval;
  6529                           ;doprnt.c: 528: unsigned long val;
  6530                           ;doprnt.c: 529: unsigned len;
  6531                           ;doprnt.c: 530: const char * cp;
  6532                           ;doprnt.c: 533: *ap = __va_start();
  6533  0028  3056               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  6534  0029  00D1               	movwf	sprintf@ap^(0+128)
  6535  002A                     l5740:	
  6536                           ;doprnt.c: 536: while(c = *f++) {
  6537                           
  6538  002A  2741               	fcall	PL34	;call to abstracted procedure
  6539  002B  160A  158A  2000  120A  118A  	fcall	stringtab
  6540  0030  1683               	bsf	3,5	;RP0=1, select bank1
  6541  0031  00E6               	movwf	sprintf@c^(0+128)
  6542  0032  0866               	movf	sprintf@c^(0+128),w
  6543  0033  1903               	btfsc	3,2
  6544  0034  2DBC               	goto	l5742
  6545                           
  6546                           ;doprnt.c: 538: if(c != '%')
  6547  0035  3025               	movlw	37
  6548  0036  0666               	xorwf	sprintf@c^(0+128),w
  6549  0037  1903               	btfsc	3,2
  6550  0038  2840               	goto	l5458
  6551                           
  6552                           ;doprnt.c: 540: {
  6553                           ;doprnt.c: 541: ((*sp++ = (c)));
  6554  0039  0865               	movf	sprintf@sp^(0+128),w
  6555  003A  0084               	movwf	4
  6556  003B  0866               	movf	sprintf@c^(0+128),w
  6557  003C  1383               	bcf	3,7	;select IRP bank0
  6558  003D  0080               	movwf	0
  6559  003E  0AE5               	incf	sprintf@sp^(0+128),f
  6560                           
  6561                           ;doprnt.c: 542: continue;
  6562  003F  282A               	goto	l5740
  6563  0040                     l5458:	
  6564                           
  6565                           ;doprnt.c: 543: }
  6566                           ;doprnt.c: 546: width = 0;
  6567  0040  01D4               	clrf	sprintf@width^(0+128)
  6568  0041  01D5               	clrf	(sprintf@width+1)^(0+128)
  6569                           
  6570                           ;doprnt.c: 548: flag = 0;
  6571  0042  01D2               	clrf	sprintf@flag^(0+128)
  6572  0043  01D3               	clrf	(sprintf@flag+1)^(0+128)
  6573                           
  6574                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6575  0044  2796               	fcall	PL98	;call to abstracted procedure
  6576  0045  160A  158A  2000  120A  118A  	fcall	stringtab
  6577  004A  268D  120A  118A   	fcall	_isdigit
  6578  004D  1C03               	btfss	3,0
  6579  004E  2889               	goto	l5472
  6580                           
  6581                           ;doprnt.c: 598: width = 0;
  6582  004F  1683               	bsf	3,5	;RP0=1, select bank1
  6583  0050  01D4               	clrf	sprintf@width^(0+128)
  6584  0051  01D5               	clrf	(sprintf@width+1)^(0+128)
  6585  0052                     l5464:	
  6586                           
  6587                           ;doprnt.c: 600: width *= 10;
  6588  0052  300A               	movlw	10
  6589  0053  00F2               	movwf	___wmul@multiplier
  6590  0054  01F3               	clrf	___wmul@multiplier+1
  6591  0055  1683               	bsf	3,5	;RP0=1, select bank1
  6592  0056  0855               	movf	(sprintf@width+1)^(0+128),w
  6593  0057  00F5               	movwf	___wmul@multiplicand+1
  6594  0058  0854               	movf	sprintf@width^(0+128),w
  6595  0059  00F4               	movwf	___wmul@multiplicand
  6596  005A  2674  120A  118A   	fcall	___wmul
  6597  005D  0873               	movf	?___wmul+1,w
  6598  005E  1683               	bsf	3,5	;RP0=1, select bank1
  6599  005F  00D5               	movwf	(sprintf@width+1)^(0+128)
  6600  0060  0872               	movf	?___wmul,w
  6601  0061  00D4               	movwf	sprintf@width^(0+128)
  6602                           
  6603                           ;doprnt.c: 601: width += *f++ - '0';
  6604  0062  2796               	fcall	PL98	;call to abstracted procedure
  6605  0063  160A  158A  2000  120A  118A  	fcall	stringtab
  6606  0068  3ED0               	addlw	208
  6607  0069  00D9               	movwf	??_sprintf
  6608  006A  30FF               	movlw	255
  6609  006B  1803               	skipnc
  6610  006C  3000               	movlw	0
  6611  006D  00DA               	movwf	??_sprintf+1
  6612  006E  0859               	movf	??_sprintf,w
  6613  006F  1683               	bsf	3,5	;RP0=1, select bank1
  6614  0070  07D4               	addwf	sprintf@width^(0+128),f
  6615  0071  1803               	skipnc
  6616  0072  0AD5               	incf	(sprintf@width+1)^(0+128),f
  6617  0073  1283               	bcf	3,5	;RP0=0, select bank0
  6618  0074  085A               	movf	??_sprintf+1,w
  6619  0075  1683               	bsf	3,5	;RP0=1, select bank1
  6620  0076  07D5               	addwf	(sprintf@width+1)^(0+128),f
  6621  0077  1283               	bcf	3,5	;RP0=0, select bank0
  6622  0078  0AD4               	incf	sprintf@f,f
  6623  0079  1903               	skipnz
  6624  007A  0AD5               	incf	sprintf@f+1,f
  6625                           
  6626                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6627  007B  0855               	movf	sprintf@f+1,w
  6628  007C  00FF               	movwf	127
  6629  007D  0854               	movf	sprintf@f,w
  6630  007E  0084               	movwf	4
  6631  007F  160A  158A  2000  120A  118A  	fcall	stringtab
  6632  0084  268D  120A  118A   	fcall	_isdigit
  6633  0087  1803               	btfsc	3,0
  6634  0088  2852               	goto	l5464
  6635  0089                     l5472:	
  6636                           
  6637                           ;doprnt.c: 608: }
  6638                           ;doprnt.c: 611: if(*f == '.') {
  6639  0089  0855               	movf	sprintf@f+1,w
  6640  008A  00FF               	movwf	127
  6641  008B  0854               	movf	sprintf@f,w
  6642  008C  0084               	movwf	4
  6643  008D  160A  158A  2000  120A  118A  	fcall	stringtab
  6644  0092  3A2E               	xorlw	46
  6645  0093  1D03               	skipz
  6646  0094  28D1               	goto	l5486
  6647                           
  6648                           ;doprnt.c: 612: flag |= 0x4000;
  6649  0095  1683               	bsf	3,5	;RP0=1, select bank1
  6650  0096  1753               	bsf	(sprintf@flag^(0+128)+1),6
  6651                           
  6652                           ;doprnt.c: 613: f++;
  6653  0097  1283               	bcf	3,5	;RP0=0, select bank0
  6654  0098  0AD4               	incf	sprintf@f,f
  6655  0099  1903               	skipnz
  6656  009A  0AD5               	incf	sprintf@f+1,f
  6657                           
  6658                           ;doprnt.c: 620: {
  6659                           ;doprnt.c: 621: prec = 0;
  6660  009B  1683               	bsf	3,5	;RP0=1, select bank1
  6661  009C  01E3               	clrf	sprintf@prec^(0+128)
  6662  009D  01E4               	clrf	(sprintf@prec+1)^(0+128)
  6663  009E                     l5484:	
  6664                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6665                           
  6666  009E  2796               	fcall	PL98	;call to abstracted procedure
  6667  009F  160A  158A  2000  120A  118A  	fcall	stringtab
  6668  00A4  268D  120A  118A   	fcall	_isdigit
  6669  00A7  1C03               	btfss	3,0
  6670  00A8  28D8               	goto	l5492
  6671                           
  6672                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6673  00A9  1683               	bsf	3,5	;RP0=1, select bank1
  6674  00AA  0864               	movf	(sprintf@prec+1)^(0+128),w
  6675  00AB  00F3               	movwf	___wmul@multiplier+1
  6676  00AC  0863               	movf	sprintf@prec^(0+128),w
  6677  00AD  00F2               	movwf	___wmul@multiplier
  6678  00AE  300A               	movlw	10
  6679  00AF  00F4               	movwf	___wmul@multiplicand
  6680  00B0  01F5               	clrf	___wmul@multiplicand+1
  6681  00B1  2674  120A  118A   	fcall	___wmul
  6682  00B4  2796               	fcall	PL98	;call to abstracted procedure
  6683  00B5  160A  158A  2000  120A  118A  	fcall	stringtab
  6684  00BA  0772               	addwf	?___wmul,w
  6685  00BB  00D9               	movwf	??_sprintf
  6686  00BC  3000               	movlw	0
  6687  00BD  1803               	skipnc
  6688  00BE  3001               	movlw	1
  6689  00BF  0773               	addwf	?___wmul+1,w
  6690  00C0  00DA               	movwf	??_sprintf+1
  6691  00C1  0859               	movf	??_sprintf,w
  6692  00C2  3ED0               	addlw	208
  6693  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  6694  00C4  00E3               	movwf	sprintf@prec^(0+128)
  6695  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  6696  00C6  085A               	movf	??_sprintf+1,w
  6697  00C7  1803               	skipnc
  6698  00C8  3E01               	addlw	1
  6699  00C9  3EFF               	addlw	255
  6700  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  6701  00CB  00E4               	movwf	(sprintf@prec+1)^(0+128)
  6702  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  6703  00CD  0AD4               	incf	sprintf@f,f
  6704  00CE  1903               	skipnz
  6705  00CF  0AD5               	incf	sprintf@f+1,f
  6706  00D0  289E               	goto	l5484
  6707  00D1                     l5486:	
  6708                           
  6709                           ;doprnt.c: 626: prec = 0;
  6710  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  6711  00D2  01E3               	clrf	sprintf@prec^(0+128)
  6712  00D3  01E4               	clrf	(sprintf@prec+1)^(0+128)
  6713                           
  6714                           ;doprnt.c: 628: flag |= 0x1000;
  6715  00D4  1653               	bsf	(sprintf@flag^(0+128)+1),4
  6716  00D5  28D8               	goto	l5492
  6717  00D6                     l573:	
  6718                           ;doprnt.c: 662: case 'f':
  6719                           
  6720                           
  6721                           ;doprnt.c: 663: flag |= 0x400;
  6722  00D6  1553               	bsf	(sprintf@flag^(0+128)+1),2
  6723                           
  6724                           ;doprnt.c: 664: break;
  6725  00D7  28ED               	goto	l5494
  6726  00D8                     l5492:	
  6727  00D8  2741               	fcall	PL34	;call to abstracted procedure
  6728  00D9  160A  158A  2000  120A  118A  	fcall	stringtab
  6729  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  6730  00DF  00E6               	movwf	sprintf@c^(0+128)
  6731                           
  6732                           ; Switch size 1, requested type "space"
  6733                           ; Number of cases is 4, Range of values is 0 to 105
  6734                           ; switch strategies available:
  6735                           ; Name         Instructions Cycles
  6736                           ; simple_byte           13     7 (average)
  6737                           ; jumptable            260     6 (fixed)
  6738                           ;	Chosen strategy is simple_byte
  6739  00E0  3A00               	xorlw	0	; case 0
  6740  00E1  1903               	skipnz
  6741  00E2  2DBC               	goto	l5742
  6742  00E3  3A64               	xorlw	100	; case 100
  6743  00E4  1903               	skipnz
  6744  00E5  28ED               	goto	l5494
  6745  00E6  3A02               	xorlw	2	; case 102
  6746  00E7  1903               	skipnz
  6747  00E8  28D6               	goto	l573
  6748  00E9  3A0F               	xorlw	15	; case 105
  6749  00EA  1903               	skipnz
  6750  00EB  28ED               	goto	l5494
  6751  00EC  282A               	goto	l5740
  6752  00ED                     l5494:	
  6753                           
  6754                           ;doprnt.c: 825: if(flag & (0x700)) {
  6755  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  6756  00EE  3007               	movlw	7
  6757  00EF  01D9               	clrf	??_sprintf
  6758  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  6759  00F1  0553               	andwf	(sprintf@flag+1)^(0+128),w
  6760  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  6761  00F3  00DA               	movwf	??_sprintf+1
  6762  00F4  0459               	iorwf	??_sprintf,w
  6763  00F5  1903               	btfsc	3,2
  6764  00F6  2C6E               	goto	l5662
  6765                           
  6766                           ;doprnt.c: 827: if(flag & 0x1000)
  6767  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  6768  00F8  1E53               	btfss	(sprintf@flag+1)^(0+128),4
  6769  00F9  28FD               	goto	l5500
  6770                           
  6771                           ;doprnt.c: 829: prec = 6;
  6772  00FA  3006               	movlw	6
  6773  00FB  00E3               	movwf	sprintf@prec^(0+128)
  6774  00FC  01E4               	clrf	(sprintf@prec+1)^(0+128)
  6775  00FD                     l5500:	
  6776                           
  6777                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6778  00FD  0851               	movf	sprintf@ap^(0+128),w
  6779  00FE  0084               	movwf	4
  6780  00FF  1383               	bcf	3,7	;select IRP bank0
  6781  0100  0800               	movf	0,w
  6782  0101  00E0               	movwf	sprintf@fval^(0+128)
  6783  0102  0A84               	incf	4,f
  6784  0103  0800               	movf	0,w
  6785  0104  00E1               	movwf	(sprintf@fval+1)^(0+128)
  6786  0105  0A84               	incf	4,f
  6787  0106  0800               	movf	0,w
  6788  0107  00E2               	movwf	(sprintf@fval+2)^(0+128)
  6789  0108  3003               	movlw	3
  6790  0109  07D1               	addwf	sprintf@ap^(0+128),f
  6791                           
  6792                           ;doprnt.c: 831: if(fval < 0.0) {
  6793  010A  0860               	movf	sprintf@fval^(0+128),w
  6794  010B  1283               	bcf	3,5	;RP0=0, select bank0
  6795  010C  00CE               	movwf	___ftge@ff1
  6796  010D  1683               	bsf	3,5	;RP0=1, select bank1
  6797  010E  0861               	movf	(sprintf@fval+1)^(0+128),w
  6798  010F  1283               	bcf	3,5	;RP0=0, select bank0
  6799  0110  00CF               	movwf	___ftge@ff1+1
  6800  0111  1683               	bsf	3,5	;RP0=1, select bank1
  6801  0112  0862               	movf	(sprintf@fval+2)^(0+128),w
  6802  0113  1283               	bcf	3,5	;RP0=0, select bank0
  6803  0114  00D0               	movwf	___ftge@ff1+2
  6804  0115  01D1               	clrf	___ftge@ff2
  6805  0116  01D2               	clrf	___ftge@ff2+1
  6806  0117  01D3               	clrf	___ftge@ff2+2
  6807  0118  25C1  120A  118A   	fcall	___ftge
  6808  011B  1803               	btfsc	3,0
  6809  011C  292F               	goto	l5510
  6810                           
  6811                           ;doprnt.c: 832: fval = -fval;
  6812  011D  1683               	bsf	3,5	;RP0=1, select bank1
  6813  011E  0860               	movf	sprintf@fval^(0+128),w
  6814  011F  00F2               	movwf	___ftneg@f1
  6815  0120  0861               	movf	(sprintf@fval+1)^(0+128),w
  6816  0121  00F3               	movwf	___ftneg@f1+1
  6817  0122  0862               	movf	(sprintf@fval+2)^(0+128),w
  6818  0123  00F4               	movwf	___ftneg@f1+2
  6819  0124  269B  120A  118A   	fcall	___ftneg
  6820  0127  0872               	movf	?___ftneg,w
  6821  0128  00E0               	movwf	sprintf@fval^(0+128)
  6822  0129  0873               	movf	?___ftneg+1,w
  6823  012A  00E1               	movwf	(sprintf@fval+1)^(0+128)
  6824  012B  0874               	movf	?___ftneg+2,w
  6825  012C  00E2               	movwf	(sprintf@fval+2)^(0+128)
  6826                           
  6827                           ;doprnt.c: 833: flag |= 0x03;
  6828  012D  3003               	movlw	3
  6829  012E  04D2               	iorwf	sprintf@flag^(0+128),f
  6830  012F                     l5510:	
  6831                           
  6832                           ;doprnt.c: 834: }
  6833                           ;doprnt.c: 835: exp = 0;
  6834  012F  1683               	bsf	3,5	;RP0=1, select bank1
  6835  0130  01DE               	clrf	sprintf@exp^(0+128)
  6836  0131  01DF               	clrf	(sprintf@exp+1)^(0+128)
  6837                           
  6838                           ;doprnt.c: 836: if( fval!=0) {
  6839  0132  0862               	movf	(sprintf@fval+2)^(0+128),w
  6840  0133  0461               	iorwf	(sprintf@fval+1)^(0+128),w
  6841  0134  0460               	iorwf	sprintf@fval^(0+128),w
  6842  0135  1903               	skipnz
  6843  0136  29D3               	goto	l5542
  6844                           
  6845                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6846  0137  30E0               	movlw	low (sprintf@fval| 0)
  6847  0138  0084               	movwf	4
  6848  0139  1383               	bcf	3,7	;select IRP bank1
  6849  013A  278F  120A  118A   	fcall	PL90	;call to abstracted procedure
  6850  013D  0A84               	incf	4,f
  6851  013E  0800               	movf	0,w
  6852  013F  00DB               	movwf	??_sprintf+2
  6853  0140  0A84               	incf	4,f
  6854  0141  0800               	movf	0,w
  6855  0142  00DC               	movwf	??_sprintf+3
  6856  0143  300F               	movlw	15
  6857  0144                     u6525:	
  6858  0144  1003               	clrc
  6859  0145  0CDC               	rrf	??_sprintf+3,f
  6860  0146  0CDB               	rrf	??_sprintf+2,f
  6861  0147  0CDA               	rrf	??_sprintf+1,f
  6862  0148  0CD9               	rrf	??_sprintf,f
  6863  0149  3EFF               	addlw	-1
  6864  014A  1D03               	skipz
  6865  014B  2944               	goto	u6525
  6866  014C  085A               	movf	??_sprintf+1,w
  6867  014D  1683               	bsf	3,5	;RP0=1, select bank1
  6868  014E  00DF               	movwf	(sprintf@exp+1)^(0+128)
  6869  014F  1283               	bcf	3,5	;RP0=0, select bank0
  6870  0150  0859               	movf	??_sprintf,w
  6871  0151  1683               	bsf	3,5	;RP0=1, select bank1
  6872  0152  00DE               	movwf	sprintf@exp^(0+128)
  6873  0153  3082               	movlw	-126
  6874  0154  01DF               	clrf	(sprintf@exp+1)^(0+128)
  6875  0155  07DE               	addwf	sprintf@exp^(0+128),f
  6876  0156  1C03               	skipc
  6877  0157  03DF               	decf	(sprintf@exp+1)^(0+128),f
  6878                           
  6879                           ;doprnt.c: 838: exp--;
  6880  0158  30FF               	movlw	-1
  6881  0159  07DE               	addwf	sprintf@exp^(0+128),f
  6882  015A  1C03               	skipc
  6883  015B  03DF               	decf	(sprintf@exp+1)^(0+128),f
  6884                           
  6885                           ;doprnt.c: 839: exp *= 3;
  6886  015C  3003               	movlw	3
  6887  015D  00F2               	movwf	___wmul@multiplier
  6888  015E  01F3               	clrf	___wmul@multiplier+1
  6889  015F  085F               	movf	(sprintf@exp+1)^(0+128),w
  6890  0160  00F5               	movwf	___wmul@multiplicand+1
  6891  0161  085E               	movf	sprintf@exp^(0+128),w
  6892  0162  00F4               	movwf	___wmul@multiplicand
  6893  0163  2674               	fcall	___wmul
  6894  0164  0873               	movf	?___wmul+1,w
  6895  0165  1683               	bsf	3,5	;RP0=1, select bank1
  6896  0166  00DF               	movwf	(sprintf@exp+1)^(0+128)
  6897  0167  0872               	movf	?___wmul,w
  6898  0168  00DE               	movwf	sprintf@exp^(0+128)
  6899                           
  6900                           ;doprnt.c: 840: exp /= 10;
  6901  0169  300A               	movlw	10
  6902  016A  1283               	bcf	3,5	;RP0=0, select bank0
  6903  016B  00A0               	movwf	___awdiv@divisor
  6904  016C  01A1               	clrf	___awdiv@divisor+1
  6905  016D  1683               	bsf	3,5	;RP0=1, select bank1
  6906  016E  085F               	movf	(sprintf@exp+1)^(0+128),w
  6907  016F  1283               	bcf	3,5	;RP0=0, select bank0
  6908  0170  00A3               	movwf	___awdiv@dividend+1
  6909  0171  1683               	bsf	3,5	;RP0=1, select bank1
  6910  0172  085E               	movf	sprintf@exp^(0+128),w
  6911  0173  1283               	bcf	3,5	;RP0=0, select bank0
  6912  0174  00A2               	movwf	___awdiv@dividend
  6913  0175  160A  118A  260E  120A  118A  	fcall	___awdiv
  6914  017A  0821               	movf	?___awdiv+1,w
  6915  017B  1683               	bsf	3,5	;RP0=1, select bank1
  6916  017C  00DF               	movwf	(sprintf@exp+1)^(0+128)
  6917  017D  1283               	bcf	3,5	;RP0=0, select bank0
  6918  017E  0820               	movf	?___awdiv,w
  6919  017F  1683               	bsf	3,5	;RP0=1, select bank1
  6920  0180  00DE               	movwf	sprintf@exp^(0+128)
  6921                           
  6922                           ;doprnt.c: 841: if(exp < 0)
  6923  0181  1FDF               	btfss	(sprintf@exp+1)^(0+128),7
  6924  0182  2987               	goto	l5530
  6925                           
  6926                           ;doprnt.c: 842: exp--;
  6927  0183  30FF               	movlw	-1
  6928  0184  07DE               	addwf	sprintf@exp^(0+128),f
  6929  0185  1C03               	skipc
  6930  0186  03DF               	decf	(sprintf@exp+1)^(0+128),f
  6931  0187                     l5530:	
  6932                           
  6933                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6934  0187  035E               	decf	sprintf@exp^(0+128),w
  6935  0188  3AFF               	xorlw	255
  6936  0189  160A  118A  247C  120A  118A  	fcall	_scale
  6937                           
  6938                           ;doprnt.c: 847: tmpval.integ *= fval;
  6939  018E  274E  120A  118A   	fcall	PL38	;call to abstracted procedure
  6940  0191  2772               	fcall	PL52	;call to abstracted procedure
  6941  0192  1683               	bsf	3,5	;RP0=1, select bank1
  6942  0193  0856               	movf	sprintf@tmpval^(0+128),w
  6943  0194  1283               	bcf	3,5	;RP0=0, select bank0
  6944  0195  00AB               	movwf	___ftmul@f2
  6945  0196  1683               	bsf	3,5	;RP0=1, select bank1
  6946  0197  0857               	movf	(sprintf@tmpval+1)^(0+128),w
  6947  0198  1283               	bcf	3,5	;RP0=0, select bank0
  6948  0199  00AC               	movwf	___ftmul@f2+1
  6949  019A  1683               	bsf	3,5	;RP0=1, select bank1
  6950  019B  0858               	movf	(sprintf@tmpval+2)^(0+128),w
  6951  019C  1283               	bcf	3,5	;RP0=0, select bank0
  6952  019D  00AD               	movwf	___ftmul@f2+2
  6953  019E  160A  118A  2690  120A  118A  	fcall	___ftmul
  6954  01A3  0828               	movf	?___ftmul,w
  6955  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  6956  01A5  00D6               	movwf	sprintf@tmpval^(0+128)
  6957  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  6958  01A7  0829               	movf	?___ftmul+1,w
  6959  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  6960  01A9  00D7               	movwf	(sprintf@tmpval+1)^(0+128)
  6961  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  6962  01AB  082A               	movf	?___ftmul+2,w
  6963  01AC  1683               	bsf	3,5	;RP0=1, select bank1
  6964  01AD  00D8               	movwf	(sprintf@tmpval+2)^(0+128)
  6965                           
  6966                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6967  01AE  2714  120A  118A   	fcall	PL10	;call to abstracted procedure
  6968  01B1  3080               	movlw	128
  6969  01B2  01D1               	clrf	___ftge@ff2
  6970  01B3  00D2               	movwf	___ftge@ff2+1
  6971  01B4  303F               	movlw	63
  6972  01B5  00D3               	movwf	___ftge@ff2+2
  6973  01B6  25C1  120A  118A   	fcall	___ftge
  6974  01B9  1803               	btfsc	3,0
  6975  01BA  29C1               	goto	l5538
  6976                           
  6977                           ;doprnt.c: 849: exp--;
  6978  01BB  30FF               	movlw	-1
  6979  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  6980  01BD  07DE               	addwf	sprintf@exp^(0+128),f
  6981  01BE  1C03               	skipc
  6982  01BF  03DF               	decf	(sprintf@exp+1)^(0+128),f
  6983  01C0  29D3               	goto	l5542
  6984  01C1                     l5538:	
  6985                           
  6986                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6987  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  6988  01C2  2714  120A  118A   	fcall	PL10	;call to abstracted procedure
  6989  01C5  3020               	movlw	32
  6990  01C6  01D1               	clrf	___ftge@ff2
  6991  01C7  00D2               	movwf	___ftge@ff2+1
  6992  01C8  3041               	movlw	65
  6993  01C9  00D3               	movwf	___ftge@ff2+2
  6994  01CA  25C1  120A  118A   	fcall	___ftge
  6995  01CD  1C03               	btfss	3,0
  6996  01CE  29D3               	goto	l5542
  6997                           
  6998                           ;doprnt.c: 851: exp++;
  6999  01CF  1683               	bsf	3,5	;RP0=1, select bank1
  7000  01D0  0ADE               	incf	sprintf@exp^(0+128),f
  7001  01D1  1903               	skipnz
  7002  01D2  0ADF               	incf	(sprintf@exp+1)^(0+128),f
  7003  01D3                     l5542:	
  7004                           
  7005                           ;doprnt.c: 852: }
  7006                           ;doprnt.c: 1112: if(prec <= 12)
  7007  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  7008  01D4  0864               	movf	(sprintf@prec+1)^(0+128),w
  7009  01D5  3A80               	xorlw	128
  7010  01D6  00FF               	movwf	127
  7011  01D7  3080               	movlw	128
  7012  01D8  027F               	subwf	127,w
  7013  01D9  1D03               	skipz
  7014  01DA  29DD               	goto	u6565
  7015  01DB  300D               	movlw	13
  7016  01DC  0263               	subwf	sprintf@prec^(0+128),w
  7017  01DD                     u6565:	
  7018  01DD  1803               	skipnc
  7019  01DE  2A09               	goto	l5546
  7020                           
  7021                           ;doprnt.c: 1113: fval += fround(prec);
  7022  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  7023  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  7024  01E1  0863               	movf	sprintf@prec^(0+128),w
  7025  01E2  160A  118A  2094  120A  118A  	fcall	_fround
  7026  01E7  0837               	movf	?_fround,w
  7027  01E8  00C2               	movwf	___ftadd@f1
  7028  01E9  0838               	movf	?_fround+1,w
  7029  01EA  00C3               	movwf	___ftadd@f1+1
  7030  01EB  0839               	movf	?_fround+2,w
  7031  01EC  00C4               	movwf	___ftadd@f1+2
  7032  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  7033  01EE  0860               	movf	sprintf@fval^(0+128),w
  7034  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  7035  01F0  00C5               	movwf	___ftadd@f2
  7036  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  7037  01F2  0861               	movf	(sprintf@fval+1)^(0+128),w
  7038  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  7039  01F4  00C6               	movwf	___ftadd@f2+1
  7040  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  7041  01F6  0862               	movf	(sprintf@fval+2)^(0+128),w
  7042  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  7043  01F8  00C7               	movwf	___ftadd@f2+2
  7044  01F9  120A  158A  22EE  120A  118A  	fcall	___ftadd
  7045  01FE  0842               	movf	?___ftadd,w
  7046  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  7047  0200  00E0               	movwf	sprintf@fval^(0+128)
  7048  0201  1283               	bcf	3,5	;RP0=0, select bank0
  7049  0202  0843               	movf	?___ftadd+1,w
  7050  0203  1683               	bsf	3,5	;RP0=1, select bank1
  7051  0204  00E1               	movwf	(sprintf@fval+1)^(0+128)
  7052  0205  1283               	bcf	3,5	;RP0=0, select bank0
  7053  0206  0844               	movf	?___ftadd+2,w
  7054  0207  1683               	bsf	3,5	;RP0=1, select bank1
  7055  0208  00E2               	movwf	(sprintf@fval+2)^(0+128)
  7056  0209                     l5546:	
  7057                           
  7058                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  7059  0209  1683               	bsf	3,5	;RP0=1, select bank1
  7060  020A  1303               	bcf	3,6	;RP1=0, select bank1
  7061  020B  085F               	movf	(sprintf@exp+1)^(0+128),w
  7062  020C  3A80               	xorlw	128
  7063  020D  00FF               	movwf	127
  7064  020E  3080               	movlw	128
  7065  020F  027F               	subwf	127,w
  7066  0210  1D03               	skipz
  7067  0211  2A14               	goto	u6575
  7068  0212  300A               	movlw	10
  7069  0213  025E               	subwf	sprintf@exp^(0+128),w
  7070  0214                     u6575:	
  7071  0214  1803               	skipnc
  7072  0215  2A35               	goto	l5554
  7073  0216  1683               	bsf	3,5	;RP0=1, select bank1
  7074  0217  1303               	bcf	3,6	;RP1=0, select bank1
  7075  0218  0862               	movf	(sprintf@fval+2)^(0+128),w
  7076  0219  0461               	iorwf	(sprintf@fval+1)^(0+128),w
  7077  021A  0460               	iorwf	sprintf@fval^(0+128),w
  7078  021B  1903               	skipnz
  7079  021C  2A70               	goto	l5568
  7080  021D  275B  120A  118A   	fcall	PL46	;call to abstracted procedure
  7081  0220  279C  120A  118A   	fcall	___fttol
  7082  0223  0845               	movf	?___fttol+3,w
  7083  0224  0444               	iorwf	?___fttol+2,w
  7084  0225  0443               	iorwf	?___fttol+1,w
  7085  0226  0442               	iorwf	?___fttol,w
  7086  0227  1D03               	skipz
  7087  0228  2A70               	goto	l5568
  7088  0229  1683               	bsf	3,5	;RP0=1, select bank1
  7089  022A  085F               	movf	(sprintf@exp+1)^(0+128),w
  7090  022B  3A80               	xorlw	128
  7091  022C  00FF               	movwf	127
  7092  022D  3080               	movlw	128
  7093  022E  027F               	subwf	127,w
  7094  022F  1D03               	skipz
  7095  0230  2A33               	goto	u6605
  7096  0231  3002               	movlw	2
  7097  0232  025E               	subwf	sprintf@exp^(0+128),w
  7098  0233                     u6605:	
  7099  0233  1C03               	skipc
  7100  0234  2A70               	goto	l5568
  7101  0235                     l5554:	
  7102                           
  7103                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  7104  0235  1683               	bsf	3,5	;RP0=1, select bank1
  7105  0236  1303               	bcf	3,6	;RP1=0, select bank1
  7106  0237  2714  120A  118A   	fcall	PL10	;call to abstracted procedure
  7107  023A  3070               	movlw	112
  7108  023B  00D1               	movwf	___ftge@ff2
  7109  023C  3089               	movlw	137
  7110  023D  00D2               	movwf	___ftge@ff2+1
  7111  023E  3040               	movlw	64
  7112  023F  00D3               	movwf	___ftge@ff2+2
  7113  0240  25C1  120A  118A   	fcall	___ftge
  7114  0243  1803               	btfsc	3,0
  7115  0244  2A47               	goto	l5558
  7116                           
  7117                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  7118  0245  30F7               	movlw	-9
  7119  0246  2A48               	goto	L15
  7120  0247                     l5558:	
  7121                           ;doprnt.c: 1122: }else{
  7122                           
  7123                           
  7124                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  7125  0247  30F8               	movlw	-8
  7126  0248                     L15:	
  7127  0248  1683               	bsf	3,5	;RP0=1, select bank1
  7128  0249  07DE               	addwf	sprintf@exp^(0+128),f
  7129  024A  1C03               	skipc
  7130  024B  03DF               	decf	(sprintf@exp+1)^(0+128),f
  7131                           
  7132                           ;doprnt.c: 1124: }
  7133                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  7134  024C  085E               	movf	sprintf@exp^(0+128),w
  7135  024D  160A  118A  247C  120A  118A  	fcall	_scale
  7136                           
  7137                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  7138  0252  274E               	fcall	PL38	;call to abstracted procedure
  7139  0253  00F2               	movwf	__tdiv_to_l_@f1
  7140  0254  0861               	movf	(sprintf@fval+1)^(0+128),w
  7141  0255  00F3               	movwf	__tdiv_to_l_@f1+1
  7142  0256  0862               	movf	(sprintf@fval+2)^(0+128),w
  7143  0257  00F4               	movwf	__tdiv_to_l_@f1+2
  7144  0258  0856               	movf	sprintf@tmpval^(0+128),w
  7145  0259  00F5               	movwf	__tdiv_to_l_@f2
  7146  025A  0857               	movf	(sprintf@tmpval+1)^(0+128),w
  7147  025B  00F6               	movwf	__tdiv_to_l_@f2+1
  7148  025C  0858               	movf	(sprintf@tmpval+2)^(0+128),w
  7149  025D  00F7               	movwf	__tdiv_to_l_@f2+2
  7150  025E  160A  158A  23F1  120A  118A  	fcall	__tdiv_to_l_
  7151  0263  0875               	movf	?__tdiv_to_l_+3,w
  7152  0264  1683               	bsf	3,5	;RP0=1, select bank1
  7153  0265  00DD               	movwf	(sprintf@val+3)^(0+128)
  7154  0266  0874               	movf	?__tdiv_to_l_+2,w
  7155  0267  00DC               	movwf	(sprintf@val+2)^(0+128)
  7156  0268  0873               	movf	?__tdiv_to_l_+1,w
  7157  0269  00DB               	movwf	(sprintf@val+1)^(0+128)
  7158  026A  0872               	movf	?__tdiv_to_l_,w
  7159  026B  00DA               	movwf	sprintf@val^(0+128)
  7160                           
  7161                           ;doprnt.c: 1129: fval = 0.0;
  7162  026C  01E0               	clrf	sprintf@fval^(0+128)
  7163  026D  01E1               	clrf	(sprintf@fval+1)^(0+128)
  7164  026E  01E2               	clrf	(sprintf@fval+2)^(0+128)
  7165                           
  7166                           ;doprnt.c: 1130: } else {
  7167  026F  2AB1               	goto	l5572
  7168  0270                     l5568:	
  7169                           
  7170                           ;doprnt.c: 1131: val = (unsigned long)fval;
  7171  0270  1683               	bsf	3,5	;RP0=1, select bank1
  7172  0271  1303               	bcf	3,6	;RP1=0, select bank1
  7173  0272  275B  120A  118A   	fcall	PL46	;call to abstracted procedure
  7174  0275  279C  120A  118A   	fcall	___fttol
  7175  0278  2733  120A  118A   	fcall	PL28	;call to abstracted procedure
  7176  027B  1683               	bsf	3,5	;RP0=1, select bank1
  7177  027C  00DA               	movwf	sprintf@val^(0+128)
  7178                           
  7179                           ;doprnt.c: 1132: fval -= (double)val;
  7180  027D  085D               	movf	(sprintf@val+3)^(0+128),w
  7181  027E  1283               	bcf	3,5	;RP0=0, select bank0
  7182  027F  00A3               	movwf	___lltoft@c+3
  7183  0280  1683               	bsf	3,5	;RP0=1, select bank1
  7184  0281  085C               	movf	(sprintf@val+2)^(0+128),w
  7185  0282  1283               	bcf	3,5	;RP0=0, select bank0
  7186  0283  00A2               	movwf	___lltoft@c+2
  7187  0284  1683               	bsf	3,5	;RP0=1, select bank1
  7188  0285  085B               	movf	(sprintf@val+1)^(0+128),w
  7189  0286  1283               	bcf	3,5	;RP0=0, select bank0
  7190  0287  00A1               	movwf	___lltoft@c+1
  7191  0288  1683               	bsf	3,5	;RP0=1, select bank1
  7192  0289  085A               	movf	sprintf@val^(0+128),w
  7193  028A  1283               	bcf	3,5	;RP0=0, select bank0
  7194  028B  00A0               	movwf	___lltoft@c
  7195  028C  26C0  120A  118A   	fcall	___lltoft
  7196  028F  0820               	movf	?___lltoft,w
  7197  0290  00CE               	movwf	___ftsub@f2
  7198  0291  0821               	movf	?___lltoft+1,w
  7199  0292  00CF               	movwf	___ftsub@f2+1
  7200  0293  0822               	movf	?___lltoft+2,w
  7201  0294  00D0               	movwf	___ftsub@f2+2
  7202  0295  1683               	bsf	3,5	;RP0=1, select bank1
  7203  0296  0860               	movf	sprintf@fval^(0+128),w
  7204  0297  1283               	bcf	3,5	;RP0=0, select bank0
  7205  0298  00D1               	movwf	___ftsub@f1
  7206  0299  1683               	bsf	3,5	;RP0=1, select bank1
  7207  029A  0861               	movf	(sprintf@fval+1)^(0+128),w
  7208  029B  1283               	bcf	3,5	;RP0=0, select bank0
  7209  029C  00D2               	movwf	___ftsub@f1+1
  7210  029D  1683               	bsf	3,5	;RP0=1, select bank1
  7211  029E  0862               	movf	(sprintf@fval+2)^(0+128),w
  7212  029F  1283               	bcf	3,5	;RP0=0, select bank0
  7213  02A0  00D3               	movwf	___ftsub@f1+2
  7214  02A1  26A3  120A  118A   	fcall	___ftsub
  7215  02A4  084E               	movf	?___ftsub,w
  7216  02A5  1683               	bsf	3,5	;RP0=1, select bank1
  7217  02A6  00E0               	movwf	sprintf@fval^(0+128)
  7218  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  7219  02A8  084F               	movf	?___ftsub+1,w
  7220  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  7221  02AA  00E1               	movwf	(sprintf@fval+1)^(0+128)
  7222  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  7223  02AC  0850               	movf	?___ftsub+2,w
  7224  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  7225  02AE  00E2               	movwf	(sprintf@fval+2)^(0+128)
  7226                           
  7227                           ;doprnt.c: 1133: exp = 0;
  7228  02AF  01DE               	clrf	sprintf@exp^(0+128)
  7229  02B0  01DF               	clrf	(sprintf@exp+1)^(0+128)
  7230  02B1                     l5572:	
  7231                           
  7232                           ;doprnt.c: 1134: }
  7233                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  7234  02B1  01E6               	clrf	sprintf@c^(0+128)
  7235  02B2  0AE6               	incf	sprintf@c^(0+128),f
  7236  02B3                     l5578:	
  7237                           
  7238                           ;doprnt.c: 1137: if(val < dpowers[c])
  7239  02B3  0866               	movf	sprintf@c^(0+128),w
  7240  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  7241  02B5  00D9               	movwf	??_sprintf
  7242  02B6  3001               	movlw	1
  7243  02B7  1003               	clrc
  7244  02B8                     L9:	
  7245  02B8  0DD9               	rlf	??_sprintf,f
  7246  02B9  3EFF               	addlw	-1
  7247  02BA  1003               	clrc
  7248  02BB  1D03               	skipz
  7249  02BC  2AB8               	goto	L9
  7250  02BD  2720               	fcall	PL12	;call to abstracted procedure
  7251  02BE  160A  158A  2000  120A  118A  	fcall	stringtab
  7252  02C3  00DA               	movwf	??_sprintf+1
  7253  02C4  160A  158A  2000  120A  118A  	fcall	stringtab
  7254  02C9  00DB               	movwf	??_sprintf+2
  7255  02CA  160A  158A  2000  120A  118A  	fcall	stringtab
  7256  02CF  00DC               	movwf	??_sprintf+3
  7257  02D0  160A  158A  2000  120A  118A  	fcall	stringtab
  7258  02D5  00DD               	movwf	??_sprintf+4
  7259  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  7260  02D7  025D               	subwf	(sprintf@val+3)^(0+128),w
  7261  02D8  1D03               	skipz
  7262  02D9  2AEA               	goto	u6635
  7263  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  7264  02DB  085C               	movf	??_sprintf+3,w
  7265  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  7266  02DD  025C               	subwf	(sprintf@val+2)^(0+128),w
  7267  02DE  1D03               	skipz
  7268  02DF  2AEA               	goto	u6635
  7269  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  7270  02E1  085B               	movf	??_sprintf+2,w
  7271  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  7272  02E3  025B               	subwf	(sprintf@val+1)^(0+128),w
  7273  02E4  1D03               	skipz
  7274  02E5  2AEA               	goto	u6635
  7275  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  7276  02E7  085A               	movf	??_sprintf+1,w
  7277  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  7278  02E9  025A               	subwf	sprintf@val^(0+128),w
  7279  02EA                     u6635:	
  7280  02EA  1C03               	btfss	3,0
  7281  02EB  2AF1               	goto	l5586
  7282  02EC  300A               	movlw	10
  7283  02ED  0AE6               	incf	sprintf@c^(0+128),f
  7284  02EE  0666               	xorwf	sprintf@c^(0+128),w
  7285  02EF  1D03               	btfss	3,2
  7286  02F0  2AB3               	goto	l5578
  7287  02F1                     l5586:	
  7288                           
  7289                           ;doprnt.c: 1142: width -= prec + c + exp;
  7290  02F1  0863               	movf	sprintf@prec^(0+128),w
  7291  02F2  0766               	addwf	sprintf@c^(0+128),w
  7292  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  7293  02F4  00D9               	movwf	??_sprintf
  7294  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  7295  02F6  0864               	movf	(sprintf@prec+1)^(0+128),w
  7296  02F7  1803               	skipnc
  7297  02F8  0A64               	incf	(sprintf@prec+1)^(0+128),w
  7298  02F9  1BE6               	btfsc	sprintf@c^(0+128),7
  7299  02FA  3EFF               	addlw	255
  7300  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  7301  02FC  00DA               	movwf	??_sprintf+1
  7302  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  7303  02FE  085E               	movf	sprintf@exp^(0+128),w
  7304  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  7305  0300  0759               	addwf	??_sprintf,w
  7306  0301  00DB               	movwf	??_sprintf+2
  7307  0302  1683               	bsf	3,5	;RP0=1, select bank1
  7308  0303  085F               	movf	(sprintf@exp+1)^(0+128),w
  7309  0304  1803               	skipnc
  7310  0305  0A5F               	incf	(sprintf@exp+1)^(0+128),w
  7311  0306  1283               	bcf	3,5	;RP0=0, select bank0
  7312  0307  075A               	addwf	??_sprintf+1,w
  7313  0308  00DC               	movwf	??_sprintf+3
  7314  0309  085B               	movf	??_sprintf+2,w
  7315  030A  1683               	bsf	3,5	;RP0=1, select bank1
  7316  030B  02D4               	subwf	sprintf@width^(0+128),f
  7317  030C  1283               	bcf	3,5	;RP0=0, select bank0
  7318  030D  085C               	movf	??_sprintf+3,w
  7319  030E  1683               	bsf	3,5	;RP0=1, select bank1
  7320  030F  1C03               	skipc
  7321  0310  03D5               	decf	(sprintf@width+1)^(0+128),f
  7322  0311  02D5               	subwf	(sprintf@width+1)^(0+128),f
  7323                           
  7324                           ;doprnt.c: 1143: if(
  7325                           ;doprnt.c: 1147: prec)
  7326  0312  0863               	movf	sprintf@prec^(0+128),w
  7327  0313  0464               	iorwf	(sprintf@prec+1)^(0+128),w
  7328  0314  1903               	btfsc	3,2
  7329  0315  2B1A               	goto	l5590
  7330                           
  7331                           ;doprnt.c: 1148: width--;
  7332  0316  30FF               	movlw	-1
  7333  0317  07D4               	addwf	sprintf@width^(0+128),f
  7334  0318  1C03               	skipc
  7335  0319  03D5               	decf	(sprintf@width+1)^(0+128),f
  7336  031A                     l5590:	
  7337                           
  7338                           ;doprnt.c: 1149: if(flag & 0x03)
  7339  031A  0852               	movf	sprintf@flag^(0+128),w
  7340  031B  3903               	andlw	3
  7341  031C  1D03               	btfss	3,2
  7342  031D  2B31               	goto	l5592
  7343  031E                     l5600:	
  7344  031E  0855               	movf	(sprintf@width+1)^(0+128),w
  7345  031F  3A80               	xorlw	128
  7346  0320  00FF               	movwf	127
  7347  0321  3080               	movlw	128
  7348  0322  027F               	subwf	127,w
  7349  0323  1D03               	skipz
  7350  0324  2B27               	goto	u6675
  7351  0325  3001               	movlw	1
  7352  0326  0254               	subwf	sprintf@width^(0+128),w
  7353  0327                     u6675:	
  7354  0327  1C03               	btfss	3,0
  7355  0328  2B36               	goto	l5602
  7356                           
  7357                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  7358  0329  1683               	bsf	3,5	;RP0=1, select bank1
  7359  032A  1303               	bcf	3,6	;RP1=0, select bank1
  7360  032B  0865               	movf	sprintf@sp^(0+128),w
  7361  032C  0084               	movwf	4
  7362  032D  3020               	movlw	32
  7363  032E  1383               	bcf	3,7	;select IRP bank0
  7364  032F  0080               	movwf	0
  7365  0330  0AE5               	incf	sprintf@sp^(0+128),f
  7366  0331                     l5592:	
  7367                           
  7368                           ;doprnt.c: 1150: width--;
  7369  0331  30FF               	movlw	-1
  7370  0332  07D4               	addwf	sprintf@width^(0+128),f
  7371  0333  1C03               	skipc
  7372  0334  03D5               	decf	(sprintf@width+1)^(0+128),f
  7373  0335  2B1E               	goto	l5600
  7374  0336                     l5602:	
  7375                           
  7376                           ;doprnt.c: 1183: }
  7377                           ;doprnt.c: 1188: if(flag & 0x03)
  7378  0336  1683               	bsf	3,5	;RP0=1, select bank1
  7379  0337  1303               	bcf	3,6	;RP1=0, select bank1
  7380  0338  0852               	movf	sprintf@flag^(0+128),w
  7381  0339  3903               	andlw	3
  7382  033A  1903               	btfsc	3,2
  7383  033B  2B74               	goto	l5616
  7384                           
  7385                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  7386  033C  0865               	movf	sprintf@sp^(0+128),w
  7387  033D  0084               	movwf	4
  7388  033E  302D               	movlw	45
  7389  033F  2B71               	goto	L18
  7390  0340                     l5608:	
  7391                           
  7392                           ;doprnt.c: 1200: {
  7393                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7394  0340  0866               	movf	sprintf@c^(0+128),w
  7395  0341  1283               	bcf	3,5	;RP0=0, select bank0
  7396  0342  00D9               	movwf	??_sprintf
  7397  0343  3001               	movlw	1
  7398  0344  1003               	clrc
  7399  0345                     L10:	
  7400  0345  0DD9               	rlf	??_sprintf,f
  7401  0346  3EFF               	addlw	-1
  7402  0347  1003               	clrc
  7403  0348  1D03               	skipz
  7404  0349  2B45               	goto	L10
  7405  034A  2720               	fcall	PL12	;call to abstracted procedure
  7406  034B  160A  158A  2000  120A  118A  	fcall	stringtab
  7407  0350  00F2               	movwf	___lldiv@divisor
  7408  0351  160A  158A  2000  120A  118A  	fcall	stringtab
  7409  0356  00F3               	movwf	___lldiv@divisor+1
  7410  0357  160A  158A  2000  120A  118A  	fcall	stringtab
  7411  035C  00F4               	movwf	___lldiv@divisor+2
  7412  035D  160A  158A  2000  120A  118A  	fcall	stringtab
  7413  0362  2728  120A  118A   	fcall	PL16	;call to abstracted procedure
  7414  0365  262B  120A  118A   	fcall	___lldiv
  7415                           
  7416                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7417  0368  26E0  120A  118A   	fcall	PL2	;call to abstracted procedure
  7418  036B  25ED  120A  118A   	fcall	___llmod
  7419                           
  7420                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  7421  036E  2700  120A  118A   	fcall	PL8	;call to abstracted procedure
  7422  0371                     L18:	
  7423  0371  1383               	bcf	3,7	;select IRP bank0
  7424  0372  0080               	movwf	0
  7425  0373  0AE5               	incf	sprintf@sp^(0+128),f
  7426  0374                     l5616:	
  7427  0374  03E6               	decf	sprintf@c^(0+128),f
  7428  0375  0F66               	incfsz	sprintf@c^(0+128),w
  7429  0376  2B40               	goto	l5608
  7430  0377                     l5624:	
  7431  0377  085F               	movf	(sprintf@exp+1)^(0+128),w
  7432  0378  3A80               	xorlw	128
  7433  0379  00FF               	movwf	127
  7434  037A  3080               	movlw	128
  7435  037B  027F               	subwf	127,w
  7436  037C  1D03               	skipz
  7437  037D  2B80               	goto	u6715
  7438  037E  3001               	movlw	1
  7439  037F  025E               	subwf	sprintf@exp^(0+128),w
  7440  0380                     u6715:	
  7441  0380  1C03               	btfss	3,0
  7442  0381  2B8B               	goto	l5626
  7443                           
  7444                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  7445  0382  1683               	bsf	3,5	;RP0=1, select bank1
  7446  0383  1303               	bcf	3,6	;RP1=0, select bank1
  7447  0384  2787  120A  118A   	fcall	PL68	;call to abstracted procedure
  7448                           
  7449                           ;doprnt.c: 1209: exp--;
  7450  0387  07DE               	addwf	sprintf@exp^(0+128),f
  7451  0388  1C03               	skipc
  7452  0389  03DF               	decf	(sprintf@exp+1)^(0+128),f
  7453  038A  2B77               	goto	l5624
  7454  038B                     l5626:	
  7455                           
  7456                           ;doprnt.c: 1210: }
  7457                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7458  038B  1683               	bsf	3,5	;RP0=1, select bank1
  7459  038C  1303               	bcf	3,6	;RP1=0, select bank1
  7460  038D  0864               	movf	(sprintf@prec+1)^(0+128),w
  7461  038E  3A80               	xorlw	128
  7462  038F  00FF               	movwf	127
  7463  0390  3080               	movlw	128
  7464  0391  027F               	subwf	127,w
  7465  0392  1D03               	skipz
  7466  0393  2B96               	goto	u6725
  7467  0394  3009               	movlw	9
  7468  0395  0263               	subwf	sprintf@prec^(0+128),w
  7469  0396                     u6725:	
  7470  0396  1C03               	skipc
  7471  0397  2B9C               	goto	l5630
  7472                           
  7473                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7474  0398  3008               	movlw	8
  7475  0399  1683               	bsf	3,5	;RP0=1, select bank1
  7476  039A  1303               	bcf	3,6	;RP1=0, select bank1
  7477  039B  2B9F               	goto	L16
  7478  039C                     l5630:	
  7479                           
  7480                           ;doprnt.c: 1213: else
  7481                           ;doprnt.c: 1214: c = prec;
  7482  039C  1683               	bsf	3,5	;RP0=1, select bank1
  7483  039D  1303               	bcf	3,6	;RP1=0, select bank1
  7484  039E  0863               	movf	sprintf@prec^(0+128),w
  7485  039F                     L16:	
  7486  039F  00E6               	movwf	sprintf@c^(0+128)
  7487                           
  7488                           ;doprnt.c: 1215: prec -= c;
  7489  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  7490  03A1  00D9               	movwf	??_sprintf
  7491  03A2  01DA               	clrf	??_sprintf+1
  7492  03A3  1BD9               	btfsc	??_sprintf,7
  7493  03A4  03DA               	decf	??_sprintf+1,f
  7494  03A5  1683               	bsf	3,5	;RP0=1, select bank1
  7495  03A6  02E3               	subwf	sprintf@prec^(0+128),f
  7496  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  7497  03A8  085A               	movf	??_sprintf+1,w
  7498  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  7499  03AA  1C03               	skipc
  7500  03AB  03E4               	decf	(sprintf@prec+1)^(0+128),f
  7501  03AC  02E4               	subwf	(sprintf@prec+1)^(0+128),f
  7502                           
  7503                           ;doprnt.c: 1219: if(c)
  7504  03AD  0866               	movf	sprintf@c^(0+128),w
  7505  03AE  1903               	btfsc	3,2
  7506  03AF  2BB6               	goto	l5638
  7507                           
  7508                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  7509  03B0  0865               	movf	sprintf@sp^(0+128),w
  7510  03B1  0084               	movwf	4
  7511  03B2  302E               	movlw	46
  7512  03B3  1383               	bcf	3,7	;select IRP bank0
  7513  03B4  0080               	movwf	0
  7514  03B5  0AE5               	incf	sprintf@sp^(0+128),f
  7515  03B6                     l5638:	
  7516                           
  7517                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7518  03B6  0866               	movf	sprintf@c^(0+128),w
  7519  03B7  160A  118A  247C  120A  118A  	fcall	_scale
  7520  03BC  0837               	movf	?_scale,w
  7521  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  7522  03BE  00CE               	movwf	_sprintf$1149^(0+128)
  7523  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  7524  03C0  0838               	movf	?_scale+1,w
  7525  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  7526  03C2  00CF               	movwf	(_sprintf$1149+1)^(0+128)
  7527  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  7528  03C4  0839               	movf	?_scale+2,w
  7529  03C5  1683               	bsf	3,5	;RP0=1, select bank1
  7530  03C6  00D0               	movwf	(_sprintf$1149+2)^(0+128)
  7531                           
  7532                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7533  03C7  084E               	movf	_sprintf$1149^(0+128),w
  7534  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  7535  03C9  00AB               	movwf	___ftmul@f2
  7536  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  7537  03CB  084F               	movf	(_sprintf$1149+1)^(0+128),w
  7538  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  7539  03CD  00AC               	movwf	___ftmul@f2+1
  7540  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  7541  03CF  0850               	movf	(_sprintf$1149+2)^(0+128),w
  7542  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  7543  03D1  00AD               	movwf	___ftmul@f2+2
  7544  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  7545  03D3  0860               	movf	sprintf@fval^(0+128),w
  7546  03D4  2772               	fcall	PL52	;call to abstracted procedure
  7547  03D5  160A  118A  2690  120A  118A  	fcall	___ftmul
  7548  03DA  0828               	movf	?___ftmul,w
  7549  03DB  00C2               	movwf	___fttol@f1
  7550  03DC  0829               	movf	?___ftmul+1,w
  7551  03DD  00C3               	movwf	___fttol@f1+1
  7552  03DE  082A               	movf	?___ftmul+2,w
  7553  03DF  00C4               	movwf	___fttol@f1+2
  7554  03E0  279C  120A  118A   	fcall	___fttol
  7555  03E3  2733  120A  118A   	fcall	PL28	;call to abstracted procedure
  7556  03E6  2C5E               	goto	L17
  7557  03E7                     l5642:	
  7558                           ;doprnt.c: 1228: while(c--) {
  7559                           
  7560                           
  7561                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7562  03E7  0866               	movf	sprintf@c^(0+128),w
  7563  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  7564  03E9  00D9               	movwf	??_sprintf
  7565  03EA  3001               	movlw	1
  7566  03EB  1003               	clrc
  7567  03EC                     L11:	
  7568  03EC  0DD9               	rlf	??_sprintf,f
  7569  03ED  3EFF               	addlw	-1
  7570  03EE  1003               	clrc
  7571  03EF  1D03               	skipz
  7572  03F0  2BEC               	goto	L11
  7573  03F1  2720               	fcall	PL12	;call to abstracted procedure
  7574  03F2  160A  158A  2000  120A  118A  	fcall	stringtab
  7575  03F7  00F2               	movwf	___lldiv@divisor
  7576  03F8  160A  158A  2000  120A  118A  	fcall	stringtab
  7577  03FD  00F3               	movwf	___lldiv@divisor+1
  7578  03FE  160A  158A  2000  120A  118A  	fcall	stringtab
  7579  0403  00F4               	movwf	___lldiv@divisor+2
  7580  0404  160A  158A  2000  120A  118A  	fcall	stringtab
  7581  0409  2728  120A  118A   	fcall	PL16	;call to abstracted procedure
  7582  040C  262B  120A  118A   	fcall	___lldiv
  7583                           
  7584                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7585  040F  26E0  120A  118A   	fcall	PL2	;call to abstracted procedure
  7586  0412  25ED  120A  118A   	fcall	___llmod
  7587                           
  7588                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7589  0415  2700  120A  118A   	fcall	PL8	;call to abstracted procedure
  7590  0418  1383               	bcf	3,7	;select IRP bank0
  7591  0419  0080               	movwf	0
  7592  041A  0AE5               	incf	sprintf@sp^(0+128),f
  7593                           
  7594                           ;doprnt.c: 1232: val %= dpowers[c];
  7595  041B  0866               	movf	sprintf@c^(0+128),w
  7596  041C  1283               	bcf	3,5	;RP0=0, select bank0
  7597  041D  00D9               	movwf	??_sprintf
  7598  041E  3001               	movlw	1
  7599  041F  1003               	clrc
  7600  0420                     L12:	
  7601  0420  0DD9               	rlf	??_sprintf,f
  7602  0421  3EFF               	addlw	-1
  7603  0422  1003               	clrc
  7604  0423  1D03               	skipz
  7605  0424  2C20               	goto	L12
  7606  0425  2720               	fcall	PL12	;call to abstracted procedure
  7607  0426  160A  158A  2000  120A  118A  	fcall	stringtab
  7608  042B  00A5               	movwf	___llmod@divisor
  7609  042C  160A  158A  2000  120A  118A  	fcall	stringtab
  7610  0431  00A6               	movwf	___llmod@divisor+1
  7611  0432  160A  158A  2000  120A  118A  	fcall	stringtab
  7612  0437  00A7               	movwf	___llmod@divisor+2
  7613  0438  160A  158A  2000  120A  118A  	fcall	stringtab
  7614  043D  00A8               	movwf	___llmod@divisor+3
  7615  043E  1683               	bsf	3,5	;RP0=1, select bank1
  7616  043F  085D               	movf	(sprintf@val+3)^(0+128),w
  7617  0440  1283               	bcf	3,5	;RP0=0, select bank0
  7618  0441  00AC               	movwf	___llmod@dividend+3
  7619  0442  1683               	bsf	3,5	;RP0=1, select bank1
  7620  0443  085C               	movf	(sprintf@val+2)^(0+128),w
  7621  0444  1283               	bcf	3,5	;RP0=0, select bank0
  7622  0445  00AB               	movwf	___llmod@dividend+2
  7623  0446  1683               	bsf	3,5	;RP0=1, select bank1
  7624  0447  085B               	movf	(sprintf@val+1)^(0+128),w
  7625  0448  1283               	bcf	3,5	;RP0=0, select bank0
  7626  0449  00AA               	movwf	___llmod@dividend+1
  7627  044A  1683               	bsf	3,5	;RP0=1, select bank1
  7628  044B  085A               	movf	sprintf@val^(0+128),w
  7629  044C  1283               	bcf	3,5	;RP0=0, select bank0
  7630  044D  00A9               	movwf	___llmod@dividend
  7631  044E  25ED  120A  118A   	fcall	___llmod
  7632  0451  0828               	movf	?___llmod+3,w
  7633  0452  1683               	bsf	3,5	;RP0=1, select bank1
  7634  0453  00DD               	movwf	(sprintf@val+3)^(0+128)
  7635  0454  1283               	bcf	3,5	;RP0=0, select bank0
  7636  0455  0827               	movf	?___llmod+2,w
  7637  0456  1683               	bsf	3,5	;RP0=1, select bank1
  7638  0457  00DC               	movwf	(sprintf@val+2)^(0+128)
  7639  0458  1283               	bcf	3,5	;RP0=0, select bank0
  7640  0459  0826               	movf	?___llmod+1,w
  7641  045A  1683               	bsf	3,5	;RP0=1, select bank1
  7642  045B  00DB               	movwf	(sprintf@val+1)^(0+128)
  7643  045C  1283               	bcf	3,5	;RP0=0, select bank0
  7644  045D  0825               	movf	?___llmod,w
  7645  045E                     L17:	
  7646  045E  1683               	bsf	3,5	;RP0=1, select bank1
  7647  045F  00DA               	movwf	sprintf@val^(0+128)
  7648  0460  03E6               	decf	sprintf@c^(0+128),f
  7649  0461  0F66               	incfsz	sprintf@c^(0+128),w
  7650  0462  2BE7               	goto	l5642
  7651  0463                     l5660:	
  7652  0463  0863               	movf	sprintf@prec^(0+128),w
  7653  0464  0464               	iorwf	(sprintf@prec+1)^(0+128),w
  7654  0465  1903               	btfsc	3,2
  7655  0466  282A               	goto	l5740
  7656                           
  7657                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7658  0467  2787  120A  118A   	fcall	PL68	;call to abstracted procedure
  7659                           
  7660                           ;doprnt.c: 1237: prec--;
  7661  046A  07E3               	addwf	sprintf@prec^(0+128),f
  7662  046B  1C03               	skipc
  7663  046C  03E4               	decf	(sprintf@prec+1)^(0+128),f
  7664  046D  2C63               	goto	l5660
  7665  046E                     l5662:	
  7666                           
  7667                           ;doprnt.c: 1246: }
  7668                           ;doprnt.c: 1253: {
  7669                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7670  046E  1683               	bsf	3,5	;RP0=1, select bank1
  7671  046F  0851               	movf	sprintf@ap^(0+128),w
  7672  0470  0084               	movwf	4
  7673  0471  1383               	bcf	3,7	;select IRP bank0
  7674  0472  278F  120A  118A   	fcall	PL90	;call to abstracted procedure
  7675  0475  0859               	movf	??_sprintf,w
  7676  0476  1683               	bsf	3,5	;RP0=1, select bank1
  7677  0477  00DA               	movwf	sprintf@val^(0+128)
  7678  0478  1283               	bcf	3,5	;RP0=0, select bank0
  7679  0479  085A               	movf	??_sprintf+1,w
  7680  047A  1683               	bsf	3,5	;RP0=1, select bank1
  7681  047B  00DB               	movwf	(sprintf@val+1)^(0+128)
  7682  047C  3000               	movlw	0
  7683  047D  1BDB               	btfsc	(sprintf@val+1)^(0+128),7
  7684  047E  30FF               	movlw	255
  7685  047F  00DC               	movwf	(sprintf@val+2)^(0+128)
  7686  0480  00DD               	movwf	(sprintf@val+3)^(0+128)
  7687  0481  0AD1               	incf	sprintf@ap^(0+128),f
  7688  0482  0AD1               	incf	sprintf@ap^(0+128),f
  7689                           
  7690                           ;doprnt.c: 1261: if((long)val < 0) {
  7691  0483  1FDD               	btfss	(sprintf@val+3)^(0+128),7
  7692  0484  2C92               	goto	l5672
  7693                           
  7694                           ;doprnt.c: 1262: flag |= 0x03;
  7695  0485  3003               	movlw	3
  7696  0486  04D2               	iorwf	sprintf@flag^(0+128),f
  7697                           
  7698                           ;doprnt.c: 1263: val = -val;
  7699  0487  09DA               	comf	sprintf@val^(0+128),f
  7700  0488  09DB               	comf	(sprintf@val+1)^(0+128),f
  7701  0489  09DC               	comf	(sprintf@val+2)^(0+128),f
  7702  048A  09DD               	comf	(sprintf@val+3)^(0+128),f
  7703  048B  0ADA               	incf	sprintf@val^(0+128),f
  7704  048C  1903               	skipnz
  7705  048D  0ADB               	incf	(sprintf@val+1)^(0+128),f
  7706  048E  1903               	skipnz
  7707  048F  0ADC               	incf	(sprintf@val+2)^(0+128),f
  7708  0490  1903               	skipnz
  7709  0491  0ADD               	incf	(sprintf@val+3)^(0+128),f
  7710  0492                     l5672:	
  7711                           
  7712                           ;doprnt.c: 1264: }
  7713                           ;doprnt.c: 1266: }
  7714                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7715  0492  0863               	movf	sprintf@prec^(0+128),w
  7716  0493  0464               	iorwf	(sprintf@prec+1)^(0+128),w
  7717  0494  1D03               	btfss	3,2
  7718  0495  2C9E               	goto	l5678
  7719  0496  085D               	movf	(sprintf@val+3)^(0+128),w
  7720  0497  045C               	iorwf	(sprintf@val+2)^(0+128),w
  7721  0498  045B               	iorwf	(sprintf@val+1)^(0+128),w
  7722  0499  045A               	iorwf	sprintf@val^(0+128),w
  7723  049A  1903               	btfsc	3,2
  7724                           
  7725                           ;doprnt.c: 1291: prec++;
  7726  049B  0AE3               	incf	sprintf@prec^(0+128),f
  7727  049C  1903               	skipnz
  7728  049D  0AE4               	incf	(sprintf@prec+1)^(0+128),f
  7729  049E                     l5678:	
  7730                           
  7731                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7732  049E  01E6               	clrf	sprintf@c^(0+128)
  7733  049F  0AE6               	incf	sprintf@c^(0+128),f
  7734  04A0                     l5684:	
  7735                           
  7736                           ;doprnt.c: 1306: if(val < dpowers[c])
  7737  04A0  0866               	movf	sprintf@c^(0+128),w
  7738  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  7739  04A2  00D9               	movwf	??_sprintf
  7740  04A3  3001               	movlw	1
  7741  04A4  1003               	clrc
  7742  04A5                     L13:	
  7743  04A5  0DD9               	rlf	??_sprintf,f
  7744  04A6  3EFF               	addlw	-1
  7745  04A7  1003               	clrc
  7746  04A8  1D03               	skipz
  7747  04A9  2CA5               	goto	L13
  7748  04AA  2720               	fcall	PL12	;call to abstracted procedure
  7749  04AB  160A  158A  2000  120A  118A  	fcall	stringtab
  7750  04B0  00DA               	movwf	??_sprintf+1
  7751  04B1  160A  158A  2000  120A  118A  	fcall	stringtab
  7752  04B6  00DB               	movwf	??_sprintf+2
  7753  04B7  160A  158A  2000  120A  118A  	fcall	stringtab
  7754  04BC  00DC               	movwf	??_sprintf+3
  7755  04BD  160A  158A  2000  120A  118A  	fcall	stringtab
  7756  04C2  00DD               	movwf	??_sprintf+4
  7757  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  7758  04C4  025D               	subwf	(sprintf@val+3)^(0+128),w
  7759  04C5  1D03               	skipz
  7760  04C6  2CD7               	goto	u6825
  7761  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  7762  04C8  085C               	movf	??_sprintf+3,w
  7763  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  7764  04CA  025C               	subwf	(sprintf@val+2)^(0+128),w
  7765  04CB  1D03               	skipz
  7766  04CC  2CD7               	goto	u6825
  7767  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  7768  04CE  085B               	movf	??_sprintf+2,w
  7769  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  7770  04D0  025B               	subwf	(sprintf@val+1)^(0+128),w
  7771  04D1  1D03               	skipz
  7772  04D2  2CD7               	goto	u6825
  7773  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  7774  04D4  085A               	movf	??_sprintf+1,w
  7775  04D5  1683               	bsf	3,5	;RP0=1, select bank1
  7776  04D6  025A               	subwf	sprintf@val^(0+128),w
  7777  04D7                     u6825:	
  7778  04D7  1C03               	btfss	3,0
  7779  04D8  2CDE               	goto	l5692
  7780  04D9  300A               	movlw	10
  7781  04DA  0AE6               	incf	sprintf@c^(0+128),f
  7782  04DB  0666               	xorwf	sprintf@c^(0+128),w
  7783  04DC  1D03               	btfss	3,2
  7784  04DD  2CA0               	goto	l5684
  7785  04DE                     l5692:	
  7786                           
  7787                           ;doprnt.c: 1339: if(c < prec)
  7788  04DE  2767  120A  118A   	fcall	PL50	;call to abstracted procedure
  7789  04E1  0864               	movf	(sprintf@prec+1)^(0+128),w
  7790  04E2  3A80               	xorlw	128
  7791  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  7792  04E4  025B               	subwf	??_sprintf+2,w
  7793  04E5  1D03               	skipz
  7794  04E6  2CEB               	goto	u6845
  7795  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  7796  04E8  0863               	movf	sprintf@prec^(0+128),w
  7797  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  7798  04EA  0259               	subwf	??_sprintf,w
  7799  04EB                     u6845:	
  7800  04EB  1803               	skipnc
  7801  04EC  2CF2               	goto	l5696
  7802                           
  7803                           ;doprnt.c: 1340: c = prec;
  7804  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  7805  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  7806  04EF  0863               	movf	sprintf@prec^(0+128),w
  7807  04F0  00E6               	movwf	sprintf@c^(0+128)
  7808  04F1  2D0A               	goto	l627
  7809  04F2                     l5696:	
  7810                           
  7811                           ;doprnt.c: 1341: else if(prec < c)
  7812  04F2  277D  120A  118A   	fcall	PL62	;call to abstracted procedure
  7813  04F5  0864               	movf	(sprintf@prec+1)^(0+128),w
  7814  04F6  3A80               	xorlw	128
  7815  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  7816  04F8  00DB               	movwf	??_sprintf+2
  7817  04F9  085A               	movf	??_sprintf+1,w
  7818  04FA  3A80               	xorlw	128
  7819  04FB  025B               	subwf	??_sprintf+2,w
  7820  04FC  1D03               	skipz
  7821  04FD  2D01               	goto	u6855
  7822  04FE  0859               	movf	??_sprintf,w
  7823  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  7824  0500  0263               	subwf	sprintf@prec^(0+128),w
  7825  0501                     u6855:	
  7826  0501  1803               	skipnc
  7827  0502  2D0A               	goto	l627
  7828                           
  7829                           ;doprnt.c: 1342: prec = c;
  7830  0503  1683               	bsf	3,5	;RP0=1, select bank1
  7831  0504  1303               	bcf	3,6	;RP1=0, select bank1
  7832  0505  0866               	movf	sprintf@c^(0+128),w
  7833  0506  00E3               	movwf	sprintf@prec^(0+128)
  7834  0507  01E4               	clrf	(sprintf@prec+1)^(0+128)
  7835  0508  1BE3               	btfsc	sprintf@prec^(0+128),7
  7836  0509  03E4               	decf	(sprintf@prec+1)^(0+128),f
  7837  050A                     l627:	
  7838                           
  7839                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7840  050A  1683               	bsf	3,5	;RP0=1, select bank1
  7841  050B  1303               	bcf	3,6	;RP1=0, select bank1
  7842  050C  0854               	movf	sprintf@width^(0+128),w
  7843  050D  0455               	iorwf	(sprintf@width+1)^(0+128),w
  7844  050E  1903               	btfsc	3,2
  7845  050F  2D18               	goto	l5704
  7846  0510  0852               	movf	sprintf@flag^(0+128),w
  7847  0511  3903               	andlw	3
  7848  0512  1903               	btfsc	3,2
  7849  0513  2D18               	goto	l5704
  7850                           
  7851                           ;doprnt.c: 1346: width--;
  7852  0514  30FF               	movlw	-1
  7853  0515  07D4               	addwf	sprintf@width^(0+128),f
  7854  0516  1C03               	skipc
  7855  0517  03D5               	decf	(sprintf@width+1)^(0+128),f
  7856  0518                     l5704:	
  7857                           
  7858                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7859  0518  1F53               	btfss	(sprintf@flag+1)^(0+128),6
  7860  0519  2D37               	goto	l5712
  7861                           
  7862                           ;doprnt.c: 1349: if(width > prec)
  7863  051A  0864               	movf	(sprintf@prec+1)^(0+128),w
  7864  051B  3A80               	xorlw	128
  7865  051C  1283               	bcf	3,5	;RP0=0, select bank0
  7866  051D  00D9               	movwf	??_sprintf
  7867  051E  1683               	bsf	3,5	;RP0=1, select bank1
  7868  051F  0855               	movf	(sprintf@width+1)^(0+128),w
  7869  0520  3A80               	xorlw	128
  7870  0521  1283               	bcf	3,5	;RP0=0, select bank0
  7871  0522  0259               	subwf	??_sprintf,w
  7872  0523  1D03               	skipz
  7873  0524  2D28               	goto	u6895
  7874  0525  1683               	bsf	3,5	;RP0=1, select bank1
  7875  0526  0854               	movf	sprintf@width^(0+128),w
  7876  0527  0263               	subwf	sprintf@prec^(0+128),w
  7877  0528                     u6895:	
  7878  0528  1803               	skipnc
  7879  0529  2D33               	goto	l5710
  7880                           
  7881                           ;doprnt.c: 1350: width -= prec;
  7882  052A  1683               	bsf	3,5	;RP0=1, select bank1
  7883  052B  1303               	bcf	3,6	;RP1=0, select bank1
  7884  052C  0863               	movf	sprintf@prec^(0+128),w
  7885  052D  02D4               	subwf	sprintf@width^(0+128),f
  7886  052E  0864               	movf	(sprintf@prec+1)^(0+128),w
  7887  052F  1C03               	skipc
  7888  0530  03D5               	decf	(sprintf@width+1)^(0+128),f
  7889  0531  02D5               	subwf	(sprintf@width+1)^(0+128),f
  7890  0532  2D37               	goto	l5712
  7891  0533                     l5710:	
  7892                           
  7893                           ;doprnt.c: 1351: else
  7894                           ;doprnt.c: 1352: width = 0;
  7895  0533  1683               	bsf	3,5	;RP0=1, select bank1
  7896  0534  1303               	bcf	3,6	;RP1=0, select bank1
  7897  0535  01D4               	clrf	sprintf@width^(0+128)
  7898  0536  01D5               	clrf	(sprintf@width+1)^(0+128)
  7899  0537                     l5712:	
  7900                           
  7901                           ;doprnt.c: 1353: }
  7902                           ;doprnt.c: 1381: if(width > c)
  7903  0537  2767  120A  118A   	fcall	PL50	;call to abstracted procedure
  7904  053A  0855               	movf	(sprintf@width+1)^(0+128),w
  7905  053B  3A80               	xorlw	128
  7906  053C  1283               	bcf	3,5	;RP0=0, select bank0
  7907  053D  025B               	subwf	??_sprintf+2,w
  7908  053E  1D03               	skipz
  7909  053F  2D44               	goto	u6905
  7910  0540  1683               	bsf	3,5	;RP0=1, select bank1
  7911  0541  0854               	movf	sprintf@width^(0+128),w
  7912  0542  1283               	bcf	3,5	;RP0=0, select bank0
  7913  0543  0259               	subwf	??_sprintf,w
  7914  0544                     u6905:	
  7915  0544  1803               	skipnc
  7916  0545  2D51               	goto	l5716
  7917                           
  7918                           ;doprnt.c: 1382: width -= c;
  7919  0546  277D  120A  118A   	fcall	PL62	;call to abstracted procedure
  7920  0549  02D4               	subwf	sprintf@width^(0+128),f
  7921  054A  1283               	bcf	3,5	;RP0=0, select bank0
  7922  054B  085A               	movf	??_sprintf+1,w
  7923  054C  1683               	bsf	3,5	;RP0=1, select bank1
  7924  054D  1C03               	skipc
  7925  054E  03D5               	decf	(sprintf@width+1)^(0+128),f
  7926  054F  02D5               	subwf	(sprintf@width+1)^(0+128),f
  7927  0550  2D55               	goto	l5718
  7928  0551                     l5716:	
  7929                           
  7930                           ;doprnt.c: 1383: else
  7931                           ;doprnt.c: 1384: width = 0;
  7932  0551  1683               	bsf	3,5	;RP0=1, select bank1
  7933  0552  1303               	bcf	3,6	;RP1=0, select bank1
  7934  0553  01D4               	clrf	sprintf@width^(0+128)
  7935  0554  01D5               	clrf	(sprintf@width+1)^(0+128)
  7936  0555                     l5718:	
  7937                           
  7938                           ;doprnt.c: 1422: {
  7939                           ;doprnt.c: 1424: if(width
  7940                           ;doprnt.c: 1428: )
  7941  0555  0854               	movf	sprintf@width^(0+128),w
  7942  0556  0455               	iorwf	(sprintf@width+1)^(0+128),w
  7943  0557  1903               	btfsc	3,2
  7944  0558  2D67               	goto	l5726
  7945  0559                     l5720:	
  7946                           
  7947                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7948  0559  0865               	movf	sprintf@sp^(0+128),w
  7949  055A  0084               	movwf	4
  7950  055B  3020               	movlw	32
  7951  055C  1383               	bcf	3,7	;select IRP bank0
  7952  055D  0080               	movwf	0
  7953  055E  30FF               	movlw	-1
  7954  055F  0AE5               	incf	sprintf@sp^(0+128),f
  7955                           
  7956                           ;doprnt.c: 1431: while(--width);
  7957  0560  07D4               	addwf	sprintf@width^(0+128),f
  7958  0561  1C03               	skipc
  7959  0562  03D5               	decf	(sprintf@width+1)^(0+128),f
  7960  0563  0854               	movf	sprintf@width^(0+128),w
  7961  0564  0455               	iorwf	(sprintf@width+1)^(0+128),w
  7962  0565  1D03               	btfss	3,2
  7963  0566  2D59               	goto	l5720
  7964  0567                     l5726:	
  7965                           
  7966                           ;doprnt.c: 1438: if(flag & 0x03)
  7967  0567  0852               	movf	sprintf@flag^(0+128),w
  7968  0568  3903               	andlw	3
  7969  0569  1903               	btfsc	3,2
  7970  056A  2D71               	goto	l5738
  7971                           
  7972                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7973  056B  0865               	movf	sprintf@sp^(0+128),w
  7974  056C  0084               	movwf	4
  7975  056D  302D               	movlw	45
  7976  056E                     L19:	
  7977  056E  1383               	bcf	3,7	;select IRP bank0
  7978  056F  0080               	movwf	0
  7979  0570  0AE5               	incf	sprintf@sp^(0+128),f
  7980  0571                     l5738:	
  7981  0571  30FF               	movlw	-1
  7982  0572  07E3               	addwf	sprintf@prec^(0+128),f
  7983  0573  1C03               	skipc
  7984  0574  03E4               	decf	(sprintf@prec+1)^(0+128),f
  7985  0575  0F63               	incfsz	sprintf@prec^(0+128),w
  7986  0576  2D7A               	goto	l5732
  7987  0577  0A64               	incf	(sprintf@prec+1)^(0+128),w
  7988  0578  1903               	btfsc	3,2
  7989  0579  282A               	goto	l5740
  7990  057A                     l5732:	
  7991                           
  7992                           ;doprnt.c: 1478: {
  7993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7994  057A  300A               	movlw	10
  7995  057B  1283               	bcf	3,5	;RP0=0, select bank0
  7996  057C  00A5               	movwf	___llmod@divisor
  7997  057D  01A6               	clrf	___llmod@divisor+1
  7998  057E  01A7               	clrf	___llmod@divisor+2
  7999  057F  01A8               	clrf	___llmod@divisor+3
  8000  0580  1683               	bsf	3,5	;RP0=1, select bank1
  8001  0581  0863               	movf	sprintf@prec^(0+128),w
  8002  0582  1283               	bcf	3,5	;RP0=0, select bank0
  8003  0583  00D9               	movwf	??_sprintf
  8004  0584  3001               	movlw	1
  8005  0585  1003               	clrc
  8006  0586                     L14:	
  8007  0586  0DD9               	rlf	??_sprintf,f
  8008  0587  3EFF               	addlw	-1
  8009  0588  1003               	clrc
  8010  0589  1D03               	skipz
  8011  058A  2D86               	goto	L14
  8012  058B  2720               	fcall	PL12	;call to abstracted procedure
  8013  058C  160A  158A  2000  120A  118A  	fcall	stringtab
  8014  0591  00F2               	movwf	___lldiv@divisor
  8015  0592  160A  158A  2000  120A  118A  	fcall	stringtab
  8016  0597  00F3               	movwf	___lldiv@divisor+1
  8017  0598  160A  158A  2000  120A  118A  	fcall	stringtab
  8018  059D  00F4               	movwf	___lldiv@divisor+2
  8019  059E  160A  158A  2000  120A  118A  	fcall	stringtab
  8020  05A3  2728  120A  118A   	fcall	PL16	;call to abstracted procedure
  8021  05A6  262B  120A  118A   	fcall	___lldiv
  8022  05A9  0875               	movf	?___lldiv+3,w
  8023  05AA  00AC               	movwf	___llmod@dividend+3
  8024  05AB  0874               	movf	?___lldiv+2,w
  8025  05AC  00AB               	movwf	___llmod@dividend+2
  8026  05AD  0873               	movf	?___lldiv+1,w
  8027  05AE  00AA               	movwf	___llmod@dividend+1
  8028  05AF  0872               	movf	?___lldiv,w
  8029  05B0  00A9               	movwf	___llmod@dividend
  8030  05B1  25ED  120A  118A   	fcall	___llmod
  8031  05B4  0825               	movf	?___llmod,w
  8032  05B5  3E30               	addlw	48
  8033  05B6  1683               	bsf	3,5	;RP0=1, select bank1
  8034  05B7  00E6               	movwf	sprintf@c^(0+128)
  8035                           
  8036                           ;doprnt.c: 1523: }
  8037                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8038  05B8  0865               	movf	sprintf@sp^(0+128),w
  8039  05B9  0084               	movwf	4
  8040  05BA  0866               	movf	sprintf@c^(0+128),w
  8041  05BB  2D6E               	goto	L19
  8042  05BC                     l5742:	
  8043                           
  8044                           ;doprnt.c: 1538: *sp = 0;
  8045  05BC  0865               	movf	sprintf@sp^(0+128),w
  8046  05BD  0084               	movwf	4
  8047  05BE  1383               	bcf	3,7	;select IRP bank0
  8048  05BF  0180               	clrf	0
  8049  05C0  0008               	return
  8050  05C1                     __end_of_sprintf:	
  8051  05C1                     __ptext49:	
  8052 ;; *************** function ___ftge *****************
  8053 ;; Defined at:
  8054 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftge.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  ff1             3   46[BANK0 ] float 
  8057 ;;  ff2             3   49[BANK0 ] float 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;		None
  8060 ;; Return value:  Size  Location     Type
  8061 ;;		None               void
  8062 ;; Registers used:
  8063 ;;		wreg, status,2, status,0
  8064 ;; Tracked objects:
  8065 ;;		On entry : 300/0
  8066 ;;		On exit  : 300/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8069 ;;      Params:         0       6       0       0       0
  8070 ;;      Locals:         0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0
  8072 ;;      Totals:         0       6       0       0       0
  8073 ;;Total ram usage:        6 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    1
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_calcSHT71
  8080 ;;		_regulacija
  8081 ;;		_menuHumi
  8082 ;;		_menu
  8083 ;;		_sprintf
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function ___ftge
  8089  05C1                     ___ftge:	
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8093  05C1  1FD0               	btfss	___ftge@ff1+2,7
  8094  05C2  2DD0               	goto	l3690
  8095  05C3  084E               	movf	___ftge@ff1,w
  8096  05C4  3C00               	sublw	0
  8097  05C5  00CE               	movwf	___ftge@ff1
  8098  05C6  084F               	movf	___ftge@ff1+1,w
  8099  05C7  1C03               	skipc
  8100  05C8  0F4F               	incfsz	___ftge@ff1+1,w
  8101  05C9  3C00               	sublw	0
  8102  05CA  00CF               	movwf	___ftge@ff1+1
  8103  05CB  0850               	movf	___ftge@ff1+2,w
  8104  05CC  1C03               	skipc
  8105  05CD  0F50               	incfsz	___ftge@ff1+2,w
  8106  05CE  3C80               	sublw	128
  8107  05CF  00D0               	movwf	___ftge@ff1+2
  8108  05D0                     l3690:	
  8109  05D0  1FD3               	btfss	___ftge@ff2+2,7
  8110  05D1  2DDF               	goto	l3694
  8111  05D2  0851               	movf	___ftge@ff2,w
  8112  05D3  3C00               	sublw	0
  8113  05D4  00D1               	movwf	___ftge@ff2
  8114  05D5  0852               	movf	___ftge@ff2+1,w
  8115  05D6  1C03               	skipc
  8116  05D7  0F52               	incfsz	___ftge@ff2+1,w
  8117  05D8  3C00               	sublw	0
  8118  05D9  00D2               	movwf	___ftge@ff2+1
  8119  05DA  0853               	movf	___ftge@ff2+2,w
  8120  05DB  1C03               	skipc
  8121  05DC  0F53               	incfsz	___ftge@ff2+2,w
  8122  05DD  3C80               	sublw	128
  8123  05DE  00D3               	movwf	___ftge@ff2+2
  8124  05DF                     l3694:	
  8125  05DF  3080               	movlw	128
  8126  05E0  06D0               	xorwf	___ftge@ff1+2,f
  8127  05E1  06D3               	xorwf	___ftge@ff2+2,f
  8128  05E2  0853               	movf	___ftge@ff2+2,w
  8129  05E3  0250               	subwf	___ftge@ff1+2,w
  8130  05E4  1D03               	skipz
  8131  05E5  0008               	return
  8132  05E6  0852               	movf	___ftge@ff2+1,w
  8133  05E7  024F               	subwf	___ftge@ff1+1,w
  8134  05E8  1D03               	skipz
  8135  05E9  0008               	return
  8136  05EA  0851               	movf	___ftge@ff2,w
  8137  05EB  024E               	subwf	___ftge@ff1,w
  8138  05EC  0008               	return
  8139  05ED                     __end_of___ftge:	
  8140  05ED                     __ptext43:	
  8141 ;; *************** function ___llmod *****************
  8142 ;; Defined at:
  8143 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\llmod.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  divisor         4    5[BANK0 ] unsigned long 
  8146 ;;  dividend        4    9[BANK0 ] unsigned long 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  counter         1   13[BANK0 ] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  4    5[BANK0 ] unsigned long 
  8151 ;; Registers used:
  8152 ;;		wreg, status,2, status,0
  8153 ;; Tracked objects:
  8154 ;;		On entry : 300/0
  8155 ;;		On exit  : 300/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8158 ;;      Params:         0       8       0       0       0
  8159 ;;      Locals:         0       1       0       0       0
  8160 ;;      Temps:          0       0       0       0       0
  8161 ;;      Totals:         0       9       0       0       0
  8162 ;;Total ram usage:        9 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    1
  8165 ;; This function calls:
  8166 ;;		Nothing
  8167 ;; This function is called by:
  8168 ;;		_sprintf
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           
  8173                           ;psect for function ___llmod
  8174  05ED                     ___llmod:	
  8175                           
  8176                           ;incstack = 0
  8177                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8178  05ED  0828               	movf	___llmod@divisor+3,w
  8179  05EE  0427               	iorwf	___llmod@divisor+2,w
  8180  05EF  0426               	iorwf	___llmod@divisor+1,w
  8181  05F0  0425               	iorwf	___llmod@divisor,w
  8182  05F1  1903               	skipnz
  8183  05F2  2E22               	goto	l5436
  8184  05F3  01AD               	clrf	___llmod@counter
  8185  05F4                     L27:	
  8186  05F4  0AAD               	incf	___llmod@counter,f
  8187  05F5  1BA8               	btfsc	___llmod@divisor+3,7
  8188  05F6  2DFD               	goto	l5428
  8189  05F7  1003               	clrc
  8190  05F8  0DA5               	rlf	___llmod@divisor,f
  8191  05F9  0DA6               	rlf	___llmod@divisor+1,f
  8192  05FA  0DA7               	rlf	___llmod@divisor+2,f
  8193  05FB  0DA8               	rlf	___llmod@divisor+3,f
  8194  05FC  2DF4               	goto	L27
  8195  05FD                     l5428:	
  8196  05FD  0828               	movf	___llmod@divisor+3,w
  8197  05FE  022C               	subwf	___llmod@dividend+3,w
  8198  05FF  1D03               	skipz
  8199  0600  2E0B               	goto	u6405
  8200  0601  0827               	movf	___llmod@divisor+2,w
  8201  0602  022B               	subwf	___llmod@dividend+2,w
  8202  0603  1D03               	skipz
  8203  0604  2E0B               	goto	u6405
  8204  0605  0826               	movf	___llmod@divisor+1,w
  8205  0606  022A               	subwf	___llmod@dividend+1,w
  8206  0607  1D03               	skipz
  8207  0608  2E0B               	goto	u6405
  8208  0609  0825               	movf	___llmod@divisor,w
  8209  060A  0229               	subwf	___llmod@dividend,w
  8210  060B                     u6405:	
  8211  060B  1C03               	skipc
  8212  060C  2E1C               	goto	L28
  8213  060D  0825               	movf	___llmod@divisor,w
  8214  060E  02A9               	subwf	___llmod@dividend,f
  8215  060F  0826               	movf	___llmod@divisor+1,w
  8216  0610  1C03               	skipc
  8217  0611  0F26               	incfsz	___llmod@divisor+1,w
  8218  0612  02AA               	subwf	___llmod@dividend+1,f
  8219  0613  0827               	movf	___llmod@divisor+2,w
  8220  0614  1C03               	skipc
  8221  0615  0F27               	incfsz	___llmod@divisor+2,w
  8222  0616  02AB               	subwf	___llmod@dividend+2,f
  8223  0617  0828               	movf	___llmod@divisor+3,w
  8224  0618  1C03               	skipc
  8225  0619  0F28               	incfsz	___llmod@divisor+3,w
  8226  061A  02AC               	subwf	___llmod@dividend+3,f
  8227  061B  1003               	clrc
  8228  061C                     L28:	
  8229  061C  0CA8               	rrf	___llmod@divisor+3,f
  8230  061D  0CA7               	rrf	___llmod@divisor+2,f
  8231  061E  0CA6               	rrf	___llmod@divisor+1,f
  8232  061F  0CA5               	rrf	___llmod@divisor,f
  8233  0620  0BAD               	decfsz	___llmod@counter,f
  8234  0621  2DFD               	goto	l5428
  8235  0622                     l5436:	
  8236  0622  082C               	movf	___llmod@dividend+3,w
  8237  0623  00A8               	movwf	?___llmod+3
  8238  0624  082B               	movf	___llmod@dividend+2,w
  8239  0625  00A7               	movwf	?___llmod+2
  8240  0626  082A               	movf	___llmod@dividend+1,w
  8241  0627  00A6               	movwf	?___llmod+1
  8242  0628  0829               	movf	___llmod@dividend,w
  8243  0629  00A5               	movwf	?___llmod
  8244  062A  0008               	return
  8245  062B                     __end_of___llmod:	
  8246  062B                     __ptext55:	
  8247 ;; *************** function ___lldiv *****************
  8248 ;; Defined at:
  8249 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lldiv.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  divisor         4    2[COMMON] unsigned long 
  8252 ;;  dividend        4    6[COMMON] unsigned long 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  quotient        4    0[BANK0 ] unsigned long 
  8255 ;;  counter         1    4[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  4    2[COMMON] unsigned long 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0
  8260 ;; Tracked objects:
  8261 ;;		On entry : 200/100
  8262 ;;		On exit  : 300/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8265 ;;      Params:         8       0       0       0       0
  8266 ;;      Locals:         0       5       0       0       0
  8267 ;;      Temps:          0       0       0       0       0
  8268 ;;      Totals:         8       5       0       0       0
  8269 ;;Total ram usage:       13 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:    1
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_UARTInit
  8276 ;;		_sprintf
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function ___lldiv
  8282  062B                     ___lldiv:	
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8286  062B  1283               	bcf	3,5	;RP0=0, select bank0
  8287  062C  01A0               	clrf	___lldiv@quotient
  8288  062D  01A1               	clrf	___lldiv@quotient+1
  8289  062E  01A2               	clrf	___lldiv@quotient+2
  8290  062F  01A3               	clrf	___lldiv@quotient+3
  8291  0630  0875               	movf	___lldiv@divisor+3,w
  8292  0631  0474               	iorwf	___lldiv@divisor+2,w
  8293  0632  0473               	iorwf	___lldiv@divisor+1,w
  8294  0633  0472               	iorwf	___lldiv@divisor,w
  8295  0634  1903               	skipnz
  8296  0635  2E6B               	goto	l3784
  8297  0636  01A4               	clrf	___lldiv@counter
  8298  0637                     L31:	
  8299  0637  0AA4               	incf	___lldiv@counter,f
  8300  0638  1BF5               	btfsc	___lldiv@divisor+3,7
  8301  0639  2E40               	goto	l3772
  8302  063A  1003               	clrc
  8303  063B  0DF2               	rlf	___lldiv@divisor,f
  8304  063C  0DF3               	rlf	___lldiv@divisor+1,f
  8305  063D  0DF4               	rlf	___lldiv@divisor+2,f
  8306  063E  0DF5               	rlf	___lldiv@divisor+3,f
  8307  063F  2E37               	goto	L31
  8308  0640                     l3772:	
  8309  0640  1003               	clrc
  8310  0641  0DA0               	rlf	___lldiv@quotient,f
  8311  0642  0DA1               	rlf	___lldiv@quotient+1,f
  8312  0643  0DA2               	rlf	___lldiv@quotient+2,f
  8313  0644  0DA3               	rlf	___lldiv@quotient+3,f
  8314  0645  0875               	movf	___lldiv@divisor+3,w
  8315  0646  0279               	subwf	___lldiv@dividend+3,w
  8316  0647  1D03               	skipz
  8317  0648  2E53               	goto	u4025
  8318  0649  0874               	movf	___lldiv@divisor+2,w
  8319  064A  0278               	subwf	___lldiv@dividend+2,w
  8320  064B  1D03               	skipz
  8321  064C  2E53               	goto	u4025
  8322  064D  0873               	movf	___lldiv@divisor+1,w
  8323  064E  0277               	subwf	___lldiv@dividend+1,w
  8324  064F  1D03               	skipz
  8325  0650  2E53               	goto	u4025
  8326  0651  0872               	movf	___lldiv@divisor,w
  8327  0652  0276               	subwf	___lldiv@dividend,w
  8328  0653                     u4025:	
  8329  0653  1C03               	skipc
  8330  0654  2E65               	goto	L32
  8331  0655  0872               	movf	___lldiv@divisor,w
  8332  0656  02F6               	subwf	___lldiv@dividend,f
  8333  0657  0873               	movf	___lldiv@divisor+1,w
  8334  0658  1C03               	skipc
  8335  0659  0F73               	incfsz	___lldiv@divisor+1,w
  8336  065A  02F7               	subwf	___lldiv@dividend+1,f
  8337  065B  0874               	movf	___lldiv@divisor+2,w
  8338  065C  1C03               	skipc
  8339  065D  0F74               	incfsz	___lldiv@divisor+2,w
  8340  065E  02F8               	subwf	___lldiv@dividend+2,f
  8341  065F  0875               	movf	___lldiv@divisor+3,w
  8342  0660  1C03               	skipc
  8343  0661  0F75               	incfsz	___lldiv@divisor+3,w
  8344  0662  02F9               	subwf	___lldiv@dividend+3,f
  8345  0663  1420               	bsf	___lldiv@quotient,0
  8346  0664  1003               	clrc
  8347  0665                     L32:	
  8348  0665  0CF5               	rrf	___lldiv@divisor+3,f
  8349  0666  0CF4               	rrf	___lldiv@divisor+2,f
  8350  0667  0CF3               	rrf	___lldiv@divisor+1,f
  8351  0668  0CF2               	rrf	___lldiv@divisor,f
  8352  0669  0BA4               	decfsz	___lldiv@counter,f
  8353  066A  2E40               	goto	l3772
  8354  066B                     l3784:	
  8355  066B  0823               	movf	___lldiv@quotient+3,w
  8356  066C  00F5               	movwf	?___lldiv+3
  8357  066D  0822               	movf	___lldiv@quotient+2,w
  8358  066E  00F4               	movwf	?___lldiv+2
  8359  066F  0821               	movf	___lldiv@quotient+1,w
  8360  0670  00F3               	movwf	?___lldiv+1
  8361  0671  0820               	movf	___lldiv@quotient,w
  8362  0672  00F2               	movwf	?___lldiv
  8363  0673  0008               	return
  8364  0674                     __end_of___lldiv:	
  8365  0674                     __ptext41:	
  8366 ;; *************** function ___wmul *****************
  8367 ;; Defined at:
  8368 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;  multiplier      2    2[COMMON] unsigned int 
  8371 ;;  multiplicand    2    4[COMMON] unsigned int 
  8372 ;; Auto vars:     Size  Location     Type
  8373 ;;  product         2    6[COMMON] unsigned int 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  2    2[COMMON] unsigned int 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2, status,0
  8378 ;; Tracked objects:
  8379 ;;		On entry : 200/0
  8380 ;;		On exit  : 200/0
  8381 ;;		Unchanged: 200/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8383 ;;      Params:         4       0       0       0       0
  8384 ;;      Locals:         2       0       0       0       0
  8385 ;;      Temps:          0       0       0       0       0
  8386 ;;      Totals:         6       0       0       0       0
  8387 ;;Total ram usage:        6 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    1
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_LcdWriteInt
  8394 ;;		_measureTGS4161
  8395 ;;		_sprintf
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           
  8400                           ;psect for function ___wmul
  8401  0674                     ___wmul:	
  8402                           
  8403                           ;incstack = 0
  8404                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8405  0674  01F6               	clrf	___wmul@product
  8406  0675  01F7               	clrf	___wmul@product+1
  8407  0676                     l3164:	
  8408  0676  1C72               	btfss	___wmul@multiplier,0
  8409  0677  2E7E               	goto	l3168
  8410  0678  0874               	movf	___wmul@multiplicand,w
  8411  0679  07F6               	addwf	___wmul@product,f
  8412  067A  1803               	skipnc
  8413  067B  0AF7               	incf	___wmul@product+1,f
  8414  067C  0875               	movf	___wmul@multiplicand+1,w
  8415  067D  07F7               	addwf	___wmul@product+1,f
  8416  067E                     l3168:	
  8417  067E  1003               	clrc
  8418  067F  0DF4               	rlf	___wmul@multiplicand,f
  8419  0680  0DF5               	rlf	___wmul@multiplicand+1,f
  8420  0681  1003               	clrc
  8421  0682  0CF3               	rrf	___wmul@multiplier+1,f
  8422  0683  0CF2               	rrf	___wmul@multiplier,f
  8423  0684  0872               	movf	___wmul@multiplier,w
  8424  0685  0473               	iorwf	___wmul@multiplier+1,w
  8425  0686  1D03               	btfss	3,2
  8426  0687  2E76               	goto	l3164
  8427  0688  0877               	movf	___wmul@product+1,w
  8428  0689  00F3               	movwf	?___wmul+1
  8429  068A  0876               	movf	___wmul@product,w
  8430  068B  00F2               	movwf	?___wmul
  8431  068C  0008               	return
  8432  068D                     __end_of___wmul:	
  8433  068D                     __ptext33:	
  8434 ;; *************** function _isdigit *****************
  8435 ;; Defined at:
  8436 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;  c               1    wreg     unsigned char 
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;  c               1    3[COMMON] unsigned char 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;		None               void
  8443 ;; Registers used:
  8444 ;;		wreg, status,2, status,0
  8445 ;; Tracked objects:
  8446 ;;		On entry : 300/0
  8447 ;;		On exit  : 300/0
  8448 ;;		Unchanged: 300/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8450 ;;      Params:         0       0       0       0       0
  8451 ;;      Locals:         2       0       0       0       0
  8452 ;;      Temps:          0       0       0       0       0
  8453 ;;      Totals:         2       0       0       0       0
  8454 ;;Total ram usage:        2 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    1
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_sprintf
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           
  8465                           ;psect for function _isdigit
  8466  068D                     _isdigit:	
  8467                           
  8468                           ;incstack = 0
  8469                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8470                           ;isdigit@c stored from wreg
  8471  068D  00F3               	movwf	isdigit@c
  8472  068E  303A               	movlw	58
  8473  068F  01F2               	clrf	_isdigit$845
  8474  0690  0273               	subwf	isdigit@c,w
  8475  0691  1803               	skipnc
  8476  0692  2E99               	goto	l3584
  8477  0693  3030               	movlw	48
  8478  0694  0273               	subwf	isdigit@c,w
  8479  0695  1C03               	skipc
  8480  0696  2E99               	goto	l3584
  8481  0697  01F2               	clrf	_isdigit$845
  8482  0698  0AF2               	incf	_isdigit$845,f
  8483  0699                     l3584:	
  8484  0699  0C72               	rrf	_isdigit$845,w
  8485  069A  0008               	return
  8486  069B                     __end_of_isdigit:	
  8487  069B                     __ptext48:	
  8488 ;; *************** function ___ftneg *****************
  8489 ;; Defined at:
  8490 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftneg.c"
  8491 ;; Parameters:    Size  Location     Type
  8492 ;;  f1              3    2[COMMON] float 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;		None
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  3    2[COMMON] float 
  8497 ;; Registers used:
  8498 ;;		wreg
  8499 ;; Tracked objects:
  8500 ;;		On entry : 300/100
  8501 ;;		On exit  : 300/100
  8502 ;;		Unchanged: 300/0
  8503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8504 ;;      Params:         3       0       0       0       0
  8505 ;;      Locals:         0       0       0       0       0
  8506 ;;      Temps:          0       0       0       0       0
  8507 ;;      Totals:         3       0       0       0       0
  8508 ;;Total ram usage:        3 bytes
  8509 ;; Hardware stack levels used:    1
  8510 ;; Hardware stack levels required when called:    1
  8511 ;; This function calls:
  8512 ;;		Nothing
  8513 ;; This function is called by:
  8514 ;;		_sprintf
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           
  8519                           ;psect for function ___ftneg
  8520  069B                     ___ftneg:	
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in ___ftneg: [wreg]
  8524  069B  0874               	movf	___ftneg@f1+2,w
  8525  069C  0473               	iorwf	___ftneg@f1+1,w
  8526  069D  0472               	iorwf	___ftneg@f1,w
  8527  069E  1903               	skipnz
  8528  069F  0008               	return
  8529  06A0  3080               	movlw	128
  8530  06A1  06F4               	xorwf	___ftneg@f1+2,f
  8531  06A2  0008               	return
  8532  06A3                     __end_of___ftneg:	
  8533  06A3                     __ptext45:	
  8534 ;; *************** function ___ftsub *****************
  8535 ;; Defined at:
  8536 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftsub.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  f2              3   46[BANK0 ] float 
  8539 ;;  f1              3   49[BANK0 ] float 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;		None
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  3   46[BANK0 ] float 
  8544 ;; Registers used:
  8545 ;;		wreg, status,2, status,0, pclath, cstack
  8546 ;; Tracked objects:
  8547 ;;		On entry : 300/0
  8548 ;;		On exit  : 300/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8551 ;;      Params:         0       6       0       0       0
  8552 ;;      Locals:         0       0       0       0       0
  8553 ;;      Temps:          0       0       0       0       0
  8554 ;;      Totals:         0       6       0       0       0
  8555 ;;Total ram usage:        6 bytes
  8556 ;; Hardware stack levels used:    1
  8557 ;; Hardware stack levels required when called:    3
  8558 ;; This function calls:
  8559 ;;		___ftadd
  8560 ;; This function is called by:
  8561 ;;		_menuHumi
  8562 ;;		_menu
  8563 ;;		_sprintf
  8564 ;; This function uses a non-reentrant model
  8565 ;;
  8566                           
  8567                           
  8568                           ;psect for function ___ftsub
  8569  06A3                     ___ftsub:	
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8573  06A3  0850               	movf	___ftsub@f2+2,w
  8574  06A4  044F               	iorwf	___ftsub@f2+1,w
  8575  06A5  044E               	iorwf	___ftsub@f2,w
  8576  06A6  1903               	skipnz
  8577  06A7  2EAA               	goto	l5416
  8578  06A8  3080               	movlw	128
  8579  06A9  06D0               	xorwf	___ftsub@f2+2,f
  8580  06AA                     l5416:	
  8581  06AA  0851               	movf	___ftsub@f1,w
  8582  06AB  00C2               	movwf	___ftadd@f1
  8583  06AC  0852               	movf	___ftsub@f1+1,w
  8584  06AD  00C3               	movwf	___ftadd@f1+1
  8585  06AE  0853               	movf	___ftsub@f1+2,w
  8586  06AF  00C4               	movwf	___ftadd@f1+2
  8587  06B0  084E               	movf	___ftsub@f2,w
  8588  06B1  00C5               	movwf	___ftadd@f2
  8589  06B2  084F               	movf	___ftsub@f2+1,w
  8590  06B3  00C6               	movwf	___ftadd@f2+1
  8591  06B4  0850               	movf	___ftsub@f2+2,w
  8592  06B5  00C7               	movwf	___ftadd@f2+2
  8593  06B6  120A  158A  22EE   	fcall	___ftadd
  8594  06B9  0842               	movf	?___ftadd,w
  8595  06BA  00CE               	movwf	?___ftsub
  8596  06BB  0843               	movf	?___ftadd+1,w
  8597  06BC  00CF               	movwf	?___ftsub+1
  8598  06BD  0844               	movf	?___ftadd+2,w
  8599  06BE  00D0               	movwf	?___ftsub+2
  8600  06BF  0008               	return
  8601  06C0                     __end_of___ftsub:	
  8602  06C0                     __ptext42:	
  8603 ;; *************** function ___lltoft *****************
  8604 ;; Defined at:
  8605 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lltoft.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;  c               4    0[BANK0 ] unsigned long 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  exp             1    4[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  3    0[BANK0 ] float 
  8612 ;; Registers used:
  8613 ;;		wreg, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 300/0
  8616 ;;		On exit  : 300/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8619 ;;      Params:         0       4       0       0       0
  8620 ;;      Locals:         0       1       0       0       0
  8621 ;;      Temps:          0       0       0       0       0
  8622 ;;      Totals:         0       5       0       0       0
  8623 ;;Total ram usage:        5 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    2
  8626 ;; This function calls:
  8627 ;;		___ftpack
  8628 ;; This function is called by:
  8629 ;;		_sprintf
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function ___lltoft
  8635  06C0                     ___lltoft:	
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8639  06C0  308E               	movlw	142
  8640  06C1  00A4               	movwf	___lltoft@exp
  8641  06C2                     l5444:	
  8642  06C2  30FF               	movlw	255
  8643  06C3  0523               	andwf	___lltoft@c+3,w
  8644  06C4  1903               	btfsc	3,2
  8645  06C5  2ECD               	goto	l5446
  8646  06C6  1003               	clrc
  8647  06C7  0CA3               	rrf	___lltoft@c+3,f
  8648  06C8  0CA2               	rrf	___lltoft@c+2,f
  8649  06C9  0CA1               	rrf	___lltoft@c+1,f
  8650  06CA  0CA0               	rrf	___lltoft@c,f
  8651  06CB  0AA4               	incf	___lltoft@exp,f
  8652  06CC  2EC2               	goto	l5444
  8653  06CD                     l5446:	
  8654  06CD  0820               	movf	___lltoft@c,w
  8655  06CE  00F2               	movwf	___ftpack@arg
  8656  06CF  0821               	movf	___lltoft@c+1,w
  8657  06D0  00F3               	movwf	___ftpack@arg+1
  8658  06D1  0822               	movf	___lltoft@c+2,w
  8659  06D2  00F4               	movwf	___ftpack@arg+2
  8660  06D3  0824               	movf	___lltoft@exp,w
  8661  06D4  00F5               	movwf	___ftpack@exp
  8662  06D5  01F6               	clrf	___ftpack@sign
  8663  06D6  160A  118A  270B   	fcall	___ftpack
  8664  06D9  0872               	movf	?___ftpack,w
  8665  06DA  00A0               	movwf	?___lltoft
  8666  06DB  0873               	movf	?___ftpack+1,w
  8667  06DC  00A1               	movwf	?___lltoft+1
  8668  06DD  0874               	movf	?___ftpack+2,w
  8669  06DE  00A2               	movwf	?___lltoft+2
  8670  06DF  0008               	return
  8671  06E0                     __end_of___lltoft:	
  8672  06E0                     PL2:	
  8673  06E0  0875               	movf	?___lldiv+3,w
  8674  06E1  1683               	bsf	3,5	;RP0=1, select bank1
  8675  06E2  00D9               	movwf	(sprintf@tmpval+3)^(0+128)
  8676  06E3  0874               	movf	?___lldiv+2,w
  8677  06E4  00D8               	movwf	(sprintf@tmpval+2)^(0+128)
  8678  06E5  0873               	movf	?___lldiv+1,w
  8679  06E6  00D7               	movwf	(sprintf@tmpval+1)^(0+128)
  8680  06E7  0872               	movf	?___lldiv,w
  8681  06E8  00D6               	movwf	sprintf@tmpval^(0+128)
  8682  06E9  300A               	movlw	10
  8683  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  8684  06EB  00A5               	movwf	___llmod@divisor
  8685  06EC  01A6               	clrf	___llmod@divisor+1
  8686  06ED  01A7               	clrf	___llmod@divisor+2
  8687  06EE  01A8               	clrf	___llmod@divisor+3
  8688  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  8689  06F0  0859               	movf	(sprintf@tmpval+3)^(0+128),w
  8690  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  8691  06F2  00AC               	movwf	___llmod@dividend+3
  8692  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  8693  06F4  0858               	movf	(sprintf@tmpval+2)^(0+128),w
  8694  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  8695  06F6  00AB               	movwf	___llmod@dividend+2
  8696  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  8697  06F8  0857               	movf	(sprintf@tmpval+1)^(0+128),w
  8698  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  8699  06FA  00AA               	movwf	___llmod@dividend+1
  8700  06FB  1683               	bsf	3,5	;RP0=1, select bank1
  8701  06FC  0856               	movf	sprintf@tmpval^(0+128),w
  8702  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  8703  06FE  00A9               	movwf	___llmod@dividend
  8704  06FF  0008               	return
  8705  0700                     __end_ofPL2:	
  8706  0700                     PL8:	
  8707  0700  0828               	movf	?___llmod+3,w
  8708  0701  1683               	bsf	3,5	;RP0=1, select bank1
  8709  0702  00D9               	movwf	(sprintf@tmpval+3)^(0+128)
  8710  0703  1283               	bcf	3,5	;RP0=0, select bank0
  8711  0704  0827               	movf	?___llmod+2,w
  8712  0705  1683               	bsf	3,5	;RP0=1, select bank1
  8713  0706  00D8               	movwf	(sprintf@tmpval+2)^(0+128)
  8714  0707  1283               	bcf	3,5	;RP0=0, select bank0
  8715  0708  0826               	movf	?___llmod+1,w
  8716  0709  1683               	bsf	3,5	;RP0=1, select bank1
  8717  070A  00D7               	movwf	(sprintf@tmpval+1)^(0+128)
  8718  070B  1283               	bcf	3,5	;RP0=0, select bank0
  8719  070C  0825               	movf	?___llmod,w
  8720  070D  1683               	bsf	3,5	;RP0=1, select bank1
  8721  070E  00D6               	movwf	sprintf@tmpval^(0+128)
  8722  070F  0865               	movf	sprintf@sp^(0+128),w
  8723  0710  0084               	movwf	4
  8724  0711  0856               	movf	sprintf@tmpval^(0+128),w
  8725  0712  3E30               	addlw	48
  8726  0713  0008               	return
  8727  0714                     __end_ofPL8:	
  8728  0714                     PL10:	
  8729  0714  0856               	movf	sprintf@tmpval^(0+128),w
  8730  0715  1283               	bcf	3,5	;RP0=0, select bank0
  8731  0716  00CE               	movwf	___ftge@ff1
  8732  0717  1683               	bsf	3,5	;RP0=1, select bank1
  8733  0718  0857               	movf	(sprintf@tmpval+1)^(0+128),w
  8734  0719  1283               	bcf	3,5	;RP0=0, select bank0
  8735  071A  00CF               	movwf	___ftge@ff1+1
  8736  071B  1683               	bsf	3,5	;RP0=1, select bank1
  8737  071C  0858               	movf	(sprintf@tmpval+2)^(0+128),w
  8738  071D  1283               	bcf	3,5	;RP0=0, select bank0
  8739  071E  00D0               	movwf	___ftge@ff1+2
  8740  071F  0008               	return
  8741  0720                     __end_ofPL10:	
  8742  0720                     PL12:	
  8743  0720  0D59               	rlf	??_sprintf,w
  8744  0721  3E60               	addlw	low (_dpowers| (0+32768))
  8745  0722  0084               	movwf	4
  8746  0723  3098               	movlw	high (_dpowers| (0+32768))
  8747  0724  1803               	skipnc
  8748  0725  3E01               	addlw	1
  8749  0726  00FF               	movwf	127
  8750  0727  0008               	return
  8751  0728                     __end_ofPL12:	
  8752  0728                     PL16:	
  8753  0728  00F5               	movwf	___lldiv@divisor+3
  8754  0729  1683               	bsf	3,5	;RP0=1, select bank1
  8755  072A  085D               	movf	(sprintf@val+3)^(0+128),w
  8756  072B  00F9               	movwf	___lldiv@dividend+3
  8757  072C  085C               	movf	(sprintf@val+2)^(0+128),w
  8758  072D  00F8               	movwf	___lldiv@dividend+2
  8759  072E  085B               	movf	(sprintf@val+1)^(0+128),w
  8760  072F  00F7               	movwf	___lldiv@dividend+1
  8761  0730  085A               	movf	sprintf@val^(0+128),w
  8762  0731  00F6               	movwf	___lldiv@dividend
  8763  0732  0008               	return
  8764  0733                     __end_ofPL16:	
  8765  0733                     PL28:	
  8766  0733  0845               	movf	?___fttol+3,w
  8767  0734  1683               	bsf	3,5	;RP0=1, select bank1
  8768  0735  00DD               	movwf	(sprintf@val+3)^(0+128)
  8769  0736  1283               	bcf	3,5	;RP0=0, select bank0
  8770  0737  0844               	movf	?___fttol+2,w
  8771  0738  1683               	bsf	3,5	;RP0=1, select bank1
  8772  0739  00DC               	movwf	(sprintf@val+2)^(0+128)
  8773  073A  1283               	bcf	3,5	;RP0=0, select bank0
  8774  073B  0843               	movf	?___fttol+1,w
  8775  073C  1683               	bsf	3,5	;RP0=1, select bank1
  8776  073D  00DB               	movwf	(sprintf@val+1)^(0+128)
  8777  073E  1283               	bcf	3,5	;RP0=0, select bank0
  8778  073F  0842               	movf	?___fttol,w
  8779  0740  0008               	return
  8780  0741                     __end_ofPL28:	
  8781  0741                     PL34:	
  8782  0741  1283               	bcf	3,5	;RP0=0, select bank0
  8783  0742  0855               	movf	sprintf@f+1,w
  8784  0743  00DA               	movwf	??_sprintf+1
  8785  0744  0854               	movf	sprintf@f,w
  8786  0745  00D9               	movwf	??_sprintf
  8787  0746  0AD4               	incf	sprintf@f,f
  8788  0747  1903               	skipnz
  8789  0748  0AD5               	incf	sprintf@f+1,f
  8790  0749  085A               	movf	??_sprintf+1,w
  8791  074A  00FF               	movwf	127
  8792  074B  0859               	movf	??_sprintf,w
  8793  074C  0084               	movwf	4
  8794  074D  0008               	return
  8795  074E                     __end_ofPL34:	
  8796  074E                     PL38:	
  8797  074E  0837               	movf	?_scale,w
  8798  074F  1683               	bsf	3,5	;RP0=1, select bank1
  8799  0750  00D6               	movwf	sprintf@tmpval^(0+128)
  8800  0751  1283               	bcf	3,5	;RP0=0, select bank0
  8801  0752  0838               	movf	?_scale+1,w
  8802  0753  1683               	bsf	3,5	;RP0=1, select bank1
  8803  0754  00D7               	movwf	(sprintf@tmpval+1)^(0+128)
  8804  0755  1283               	bcf	3,5	;RP0=0, select bank0
  8805  0756  0839               	movf	?_scale+2,w
  8806  0757  1683               	bsf	3,5	;RP0=1, select bank1
  8807  0758  00D8               	movwf	(sprintf@tmpval+2)^(0+128)
  8808  0759  0860               	movf	sprintf@fval^(0+128),w
  8809  075A  0008               	return
  8810  075B                     __end_ofPL38:	
  8811  075B                     PL46:	
  8812  075B  0860               	movf	sprintf@fval^(0+128),w
  8813  075C  1283               	bcf	3,5	;RP0=0, select bank0
  8814  075D  00C2               	movwf	___fttol@f1
  8815  075E  1683               	bsf	3,5	;RP0=1, select bank1
  8816  075F  0861               	movf	(sprintf@fval+1)^(0+128),w
  8817  0760  1283               	bcf	3,5	;RP0=0, select bank0
  8818  0761  00C3               	movwf	___fttol@f1+1
  8819  0762  1683               	bsf	3,5	;RP0=1, select bank1
  8820  0763  0862               	movf	(sprintf@fval+2)^(0+128),w
  8821  0764  1283               	bcf	3,5	;RP0=0, select bank0
  8822  0765  00C4               	movwf	___fttol@f1+2
  8823  0766  0008               	return
  8824  0767                     __end_ofPL46:	
  8825  0767                     PL50:	
  8826  0767  0866               	movf	sprintf@c^(0+128),w
  8827  0768  1283               	bcf	3,5	;RP0=0, select bank0
  8828  0769  00D9               	movwf	??_sprintf
  8829  076A  01DA               	clrf	??_sprintf+1
  8830  076B  1BD9               	btfsc	??_sprintf,7
  8831  076C  03DA               	decf	??_sprintf+1,f
  8832  076D  085A               	movf	??_sprintf+1,w
  8833  076E  3A80               	xorlw	128
  8834  076F  00DB               	movwf	??_sprintf+2
  8835  0770  1683               	bsf	3,5	;RP0=1, select bank1
  8836  0771  0008               	return
  8837  0772                     __end_ofPL50:	
  8838  0772                     PL52:	
  8839  0772  1283               	bcf	3,5	;RP0=0, select bank0
  8840  0773  00A8               	movwf	___ftmul@f1
  8841  0774  1683               	bsf	3,5	;RP0=1, select bank1
  8842  0775  0861               	movf	(sprintf@fval+1)^(0+128),w
  8843  0776  1283               	bcf	3,5	;RP0=0, select bank0
  8844  0777  00A9               	movwf	___ftmul@f1+1
  8845  0778  1683               	bsf	3,5	;RP0=1, select bank1
  8846  0779  0862               	movf	(sprintf@fval+2)^(0+128),w
  8847  077A  1283               	bcf	3,5	;RP0=0, select bank0
  8848  077B  00AA               	movwf	___ftmul@f1+2
  8849  077C  0008               	return
  8850  077D                     __end_ofPL52:	
  8851  077D                     PL62:	
  8852  077D  1683               	bsf	3,5	;RP0=1, select bank1
  8853  077E  1303               	bcf	3,6	;RP1=0, select bank1
  8854  077F  0866               	movf	sprintf@c^(0+128),w
  8855  0780  1283               	bcf	3,5	;RP0=0, select bank0
  8856  0781  00D9               	movwf	??_sprintf
  8857  0782  01DA               	clrf	??_sprintf+1
  8858  0783  1BD9               	btfsc	??_sprintf,7
  8859  0784  03DA               	decf	??_sprintf+1,f
  8860  0785  1683               	bsf	3,5	;RP0=1, select bank1
  8861  0786  0008               	return
  8862  0787                     __end_ofPL62:	
  8863  0787                     PL68:	
  8864  0787  0865               	movf	sprintf@sp^(0+128),w
  8865  0788  0084               	movwf	4
  8866  0789  3030               	movlw	48
  8867  078A  1383               	bcf	3,7	;select IRP bank0
  8868  078B  0080               	movwf	0
  8869  078C  30FF               	movlw	-1
  8870  078D  0AE5               	incf	sprintf@sp^(0+128),f
  8871  078E  0008               	return
  8872  078F                     __end_ofPL68:	
  8873  078F                     PL90:	
  8874  078F  0800               	movf	0,w
  8875  0790  1283               	bcf	3,5	;RP0=0, select bank0
  8876  0791  00D9               	movwf	??_sprintf
  8877  0792  0A84               	incf	4,f
  8878  0793  0800               	movf	0,w
  8879  0794  00DA               	movwf	??_sprintf+1
  8880  0795  0008               	return
  8881  0796                     __end_ofPL90:	
  8882  0796                     PL98:	
  8883  0796  1283               	bcf	3,5	;RP0=0, select bank0
  8884  0797  0855               	movf	sprintf@f+1,w
  8885  0798  00FF               	movwf	127
  8886  0799  0854               	movf	sprintf@f,w
  8887  079A  0084               	movwf	4
  8888  079B  0008               	return
  8889  079C                     __end_ofPL98:	
  8890  079C                     __ptext44:	
  8891 ;; *************** function ___fttol *****************
  8892 ;; Defined at:
  8893 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fttol.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  f1              3   34[BANK0 ] float 
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  lval            4   42[BANK0 ] unsigned long 
  8898 ;;  exp1            1   46[BANK0 ] unsigned char 
  8899 ;;  sign1           1   41[BANK0 ] unsigned char 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  4   34[BANK0 ] long 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2, status,0
  8904 ;; Tracked objects:
  8905 ;;		On entry : 300/0
  8906 ;;		On exit  : 300/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8909 ;;      Params:         0       4       0       0       0
  8910 ;;      Locals:         0       6       0       0       0
  8911 ;;      Temps:          0       3       0       0       0
  8912 ;;      Totals:         0      13       0       0       0
  8913 ;;Total ram usage:       13 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    1
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_sprintf
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           
  8924                           ;psect for function ___fttol
  8925  079C                     ___fttol:	
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8929  079C  27F7  120A  118A   	fcall	PL84	;call to abstracted procedure
  8930  079F  1003               	clrc
  8931  07A0  0D47               	rlf	??___fttol+1,w
  8932  07A1  0D48               	rlf	??___fttol+2,w
  8933  07A2  00CE               	movwf	___fttol@exp1
  8934  07A3  084E               	movf	___fttol@exp1,w
  8935  07A4  1D03               	btfss	3,2
  8936  07A5  2FAB               	goto	l3726
  8937  07A6                     l3724:	
  8938  07A6  01C2               	clrf	?___fttol
  8939  07A7  01C3               	clrf	?___fttol+1
  8940  07A8  01C4               	clrf	?___fttol+2
  8941  07A9  01C5               	clrf	?___fttol+3
  8942  07AA  0008               	return
  8943  07AB                     l3726:	
  8944  07AB  27F7  120A  118A   	fcall	PL84	;call to abstracted procedure
  8945  07AE  3017               	movlw	23
  8946  07AF                     u3935:	
  8947  07AF  1003               	clrc
  8948  07B0  0CC8               	rrf	??___fttol+2,f
  8949  07B1  0CC7               	rrf	??___fttol+1,f
  8950  07B2  0CC6               	rrf	??___fttol,f
  8951  07B3  3EFF               	addlw	-1
  8952  07B4  1D03               	skipz
  8953  07B5  2FAF               	goto	u3935
  8954  07B6  0846               	movf	??___fttol,w
  8955  07B7  00C9               	movwf	___fttol@sign1
  8956  07B8  17C3               	bsf	___fttol@f1+1,7
  8957  07B9  01C4               	clrf	___fttol@f1+2
  8958  07BA  0842               	movf	___fttol@f1,w
  8959  07BB  00CA               	movwf	___fttol@lval
  8960  07BC  0843               	movf	___fttol@f1+1,w
  8961  07BD  00CB               	movwf	___fttol@lval+1
  8962  07BE  0844               	movf	___fttol@f1+2,w
  8963  07BF  00CC               	movwf	___fttol@lval+2
  8964  07C0  308E               	movlw	142
  8965  07C1  01CD               	clrf	___fttol@lval+3
  8966  07C2  02CE               	subwf	___fttol@exp1,f
  8967  07C3  1FCE               	btfss	___fttol@exp1,7
  8968  07C4  2FD2               	goto	l3746
  8969  07C5  084E               	movf	___fttol@exp1,w
  8970  07C6  3A80               	xorlw	128
  8971  07C7  3E8F               	addlw	143
  8972  07C8  1C03               	btfss	3,0
  8973  07C9  2FA6               	goto	l3724
  8974  07CA                     l3742:	
  8975  07CA  1003               	clrc
  8976  07CB  0CCD               	rrf	___fttol@lval+3,f
  8977  07CC  0CCC               	rrf	___fttol@lval+2,f
  8978  07CD  0CCB               	rrf	___fttol@lval+1,f
  8979  07CE  0CCA               	rrf	___fttol@lval,f
  8980  07CF  0FCE               	incfsz	___fttol@exp1,f
  8981  07D0  2FCA               	goto	l3742
  8982  07D1  2FE0               	goto	l3754
  8983  07D2                     l3746:	
  8984  07D2  3018               	movlw	24
  8985  07D3  024E               	subwf	___fttol@exp1,w
  8986  07D4  1803               	btfsc	3,0
  8987  07D5  2FA6               	goto	l3724
  8988  07D6                     l3752:	
  8989  07D6  084E               	movf	___fttol@exp1,w
  8990  07D7  1903               	btfsc	3,2
  8991  07D8  2FE0               	goto	l3754
  8992  07D9  1003               	clrc
  8993  07DA  0DCA               	rlf	___fttol@lval,f
  8994  07DB  0DCB               	rlf	___fttol@lval+1,f
  8995  07DC  0DCC               	rlf	___fttol@lval+2,f
  8996  07DD  0DCD               	rlf	___fttol@lval+3,f
  8997  07DE  03CE               	decf	___fttol@exp1,f
  8998  07DF  2FD6               	goto	l3752
  8999  07E0                     l3754:	
  9000  07E0  0849               	movf	___fttol@sign1,w
  9001  07E1  1903               	btfsc	3,2
  9002  07E2  2FEE               	goto	l3758
  9003  07E3  09CA               	comf	___fttol@lval,f
  9004  07E4  09CB               	comf	___fttol@lval+1,f
  9005  07E5  09CC               	comf	___fttol@lval+2,f
  9006  07E6  09CD               	comf	___fttol@lval+3,f
  9007  07E7  0ACA               	incf	___fttol@lval,f
  9008  07E8  1903               	skipnz
  9009  07E9  0ACB               	incf	___fttol@lval+1,f
  9010  07EA  1903               	skipnz
  9011  07EB  0ACC               	incf	___fttol@lval+2,f
  9012  07EC  1903               	skipnz
  9013  07ED  0ACD               	incf	___fttol@lval+3,f
  9014  07EE                     l3758:	
  9015  07EE  084D               	movf	___fttol@lval+3,w
  9016  07EF  00C5               	movwf	?___fttol+3
  9017  07F0  084C               	movf	___fttol@lval+2,w
  9018  07F1  00C4               	movwf	?___fttol+2
  9019  07F2  084B               	movf	___fttol@lval+1,w
  9020  07F3  00C3               	movwf	?___fttol+1
  9021  07F4  084A               	movf	___fttol@lval,w
  9022  07F5  00C2               	movwf	?___fttol
  9023  07F6  0008               	return
  9024  07F7                     __end_of___fttol:	
  9025  07F7                     PL84:	
  9026  07F7  0842               	movf	___fttol@f1,w
  9027  07F8  00C6               	movwf	??___fttol
  9028  07F9  0843               	movf	___fttol@f1+1,w
  9029  07FA  00C7               	movwf	??___fttol+1
  9030  07FB  0844               	movf	___fttol@f1+2,w
  9031  07FC  00C8               	movwf	??___fttol+2
  9032  07FD  0008               	return
  9033  07FE                     __end_ofPL84:	
  9034                           
  9035                           	psect	text34
  9036  1094                     __ptext34:	
  9037 ;; *************** function _fround *****************
  9038 ;; Defined at:
  9039 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  prec            1    wreg     unsigned char 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  prec            1   33[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  3   23[BANK0 ] unsigned char 
  9046 ;; Registers used:
  9047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 300/100
  9050 ;;		On exit  : 300/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9053 ;;      Params:         0       4       0       0       0
  9054 ;;      Locals:         0       7       0       0       0
  9055 ;;      Temps:          0       0       0       0       0
  9056 ;;      Totals:         0      11       0       0       0
  9057 ;;Total ram usage:       11 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    3
  9060 ;; This function calls:
  9061 ;;		___bmul
  9062 ;;		___ftmul
  9063 ;;		___lbdiv
  9064 ;;		___lbmod
  9065 ;; This function is called by:
  9066 ;;		_sprintf
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _fround
  9072  1094                     _fround:	
  9073                           
  9074                           ;incstack = 0
  9075                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9076                           ;fround@prec stored from wreg
  9077  1094  1283               	bcf	3,5	;RP0=0, select bank0
  9078  1095  00C1               	movwf	fround@prec
  9079                           
  9080                           ;doprnt.c: 413: if(prec>=110)
  9081  1096  306E               	movlw	110
  9082  1097  0241               	subwf	fround@prec,w
  9083  1098  1C03               	skipc
  9084  1099  2916               	goto	l5310
  9085                           
  9086                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9087  109A  3003               	movlw	3
  9088  109B  00F8               	movwf	___bmul@multiplicand
  9089  109C  300A               	movlw	10
  9090  109D  00F7               	movwf	___lbdiv@divisor
  9091  109E  3064               	movlw	100
  9092  109F  00F2               	movwf	___lbmod@divisor
  9093  10A0  0841               	movf	fround@prec,w
  9094  10A1  21A0  160A  118A   	fcall	___lbmod
  9095  10A4  2185  160A  118A   	fcall	___lbdiv
  9096  10A7  26FD  160A  118A   	fcall	___bmul
  9097  10AA  27A9               	fcall	PL64	;call to abstracted procedure
  9098  10AB  160A  158A  2000  160A  118A  	fcall	stringtab
  9099  10B0  00A8               	movwf	___ftmul@f1
  9100  10B1  160A  158A  2000  160A  118A  	fcall	stringtab
  9101  10B6  00A9               	movwf	___ftmul@f1+1
  9102  10B7  160A  158A  2000  160A  118A  	fcall	stringtab
  9103  10BC  00AA               	movwf	___ftmul@f1+2
  9104  10BD  3003               	movlw	3
  9105  10BE  00F8               	movwf	___bmul@multiplicand
  9106  10BF  3064               	movlw	100
  9107  10C0  00F7               	movwf	___lbdiv@divisor
  9108  10C1  0841               	movf	fround@prec,w
  9109  10C2  2185  160A  118A   	fcall	___lbdiv
  9110  10C5  26FD  160A  118A   	fcall	___bmul
  9111  10C8  27DF               	fcall	PL86	;call to abstracted procedure
  9112  10C9  160A  158A  2000  160A  118A  	fcall	stringtab
  9113  10CE  00AB               	movwf	___ftmul@f2
  9114  10CF  160A  158A  2000  160A  118A  	fcall	stringtab
  9115  10D4  00AC               	movwf	___ftmul@f2+1
  9116  10D5  160A  158A  2000  160A  118A  	fcall	stringtab
  9117  10DA  00AD               	movwf	___ftmul@f2+2
  9118  10DB  2690  160A  118A   	fcall	___ftmul
  9119  10DE  27EC  160A  118A   	fcall	PL92	;call to abstracted procedure
  9120                           
  9121                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9122  10E1  27FA  160A  118A   	fcall	PL102	;call to abstracted procedure
  9123  10E4  21A0  160A  118A   	fcall	___lbmod
  9124  10E7  26FD  160A  118A   	fcall	___bmul
  9125  10EA  2784               	fcall	PL44	;call to abstracted procedure
  9126  10EB  160A  158A  2000  160A  118A  	fcall	stringtab
  9127  10F0  00A8               	movwf	___ftmul@f1
  9128  10F1  160A  158A  2000  160A  118A  	fcall	stringtab
  9129  10F6  00A9               	movwf	___ftmul@f1+1
  9130  10F7  160A  158A  2000  160A  118A  	fcall	stringtab
  9131  10FC  27BF  160A  118A   	fcall	PL72	;call to abstracted procedure
  9132  10FF  2690  160A  118A   	fcall	___ftmul
  9133  1102  0828               	movf	?___ftmul,w
  9134  1103  00BB               	movwf	_fround$1147
  9135  1104  0829               	movf	?___ftmul+1,w
  9136  1105  00BC               	movwf	_fround$1147+1
  9137  1106  082A               	movf	?___ftmul+2,w
  9138  1107  00BD               	movwf	_fround$1147+2
  9139                           
  9140                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9141  1108  303F               	movlw	63
  9142  1109  01A8               	clrf	___ftmul@f1
  9143  110A  01A9               	clrf	___ftmul@f1+1
  9144  110B  00AA               	movwf	___ftmul@f1+2
  9145  110C  083B               	movf	_fround$1147,w
  9146  110D  00AB               	movwf	___ftmul@f2
  9147  110E  083C               	movf	_fround$1147+1,w
  9148  110F  00AC               	movwf	___ftmul@f2+1
  9149  1110  083D               	movf	_fround$1147+2,w
  9150  1111  00AD               	movwf	___ftmul@f2+2
  9151  1112  2690  160A  118A   	fcall	___ftmul
  9152  1115  2FA2               	ljmp	PL56	;call to abstracted procedure
  9153  1116                     l5310:	
  9154                           
  9155                           ;doprnt.c: 415: else if(prec > 10)
  9156  1116  300B               	movlw	11
  9157  1117  0241               	subwf	fround@prec,w
  9158  1118  1C03               	skipc
  9159  1119  2964               	goto	l5318
  9160                           
  9161                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9162  111A  27FA  160A  118A   	fcall	PL102	;call to abstracted procedure
  9163  111D  21A0  160A  118A   	fcall	___lbmod
  9164  1120  26FD  160A  118A   	fcall	___bmul
  9165  1123  2784               	fcall	PL44	;call to abstracted procedure
  9166  1124  160A  158A  2000  160A  118A  	fcall	stringtab
  9167  1129  00A8               	movwf	___ftmul@f1
  9168  112A  160A  158A  2000  160A  118A  	fcall	stringtab
  9169  112F  00A9               	movwf	___ftmul@f1+1
  9170  1130  160A  158A  2000  160A  118A  	fcall	stringtab
  9171  1135  00AA               	movwf	___ftmul@f1+2
  9172  1136  3003               	movlw	3
  9173  1137  00F8               	movwf	___bmul@multiplicand
  9174  1138  300A               	movlw	10
  9175  1139  00F7               	movwf	___lbdiv@divisor
  9176  113A  0841               	movf	fround@prec,w
  9177  113B  2185  160A  118A   	fcall	___lbdiv
  9178  113E  26FD  160A  118A   	fcall	___bmul
  9179  1141  27A9               	fcall	PL64	;call to abstracted procedure
  9180  1142  160A  158A  2000  160A  118A  	fcall	stringtab
  9181  1147  00AB               	movwf	___ftmul@f2
  9182  1148  160A  158A  2000  160A  118A  	fcall	stringtab
  9183  114D  00AC               	movwf	___ftmul@f2+1
  9184  114E  160A  158A  2000  160A  118A  	fcall	stringtab
  9185  1153  00AD               	movwf	___ftmul@f2+2
  9186  1154  2690  160A  118A   	fcall	___ftmul
  9187  1157  27EC  160A  118A   	fcall	PL92	;call to abstracted procedure
  9188                           
  9189                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9190  115A  303F               	movlw	63
  9191  115B  01A8               	clrf	___ftmul@f1
  9192  115C  01A9               	clrf	___ftmul@f1+1
  9193  115D  27BF  160A  118A   	fcall	PL72	;call to abstracted procedure
  9194  1160  2690  160A  118A   	fcall	___ftmul
  9195  1163  2FA2               	ljmp	PL56	;call to abstracted procedure
  9196  1164                     l5318:	
  9197                           
  9198                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9199  1164  303F               	movlw	63
  9200  1165  01A8               	clrf	___ftmul@f1
  9201  1166  01A9               	clrf	___ftmul@f1+1
  9202  1167  00AA               	movwf	___ftmul@f1+2
  9203  1168  3003               	movlw	3
  9204  1169  00F8               	movwf	___bmul@multiplicand
  9205  116A  0841               	movf	fround@prec,w
  9206  116B  26FD  160A  118A   	fcall	___bmul
  9207  116E  2784               	fcall	PL44	;call to abstracted procedure
  9208  116F  160A  158A  2000  160A  118A  	fcall	stringtab
  9209  1174  00AB               	movwf	___ftmul@f2
  9210  1175  160A  158A  2000  160A  118A  	fcall	stringtab
  9211  117A  00AC               	movwf	___ftmul@f2+1
  9212  117B  160A  158A  2000  160A  118A  	fcall	stringtab
  9213  1180  00AD               	movwf	___ftmul@f2+2
  9214  1181  2690  160A  118A   	fcall	___ftmul
  9215  1184  2FA2               	ljmp	PL56	;call to abstracted procedure
  9216  1185                     __end_of_fround:	
  9217  1185                     __ptext36:	
  9218 ;; *************** function ___lbdiv *****************
  9219 ;; Defined at:
  9220 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbdiv.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  dividend        1    wreg     unsigned char 
  9223 ;;  divisor         1    7[COMMON] unsigned char 
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;  dividend        1    0[BANK0 ] unsigned char 
  9226 ;;  quotient        1    2[BANK0 ] unsigned char 
  9227 ;;  counter         1    1[BANK0 ] unsigned char 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      unsigned char 
  9230 ;; Registers used:
  9231 ;;		wreg, status,2, status,0
  9232 ;; Tracked objects:
  9233 ;;		On entry : 300/0
  9234 ;;		On exit  : 300/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9237 ;;      Params:         1       0       0       0       0
  9238 ;;      Locals:         0       3       0       0       0
  9239 ;;      Temps:          0       0       0       0       0
  9240 ;;      Totals:         1       3       0       0       0
  9241 ;;Total ram usage:        4 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    1
  9244 ;; This function calls:
  9245 ;;		Nothing
  9246 ;; This function is called by:
  9247 ;;		_fround
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function ___lbdiv
  9253  1185                     ___lbdiv:	
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9257                           ;___lbdiv@dividend stored from wreg
  9258  1185  00A0               	movwf	___lbdiv@dividend
  9259  1186  01A2               	clrf	___lbdiv@quotient
  9260  1187  0877               	movf	___lbdiv@divisor,w
  9261  1188  1903               	btfsc	3,2
  9262  1189  299E               	goto	l5250
  9263  118A  01A1               	clrf	___lbdiv@counter
  9264  118B                     l5236:	
  9265  118B  0AA1               	incf	___lbdiv@counter,f
  9266  118C  1BF7               	btfsc	___lbdiv@divisor,7
  9267  118D  2991               	goto	l1028
  9268  118E  1003               	clrc
  9269  118F  0DF7               	rlf	___lbdiv@divisor,f
  9270  1190  298B               	goto	l5236
  9271  1191                     l1028:	
  9272  1191  1003               	clrc
  9273  1192  0DA2               	rlf	___lbdiv@quotient,f
  9274  1193  0877               	movf	___lbdiv@divisor,w
  9275  1194  0220               	subwf	___lbdiv@dividend,w
  9276  1195  1C03               	skipc
  9277  1196  299B               	goto	L25
  9278  1197  0877               	movf	___lbdiv@divisor,w
  9279  1198  02A0               	subwf	___lbdiv@dividend,f
  9280  1199  1422               	bsf	___lbdiv@quotient,0
  9281  119A  1003               	clrc
  9282  119B                     L25:	
  9283  119B  0CF7               	rrf	___lbdiv@divisor,f
  9284  119C  0BA1               	decfsz	___lbdiv@counter,f
  9285  119D  2991               	goto	l1028
  9286  119E                     l5250:	
  9287  119E  0822               	movf	___lbdiv@quotient,w
  9288  119F  0008               	return
  9289  11A0                     __end_of___lbdiv:	
  9290  11A0                     __ptext35:	
  9291 ;; *************** function ___lbmod *****************
  9292 ;; Defined at:
  9293 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbmod.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;  dividend        1    wreg     unsigned char 
  9296 ;;  divisor         1    2[COMMON] unsigned char 
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;  dividend        1    4[COMMON] unsigned char 
  9299 ;;  rem             1    6[COMMON] unsigned char 
  9300 ;;  counter         1    5[COMMON] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      unsigned char 
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0
  9305 ;; Tracked objects:
  9306 ;;		On entry : 300/0
  9307 ;;		On exit  : 300/0
  9308 ;;		Unchanged: 300/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9310 ;;      Params:         1       0       0       0       0
  9311 ;;      Locals:         3       0       0       0       0
  9312 ;;      Temps:          1       0       0       0       0
  9313 ;;      Totals:         5       0       0       0       0
  9314 ;;Total ram usage:        5 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    1
  9317 ;; This function calls:
  9318 ;;		Nothing
  9319 ;; This function is called by:
  9320 ;;		_fround
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function ___lbmod
  9326  11A0                     ___lbmod:	
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  9330                           ;___lbmod@dividend stored from wreg
  9331  11A0  00F4               	movwf	___lbmod@dividend
  9332  11A1  3008               	movlw	8
  9333  11A2  00F5               	movwf	___lbmod@counter
  9334  11A3  01F6               	clrf	___lbmod@rem
  9335  11A4                     l3428:	
  9336  11A4  0874               	movf	___lbmod@dividend,w
  9337  11A5  00F3               	movwf	??___lbmod
  9338  11A6  3007               	movlw	7
  9339  11A7  1003               	clrc
  9340  11A8                     L24:	
  9341  11A8  0CF3               	rrf	??___lbmod,f
  9342  11A9  3EFF               	addlw	-1
  9343  11AA  1003               	clrc
  9344  11AB  1D03               	skipz
  9345  11AC  29A8               	goto	L24
  9346  11AD  0D76               	rlf	___lbmod@rem,w
  9347  11AE  0473               	iorwf	??___lbmod,w
  9348  11AF  00F6               	movwf	___lbmod@rem
  9349  11B0  1003               	clrc
  9350  11B1  0DF4               	rlf	___lbmod@dividend,f
  9351  11B2  0872               	movf	___lbmod@divisor,w
  9352  11B3  0276               	subwf	___lbmod@rem,w
  9353  11B4  1C03               	skipc
  9354  11B5  29B8               	goto	l3436
  9355  11B6  0872               	movf	___lbmod@divisor,w
  9356  11B7  02F6               	subwf	___lbmod@rem,f
  9357  11B8                     l3436:	
  9358  11B8  0BF5               	decfsz	___lbmod@counter,f
  9359  11B9  29A4               	goto	l3428
  9360  11BA  0876               	movf	___lbmod@rem,w
  9361  11BB  0008               	return
  9362  11BC                     __end_of___lbmod:	
  9363  11BC                     __ptext10:	
  9364 ;; *************** function _getTempDS18B20 *****************
  9365 ;; Defined at:
  9366 ;;		line 67 in file "ds18b20.c"
  9367 ;; Parameters:    Size  Location     Type
  9368 ;;		None
  9369 ;; Auto vars:     Size  Location     Type
  9370 ;;  temperatura     3   52[BANK0 ] float 
  9371 ;;  temp            2   59[BANK0 ] unsigned int 
  9372 ;;  tempH           2   57[BANK0 ] unsigned short 
  9373 ;;  tempL           2   55[BANK0 ] unsigned short 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  3   46[BANK0 ] float 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0, pclath, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 300/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9383 ;;      Params:         0       3       0       0       0
  9384 ;;      Locals:         0       9       0       0       0
  9385 ;;      Temps:          0       3       0       0       0
  9386 ;;      Totals:         0      15       0       0       0
  9387 ;;Total ram usage:       15 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    3
  9390 ;; This function calls:
  9391 ;;		___ftadd
  9392 ;;		___ftmul
  9393 ;;		___lwtoft
  9394 ;;		_readDS18B20
  9395 ;;		_resetDS18B20
  9396 ;;		_writeDS18B20
  9397 ;; This function is called by:
  9398 ;;		_main
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           
  9403                           ;psect for function _getTempDS18B20
  9404  11BC                     _getTempDS18B20:	
  9405                           
  9406                           ;ds18b20.c: 68: unsigned temp;
  9407                           ;ds18b20.c: 69: unsigned short tempL, tempH;
  9408                           ;ds18b20.c: 70: float temperatura;
  9409                           ;ds18b20.c: 71: if(!resetDS18B20())
  9410                           
  9411                           ;incstack = 0
  9412                           ; Regs used in _getTempDS18B20: [wreg+status,2+status,0+pclath+cstack]
  9413  11BC  2281  160A  118A   	fcall	_resetDS18B20
  9414  11BF  3A00               	xorlw	0
  9415  11C0  1D03               	skipz
  9416  11C1  2A21               	goto	l5960
  9417                           
  9418                           ;ds18b20.c: 72: {
  9419                           ;ds18b20.c: 73: writeDS18B20(0xCC);
  9420  11C2  30CC               	movlw	204
  9421  11C3  222A  160A  118A   	fcall	_writeDS18B20
  9422                           
  9423                           ;ds18b20.c: 74: writeDS18B20(0x44);
  9424  11C6  3044               	movlw	68
  9425  11C7  222A  160A  118A   	fcall	_writeDS18B20
  9426                           
  9427                           ;ds18b20.c: 75: _delay((unsigned long)((750)*(8000000/4000.0)));
  9428  11CA  3008               	movlw	8
  9429  11CB  1283               	bcf	3,5	;RP0=0, select bank0
  9430  11CC  1303               	bcf	3,6	;RP1=0, select bank0
  9431  11CD  00D3               	movwf	??_getTempDS18B20+2
  9432  11CE  309D               	movlw	157
  9433  11CF  00D2               	movwf	??_getTempDS18B20+1
  9434  11D0  300B               	movlw	11
  9435  11D1  00D1               	movwf	??_getTempDS18B20
  9436  11D2                     u7947:	
  9437  11D2  0BD1               	decfsz	??_getTempDS18B20,f
  9438  11D3  29D2               	goto	u7947
  9439  11D4  0BD2               	decfsz	??_getTempDS18B20+1,f
  9440  11D5  29D2               	goto	u7947
  9441  11D6  0BD3               	decfsz	??_getTempDS18B20+2,f
  9442  11D7  29D2               	goto	u7947
  9443  11D8  29D9               	nop2
  9444                           
  9445                           ;ds18b20.c: 77: resetDS18B20();
  9446  11D9  2281  160A  118A   	fcall	_resetDS18B20
  9447                           
  9448                           ;ds18b20.c: 78: writeDS18B20(0xCC);
  9449  11DC  30CC               	movlw	204
  9450  11DD  222A  160A  118A   	fcall	_writeDS18B20
  9451                           
  9452                           ;ds18b20.c: 79: writeDS18B20(0xBE);
  9453  11E0  30BE               	movlw	190
  9454  11E1  222A  160A  118A   	fcall	_writeDS18B20
  9455                           
  9456                           ;ds18b20.c: 81: tempL = readDS18B20();
  9457  11E4  225A  160A  118A   	fcall	_readDS18B20
  9458  11E7  1283               	bcf	3,5	;RP0=0, select bank0
  9459  11E8  1303               	bcf	3,6	;RP1=0, select bank0
  9460  11E9  00D7               	movwf	getTempDS18B20@tempL
  9461  11EA  01D8               	clrf	getTempDS18B20@tempL+1
  9462                           
  9463                           ;ds18b20.c: 82: tempH = readDS18B20();
  9464  11EB  225A  160A  118A   	fcall	_readDS18B20
  9465  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  9466  11EF  1303               	bcf	3,6	;RP1=0, select bank0
  9467  11F0  00D9               	movwf	getTempDS18B20@tempH
  9468  11F1  01DA               	clrf	getTempDS18B20@tempH+1
  9469                           
  9470                           ;ds18b20.c: 84: temp = ((unsigned int)tempH << 8) + (unsigned int)tempL;
  9471  11F2  00DC               	movwf	getTempDS18B20@temp+1
  9472  11F3  01DB               	clrf	getTempDS18B20@temp
  9473  11F4  0857               	movf	getTempDS18B20@tempL,w
  9474  11F5  07DB               	addwf	getTempDS18B20@temp,f
  9475  11F6  1803               	skipnc
  9476  11F7  0ADC               	incf	getTempDS18B20@temp+1,f
  9477  11F8  0858               	movf	getTempDS18B20@tempL+1,w
  9478  11F9  07DC               	addwf	getTempDS18B20@temp+1,f
  9479                           
  9480                           ;ds18b20.c: 85: temperatura = (float)temp * 0.0625 - 0.3;
  9481  11FA  309A               	movlw	154
  9482  11FB  00C2               	movwf	___ftadd@f1
  9483  11FC  3099               	movlw	153
  9484  11FD  00C3               	movwf	___ftadd@f1+1
  9485  11FE  30BE               	movlw	190
  9486  11FF  00C4               	movwf	___ftadd@f1+2
  9487  1200  3080               	movlw	128
  9488  1201  01A8               	clrf	___ftmul@f1
  9489  1202  00A9               	movwf	___ftmul@f1+1
  9490  1203  303D               	movlw	61
  9491  1204  00AA               	movwf	___ftmul@f1+2
  9492  1205  085C               	movf	getTempDS18B20@temp+1,w
  9493  1206  00A1               	movwf	___lwtoft@c+1
  9494  1207  085B               	movf	getTempDS18B20@temp,w
  9495  1208  00A0               	movwf	___lwtoft@c
  9496  1209  235A  160A  118A   	fcall	___lwtoft
  9497  120C  0820               	movf	?___lwtoft,w
  9498  120D  00AB               	movwf	___ftmul@f2
  9499  120E  0821               	movf	?___lwtoft+1,w
  9500  120F  00AC               	movwf	___ftmul@f2+1
  9501  1210  0822               	movf	?___lwtoft+2,w
  9502  1211  00AD               	movwf	___ftmul@f2+2
  9503  1212  2690               	fcall	___ftmul
  9504  1213  120A  158A  27F1  160A  118A  	fcall	PL60	;call to abstracted procedure
  9505  1218  120A  158A  22EE   	fcall	___ftadd
  9506  121B  0842               	movf	?___ftadd,w
  9507  121C  00D4               	movwf	getTempDS18B20@temperatura
  9508  121D  0843               	movf	?___ftadd+1,w
  9509  121E  00D5               	movwf	getTempDS18B20@temperatura+1
  9510  121F  0844               	movf	?___ftadd+2,w
  9511  1220  00D6               	movwf	getTempDS18B20@temperatura+2
  9512  1221                     l5960:	
  9513                           
  9514                           ;ds18b20.c: 86: }
  9515                           ;ds18b20.c: 87: return temperatura;
  9516  1221  1283               	bcf	3,5	;RP0=0, select bank0
  9517  1222  1303               	bcf	3,6	;RP1=0, select bank0
  9518  1223  0854               	movf	getTempDS18B20@temperatura,w
  9519  1224  00CE               	movwf	?_getTempDS18B20
  9520  1225  0855               	movf	getTempDS18B20@temperatura+1,w
  9521  1226  00CF               	movwf	?_getTempDS18B20+1
  9522  1227  0856               	movf	getTempDS18B20@temperatura+2,w
  9523  1228  00D0               	movwf	?_getTempDS18B20+2
  9524  1229  0008               	return
  9525  122A                     __end_of_getTempDS18B20:	
  9526  122A                     __ptext11:	
  9527 ;; *************** function _writeDS18B20 *****************
  9528 ;; Defined at:
  9529 ;;		line 23 in file "ds18b20.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;  Cmd             1    wreg     unsigned char 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;  Cmd             1    3[COMMON] unsigned char 
  9534 ;;  i               1    4[COMMON] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;		None               void
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0
  9539 ;; Tracked objects:
  9540 ;;		On entry : 0/0
  9541 ;;		On exit  : 0/0
  9542 ;;		Unchanged: 0/0
  9543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9544 ;;      Params:         0       0       0       0       0
  9545 ;;      Locals:         2       0       0       0       0
  9546 ;;      Temps:          1       0       0       0       0
  9547 ;;      Totals:         3       0       0       0       0
  9548 ;;Total ram usage:        3 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    1
  9551 ;; This function calls:
  9552 ;;		Nothing
  9553 ;; This function is called by:
  9554 ;;		_getTempDS18B20
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _writeDS18B20
  9560  122A                     _writeDS18B20:	
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in _writeDS18B20: [wreg+status,2+status,0]
  9564                           ;writeDS18B20@Cmd stored from wreg
  9565  122A  00F3               	movwf	writeDS18B20@Cmd
  9566                           
  9567                           ;ds18b20.c: 24: char i;
  9568                           ;ds18b20.c: 25: TRISCbits.TRISC5 = 1;
  9569  122B  1683               	bsf	3,5	;RP0=1, select bank1
  9570  122C  1303               	bcf	3,6	;RP1=0, select bank1
  9571  122D  1687               	bsf	7,5	;volatile
  9572                           
  9573                           ;ds18b20.c: 26: for(i = 0; i < 8; i++)
  9574  122E  01F4               	clrf	writeDS18B20@i
  9575  122F                     l4278:	
  9576                           
  9577                           ;ds18b20.c: 27: {
  9578                           ;ds18b20.c: 28: if((Cmd & (1<<i))!= 0)
  9579  122F  3001               	movlw	1
  9580  1230  00F2               	movwf	??_writeDS18B20
  9581  1231  0A74               	incf	writeDS18B20@i,w
  9582  1232  2A35               	goto	u4854
  9583  1233                     u4855:	
  9584  1233  1003               	clrc
  9585  1234  0DF2               	rlf	??_writeDS18B20,f
  9586  1235                     u4854:	
  9587  1235  3EFF               	addlw	-1
  9588  1236  1D03               	skipz
  9589  1237  2A33               	goto	u4855
  9590  1238  0872               	movf	??_writeDS18B20,w
  9591  1239  0573               	andwf	writeDS18B20@Cmd,w
  9592  123A  1903               	btfsc	3,2
  9593  123B  2A49               	goto	l16
  9594                           
  9595                           ;ds18b20.c: 29: {
  9596                           ;ds18b20.c: 30: TRISCbits.TRISC5 = 0;
  9597                           
  9598                           ;ds18b20.c: 31: RC5 = 0;
  9599  123C  27E6  160A  118A   	fcall	PL88	;call to abstracted procedure
  9600                           
  9601                           ;ds18b20.c: 32: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9602  123F  2A40               	nop2	;2 cycle nop
  9603                           
  9604                           ;ds18b20.c: 33: TRISCbits.TRISC5 = 1;
  9605  1240  1683               	bsf	3,5	;RP0=1, select bank1
  9606  1241  1303               	bcf	3,6	;RP1=0, select bank1
  9607  1242  1687               	bsf	7,5	;volatile
  9608                           
  9609                           ;ds18b20.c: 34: _delay((unsigned long)((60)*(8000000/4000000.0)));
  9610  1243  3027               	movlw	39
  9611  1244  00F2               	movwf	??_writeDS18B20
  9612  1245                     u7957:	
  9613  1245  0BF2               	decfsz	??_writeDS18B20,f
  9614  1246  2A45               	goto	u7957
  9615  1247  2A48               	nop2	;nop
  9616                           
  9617                           ;ds18b20.c: 35: }
  9618  1248  2A54               	goto	l4288
  9619  1249                     l16:	
  9620                           
  9621                           ;ds18b20.c: 36: else
  9622                           ;ds18b20.c: 37: {
  9623                           ;ds18b20.c: 39: TRISCbits.TRISC5 = 0;
  9624                           
  9625                           ;ds18b20.c: 40: RC5 = 0;
  9626  1249  27E6  160A  118A   	fcall	PL88	;call to abstracted procedure
  9627                           
  9628                           ;ds18b20.c: 41: _delay((unsigned long)((60)*(8000000/4000000.0)));
  9629  124C  3027               	movlw	39
  9630  124D  00F2               	movwf	??_writeDS18B20
  9631  124E                     u7967:	
  9632  124E  0BF2               	decfsz	??_writeDS18B20,f
  9633  124F  2A4E               	goto	u7967
  9634  1250  2A51               	nop2	;nop
  9635                           
  9636                           ;ds18b20.c: 42: TRISCbits.TRISC5 = 1;
  9637  1251  1683               	bsf	3,5	;RP0=1, select bank1
  9638  1252  1303               	bcf	3,6	;RP1=0, select bank1
  9639  1253  1687               	bsf	7,5	;volatile
  9640  1254                     l4288:	
  9641  1254  3008               	movlw	8
  9642  1255  0AF4               	incf	writeDS18B20@i,f
  9643  1256  0274               	subwf	writeDS18B20@i,w
  9644  1257  1803               	btfsc	3,0
  9645  1258  0008               	return
  9646  1259  2A2F               	goto	l4278
  9647  125A                     __end_of_writeDS18B20:	
  9648  125A                     __ptext13:	
  9649 ;; *************** function _readDS18B20 *****************
  9650 ;; Defined at:
  9651 ;;		line 48 in file "ds18b20.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;		None
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;  i               1    4[COMMON] unsigned char 
  9656 ;;  result          1    3[COMMON] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      unsigned char 
  9659 ;; Registers used:
  9660 ;;		wreg, status,2, status,0
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9666 ;;      Params:         0       0       0       0       0
  9667 ;;      Locals:         2       0       0       0       0
  9668 ;;      Temps:          1       0       0       0       0
  9669 ;;      Totals:         3       0       0       0       0
  9670 ;;Total ram usage:        3 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    1
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_getTempDS18B20
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _readDS18B20
  9682  125A                     _readDS18B20:	
  9683                           
  9684                           ;ds18b20.c: 49: char i,result = 0;
  9685                           
  9686                           ;incstack = 0
  9687                           ; Regs used in _readDS18B20: [wreg+status,2+status,0]
  9688  125A  01F3               	clrf	readDS18B20@result
  9689                           
  9690                           ;ds18b20.c: 50: TRISCbits.TRISC5 = 1;
  9691  125B  1683               	bsf	3,5	;RP0=1, select bank1
  9692  125C  1303               	bcf	3,6	;RP1=0, select bank1
  9693  125D  1687               	bsf	7,5	;volatile
  9694                           
  9695                           ;ds18b20.c: 52: for(i = 0; i < 8; i++)
  9696  125E  01F4               	clrf	readDS18B20@i
  9697  125F                     l21:	
  9698                           
  9699                           ;ds18b20.c: 53: {
  9700                           ;ds18b20.c: 54: TRISCbits.TRISC5 = 0;
  9701                           
  9702                           ;ds18b20.c: 55: RC5 = 0;
  9703  125F  27E6  160A  118A   	fcall	PL88	;call to abstracted procedure
  9704                           
  9705                           ;ds18b20.c: 56: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9706  1262  2A63               	nop2	;2 cycle nop
  9707  1263  2A64               	nop2	;2 cycle nop
  9708                           
  9709                           ;ds18b20.c: 57: TRISCbits.TRISC5 = 1;
  9710  1264  1683               	bsf	3,5	;RP0=1, select bank1
  9711  1265  1303               	bcf	3,6	;RP1=0, select bank1
  9712  1266  1687               	bsf	7,5	;volatile
  9713                           
  9714                           ;ds18b20.c: 59: if(RC5 != 0) result |= 1<<i;
  9715  1267  1283               	bcf	3,5	;RP0=0, select bank0
  9716  1268  1E87               	btfss	7,5	;volatile
  9717  1269  2A75               	goto	l4302
  9718  126A  3001               	movlw	1
  9719  126B  00F2               	movwf	??_readDS18B20
  9720  126C  0A74               	incf	readDS18B20@i,w
  9721  126D  2A70               	goto	u4894
  9722  126E                     u4895:	
  9723  126E  1003               	clrc
  9724  126F  0DF2               	rlf	??_readDS18B20,f
  9725  1270                     u4894:	
  9726  1270  3EFF               	addlw	-1
  9727  1271  1D03               	skipz
  9728  1272  2A6E               	goto	u4895
  9729  1273  0872               	movf	??_readDS18B20,w
  9730  1274  04F3               	iorwf	readDS18B20@result,f
  9731  1275                     l4302:	
  9732                           
  9733                           ;ds18b20.c: 61: _delay((unsigned long)((60)*(8000000/4000000.0)));
  9734  1275  3027               	movlw	39
  9735  1276  00F2               	movwf	??_readDS18B20
  9736  1277                     u8017:	
  9737  1277  0BF2               	decfsz	??_readDS18B20,f
  9738  1278  2A77               	goto	u8017
  9739  1279  2A7A               	nop2	;nop
  9740  127A  3008               	movlw	8
  9741  127B  0AF4               	incf	readDS18B20@i,f
  9742  127C  0274               	subwf	readDS18B20@i,w
  9743  127D  1C03               	skipc
  9744  127E  2A5F               	goto	l21
  9745                           
  9746                           ;ds18b20.c: 62: }
  9747                           ;ds18b20.c: 63: return result;
  9748  127F  0873               	movf	readDS18B20@result,w
  9749  1280  0008               	return
  9750  1281                     __end_of_readDS18B20:	
  9751  1281                     __ptext12:	
  9752 ;; *************** function _resetDS18B20 *****************
  9753 ;; Defined at:
  9754 ;;		line 3 in file "ds18b20.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      unsigned char 
  9761 ;; Registers used:
  9762 ;;		wreg
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/100
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9768 ;;      Params:         0       0       0       0       0
  9769 ;;      Locals:         0       0       0       0       0
  9770 ;;      Temps:          1       0       0       0       0
  9771 ;;      Totals:         1       0       0       0       0
  9772 ;;Total ram usage:        1 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    1
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_getTempDS18B20
  9779 ;;		_main
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783                           
  9784                           ;psect for function _resetDS18B20
  9785  1281                     _resetDS18B20:	
  9786                           
  9787                           ;ds18b20.c: 4: TRISCbits.TRISC5 = 0;
  9788                           
  9789                           ;incstack = 0
  9790                           ; Regs used in _resetDS18B20: [wreg]
  9791                           
  9792                           ;ds18b20.c: 5: RC5 = 0;
  9793  1281  27E6  160A  118A   	fcall	PL88	;call to abstracted procedure
  9794                           
  9795                           ;ds18b20.c: 6: _delay((unsigned long)((480)*(8000000/4000000.0)));
  9796  1284  3089               	movlw	137
  9797  1285  00F2               	movwf	??_resetDS18B20
  9798  1286                     u7977:	
  9799  1286  2A87               	nop2
  9800  1287  2A88               	nop2
  9801  1288  0BF2               	decfsz	??_resetDS18B20,f
  9802  1289  2A86               	goto	u7977
  9803                           
  9804                           ;ds18b20.c: 7: TRISCbits.TRISC5 = 1;
  9805  128A  1683               	bsf	3,5	;RP0=1, select bank1
  9806  128B  1303               	bcf	3,6	;RP1=0, select bank1
  9807  128C  1687               	bsf	7,5	;volatile
  9808                           
  9809                           ;ds18b20.c: 8: _delay((unsigned long)((60)*(8000000/4000000.0)));
  9810  128D  3027               	movlw	39
  9811  128E  00F2               	movwf	??_resetDS18B20
  9812  128F                     u7987:	
  9813  128F  0BF2               	decfsz	??_resetDS18B20,f
  9814  1290  2A8F               	goto	u7987
  9815  1291  2A92               	nop2	;nop
  9816                           
  9817                           ;ds18b20.c: 10: if (RC5 == 0)
  9818  1292  1283               	bcf	3,5	;RP0=0, select bank0
  9819  1293  1303               	bcf	3,6	;RP1=0, select bank0
  9820  1294  1A87               	btfsc	7,5	;volatile
  9821  1295  2A9D               	goto	l4266
  9822                           
  9823                           ;ds18b20.c: 11: {
  9824                           ;ds18b20.c: 12: _delay((unsigned long)((480)*(8000000/4000000.0)));
  9825  1296  3089               	movlw	137
  9826  1297  00F2               	movwf	??_resetDS18B20
  9827  1298                     u7997:	
  9828  1298  2A99               	nop2
  9829  1299  2A9A               	nop2
  9830  129A  0BF2               	decfsz	??_resetDS18B20,f
  9831  129B  2A98               	goto	u7997
  9832                           
  9833                           ;ds18b20.c: 13: return 0;
  9834  129C  3400               	retlw	0
  9835  129D                     l4266:	
  9836                           
  9837                           ;ds18b20.c: 15: else
  9838                           ;ds18b20.c: 16: {
  9839                           ;ds18b20.c: 17: _delay((unsigned long)((480)*(8000000/4000000.0)));
  9840  129D  3089               	movlw	137
  9841  129E  00F2               	movwf	??_resetDS18B20
  9842  129F                     u8007:	
  9843  129F  2AA0               	nop2
  9844  12A0  2AA1               	nop2
  9845  12A1  0BF2               	decfsz	??_resetDS18B20,f
  9846  12A2  2A9F               	goto	u8007
  9847                           
  9848                           ;ds18b20.c: 18: return 1;
  9849  12A3  3401               	retlw	1
  9850  12A4                     __end_of_resetDS18B20:	
  9851  12A4                     __ptext15:	
  9852 ;; *************** function _readStatusRegSHT71 *****************
  9853 ;; Defined at:
  9854 ;;		line 213 in file "sht71.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;  p_value         1    wreg     PTR unsigned char 
  9857 ;;		 -> getResSHT71@inp(1), 
  9858 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  9859 ;;		 -> getResSHT71@checksum(1), 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  p_value         1    7[COMMON] PTR unsigned char 
  9862 ;;		 -> getResSHT71@inp(1), 
  9863 ;;  error           1    8[COMMON] unsigned char 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      unsigned char 
  9866 ;; Registers used:
  9867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : B00/100
  9870 ;;		On exit  : B00/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9873 ;;      Params:         1       0       0       0       0
  9874 ;;      Locals:         2       0       0       0       0
  9875 ;;      Temps:          0       0       0       0       0
  9876 ;;      Totals:         3       0       0       0       0
  9877 ;;Total ram usage:        3 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:    2
  9880 ;; This function calls:
  9881 ;;		_readByteSHT71
  9882 ;;		_tranStartSHT71
  9883 ;;		_writeByteSHT71
  9884 ;; This function is called by:
  9885 ;;		_getResSHT71
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           
  9890                           ;psect for function _readStatusRegSHT71
  9891  12A4                     _readStatusRegSHT71:	
  9892                           
  9893                           ;incstack = 0
  9894                           ; Regs used in _readStatusRegSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9895                           ;readStatusRegSHT71@p_value stored from wreg
  9896  12A4  00F7               	movwf	readStatusRegSHT71@p_value
  9897                           
  9898                           ;sht71.c: 216: tranStartSHT71();
  9899  12A5  240B  160A  118A   	fcall	_tranStartSHT71
  9900                           
  9901                           ;sht71.c: 217: error = writeByteSHT71(0x07);
  9902  12A8  3007               	movlw	7
  9903  12A9  244C  160A  118A   	fcall	_writeByteSHT71
  9904  12AC  00F8               	movwf	readStatusRegSHT71@error
  9905                           
  9906                           ;sht71.c: 218: *p_value = readByteSHT71(1);
  9907  12AD  0877               	movf	readStatusRegSHT71@p_value,w
  9908  12AE  0084               	movwf	4
  9909  12AF  3001               	movlw	1
  9910  12B0  23DB  160A  118A   	fcall	_readByteSHT71
  9911  12B3  1383               	bcf	3,7	;select IRP bank0
  9912  12B4  0080               	movwf	0
  9913                           
  9914                           ;sht71.c: 219: *p_checksum = readByteSHT71(0);
  9915  12B5  0876               	movf	readStatusRegSHT71@p_checksum,w
  9916  12B6  0084               	movwf	4
  9917  12B7  3000               	movlw	0
  9918  12B8  23DB               	fcall	_readByteSHT71
  9919  12B9  1383               	bcf	3,7	;select IRP bank0
  9920  12BA  0080               	movwf	0
  9921                           
  9922                           ;sht71.c: 220: return error;
  9923  12BB  0878               	movf	readStatusRegSHT71@error,w
  9924  12BC  0008               	return
  9925  12BD                     __end_of_readStatusRegSHT71:	
  9926  12BD                     __ptext14:	
  9927 ;; *************** function _getResSHT71 *****************
  9928 ;; Defined at:
  9929 ;;		line 223 in file "sht71.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;  p_temp          1    wreg     PTR float 
  9932 ;;		 -> temp(3), 
  9933 ;;  p_humi          1   77[BANK0 ] PTR float 
  9934 ;;		 -> humi(3), 
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  p_temp          1    4[BANK1 ] PTR float 
  9937 ;;		 -> temp(3), 
  9938 ;;  temp_val        3   10[BANK1 ] struct .
  9939 ;;  humi_val        3    6[BANK1 ] struct .
  9940 ;;  checksum        1    9[BANK1 ] unsigned char 
  9941 ;;  error           1    5[BANK1 ] unsigned char 
  9942 ;;  inp             1    3[BANK1 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 300/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9952 ;;      Params:         0       1       0       0       0
  9953 ;;      Locals:         0       0      10       0       0
  9954 ;;      Temps:          0       0       3       0       0
  9955 ;;      Totals:         0       1      13       0       0
  9956 ;;Total ram usage:       14 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    4
  9959 ;; This function calls:
  9960 ;;		_LcdSetCursor
  9961 ;;		_LcdWriteString
  9962 ;;		___lwtoft
  9963 ;;		_calcSHT71
  9964 ;;		_connectionResetSHT71
  9965 ;;		_measureSHT71
  9966 ;;		_readStatusRegSHT71
  9967 ;; This function is called by:
  9968 ;;		_main
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _getResSHT71
  9974  12BD                     _getResSHT71:	
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _getResSHT71: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9978                           ;getResSHT71@p_temp stored from wreg
  9979  12BD  1683               	bsf	3,5	;RP0=1, select bank1
  9980  12BE  00D2               	movwf	getResSHT71@p_temp^(0+128)
  9981  12BF  30D7               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  9982                           
  9983                           ;sht71.c: 224: value humi_val,temp_val;
  9984                           ;sht71.c: 225: unsigned char error, checksum;
  9985                           ;sht71.c: 226: char inp;
  9986                           ;sht71.c: 227: error=0;
  9987  12C0  01D3               	clrf	getResSHT71@error^(0+128)
  9988                           
  9989                           ;sht71.c: 228: error += measureSHT71((unsigned char*) (&humi_val.i),&checksum,3);
  9990  12C1  00F6               	movwf	measureSHT71@p_checksum
  9991  12C2  3003               	movlw	3
  9992  12C3  00F7               	movwf	measureSHT71@mode
  9993  12C4  30D4               	movlw	(low (getResSHT71@humi_val| 0))& (0+255)
  9994  12C5  236A  160A  118A   	fcall	_measureSHT71
  9995  12C8  1683               	bsf	3,5	;RP0=1, select bank1
  9996  12C9  07D3               	addwf	getResSHT71@error^(0+128),f
  9997                           
  9998                           ;sht71.c: 229: error += measureSHT71((unsigned char*) (&temp_val.i),&checksum,2);
  9999  12CA  30D7               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
 10000  12CB  00F6               	movwf	measureSHT71@p_checksum
 10001  12CC  3002               	movlw	2
 10002  12CD  00F7               	movwf	measureSHT71@mode
 10003  12CE  30D8               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
 10004  12CF  236A  160A  118A   	fcall	_measureSHT71
 10005  12D2  1683               	bsf	3,5	;RP0=1, select bank1
 10006  12D3  07D3               	addwf	getResSHT71@error^(0+128),f
 10007                           
 10008                           ;sht71.c: 230: error += readStatusRegSHT71(&inp, &checksum);
 10009  12D4  30D7               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
 10010  12D5  00F6               	movwf	readStatusRegSHT71@p_checksum
 10011  12D6  30D1               	movlw	(low (getResSHT71@inp| 0))& (0+255)
 10012  12D7  22A4  160A  118A   	fcall	_readStatusRegSHT71
 10013  12DA  1683               	bsf	3,5	;RP0=1, select bank1
 10014  12DB  07D3               	addwf	getResSHT71@error^(0+128),f
 10015                           
 10016                           ;sht71.c: 231: if(error != 0)
 10017  12DC  0853               	movf	getResSHT71@error^(0+128),w
 10018  12DD  1903               	btfsc	3,2
 10019  12DE  2B00               	goto	l6014
 10020                           
 10021                           ;sht71.c: 232: {
 10022                           ;sht71.c: 233: connectionResetSHT71();
 10023  12DF  2435               	fcall	_connectionResetSHT71
 10024  12E0  3001               	movlw	1
 10025                           
 10026                           ;sht71.c: 234: LcdSetCursor(1,1);
 10027  12E1  01F6               	clrf	LcdSetCursor@b
 10028  12E2  0AF6               	incf	LcdSetCursor@b,f
 10029  12E3  120A  158A  26E8  160A  118A  	fcall	_LcdSetCursor
 10030                           
 10031                           ;sht71.c: 235: LcdWriteString("Greska SHT71!");
 10032  12E8  3010               	movlw	low (STR_1| (0+32768))
 10033  12E9  00F7               	movwf	LcdWriteString@a
 10034  12EA  3099               	movlw	high (STR_1| (0+32768))
 10035  12EB  00F8               	movwf	LcdWriteString@a+1
 10036  12EC  120A  158A  252F  160A  118A  	fcall	_LcdWriteString
 10037                           
 10038                           ;sht71.c: 236: _delay((unsigned long)((1000)*(8000000/4000.0)));
 10039  12F1  300B               	movlw	11
 10040  12F2  1683               	bsf	3,5	;RP0=1, select bank1
 10041  12F3  00D0               	movwf	(??_getResSHT71^(0+128)+2)
 10042  12F4  3026               	movlw	38
 10043  12F5  00CF               	movwf	(??_getResSHT71^(0+128)+1)
 10044  12F6  3066               	movlw	102
 10045  12F7  00CE               	movwf	??_getResSHT71^(0+128)
 10046  12F8                     u8027:	
 10047  12F8  0BCE               	decfsz	??_getResSHT71^(0+128),f
 10048  12F9  2AF8               	goto	u8027
 10049  12FA  0BCF               	decfsz	(??_getResSHT71^(0+128)+1),f
 10050  12FB  2AF8               	goto	u8027
 10051  12FC  0BD0               	decfsz	(??_getResSHT71^(0+128)+2),f
 10052  12FD  2AF8               	goto	u8027
 10053  12FE  2AFF               	nop2
 10054                           
 10055                           ;sht71.c: 237: }
 10056  12FF  0008               	return
 10057  1300                     l6014:	
 10058                           
 10059                           ;sht71.c: 238: else
 10060                           ;sht71.c: 239: {
 10061                           ;sht71.c: 240: humi_val.f = (float)tempervalue[1];
 10062  1300  0823               	movf	((_tempervalue+1)^(0+128)+2),w
 10063  1301  1283               	bcf	3,5	;RP0=0, select bank0
 10064  1302  00A1               	movwf	___lwtoft@c+1
 10065  1303  1683               	bsf	3,5	;RP0=1, select bank1
 10066  1304  0822               	movf	(_tempervalue^(0+128)+2),w
 10067  1305  1283               	bcf	3,5	;RP0=0, select bank0
 10068  1306  00A0               	movwf	___lwtoft@c
 10069  1307  235A  160A  118A   	fcall	___lwtoft
 10070  130A  0820               	movf	?___lwtoft,w
 10071  130B  1683               	bsf	3,5	;RP0=1, select bank1
 10072  130C  00D4               	movwf	getResSHT71@humi_val^(0+128)
 10073  130D  1283               	bcf	3,5	;RP0=0, select bank0
 10074  130E  0821               	movf	?___lwtoft+1,w
 10075  130F  1683               	bsf	3,5	;RP0=1, select bank1
 10076  1310  00D5               	movwf	(getResSHT71@humi_val+1)^(0+128)
 10077  1311  1283               	bcf	3,5	;RP0=0, select bank0
 10078  1312  0822               	movf	?___lwtoft+2,w
 10079  1313  1683               	bsf	3,5	;RP0=1, select bank1
 10080  1314  00D6               	movwf	(getResSHT71@humi_val+2)^(0+128)
 10081                           
 10082                           ;sht71.c: 241: temp_val.f = (float)tempervalue[0];
 10083  1315  0821               	movf	(_tempervalue+1)^(0+128),w
 10084  1316  1283               	bcf	3,5	;RP0=0, select bank0
 10085  1317  00A1               	movwf	___lwtoft@c+1
 10086  1318  1683               	bsf	3,5	;RP0=1, select bank1
 10087  1319  0820               	movf	_tempervalue^(0+128),w
 10088  131A  1283               	bcf	3,5	;RP0=0, select bank0
 10089  131B  00A0               	movwf	___lwtoft@c
 10090  131C  235A               	fcall	___lwtoft
 10091  131D  0820               	movf	?___lwtoft,w
 10092  131E  1683               	bsf	3,5	;RP0=1, select bank1
 10093  131F  00D8               	movwf	getResSHT71@temp_val^(0+128)
 10094  1320  1283               	bcf	3,5	;RP0=0, select bank0
 10095  1321  0821               	movf	?___lwtoft+1,w
 10096  1322  1683               	bsf	3,5	;RP0=1, select bank1
 10097  1323  00D9               	movwf	(getResSHT71@temp_val+1)^(0+128)
 10098  1324  1283               	bcf	3,5	;RP0=0, select bank0
 10099  1325  0822               	movf	?___lwtoft+2,w
 10100  1326  1683               	bsf	3,5	;RP0=1, select bank1
 10101  1327  00DA               	movwf	(getResSHT71@temp_val+2)^(0+128)
 10102                           
 10103                           ;sht71.c: 242: humi_val.f = calcSHT71(humi_val.f,&temp_val.f);
 10104  1328  0854               	movf	getResSHT71@humi_val^(0+128),w
 10105  1329  1283               	bcf	3,5	;RP0=0, select bank0
 10106  132A  00D4               	movwf	calcSHT71@p_humidity
 10107  132B  1683               	bsf	3,5	;RP0=1, select bank1
 10108  132C  0855               	movf	(getResSHT71@humi_val+1)^(0+128),w
 10109  132D  1283               	bcf	3,5	;RP0=0, select bank0
 10110  132E  00D5               	movwf	calcSHT71@p_humidity+1
 10111  132F  1683               	bsf	3,5	;RP0=1, select bank1
 10112  1330  0856               	movf	(getResSHT71@humi_val+2)^(0+128),w
 10113  1331  1283               	bcf	3,5	;RP0=0, select bank0
 10114  1332  00D6               	movwf	calcSHT71@p_humidity+2
 10115  1333  30D8               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
 10116  1334  00D7               	movwf	calcSHT71@p_temperature
 10117  1335  120A  158A  2061   	fcall	_calcSHT71
 10118  1338  0854               	movf	?_calcSHT71,w
 10119  1339  1683               	bsf	3,5	;RP0=1, select bank1
 10120  133A  00D4               	movwf	getResSHT71@humi_val^(0+128)
 10121  133B  1283               	bcf	3,5	;RP0=0, select bank0
 10122  133C  0855               	movf	?_calcSHT71+1,w
 10123  133D  1683               	bsf	3,5	;RP0=1, select bank1
 10124  133E  00D5               	movwf	(getResSHT71@humi_val+1)^(0+128)
 10125  133F  1283               	bcf	3,5	;RP0=0, select bank0
 10126  1340  0856               	movf	?_calcSHT71+2,w
 10127  1341  1683               	bsf	3,5	;RP0=1, select bank1
 10128  1342  00D6               	movwf	(getResSHT71@humi_val+2)^(0+128)
 10129                           
 10130                           ;sht71.c: 243: *p_temp = temp_val.f;
 10131  1343  0852               	movf	getResSHT71@p_temp^(0+128),w
 10132  1344  0084               	movwf	4
 10133  1345  0858               	movf	getResSHT71@temp_val^(0+128),w
 10134  1346  0080               	movwf	0
 10135  1347  0A84               	incf	4,f
 10136  1348  0859               	movf	(getResSHT71@temp_val+1)^(0+128),w
 10137  1349  0080               	movwf	0
 10138  134A  0A84               	incf	4,f
 10139  134B  085A               	movf	(getResSHT71@temp_val+2)^(0+128),w
 10140  134C  0080               	movwf	0
 10141                           
 10142                           ;sht71.c: 244: *p_humi = humi_val.f;
 10143  134D  1283               	bcf	3,5	;RP0=0, select bank0
 10144  134E  086D               	movf	getResSHT71@p_humi,w
 10145  134F  0084               	movwf	4
 10146  1350  1683               	bsf	3,5	;RP0=1, select bank1
 10147  1351  0854               	movf	getResSHT71@humi_val^(0+128),w
 10148  1352  0080               	movwf	0
 10149  1353  0A84               	incf	4,f
 10150  1354  0855               	movf	(getResSHT71@humi_val+1)^(0+128),w
 10151  1355  0080               	movwf	0
 10152  1356  0A84               	incf	4,f
 10153  1357  0856               	movf	(getResSHT71@humi_val+2)^(0+128),w
 10154  1358  0080               	movwf	0
 10155  1359  0008               	return
 10156  135A                     __end_of_getResSHT71:	
 10157  135A                     __ptext22:	
 10158 ;; *************** function ___lwtoft *****************
 10159 ;; Defined at:
 10160 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;  c               2    0[BANK0 ] unsigned int 
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;		None
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  3    0[BANK0 ] float 
 10167 ;; Registers used:
 10168 ;;		wreg, status,2, status,0, pclath, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 300/0
 10171 ;;		On exit  : 300/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10174 ;;      Params:         0       3       0       0       0
 10175 ;;      Locals:         0       0       0       0       0
 10176 ;;      Temps:          0       0       0       0       0
 10177 ;;      Totals:         0       3       0       0       0
 10178 ;;Total ram usage:        3 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    2
 10181 ;; This function calls:
 10182 ;;		___ftpack
 10183 ;; This function is called by:
 10184 ;;		_getTempDS18B20
 10185 ;;		_getResSHT71
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           
 10190                           ;psect for function ___lwtoft
 10191  135A                     ___lwtoft:	
 10192                           
 10193                           ;incstack = 0
 10194                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 10195  135A  0820               	movf	___lwtoft@c,w
 10196  135B  00F2               	movwf	___ftpack@arg
 10197  135C  0821               	movf	___lwtoft@c+1,w
 10198  135D  00F3               	movwf	___ftpack@arg+1
 10199  135E  308E               	movlw	142
 10200  135F  01F4               	clrf	___ftpack@arg+2
 10201  1360  00F5               	movwf	___ftpack@exp
 10202  1361  01F6               	clrf	___ftpack@sign
 10203  1362  270B               	fcall	___ftpack
 10204  1363  0872               	movf	?___ftpack,w
 10205  1364  00A0               	movwf	?___lwtoft
 10206  1365  0873               	movf	?___ftpack+1,w
 10207  1366  00A1               	movwf	?___lwtoft+1
 10208  1367  0874               	movf	?___ftpack+2,w
 10209  1368  00A2               	movwf	?___lwtoft+2
 10210  1369  0008               	return
 10211  136A                     __end_of___lwtoft:	
 10212  136A                     __ptext16:	
 10213 ;; *************** function _measureSHT71 *****************
 10214 ;; Defined at:
 10215 ;;		line 91 in file "sht71.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  p_value         1    wreg     PTR unsigned char 
 10218 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
 10219 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
 10220 ;;		 -> getResSHT71@checksum(1), 
 10221 ;;  mode            1    7[COMMON] unsigned char 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  p_value         1    0[BANK0 ] PTR unsigned char 
 10224 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
 10225 ;;  temp            2    3[BANK0 ] unsigned int 
 10226 ;;  error           2    1[BANK0 ] unsigned int 
 10227 ;; Return value:  Size  Location     Type
 10228 ;;                  1    wreg      unsigned char 
 10229 ;; Registers used:
 10230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10231 ;; Tracked objects:
 10232 ;;		On entry : 300/100
 10233 ;;		On exit  : B00/0
 10234 ;;		Unchanged: 0/0
 10235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10236 ;;      Params:         2       0       0       0       0
 10237 ;;      Locals:         0       5       0       0       0
 10238 ;;      Temps:          0       0       0       0       0
 10239 ;;      Totals:         2       5       0       0       0
 10240 ;;Total ram usage:        7 bytes
 10241 ;; Hardware stack levels used:    1
 10242 ;; Hardware stack levels required when called:    2
 10243 ;; This function calls:
 10244 ;;		_readByteSHT71
 10245 ;;		_tranStartSHT71
 10246 ;;		_writeByteSHT71
 10247 ;; This function is called by:
 10248 ;;		_getResSHT71
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _measureSHT71
 10254  136A                     _measureSHT71:	
 10255                           
 10256                           ;sht71.c: 92: unsigned error = 0;
 10257                           
 10258                           ;incstack = 0
 10259                           ; Regs used in _measureSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10260  136A  1283               	bcf	3,5	;RP0=0, select bank0
 10261  136B  01A1               	clrf	measureSHT71@error
 10262  136C  01A2               	clrf	measureSHT71@error+1
 10263                           
 10264                           ;sht71.c: 94: tranStartSHT71();
 10265  136D  240B  160A  118A   	fcall	_tranStartSHT71
 10266                           
 10267                           ;sht71.c: 95: switch(mode){
 10268  1370  2B7B               	goto	l4320
 10269  1371                     l4314:	
 10270  1371  3003               	movlw	3
 10271  1372  2B74               	goto	L3
 10272  1373                     l4316:	
 10273  1373  3005               	movlw	5
 10274  1374                     L3:	
 10275  1374  244C  160A  118A   	fcall	_writeByteSHT71
 10276  1377  07A1               	addwf	measureSHT71@error,f
 10277  1378  1803               	skipnc
 10278  1379  0AA2               	incf	measureSHT71@error+1,f
 10279  137A  2B83               	goto	l127
 10280  137B                     l4320:	
 10281  137B  0877               	movf	measureSHT71@mode,w
 10282                           
 10283                           ; Switch size 1, requested type "space"
 10284                           ; Number of cases is 2, Range of values is 2 to 3
 10285                           ; switch strategies available:
 10286                           ; Name         Instructions Cycles
 10287                           ; simple_byte            7     4 (average)
 10288                           ; direct_byte           17    11 (fixed)
 10289                           ; jumptable            263     9 (fixed)
 10290                           ;	Chosen strategy is simple_byte
 10291  137C  3A02               	xorlw	2	; case 2
 10292  137D  1903               	skipnz
 10293  137E  2B71               	goto	l4314
 10294  137F  3A01               	xorlw	1	; case 3
 10295  1380  1903               	skipnz
 10296  1381  2B73               	goto	l4316
 10297  1382  2B83               	goto	l127
 10298  1383                     l127:	
 10299                           
 10300                           ;sht71.c: 100: TRISBbits.TRISB7 = 1;
 10301  1383  1683               	bsf	3,5	;RP0=1, select bank1
 10302  1384  1303               	bcf	3,6	;RP1=0, select bank1
 10303  1385  1786               	bsf	6,7	;volatile
 10304  1386                     l130:	
 10305                           ;sht71.c: 101: while (1)
 10306                           
 10307                           
 10308                           ;sht71.c: 102: {
 10309                           ;sht71.c: 103: if(RB7 == 0) break;
 10310  1386  1283               	bcf	3,5	;RP0=0, select bank0
 10311  1387  1B86               	btfsc	6,7	;volatile
 10312  1388  2B86               	goto	l130
 10313                           
 10314                           ;sht71.c: 104: }
 10315                           ;sht71.c: 105: if(RB7) error += 1;
 10316  1389  1F86               	btfss	6,7	;volatile
 10317  138A  2BCB               	goto	l4352
 10318  138B  0AA1               	incf	measureSHT71@error,f
 10319  138C  1903               	skipnz
 10320  138D  0AA2               	incf	measureSHT71@error+1,f
 10321  138E  2BCB               	goto	l4352
 10322  138F                     l4326:	
 10323                           
 10324                           ;sht71.c: 108: temp = readByteSHT71(1);
 10325  138F  3001               	movlw	1
 10326  1390  23DB  160A  118A   	fcall	_readByteSHT71
 10327  1393  00A3               	movwf	measureSHT71@temp
 10328  1394  01A4               	clrf	measureSHT71@temp+1
 10329                           
 10330                           ;sht71.c: 109: temp <<= 8;
 10331  1395  00A4               	movwf	measureSHT71@temp+1
 10332  1396  01A3               	clrf	measureSHT71@temp
 10333                           
 10334                           ;sht71.c: 110: tempervalue[0] = temp;
 10335  1397  1683               	bsf	3,5	;RP0=1, select bank1
 10336  1398  00A1               	movwf	(_tempervalue+1)^(0+128)
 10337  1399  1283               	bcf	3,5	;RP0=0, select bank0
 10338  139A  0823               	movf	measureSHT71@temp,w
 10339  139B  1683               	bsf	3,5	;RP0=1, select bank1
 10340  139C  00A0               	movwf	_tempervalue^(0+128)
 10341                           
 10342                           ;sht71.c: 111: temp = 0;
 10343  139D  1283               	bcf	3,5	;RP0=0, select bank0
 10344  139E  3001               	movlw	1
 10345  139F  01A3               	clrf	measureSHT71@temp
 10346  13A0  01A4               	clrf	measureSHT71@temp+1
 10347                           
 10348                           ;sht71.c: 112: temp = readByteSHT71(1);
 10349  13A1  23DB  160A  118A   	fcall	_readByteSHT71
 10350  13A4  00A3               	movwf	measureSHT71@temp
 10351  13A5  01A4               	clrf	measureSHT71@temp+1
 10352                           
 10353                           ;sht71.c: 113: tempervalue[0] |= temp;
 10354  13A6  1683               	bsf	3,5	;RP0=1, select bank1
 10355  13A7  04A0               	iorwf	_tempervalue^(0+128),f
 10356  13A8  1283               	bcf	3,5	;RP0=0, select bank0
 10357  13A9  0824               	movf	measureSHT71@temp+1,w
 10358  13AA  1683               	bsf	3,5	;RP0=1, select bank1
 10359  13AB  04A1               	iorwf	(_tempervalue+1)^(0+128),f
 10360                           
 10361                           ;sht71.c: 114: break;
 10362  13AC  2BD3               	goto	l4354
 10363  13AD                     l4338:	
 10364                           
 10365                           ;sht71.c: 116: temp = readByteSHT71(1);
 10366  13AD  3001               	movlw	1
 10367  13AE  23DB  160A  118A   	fcall	_readByteSHT71
 10368  13B1  00A3               	movwf	measureSHT71@temp
 10369  13B2  01A4               	clrf	measureSHT71@temp+1
 10370                           
 10371                           ;sht71.c: 117: temp <<= 8;
 10372  13B3  00A4               	movwf	measureSHT71@temp+1
 10373  13B4  01A3               	clrf	measureSHT71@temp
 10374                           
 10375                           ;sht71.c: 118: tempervalue[1] = temp;
 10376  13B5  1683               	bsf	3,5	;RP0=1, select bank1
 10377  13B6  00A3               	movwf	((_tempervalue+1)^(0+128)+2)
 10378  13B7  1283               	bcf	3,5	;RP0=0, select bank0
 10379  13B8  0823               	movf	measureSHT71@temp,w
 10380  13B9  1683               	bsf	3,5	;RP0=1, select bank1
 10381  13BA  00A2               	movwf	(_tempervalue^(0+128)+2)
 10382                           
 10383                           ;sht71.c: 119: temp = 0;
 10384  13BB  1283               	bcf	3,5	;RP0=0, select bank0
 10385  13BC  3001               	movlw	1
 10386  13BD  01A3               	clrf	measureSHT71@temp
 10387  13BE  01A4               	clrf	measureSHT71@temp+1
 10388                           
 10389                           ;sht71.c: 120: temp = readByteSHT71(1);
 10390  13BF  23DB  160A  118A   	fcall	_readByteSHT71
 10391  13C2  00A3               	movwf	measureSHT71@temp
 10392  13C3  01A4               	clrf	measureSHT71@temp+1
 10393                           
 10394                           ;sht71.c: 121: tempervalue[1] |= temp;
 10395  13C4  1683               	bsf	3,5	;RP0=1, select bank1
 10396  13C5  04A2               	iorwf	(_tempervalue^(0+128)+2),f
 10397  13C6  1283               	bcf	3,5	;RP0=0, select bank0
 10398  13C7  0824               	movf	measureSHT71@temp+1,w
 10399  13C8  1683               	bsf	3,5	;RP0=1, select bank1
 10400  13C9  04A3               	iorwf	((_tempervalue+1)^(0+128)+2),f
 10401                           
 10402                           ;sht71.c: 122: break;
 10403  13CA  2BD3               	goto	l4354
 10404  13CB                     l4352:	
 10405  13CB  0877               	movf	measureSHT71@mode,w
 10406                           
 10407                           ; Switch size 1, requested type "space"
 10408                           ; Number of cases is 2, Range of values is 2 to 3
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            7     4 (average)
 10412                           ; direct_byte           17    11 (fixed)
 10413                           ; jumptable            263     9 (fixed)
 10414                           ;	Chosen strategy is simple_byte
 10415  13CC  3A02               	xorlw	2	; case 2
 10416  13CD  1903               	skipnz
 10417  13CE  2B8F               	goto	l4326
 10418  13CF  3A01               	xorlw	1	; case 3
 10419  13D0  1903               	skipnz
 10420  13D1  2BAD               	goto	l4338
 10421  13D2  2BD3               	goto	l4354
 10422  13D3                     l4354:	
 10423                           
 10424                           ;sht71.c: 125: *p_checksum = readByteSHT71(0);
 10425  13D3  0876               	movf	measureSHT71@p_checksum,w
 10426  13D4  0084               	movwf	4
 10427  13D5  3000               	movlw	0
 10428  13D6  23DB               	fcall	_readByteSHT71
 10429  13D7  1383               	bcf	3,7	;select IRP bank0
 10430  13D8  0080               	movwf	0
 10431                           
 10432                           ;sht71.c: 126: return error;
 10433  13D9  0821               	movf	measureSHT71@error,w
 10434  13DA  0008               	return
 10435  13DB                     __end_of_measureSHT71:	
 10436  13DB                     __ptext18:	
 10437 ;; *************** function _readByteSHT71 *****************
 10438 ;; Defined at:
 10439 ;;		line 148 in file "sht71.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;  ack             1    wreg     unsigned char 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  ack             1    3[COMMON] unsigned char 
 10444 ;;  i               1    5[COMMON] unsigned char 
 10445 ;;  res             1    4[COMMON] unsigned char 
 10446 ;; Return value:  Size  Location     Type
 10447 ;;                  1    wreg      unsigned char 
 10448 ;; Registers used:
 10449 ;;		wreg, status,2, status,0
 10450 ;; Tracked objects:
 10451 ;;		On entry : 200/0
 10452 ;;		On exit  : 300/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10455 ;;      Params:         0       0       0       0       0
 10456 ;;      Locals:         3       0       0       0       0
 10457 ;;      Temps:          1       0       0       0       0
 10458 ;;      Totals:         4       0       0       0       0
 10459 ;;Total ram usage:        4 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    1
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_measureSHT71
 10466 ;;		_readStatusRegSHT71
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function _readByteSHT71
 10472  13DB                     _readByteSHT71:	
 10473                           
 10474                           ;incstack = 0
 10475                           ; Regs used in _readByteSHT71: [wreg+status,2+status,0]
 10476                           ;readByteSHT71@ack stored from wreg
 10477  13DB  00F3               	movwf	readByteSHT71@ack
 10478                           
 10479                           ;sht71.c: 149: unsigned char i, res=0;
 10480  13DC  01F4               	clrf	readByteSHT71@res
 10481                           
 10482                           ;sht71.c: 150: TRISBbits.TRISB7 = 1;
 10483  13DD  1683               	bsf	3,5	;RP0=1, select bank1
 10484  13DE  1786               	bsf	6,7	;volatile
 10485                           
 10486                           ;sht71.c: 151: for (i=0x80;i>0;i/=2)
 10487  13DF  3080               	movlw	128
 10488  13E0  00F5               	movwf	readByteSHT71@i
 10489  13E1                     l148:	
 10490                           
 10491                           ;sht71.c: 152: {
 10492                           ;sht71.c: 153: RB6 = 1;
 10493  13E1  1283               	bcf	3,5	;RP0=0, select bank0
 10494  13E2  1706               	bsf	6,6	;volatile
 10495                           
 10496                           ;sht71.c: 154: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10497  13E3  2BE4               	nop2	;2 cycle nop
 10498  13E4  2BE5               	nop2	;2 cycle nop
 10499                           
 10500                           ;sht71.c: 155: if (RB7) res = (res | i);
 10501  13E5  1283               	bcf	3,5	;RP0=0, select bank0
 10502  13E6  1303               	bcf	3,6	;RP1=0, select bank0
 10503  13E7  0875               	movf	readByteSHT71@i,w
 10504  13E8  1B86               	btfsc	6,7	;volatile
 10505  13E9  04F4               	iorwf	readByteSHT71@res,f
 10506                           
 10507                           ;sht71.c: 156: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10508  13EA  2BEB               	nop2	;2 cycle nop
 10509  13EB  2BEC               	nop2	;2 cycle nop
 10510                           
 10511                           ;sht71.c: 157: RB6 = 0;
 10512  13EC  1283               	bcf	3,5	;RP0=0, select bank0
 10513  13ED  1303               	bcf	3,6	;RP1=0, select bank0
 10514  13EE  1306               	bcf	6,6	;volatile
 10515  13EF  1003               	clrc
 10516  13F0  0CF5               	rrf	readByteSHT71@i,f
 10517  13F1  0875               	movf	readByteSHT71@i,w
 10518  13F2  1D03               	btfss	3,2
 10519  13F3  2BE1               	goto	l148
 10520                           
 10521                           ;sht71.c: 158: }
 10522                           ;sht71.c: 159: TRISBbits.TRISB7 = 0;
 10523  13F4  1683               	bsf	3,5	;RP0=1, select bank1
 10524  13F5  1386               	bcf	6,7	;volatile
 10525                           
 10526                           ;sht71.c: 160: RB7 = !ack;
 10527  13F6  0873               	movf	readByteSHT71@ack,w
 10528  13F7  1D03               	btfss	3,2
 10529  13F8  2BFD               	goto	u4130
 10530  13F9  1283               	bcf	3,5	;RP0=0, select bank0
 10531  13FA  1303               	bcf	3,6	;RP1=0, select bank0
 10532  13FB  1786               	bsf	6,7	;volatile
 10533  13FC  2C00               	goto	l3872
 10534  13FD                     u4130:	
 10535  13FD  1283               	bcf	3,5	;RP0=0, select bank0
 10536  13FE  1303               	bcf	3,6	;RP1=0, select bank0
 10537  13FF  1386               	bcf	6,7	;volatile
 10538  1400                     l3872:	
 10539                           
 10540                           ;sht71.c: 161: RB6 = 1;
 10541  1400  1706               	bsf	6,6	;volatile
 10542                           
 10543                           ;sht71.c: 162: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10544  1401  3003               	movlw	3
 10545  1402  00F2               	movwf	??_readByteSHT71
 10546  1403                     u8047:	
 10547  1403  0BF2               	decfsz	??_readByteSHT71,f
 10548  1404  2C03               	goto	u8047
 10549                           
 10550                           ;sht71.c: 163: RB6 = 0;
 10551  1405  1283               	bcf	3,5	;RP0=0, select bank0
 10552  1406  1303               	bcf	3,6	;RP1=0, select bank0
 10553  1407  1306               	bcf	6,6	;volatile
 10554                           
 10555                           ;sht71.c: 164: RB7 = 1;
 10556  1408  1786               	bsf	6,7	;volatile
 10557                           
 10558                           ;sht71.c: 165: return res;
 10559  1409  0874               	movf	readByteSHT71@res,w
 10560  140A  0008               	return
 10561  140B                     __end_of_readByteSHT71:	
 10562  140B                     __ptext20:	
 10563 ;; *************** function _tranStartSHT71 *****************
 10564 ;; Defined at:
 10565 ;;		line 15 in file "sht71.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;		None
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;		None               void
 10572 ;; Registers used:
 10573 ;;		None
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/100
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10579 ;;      Params:         0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0
 10582 ;;      Totals:         0       0       0       0       0
 10583 ;;Total ram usage:        0 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    1
 10586 ;; This function calls:
 10587 ;;		Nothing
 10588 ;; This function is called by:
 10589 ;;		_measureSHT71
 10590 ;;		_connectionResetSHT71
 10591 ;;		_readStatusRegSHT71
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function _tranStartSHT71
 10597  140B                     _tranStartSHT71:	
 10598                           
 10599                           ;sht71.c: 16: TRISBbits.TRISB7 = 0;
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _tranStartSHT71: []
 10603  140B  1683               	bsf	3,5	;RP0=1, select bank1
 10604  140C  1303               	bcf	3,6	;RP1=0, select bank1
 10605  140D  1386               	bcf	6,7	;volatile
 10606                           
 10607                           ;sht71.c: 17: RB7 = 1;
 10608  140E  1283               	bcf	3,5	;RP0=0, select bank0
 10609  140F  1786               	bsf	6,7	;volatile
 10610                           
 10611                           ;sht71.c: 18: RB6 = 0;
 10612  1410  1306               	bcf	6,6	;volatile
 10613                           
 10614                           ;sht71.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10615  1411  2C12               	nop2	;2 cycle nop
 10616  1412  2C13               	nop2	;2 cycle nop
 10617                           
 10618                           ;sht71.c: 20: RB6 = 1;
 10619  1413  1283               	bcf	3,5	;RP0=0, select bank0
 10620  1414  1303               	bcf	3,6	;RP1=0, select bank0
 10621  1415  1706               	bsf	6,6	;volatile
 10622                           
 10623                           ;sht71.c: 21: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10624  1416  2C17               	nop2	;2 cycle nop
 10625  1417  2C18               	nop2	;2 cycle nop
 10626                           
 10627                           ;sht71.c: 22: RB7 = 0;
 10628  1418  1283               	bcf	3,5	;RP0=0, select bank0
 10629  1419  1303               	bcf	3,6	;RP1=0, select bank0
 10630  141A  1386               	bcf	6,7	;volatile
 10631                           
 10632                           ;sht71.c: 23: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10633  141B  2C1C               	nop2	;2 cycle nop
 10634                           
 10635                           ;sht71.c: 24: RB6 = 0;
 10636  141C  1283               	bcf	3,5	;RP0=0, select bank0
 10637  141D  1303               	bcf	3,6	;RP1=0, select bank0
 10638  141E  1306               	bcf	6,6	;volatile
 10639                           
 10640                           ;sht71.c: 25: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10641  141F  2C20               	nop2	;2 cycle nop
 10642  1420  2C21               	nop2	;2 cycle nop
 10643                           
 10644                           ;sht71.c: 26: RB6 = 1;
 10645  1421  1283               	bcf	3,5	;RP0=0, select bank0
 10646  1422  1303               	bcf	3,6	;RP1=0, select bank0
 10647  1423  1706               	bsf	6,6	;volatile
 10648                           
 10649                           ;sht71.c: 27: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10650  1424  2C25               	nop2	;2 cycle nop
 10651  1425  2C26               	nop2	;2 cycle nop
 10652                           
 10653                           ;sht71.c: 28: RB7 = 1;
 10654  1426  1283               	bcf	3,5	;RP0=0, select bank0
 10655  1427  1303               	bcf	3,6	;RP1=0, select bank0
 10656  1428  1786               	bsf	6,7	;volatile
 10657                           
 10658                           ;sht71.c: 29: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10659  1429  2C2A               	nop2	;2 cycle nop
 10660                           
 10661                           ;sht71.c: 30: RB6 = 0;
 10662  142A  1283               	bcf	3,5	;RP0=0, select bank0
 10663  142B  1303               	bcf	3,6	;RP1=0, select bank0
 10664  142C  1306               	bcf	6,6	;volatile
 10665                           
 10666                           ;sht71.c: 31: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10667  142D  2C2E               	nop2	;2 cycle nop
 10668  142E  2C2F               	nop2	;2 cycle nop
 10669                           
 10670                           ;sht71.c: 32: RB7 = 0;
 10671  142F  1283               	bcf	3,5	;RP0=0, select bank0
 10672  1430  1303               	bcf	3,6	;RP1=0, select bank0
 10673  1431  1386               	bcf	6,7	;volatile
 10674                           
 10675                           ;sht71.c: 33: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10676  1432  2C33               	nop2	;2 cycle nop
 10677  1433  2C34               	nop2	;2 cycle nop
 10678  1434  0008               	return
 10679  1435                     __end_of_tranStartSHT71:	
 10680  1435                     __ptext19:	
 10681 ;; *************** function _connectionResetSHT71 *****************
 10682 ;; Defined at:
 10683 ;;		line 191 in file "sht71.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  i               1    2[COMMON] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0, pclath, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : B00/100
 10694 ;;		On exit  : 300/100
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10697 ;;      Params:         0       0       0       0       0
 10698 ;;      Locals:         1       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0
 10700 ;;      Totals:         1       0       0       0       0
 10701 ;;Total ram usage:        1 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    2
 10704 ;; This function calls:
 10705 ;;		_tranStartSHT71
 10706 ;; This function is called by:
 10707 ;;		_getResSHT71
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _connectionResetSHT71
 10713  1435                     _connectionResetSHT71:	
 10714                           
 10715                           ;sht71.c: 192: unsigned char i;
 10716                           ;sht71.c: 193: TRISBbits.TRISB7 = 0;
 10717                           
 10718                           ;incstack = 0
 10719                           ; Regs used in _connectionResetSHT71: [wreg+status,2+status,0+pclath+cstack]
 10720  1435  1386               	bcf	6,7	;volatile
 10721                           
 10722                           ;sht71.c: 194: RB7 = 1;
 10723  1436  1283               	bcf	3,5	;RP0=0, select bank0
 10724  1437  1786               	bsf	6,7	;volatile
 10725                           
 10726                           ;sht71.c: 195: RB6=0;
 10727  1438  1306               	bcf	6,6	;volatile
 10728                           
 10729                           ;sht71.c: 196: for(i=0;i<9;i++)
 10730  1439  01F2               	clrf	connectionResetSHT71@i
 10731  143A                     l161:	
 10732                           
 10733                           ;sht71.c: 197: { RB6 = 1;
 10734  143A  1283               	bcf	3,5	;RP0=0, select bank0
 10735  143B  1303               	bcf	3,6	;RP1=0, select bank0
 10736  143C  1706               	bsf	6,6	;volatile
 10737                           
 10738                           ;sht71.c: 198: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10739  143D  2C3E               	nop2	;2 cycle nop
 10740                           
 10741                           ;sht71.c: 199: RB6 = 0;
 10742  143E  1283               	bcf	3,5	;RP0=0, select bank0
 10743  143F  1303               	bcf	3,6	;RP1=0, select bank0
 10744  1440  1306               	bcf	6,6	;volatile
 10745                           
 10746                           ;sht71.c: 200: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10747  1441  2C42               	nop2	;2 cycle nop
 10748  1442  3009               	movlw	9
 10749  1443  0AF2               	incf	connectionResetSHT71@i,f
 10750  1444  0272               	subwf	connectionResetSHT71@i,w
 10751  1445  1C03               	skipc
 10752  1446  2C3A               	goto	l161
 10753                           
 10754                           ;sht71.c: 201: }
 10755                           ;sht71.c: 202: tranStartSHT71();
 10756  1447  240B               	fcall	_tranStartSHT71
 10757                           
 10758                           ;sht71.c: 203: TRISBbits.TRISB7 = 1;
 10759  1448  1683               	bsf	3,5	;RP0=1, select bank1
 10760  1449  1303               	bcf	3,6	;RP1=0, select bank1
 10761  144A  1786               	bsf	6,7	;volatile
 10762  144B  0008               	return
 10763  144C                     __end_of_connectionResetSHT71:	
 10764  144C                     __ptext17:	
 10765 ;; *************** function _writeByteSHT71 *****************
 10766 ;; Defined at:
 10767 ;;		line 168 in file "sht71.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;  cmd             1    wreg     unsigned char 
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;  cmd             1    3[COMMON] unsigned char 
 10772 ;;  i               1    5[COMMON] unsigned char 
 10773 ;;  error           1    4[COMMON] unsigned char 
 10774 ;; Return value:  Size  Location     Type
 10775 ;;                  1    wreg      unsigned char 
 10776 ;; Registers used:
 10777 ;;		wreg, status,2, status,0
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/100
 10780 ;;		On exit  : 300/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10783 ;;      Params:         0       0       0       0       0
 10784 ;;      Locals:         3       0       0       0       0
 10785 ;;      Temps:          1       0       0       0       0
 10786 ;;      Totals:         4       0       0       0       0
 10787 ;;Total ram usage:        4 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    1
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_measureSHT71
 10794 ;;		_readStatusRegSHT71
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _writeByteSHT71
 10800  144C                     _writeByteSHT71:	
 10801                           
 10802                           ;incstack = 0
 10803                           ; Regs used in _writeByteSHT71: [wreg+status,2+status,0]
 10804                           ;writeByteSHT71@cmd stored from wreg
 10805  144C  00F3               	movwf	writeByteSHT71@cmd
 10806                           
 10807                           ;sht71.c: 170: TRISBbits.TRISB7 = 0;
 10808  144D  1683               	bsf	3,5	;RP0=1, select bank1
 10809  144E  1303               	bcf	3,6	;RP1=0, select bank1
 10810  144F  1386               	bcf	6,7	;volatile
 10811                           
 10812                           ;sht71.c: 172: for (i=0x80;i>0;i/=2)
 10813  1450  3080               	movlw	128
 10814  1451  00F5               	movwf	writeByteSHT71@i
 10815  1452                     l3830:	
 10816                           
 10817                           ;sht71.c: 173: {
 10818                           ;sht71.c: 174: if (i & cmd)
 10819  1452  0875               	movf	writeByteSHT71@i,w
 10820  1453  0573               	andwf	writeByteSHT71@cmd,w
 10821  1454  1903               	btfsc	3,2
 10822  1455  2C59               	goto	l156
 10823                           
 10824                           ;sht71.c: 175: RB7 = 1;
 10825  1456  1283               	bcf	3,5	;RP0=0, select bank0
 10826  1457  1786               	bsf	6,7	;volatile
 10827  1458  2C5B               	goto	l157
 10828  1459                     l156:	
 10829                           
 10830                           ;sht71.c: 176: else RB7 = 0;
 10831  1459  1283               	bcf	3,5	;RP0=0, select bank0
 10832  145A  1386               	bcf	6,7	;volatile
 10833  145B                     l157:	
 10834                           
 10835                           ;sht71.c: 177: RB6 = 1;
 10836  145B  1706               	bsf	6,6	;volatile
 10837                           
 10838                           ;sht71.c: 178: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10839  145C  3003               	movlw	3
 10840  145D  00F2               	movwf	??_writeByteSHT71
 10841  145E                     u8037:	
 10842  145E  0BF2               	decfsz	??_writeByteSHT71,f
 10843  145F  2C5E               	goto	u8037
 10844                           
 10845                           ;sht71.c: 179: RB6 = 0;
 10846  1460  1283               	bcf	3,5	;RP0=0, select bank0
 10847  1461  1303               	bcf	3,6	;RP1=0, select bank0
 10848  1462  1306               	bcf	6,6	;volatile
 10849  1463  1003               	clrc
 10850  1464  0CF5               	rrf	writeByteSHT71@i,f
 10851  1465  0875               	movf	writeByteSHT71@i,w
 10852  1466  1D03               	btfss	3,2
 10853  1467  2C52               	goto	l3830
 10854                           
 10855                           ;sht71.c: 180: }
 10856                           ;sht71.c: 181: RB7 = 1;
 10857  1468  1786               	bsf	6,7	;volatile
 10858                           
 10859                           ;sht71.c: 182: TRISBbits.TRISB7 = 1;
 10860  1469  1683               	bsf	3,5	;RP0=1, select bank1
 10861  146A  1786               	bsf	6,7	;volatile
 10862                           
 10863                           ;sht71.c: 183: RB6 = 1;
 10864  146B  1283               	bcf	3,5	;RP0=0, select bank0
 10865  146C  1706               	bsf	6,6	;volatile
 10866                           
 10867                           ;sht71.c: 184: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10868  146D  2C6E               	nop2	;2 cycle nop
 10869  146E  2C6F               	nop2	;2 cycle nop
 10870                           
 10871                           ;sht71.c: 185: error = RB7;
 10872  146F  3000               	movlw	0
 10873  1470  1283               	bcf	3,5	;RP0=0, select bank0
 10874  1471  1303               	bcf	3,6	;RP1=0, select bank0
 10875  1472  1B86               	btfsc	6,7	;volatile
 10876  1473  3001               	movlw	1
 10877  1474  00F4               	movwf	writeByteSHT71@error
 10878                           
 10879                           ;sht71.c: 186: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10880  1475  2C76               	nop2	;2 cycle nop
 10881  1476  2C77               	nop2	;2 cycle nop
 10882                           
 10883                           ;sht71.c: 187: RB6 = 0;
 10884  1477  1283               	bcf	3,5	;RP0=0, select bank0
 10885  1478  1303               	bcf	3,6	;RP1=0, select bank0
 10886  1479  1306               	bcf	6,6	;volatile
 10887                           
 10888                           ;sht71.c: 188: return error;
 10889  147A  0874               	movf	writeByteSHT71@error,w
 10890  147B  0008               	return
 10891  147C                     __end_of_writeByteSHT71:	
 10892  147C                     __ptext30:	
 10893 ;; *************** function _scale *****************
 10894 ;; Defined at:
 10895 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;  scl             1    wreg     char 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  scl             1   33[BANK0 ] char 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  3   23[BANK0 ] char 
 10902 ;; Registers used:
 10903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10904 ;; Tracked objects:
 10905 ;;		On entry : 300/100
 10906 ;;		On exit  : 300/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10909 ;;      Params:         0       3       0       0       0
 10910 ;;      Locals:         0       4       0       0       0
 10911 ;;      Temps:          0       4       0       0       0
 10912 ;;      Totals:         0      11       0       0       0
 10913 ;;Total ram usage:       11 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    3
 10916 ;; This function calls:
 10917 ;;		___awdiv
 10918 ;;		___awmod
 10919 ;;		___bmul
 10920 ;;		___ftmul
 10921 ;; This function is called by:
 10922 ;;		_sprintf
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function _scale
 10928  147C                     _scale:	
 10929                           
 10930                           ;incstack = 0
 10931                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10932                           ;scale@scl stored from wreg
 10933  147C  1283               	bcf	3,5	;RP0=0, select bank0
 10934  147D  00C1               	movwf	scale@scl
 10935                           
 10936                           ;doprnt.c: 428: if(scl < 0) {
 10937  147E  1FC1               	btfss	scale@scl,7
 10938  147F  2D44               	goto	l5344
 10939                           
 10940                           ;doprnt.c: 429: scl = -scl;
 10941  1480  09C1               	comf	scale@scl,f
 10942  1481  0AC1               	incf	scale@scl,f
 10943                           
 10944                           ;doprnt.c: 430: if(scl>=110)
 10945  1482  0841               	movf	scale@scl,w
 10946  1483  3A80               	xorlw	128
 10947  1484  3E12               	addlw	-238
 10948  1485  1C03               	skipc
 10949  1486  2CEB               	goto	l5334
 10950                           
 10951                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10952  1487  278B  160A  118A   	fcall	PL48	;call to abstracted procedure
 10953  148A  2653  160A  118A   	fcall	___awmod
 10954  148D  0873               	movf	?___awmod+1,w
 10955  148E  00A3               	movwf	___awdiv@dividend+1
 10956  148F  0872               	movf	?___awmod,w
 10957  1490  00A2               	movwf	___awdiv@dividend
 10958  1491  260E  160A  118A   	fcall	___awdiv
 10959  1494  27CF  160A  118A   	fcall	PL78	;call to abstracted procedure
 10960  1497  27A9               	fcall	PL64	;call to abstracted procedure
 10961  1498  160A  158A  2000  160A  118A  	fcall	stringtab
 10962  149D  00A8               	movwf	___ftmul@f1
 10963  149E  160A  158A  2000  160A  118A  	fcall	stringtab
 10964  14A3  00A9               	movwf	___ftmul@f1+1
 10965  14A4  160A  158A  2000  160A  118A  	fcall	stringtab
 10966  14A9  27B7  160A  118A   	fcall	PL70	;call to abstracted procedure
 10967  14AC  1BA2               	btfsc	___awdiv@dividend,7
 10968  14AD  03A3               	decf	___awdiv@dividend+1,f
 10969  14AE  260E  160A  118A   	fcall	___awdiv
 10970  14B1  276F  160A  118A   	fcall	PL40	;call to abstracted procedure
 10971  14B4  27DF               	fcall	PL86	;call to abstracted procedure
 10972  14B5  160A  158A  2000  160A  118A  	fcall	stringtab
 10973  14BA  00AB               	movwf	___ftmul@f2
 10974  14BB  160A  158A  2000  160A  118A  	fcall	stringtab
 10975  14C0  00AC               	movwf	___ftmul@f2+1
 10976  14C1  160A  158A  2000  160A  118A  	fcall	stringtab
 10977  14C6  00AD               	movwf	___ftmul@f2+2
 10978  14C7  2690  160A  118A   	fcall	___ftmul
 10979                           
 10980                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10981  14CA  2777  160A  118A   	fcall	PL42	;call to abstracted procedure
 10982  14CD  1BF4               	btfsc	___awmod@dividend,7
 10983  14CE  03F5               	decf	___awmod@dividend+1,f
 10984  14CF  2653  160A  118A   	fcall	___awmod
 10985  14D2  274D               	fcall	PL22	;call to abstracted procedure
 10986  14D3  160A  158A  2000  160A  118A  	fcall	stringtab
 10987  14D8  00A8               	movwf	___ftmul@f1
 10988  14D9  160A  158A  2000  160A  118A  	fcall	stringtab
 10989  14DE  00A9               	movwf	___ftmul@f1+1
 10990  14DF  160A  158A  2000  160A  118A  	fcall	stringtab
 10991  14E4  27C7  160A  118A   	fcall	PL74	;call to abstracted procedure
 10992  14E7  2690  160A  118A   	fcall	___ftmul
 10993  14EA  2F5B               	ljmp	PL30	;call to abstracted procedure
 10994  14EB                     l5334:	
 10995                           
 10996                           ;doprnt.c: 432: else if(scl > 10)
 10997  14EB  0841               	movf	scale@scl,w
 10998  14EC  3A80               	xorlw	128
 10999  14ED  3E75               	addlw	-139
 11000  14EE  1C03               	skipc
 11001  14EF  2D2C               	goto	l5340
 11002                           
 11003                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 11004  14F0  27B0  160A  118A   	fcall	PL66	;call to abstracted procedure
 11005  14F3  1BF4               	btfsc	___awmod@dividend,7
 11006  14F4  03F5               	decf	___awmod@dividend+1,f
 11007  14F5  2653  160A  118A   	fcall	___awmod
 11008  14F8  274D               	fcall	PL22	;call to abstracted procedure
 11009  14F9  160A  158A  2000  160A  118A  	fcall	stringtab
 11010  14FE  00A8               	movwf	___ftmul@f1
 11011  14FF  160A  158A  2000  160A  118A  	fcall	stringtab
 11012  1504  00A9               	movwf	___ftmul@f1+1
 11013  1505  160A  158A  2000  160A  118A  	fcall	stringtab
 11014  150A  27D7  160A  118A   	fcall	PL80	;call to abstracted procedure
 11015  150D  1BA2               	btfsc	___awdiv@dividend,7
 11016  150E  03A3               	decf	___awdiv@dividend+1,f
 11017  150F  260E  160A  118A   	fcall	___awdiv
 11018  1512  276F  160A  118A   	fcall	PL40	;call to abstracted procedure
 11019  1515  27A9               	fcall	PL64	;call to abstracted procedure
 11020  1516  160A  158A  2000  160A  118A  	fcall	stringtab
 11021  151B  00AB               	movwf	___ftmul@f2
 11022  151C  160A  158A  2000  160A  118A  	fcall	stringtab
 11023  1521  00AC               	movwf	___ftmul@f2+1
 11024  1522  160A  158A  2000  160A  118A  	fcall	stringtab
 11025  1527  00AD               	movwf	___ftmul@f2+2
 11026  1528  2690  160A  118A   	fcall	___ftmul
 11027  152B  2F5B               	ljmp	PL30	;call to abstracted procedure
 11028  152C                     l5340:	
 11029                           
 11030                           ;doprnt.c: 434: return _npowers_[scl];
 11031  152C  3003               	movlw	3
 11032  152D  00F8               	movwf	___bmul@multiplicand
 11033  152E  0841               	movf	scale@scl,w
 11034  152F  26FD  160A  118A   	fcall	___bmul
 11035  1532  2784               	fcall	PL44	;call to abstracted procedure
 11036  1533  160A  158A  2000  160A  118A  	fcall	stringtab
 11037  1538  00B7               	movwf	?_scale
 11038  1539  160A  158A  2000  160A  118A  	fcall	stringtab
 11039  153E  00B8               	movwf	?_scale+1
 11040  153F  160A  158A  2000   	fcall	stringtab
 11041  1542  00B9               	movwf	?_scale+2
 11042  1543  0008               	return
 11043  1544                     l5344:	
 11044                           
 11045                           ;doprnt.c: 435: }
 11046                           ;doprnt.c: 436: if(scl>=110)
 11047  1544  0841               	movf	scale@scl,w
 11048  1545  3A80               	xorlw	128
 11049  1546  3E12               	addlw	-238
 11050  1547  1C03               	skipc
 11051  1548  2DB1               	goto	l5352
 11052                           
 11053                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11054  1549  278B  160A  118A   	fcall	PL48	;call to abstracted procedure
 11055  154C  2653  160A  118A   	fcall	___awmod
 11056  154F  0873               	movf	?___awmod+1,w
 11057  1550  00A3               	movwf	___awdiv@dividend+1
 11058  1551  0872               	movf	?___awmod,w
 11059  1552  00A2               	movwf	___awdiv@dividend
 11060  1553  260E  160A  118A   	fcall	___awdiv
 11061  1556  27CF  160A  118A   	fcall	PL78	;call to abstracted procedure
 11062  1559  27F3               	fcall	PL94	;call to abstracted procedure
 11063  155A  160A  158A  2000  160A  118A  	fcall	stringtab
 11064  155F  00A8               	movwf	___ftmul@f1
 11065  1560  160A  158A  2000  160A  118A  	fcall	stringtab
 11066  1565  00A9               	movwf	___ftmul@f1+1
 11067  1566  160A  158A  2000  160A  118A  	fcall	stringtab
 11068  156B  27B7  160A  118A   	fcall	PL70	;call to abstracted procedure
 11069  156E  1BA2               	btfsc	___awdiv@dividend,7
 11070  156F  03A3               	decf	___awdiv@dividend+1,f
 11071  1570  260E  160A  118A   	fcall	___awdiv
 11072  1573  276F               	fcall	PL40	;call to abstracted procedure
 11073  1574  3E6F               	addlw	low ((__powers_| (0+32768)+54))
 11074  1575  0084               	movwf	4
 11075  1576  3098               	movlw	high ((__powers_| (0+32768)+54))
 11076  1577  1803               	skipnc
 11077  1578  3E01               	addlw	1
 11078  1579  00FF               	movwf	127
 11079  157A  160A  158A  2000  160A  118A  	fcall	stringtab
 11080  157F  00AB               	movwf	___ftmul@f2
 11081  1580  160A  158A  2000  160A  118A  	fcall	stringtab
 11082  1585  00AC               	movwf	___ftmul@f2+1
 11083  1586  160A  158A  2000  160A  118A  	fcall	stringtab
 11084  158B  00AD               	movwf	___ftmul@f2+2
 11085  158C  2690  160A  118A   	fcall	___ftmul
 11086                           
 11087                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 11088  158F  2777  160A  118A   	fcall	PL42	;call to abstracted procedure
 11089  1592  1BF4               	btfsc	___awmod@dividend,7
 11090  1593  03F5               	decf	___awmod@dividend+1,f
 11091  1594  2653  160A  118A   	fcall	___awmod
 11092  1597  0872               	movf	?___awmod,w
 11093  1598  2762               	fcall	PL32	;call to abstracted procedure
 11094  1599  160A  158A  2000  160A  118A  	fcall	stringtab
 11095  159E  00A8               	movwf	___ftmul@f1
 11096  159F  160A  158A  2000  160A  118A  	fcall	stringtab
 11097  15A4  00A9               	movwf	___ftmul@f1+1
 11098  15A5  160A  158A  2000  160A  118A  	fcall	stringtab
 11099  15AA  27C7  160A  118A   	fcall	PL74	;call to abstracted procedure
 11100  15AD  2690  160A  118A   	fcall	___ftmul
 11101  15B0  2F5B               	ljmp	PL30	;call to abstracted procedure
 11102  15B1                     l5352:	
 11103                           
 11104                           ;doprnt.c: 438: else if(scl > 10)
 11105  15B1  0841               	movf	scale@scl,w
 11106  15B2  3A80               	xorlw	128
 11107  15B3  3E75               	addlw	-139
 11108  15B4  1C03               	skipc
 11109  15B5  2DF3               	goto	l5358
 11110                           
 11111                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 11112  15B6  27B0  160A  118A   	fcall	PL66	;call to abstracted procedure
 11113  15B9  1BF4               	btfsc	___awmod@dividend,7
 11114  15BA  03F5               	decf	___awmod@dividend+1,f
 11115  15BB  2653  160A  118A   	fcall	___awmod
 11116  15BE  0872               	movf	?___awmod,w
 11117  15BF  2762               	fcall	PL32	;call to abstracted procedure
 11118  15C0  160A  158A  2000  160A  118A  	fcall	stringtab
 11119  15C5  00A8               	movwf	___ftmul@f1
 11120  15C6  160A  158A  2000  160A  118A  	fcall	stringtab
 11121  15CB  00A9               	movwf	___ftmul@f1+1
 11122  15CC  160A  158A  2000  160A  118A  	fcall	stringtab
 11123  15D1  27D7  160A  118A   	fcall	PL80	;call to abstracted procedure
 11124  15D4  1BA2               	btfsc	___awdiv@dividend,7
 11125  15D5  03A3               	decf	___awdiv@dividend+1,f
 11126  15D6  260E  160A  118A   	fcall	___awdiv
 11127  15D9  276F  160A  118A   	fcall	PL40	;call to abstracted procedure
 11128  15DC  27F3               	fcall	PL94	;call to abstracted procedure
 11129  15DD  160A  158A  2000  160A  118A  	fcall	stringtab
 11130  15E2  00AB               	movwf	___ftmul@f2
 11131  15E3  160A  158A  2000  160A  118A  	fcall	stringtab
 11132  15E8  00AC               	movwf	___ftmul@f2+1
 11133  15E9  160A  158A  2000  160A  118A  	fcall	stringtab
 11134  15EE  00AD               	movwf	___ftmul@f2+2
 11135  15EF  2690  160A  118A   	fcall	___ftmul
 11136  15F2  2F5B               	ljmp	PL30	;call to abstracted procedure
 11137  15F3                     l5358:	
 11138                           
 11139                           ;doprnt.c: 440: return _powers_[scl];
 11140  15F3  3003               	movlw	3
 11141  15F4  00F8               	movwf	___bmul@multiplicand
 11142  15F5  0841               	movf	scale@scl,w
 11143  15F6  26FD               	fcall	___bmul
 11144  15F7  3E39               	addlw	low (__powers_| (0+32768))
 11145  15F8  0084               	movwf	4
 11146  15F9  3098               	movlw	high (__powers_| (0+32768))
 11147  15FA  1803               	skipnc
 11148  15FB  3E01               	addlw	1
 11149  15FC  00FF               	movwf	127
 11150  15FD  160A  158A  2000  160A  118A  	fcall	stringtab
 11151  1602  00B7               	movwf	?_scale
 11152  1603  160A  158A  2000  160A  118A  	fcall	stringtab
 11153  1608  00B8               	movwf	?_scale+1
 11154  1609  160A  158A  2000   	fcall	stringtab
 11155  160C  00B9               	movwf	?_scale+2
 11156  160D  0008               	return
 11157  160E                     __end_of_scale:	
 11158  160E                     __ptext32:	
 11159 ;; *************** function ___awdiv *****************
 11160 ;; Defined at:
 11161 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  divisor         2    0[BANK0 ] int 
 11164 ;;  dividend        2    2[BANK0 ] int 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  quotient        2    6[BANK0 ] int 
 11167 ;;  sign            1    5[BANK0 ] unsigned char 
 11168 ;;  counter         1    4[BANK0 ] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  2    0[BANK0 ] int 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0
 11173 ;; Tracked objects:
 11174 ;;		On entry : 300/0
 11175 ;;		On exit  : 300/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11178 ;;      Params:         0       4       0       0       0
 11179 ;;      Locals:         0       4       0       0       0
 11180 ;;      Temps:          0       0       0       0       0
 11181 ;;      Totals:         0       8       0       0       0
 11182 ;;Total ram usage:        8 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    1
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_scale
 11189 ;;		_sprintf
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           
 11194                           ;psect for function ___awdiv
 11195  160E                     ___awdiv:	
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11199  160E  01A5               	clrf	___awdiv@sign
 11200  160F  1FA1               	btfss	___awdiv@divisor+1,7
 11201  1610  2E18               	goto	l5066
 11202  1611  09A0               	comf	___awdiv@divisor,f
 11203  1612  09A1               	comf	___awdiv@divisor+1,f
 11204  1613  0AA0               	incf	___awdiv@divisor,f
 11205  1614  1903               	skipnz
 11206  1615  0AA1               	incf	___awdiv@divisor+1,f
 11207  1616  01A5               	clrf	___awdiv@sign
 11208  1617  0AA5               	incf	___awdiv@sign,f
 11209  1618                     l5066:	
 11210  1618  1FA3               	btfss	___awdiv@dividend+1,7
 11211  1619  2E21               	goto	l5072
 11212  161A  09A2               	comf	___awdiv@dividend,f
 11213  161B  09A3               	comf	___awdiv@dividend+1,f
 11214  161C  0AA2               	incf	___awdiv@dividend,f
 11215  161D  1903               	skipnz
 11216  161E  0AA3               	incf	___awdiv@dividend+1,f
 11217  161F  3001               	movlw	1
 11218  1620  06A5               	xorwf	___awdiv@sign,f
 11219  1621                     l5072:	
 11220  1621  01A6               	clrf	___awdiv@quotient
 11221  1622  01A7               	clrf	___awdiv@quotient+1
 11222  1623  0820               	movf	___awdiv@divisor,w
 11223  1624  0421               	iorwf	___awdiv@divisor+1,w
 11224  1625  1903               	btfsc	3,2
 11225  1626  2E46               	goto	l5094
 11226  1627  01A4               	clrf	___awdiv@counter
 11227  1628                     L22:	
 11228  1628  0AA4               	incf	___awdiv@counter,f
 11229  1629  1BA1               	btfsc	___awdiv@divisor+1,7
 11230  162A  2E2F               	goto	l5082
 11231  162B  1003               	clrc
 11232  162C  0DA0               	rlf	___awdiv@divisor,f
 11233  162D  0DA1               	rlf	___awdiv@divisor+1,f
 11234  162E  2E28               	goto	L22
 11235  162F                     l5082:	
 11236  162F  1003               	clrc
 11237  1630  0DA6               	rlf	___awdiv@quotient,f
 11238  1631  0DA7               	rlf	___awdiv@quotient+1,f
 11239  1632  0821               	movf	___awdiv@divisor+1,w
 11240  1633  0223               	subwf	___awdiv@dividend+1,w
 11241  1634  1D03               	skipz
 11242  1635  2E38               	goto	u5775
 11243  1636  0820               	movf	___awdiv@divisor,w
 11244  1637  0222               	subwf	___awdiv@dividend,w
 11245  1638                     u5775:	
 11246  1638  1C03               	skipc
 11247  1639  2E42               	goto	L23
 11248  163A  0820               	movf	___awdiv@divisor,w
 11249  163B  02A2               	subwf	___awdiv@dividend,f
 11250  163C  0821               	movf	___awdiv@divisor+1,w
 11251  163D  1C03               	skipc
 11252  163E  03A3               	decf	___awdiv@dividend+1,f
 11253  163F  02A3               	subwf	___awdiv@dividend+1,f
 11254  1640  1426               	bsf	___awdiv@quotient,0
 11255  1641  1003               	clrc
 11256  1642                     L23:	
 11257  1642  0CA1               	rrf	___awdiv@divisor+1,f
 11258  1643  0CA0               	rrf	___awdiv@divisor,f
 11259  1644  0BA4               	decfsz	___awdiv@counter,f
 11260  1645  2E2F               	goto	l5082
 11261  1646                     l5094:	
 11262  1646  0825               	movf	___awdiv@sign,w
 11263  1647  1903               	btfsc	3,2
 11264  1648  2E4E               	goto	l5098
 11265  1649  09A6               	comf	___awdiv@quotient,f
 11266  164A  09A7               	comf	___awdiv@quotient+1,f
 11267  164B  0AA6               	incf	___awdiv@quotient,f
 11268  164C  1903               	skipnz
 11269  164D  0AA7               	incf	___awdiv@quotient+1,f
 11270  164E                     l5098:	
 11271  164E  0827               	movf	___awdiv@quotient+1,w
 11272  164F  00A1               	movwf	?___awdiv+1
 11273  1650  0826               	movf	___awdiv@quotient,w
 11274  1651  00A0               	movwf	?___awdiv
 11275  1652  0008               	return
 11276  1653                     __end_of___awdiv:	
 11277  1653                     __ptext31:	
 11278 ;; *************** function ___awmod *****************
 11279 ;; Defined at:
 11280 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;  divisor         2    2[COMMON] int 
 11283 ;;  dividend        2    4[COMMON] int 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;  sign            1    7[COMMON] unsigned char 
 11286 ;;  counter         1    6[COMMON] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  2    2[COMMON] int 
 11289 ;; Registers used:
 11290 ;;		wreg, status,2, status,0
 11291 ;; Tracked objects:
 11292 ;;		On entry : 300/0
 11293 ;;		On exit  : 300/0
 11294 ;;		Unchanged: 300/0
 11295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11296 ;;      Params:         4       0       0       0       0
 11297 ;;      Locals:         2       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0
 11299 ;;      Totals:         6       0       0       0       0
 11300 ;;Total ram usage:        6 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:    1
 11303 ;; This function calls:
 11304 ;;		Nothing
 11305 ;; This function is called by:
 11306 ;;		_scale
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function ___awmod
 11312  1653                     ___awmod:	
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11316  1653  01F7               	clrf	___awmod@sign
 11317  1654  1FF5               	btfss	___awmod@dividend+1,7
 11318  1655  2E5D               	goto	l3244
 11319  1656  09F4               	comf	___awmod@dividend,f
 11320  1657  09F5               	comf	___awmod@dividend+1,f
 11321  1658  0AF4               	incf	___awmod@dividend,f
 11322  1659  1903               	skipnz
 11323  165A  0AF5               	incf	___awmod@dividend+1,f
 11324  165B  01F7               	clrf	___awmod@sign
 11325  165C  0AF7               	incf	___awmod@sign,f
 11326  165D                     l3244:	
 11327  165D  1FF3               	btfss	___awmod@divisor+1,7
 11328  165E  2E64               	goto	l3248
 11329  165F  09F2               	comf	___awmod@divisor,f
 11330  1660  09F3               	comf	___awmod@divisor+1,f
 11331  1661  0AF2               	incf	___awmod@divisor,f
 11332  1662  1903               	skipnz
 11333  1663  0AF3               	incf	___awmod@divisor+1,f
 11334  1664                     l3248:	
 11335  1664  0872               	movf	___awmod@divisor,w
 11336  1665  0473               	iorwf	___awmod@divisor+1,w
 11337  1666  1903               	btfsc	3,2
 11338  1667  2E83               	goto	l3264
 11339  1668  01F6               	clrf	___awmod@counter
 11340  1669                     L20:	
 11341  1669  0AF6               	incf	___awmod@counter,f
 11342  166A  1BF3               	btfsc	___awmod@divisor+1,7
 11343  166B  2E70               	goto	l3256
 11344  166C  1003               	clrc
 11345  166D  0DF2               	rlf	___awmod@divisor,f
 11346  166E  0DF3               	rlf	___awmod@divisor+1,f
 11347  166F  2E69               	goto	L20
 11348  1670                     l3256:	
 11349  1670  0873               	movf	___awmod@divisor+1,w
 11350  1671  0275               	subwf	___awmod@dividend+1,w
 11351  1672  1D03               	skipz
 11352  1673  2E76               	goto	u3095
 11353  1674  0872               	movf	___awmod@divisor,w
 11354  1675  0274               	subwf	___awmod@dividend,w
 11355  1676                     u3095:	
 11356  1676  1C03               	skipc
 11357  1677  2E7F               	goto	L21
 11358  1678  0872               	movf	___awmod@divisor,w
 11359  1679  02F4               	subwf	___awmod@dividend,f
 11360  167A  0873               	movf	___awmod@divisor+1,w
 11361  167B  1C03               	skipc
 11362  167C  03F5               	decf	___awmod@dividend+1,f
 11363  167D  02F5               	subwf	___awmod@dividend+1,f
 11364  167E  1003               	clrc
 11365  167F                     L21:	
 11366  167F  0CF3               	rrf	___awmod@divisor+1,f
 11367  1680  0CF2               	rrf	___awmod@divisor,f
 11368  1681  0BF6               	decfsz	___awmod@counter,f
 11369  1682  2E70               	goto	l3256
 11370  1683                     l3264:	
 11371  1683  0877               	movf	___awmod@sign,w
 11372  1684  1903               	btfsc	3,2
 11373  1685  2E8B               	goto	l3268
 11374  1686  09F4               	comf	___awmod@dividend,f
 11375  1687  09F5               	comf	___awmod@dividend+1,f
 11376  1688  0AF4               	incf	___awmod@dividend,f
 11377  1689  1903               	skipnz
 11378  168A  0AF5               	incf	___awmod@dividend+1,f
 11379  168B                     l3268:	
 11380  168B  0875               	movf	___awmod@dividend+1,w
 11381  168C  00F3               	movwf	?___awmod+1
 11382  168D  0874               	movf	___awmod@dividend,w
 11383  168E  00F2               	movwf	?___awmod
 11384  168F  0008               	return
 11385  1690                     __end_of___awmod:	
 11386  1690                     __ptext37:	
 11387 ;; *************** function ___ftmul *****************
 11388 ;; Defined at:
 11389 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftmul.c"
 11390 ;; Parameters:    Size  Location     Type
 11391 ;;  f1              3    8[BANK0 ] float 
 11392 ;;  f2              3   11[BANK0 ] float 
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
 11395 ;;  sign            1   22[BANK0 ] unsigned char 
 11396 ;;  cntr            1   21[BANK0 ] unsigned char 
 11397 ;;  exp             1   17[BANK0 ] unsigned char 
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  3    8[BANK0 ] float 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2, status,0, pclath, cstack
 11402 ;; Tracked objects:
 11403 ;;		On entry : 300/0
 11404 ;;		On exit  : 300/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11407 ;;      Params:         0       6       0       0       0
 11408 ;;      Locals:         0       6       0       0       0
 11409 ;;      Temps:          0       3       0       0       0
 11410 ;;      Totals:         0      15       0       0       0
 11411 ;;Total ram usage:       15 bytes
 11412 ;; Hardware stack levels used:    1
 11413 ;; Hardware stack levels required when called:    2
 11414 ;; This function calls:
 11415 ;;		___ftpack
 11416 ;; This function is called by:
 11417 ;;		_getTempDS18B20
 11418 ;;		_calcSHT71
 11419 ;;		_fround
 11420 ;;		_scale
 11421 ;;		_sprintf
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function ___ftmul
 11427  1690                     ___ftmul:	
 11428                           
 11429                           ;incstack = 0
 11430                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 11431  1690  0828               	movf	___ftmul@f1,w
 11432  1691  00AE               	movwf	??___ftmul
 11433  1692  0829               	movf	___ftmul@f1+1,w
 11434  1693  00AF               	movwf	??___ftmul+1
 11435  1694  082A               	movf	___ftmul@f1+2,w
 11436  1695  00B0               	movwf	??___ftmul+2
 11437  1696  1003               	clrc
 11438  1697  0D2F               	rlf	??___ftmul+1,w
 11439  1698  0D30               	rlf	??___ftmul+2,w
 11440  1699  00B1               	movwf	___ftmul@exp
 11441  169A  0831               	movf	___ftmul@exp,w
 11442  169B  1D03               	btfss	3,2
 11443  169C  2EA1               	goto	l5182
 11444  169D  01A8               	clrf	?___ftmul
 11445  169E  01A9               	clrf	?___ftmul+1
 11446  169F  01AA               	clrf	?___ftmul+2
 11447  16A0  0008               	return
 11448  16A1                     l5182:	
 11449  16A1  082B               	movf	___ftmul@f2,w
 11450  16A2  00AE               	movwf	??___ftmul
 11451  16A3  082C               	movf	___ftmul@f2+1,w
 11452  16A4  00AF               	movwf	??___ftmul+1
 11453  16A5  082D               	movf	___ftmul@f2+2,w
 11454  16A6  00B0               	movwf	??___ftmul+2
 11455  16A7  1003               	clrc
 11456  16A8  0D2F               	rlf	??___ftmul+1,w
 11457  16A9  0D30               	rlf	??___ftmul+2,w
 11458  16AA  00B6               	movwf	___ftmul@sign
 11459  16AB  0836               	movf	___ftmul@sign,w
 11460  16AC  1D03               	btfss	3,2
 11461  16AD  2EB2               	goto	l5186
 11462  16AE  01A8               	clrf	?___ftmul
 11463  16AF  01A9               	clrf	?___ftmul+1
 11464  16B0  01AA               	clrf	?___ftmul+2
 11465  16B1  0008               	return
 11466  16B2                     l5186:	
 11467  16B2  0836               	movf	___ftmul@sign,w
 11468  16B3  3E7B               	addlw	123
 11469  16B4  07B1               	addwf	___ftmul@exp,f
 11470  16B5  082A               	movf	___ftmul@f1+2,w
 11471  16B6  00B6               	movwf	___ftmul@sign
 11472  16B7  082D               	movf	___ftmul@f2+2,w
 11473  16B8  06B6               	xorwf	___ftmul@sign,f
 11474  16B9  3080               	movlw	128
 11475  16BA  05B6               	andwf	___ftmul@sign,f
 11476  16BB  3007               	movlw	7
 11477  16BC  17A9               	bsf	___ftmul@f1+1,7
 11478  16BD  17AC               	bsf	___ftmul@f2+1,7
 11479  16BE  01AD               	clrf	___ftmul@f2+2
 11480  16BF  01B2               	clrf	___ftmul@f3_as_product
 11481  16C0  01B3               	clrf	___ftmul@f3_as_product+1
 11482  16C1  01B4               	clrf	___ftmul@f3_as_product+2
 11483  16C2  00B5               	movwf	___ftmul@cntr
 11484  16C3                     l5204:	
 11485  16C3  1C28               	btfss	___ftmul@f1,0
 11486  16C4  2ECC               	goto	l5208
 11487  16C5  2797  160A  118A   	fcall	PL54	;call to abstracted procedure
 11488  16C8  1803               	skipnc
 11489  16C9  0A2D               	incf	___ftmul@f2+2,w
 11490  16CA  1D03               	btfss	3,2
 11491  16CB  07B4               	addwf	___ftmul@f3_as_product+2,f
 11492  16CC                     l5208:	
 11493  16CC  1003               	clrc
 11494  16CD  0CAA               	rrf	___ftmul@f1+2,f
 11495  16CE  0CA9               	rrf	___ftmul@f1+1,f
 11496  16CF  0CA8               	rrf	___ftmul@f1,f
 11497  16D0  1003               	clrc
 11498  16D1  0DAB               	rlf	___ftmul@f2,f
 11499  16D2  0DAC               	rlf	___ftmul@f2+1,f
 11500  16D3  0DAD               	rlf	___ftmul@f2+2,f
 11501  16D4  0BB5               	decfsz	___ftmul@cntr,f
 11502  16D5  2EC3               	goto	l5204
 11503  16D6  3009               	movlw	9
 11504  16D7  00B5               	movwf	___ftmul@cntr
 11505  16D8                     l5216:	
 11506  16D8  1C28               	btfss	___ftmul@f1,0
 11507  16D9  2EE1               	goto	l5220
 11508  16DA  2797  160A  118A   	fcall	PL54	;call to abstracted procedure
 11509  16DD  1803               	skipnc
 11510  16DE  0A2D               	incf	___ftmul@f2+2,w
 11511  16DF  1D03               	btfss	3,2
 11512  16E0  07B4               	addwf	___ftmul@f3_as_product+2,f
 11513  16E1                     l5220:	
 11514  16E1  1003               	clrc
 11515  16E2  0CAA               	rrf	___ftmul@f1+2,f
 11516  16E3  0CA9               	rrf	___ftmul@f1+1,f
 11517  16E4  0CA8               	rrf	___ftmul@f1,f
 11518  16E5  1003               	clrc
 11519  16E6  0CB4               	rrf	___ftmul@f3_as_product+2,f
 11520  16E7  0CB3               	rrf	___ftmul@f3_as_product+1,f
 11521  16E8  0CB2               	rrf	___ftmul@f3_as_product,f
 11522  16E9  0BB5               	decfsz	___ftmul@cntr,f
 11523  16EA  2ED8               	goto	l5216
 11524  16EB  0832               	movf	___ftmul@f3_as_product,w
 11525  16EC  00F2               	movwf	___ftpack@arg
 11526  16ED  0833               	movf	___ftmul@f3_as_product+1,w
 11527  16EE  00F3               	movwf	___ftpack@arg+1
 11528  16EF  0834               	movf	___ftmul@f3_as_product+2,w
 11529  16F0  00F4               	movwf	___ftpack@arg+2
 11530  16F1  0831               	movf	___ftmul@exp,w
 11531  16F2  00F5               	movwf	___ftpack@exp
 11532  16F3  0836               	movf	___ftmul@sign,w
 11533  16F4  00F6               	movwf	___ftpack@sign
 11534  16F5  270B               	fcall	___ftpack
 11535  16F6  0872               	movf	?___ftpack,w
 11536  16F7  00A8               	movwf	?___ftmul
 11537  16F8  0873               	movf	?___ftpack+1,w
 11538  16F9  00A9               	movwf	?___ftmul+1
 11539  16FA  0874               	movf	?___ftpack+2,w
 11540  16FB  00AA               	movwf	?___ftmul+2
 11541  16FC  0008               	return
 11542  16FD                     __end_of___ftmul:	
 11543  16FD                     __ptext38:	
 11544 ;; *************** function ___bmul *****************
 11545 ;; Defined at:
 11546 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
 11547 ;; Parameters:    Size  Location     Type
 11548 ;;  multiplier      1    wreg     unsigned char 
 11549 ;;  multiplicand    1    8[COMMON] unsigned char 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  multiplier      1    4[BANK0 ] unsigned char 
 11552 ;;  product         1    3[BANK0 ] unsigned char 
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      unsigned char 
 11555 ;; Registers used:
 11556 ;;		wreg, status,2, status,0
 11557 ;; Tracked objects:
 11558 ;;		On entry : 300/0
 11559 ;;		On exit  : 300/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11562 ;;      Params:         1       0       0       0       0
 11563 ;;      Locals:         0       2       0       0       0
 11564 ;;      Temps:          0       0       0       0       0
 11565 ;;      Totals:         1       2       0       0       0
 11566 ;;Total ram usage:        3 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:    1
 11569 ;; This function calls:
 11570 ;;		Nothing
 11571 ;; This function is called by:
 11572 ;;		_fround
 11573 ;;		_scale
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           
 11578                           ;psect for function ___bmul
 11579  16FD                     ___bmul:	
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11583                           ;___bmul@multiplier stored from wreg
 11584  16FD  00A4               	movwf	___bmul@multiplier
 11585  16FE  01A3               	clrf	___bmul@product
 11586  16FF                     l3180:	
 11587  16FF  0878               	movf	___bmul@multiplicand,w
 11588  1700  1824               	btfsc	___bmul@multiplier,0
 11589  1701  07A3               	addwf	___bmul@product,f
 11590  1702  1003               	clrc
 11591  1703  0DF8               	rlf	___bmul@multiplicand,f
 11592  1704  1003               	clrc
 11593  1705  0CA4               	rrf	___bmul@multiplier,f
 11594  1706  0824               	movf	___bmul@multiplier,w
 11595  1707  1D03               	btfss	3,2
 11596  1708  2EFF               	goto	l3180
 11597  1709  0823               	movf	___bmul@product,w
 11598  170A  0008               	return
 11599  170B                     __end_of___bmul:	
 11600  170B                     __ptext47:	
 11601 ;; *************** function ___ftpack *****************
 11602 ;; Defined at:
 11603 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\float.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  arg             3    2[COMMON] unsigned um
 11606 ;;  exp             1    5[COMMON] unsigned char 
 11607 ;;  sign            1    6[COMMON] unsigned char 
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;		None
 11610 ;; Return value:  Size  Location     Type
 11611 ;;                  3    2[COMMON] float 
 11612 ;; Registers used:
 11613 ;;		wreg, status,2, status,0
 11614 ;; Tracked objects:
 11615 ;;		On entry : 300/0
 11616 ;;		On exit  : 300/0
 11617 ;;		Unchanged: 300/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11619 ;;      Params:         5       0       0       0       0
 11620 ;;      Locals:         0       0       0       0       0
 11621 ;;      Temps:          3       0       0       0       0
 11622 ;;      Totals:         8       0       0       0       0
 11623 ;;Total ram usage:        8 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    1
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		___ftadd
 11630 ;;		___ftmul
 11631 ;;		___lltoft
 11632 ;;		___lwtoft
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           
 11637                           ;psect for function ___ftpack
 11638  170B                     ___ftpack:	
 11639                           
 11640                           ;incstack = 0
 11641                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11642  170B  0875               	movf	___ftpack@exp,w
 11643  170C  1903               	btfsc	3,2
 11644  170D  2F13               	goto	l900
 11645  170E  0874               	movf	___ftpack@arg+2,w
 11646  170F  0473               	iorwf	___ftpack@arg+1,w
 11647  1710  0472               	iorwf	___ftpack@arg,w
 11648  1711  1D03               	skipz
 11649  1712  2F1C               	goto	l4992
 11650  1713                     l900:	
 11651  1713  01F2               	clrf	?___ftpack
 11652  1714  01F3               	clrf	?___ftpack+1
 11653  1715  01F4               	clrf	?___ftpack+2
 11654  1716  0008               	return
 11655  1717                     l4990:	
 11656  1717  0AF5               	incf	___ftpack@exp,f
 11657  1718  1003               	clrc
 11658  1719  0CF4               	rrf	___ftpack@arg+2,f
 11659  171A  0CF3               	rrf	___ftpack@arg+1,f
 11660  171B  0CF2               	rrf	___ftpack@arg,f
 11661  171C                     l4992:	
 11662  171C  30FE               	movlw	254
 11663  171D  0574               	andwf	___ftpack@arg+2,w
 11664  171E  1903               	btfsc	3,2
 11665  171F  2F2B               	goto	l4996
 11666  1720  2F17               	goto	l4990
 11667  1721                     l4994:	
 11668  1721  0AF5               	incf	___ftpack@exp,f
 11669  1722  0AF2               	incf	___ftpack@arg,f
 11670  1723  1903               	skipnz
 11671  1724  0AF3               	incf	___ftpack@arg+1,f
 11672  1725  1903               	skipnz
 11673  1726  0AF4               	incf	___ftpack@arg+2,f
 11674  1727  1003               	clrc
 11675  1728  0CF4               	rrf	___ftpack@arg+2,f
 11676  1729  0CF3               	rrf	___ftpack@arg+1,f
 11677  172A  0CF2               	rrf	___ftpack@arg,f
 11678  172B                     l4996:	
 11679  172B  30FF               	movlw	255
 11680  172C  0574               	andwf	___ftpack@arg+2,w
 11681  172D  1903               	btfsc	3,2
 11682  172E  2F39               	goto	l5000
 11683  172F  2F21               	goto	l4994
 11684  1730                     l5002:	
 11685  1730  3002               	movlw	2
 11686  1731  0275               	subwf	___ftpack@exp,w
 11687  1732  1C03               	btfss	3,0
 11688  1733  2F3B               	goto	l912
 11689  1734  03F5               	decf	___ftpack@exp,f
 11690  1735  1003               	clrc
 11691  1736  0DF2               	rlf	___ftpack@arg,f
 11692  1737  0DF3               	rlf	___ftpack@arg+1,f
 11693  1738  0DF4               	rlf	___ftpack@arg+2,f
 11694  1739                     l5000:	
 11695  1739  1FF3               	btfss	___ftpack@arg+1,7
 11696  173A  2F30               	goto	l5002
 11697  173B                     l912:	
 11698  173B  1C75               	btfss	___ftpack@exp,0
 11699  173C  13F3               	bcf	___ftpack@arg+1,7
 11700  173D  1003               	clrc
 11701  173E  0CF5               	rrf	___ftpack@exp,f
 11702  173F  0875               	movf	___ftpack@exp,w
 11703  1740  00F9               	movwf	??___ftpack+2
 11704  1741  01F8               	clrf	??___ftpack+1
 11705  1742  01F7               	clrf	??___ftpack
 11706  1743  0877               	movf	??___ftpack,w
 11707  1744  04F2               	iorwf	___ftpack@arg,f
 11708  1745  0878               	movf	??___ftpack+1,w
 11709  1746  04F3               	iorwf	___ftpack@arg+1,f
 11710  1747  0879               	movf	??___ftpack+2,w
 11711  1748  04F4               	iorwf	___ftpack@arg+2,f
 11712  1749  0876               	movf	___ftpack@sign,w
 11713  174A  1D03               	btfss	3,2
 11714  174B  17F4               	bsf	___ftpack@arg+2,7
 11715  174C  0008               	return
 11716  174D                     __end_of___ftpack:	
 11717  174D                     PL22:	
 11718  174D  0872               	movf	?___awmod,w
 11719  174E  00BA               	movwf	??_scale
 11720  174F  0873               	movf	?___awmod+1,w
 11721  1750  00BB               	movwf	??_scale+1
 11722  1751  083A               	movf	??_scale,w
 11723  1752  073A               	addwf	??_scale,w
 11724  1753  073A               	addwf	??_scale,w
 11725  1754  3E12               	addlw	low (__npowers_| (0+32768))
 11726  1755  0084               	movwf	4
 11727  1756  3098               	movlw	high (__npowers_| (0+32768))
 11728  1757  1803               	skipnc
 11729  1758  3E01               	addlw	1
 11730  1759  00FF               	movwf	127
 11731  175A  0008               	return
 11732  175B                     __end_ofPL22:	
 11733  175B                     PL30:	
 11734  175B  0828               	movf	?___ftmul,w
 11735  175C  00B7               	movwf	?_scale
 11736  175D  0829               	movf	?___ftmul+1,w
 11737  175E  00B8               	movwf	?_scale+1
 11738  175F  082A               	movf	?___ftmul+2,w
 11739  1760  00B9               	movwf	?_scale+2
 11740  1761  0008               	return
 11741  1762                     __end_ofPL30:	
 11742  1762                     PL32:	
 11743  1762  00BA               	movwf	??_scale
 11744  1763  0873               	movf	?___awmod+1,w
 11745  1764  00BB               	movwf	??_scale+1
 11746  1765  083A               	movf	??_scale,w
 11747  1766  073A               	addwf	??_scale,w
 11748  1767  073A               	addwf	??_scale,w
 11749  1768  3E39               	addlw	low (__powers_| (0+32768))
 11750  1769  0084               	movwf	4
 11751  176A  3098               	movlw	high (__powers_| (0+32768))
 11752  176B  1803               	skipnc
 11753  176C  3E01               	addlw	1
 11754  176D  00FF               	movwf	127
 11755  176E  0008               	return
 11756  176F                     __end_ofPL32:	
 11757  176F                     PL40:	
 11758  176F  0820               	movf	?___awdiv,w
 11759  1770  00BC               	movwf	??_scale+2
 11760  1771  0821               	movf	?___awdiv+1,w
 11761  1772  00BD               	movwf	??_scale+3
 11762  1773  083C               	movf	??_scale+2,w
 11763  1774  073C               	addwf	??_scale+2,w
 11764  1775  073C               	addwf	??_scale+2,w
 11765  1776  0008               	return
 11766  1777                     __end_ofPL40:	
 11767  1777                     PL42:	
 11768  1777  0828               	movf	?___ftmul,w
 11769  1778  00BE               	movwf	_scale$1148
 11770  1779  0829               	movf	?___ftmul+1,w
 11771  177A  00BF               	movwf	_scale$1148+1
 11772  177B  082A               	movf	?___ftmul+2,w
 11773  177C  00C0               	movwf	_scale$1148+2
 11774  177D  300A               	movlw	10
 11775  177E  00F2               	movwf	___awmod@divisor
 11776  177F  01F3               	clrf	___awmod@divisor+1
 11777  1780  0841               	movf	scale@scl,w
 11778  1781  00F4               	movwf	___awmod@dividend
 11779  1782  01F5               	clrf	___awmod@dividend+1
 11780  1783  0008               	return
 11781  1784                     __end_ofPL42:	
 11782  1784                     PL44:	
 11783  1784  3E12               	addlw	low (__npowers_| (0+32768))
 11784  1785  0084               	movwf	4
 11785  1786  3098               	movlw	high (__npowers_| (0+32768))
 11786  1787  1803               	skipnc
 11787  1788  3E01               	addlw	1
 11788  1789  00FF               	movwf	127
 11789  178A  0008               	return
 11790  178B                     __end_ofPL44:	
 11791  178B                     PL48:	
 11792  178B  300A               	movlw	10
 11793  178C  00A0               	movwf	___awdiv@divisor
 11794  178D  01A1               	clrf	___awdiv@divisor+1
 11795  178E  0841               	movf	scale@scl,w
 11796  178F  00F4               	movwf	___awmod@dividend
 11797  1790  01F5               	clrf	___awmod@dividend+1
 11798  1791  1BF4               	btfsc	___awmod@dividend,7
 11799  1792  03F5               	decf	___awmod@dividend+1,f
 11800  1793  3064               	movlw	100
 11801  1794  00F2               	movwf	___awmod@divisor
 11802  1795  01F3               	clrf	___awmod@divisor+1
 11803  1796  0008               	return
 11804  1797                     __end_ofPL48:	
 11805  1797                     PL54:	
 11806  1797  082B               	movf	___ftmul@f2,w
 11807  1798  07B2               	addwf	___ftmul@f3_as_product,f
 11808  1799  082C               	movf	___ftmul@f2+1,w
 11809  179A  1103               	clrz
 11810  179B  1803               	skipnc
 11811  179C  0A2C               	incf	___ftmul@f2+1,w
 11812  179D  1D03               	btfss	3,2
 11813  179E  07B3               	addwf	___ftmul@f3_as_product+1,f
 11814  179F  082D               	movf	___ftmul@f2+2,w
 11815  17A0  1103               	clrz
 11816  17A1  0008               	return
 11817  17A2                     __end_ofPL54:	
 11818  17A2                     PL56:	
 11819  17A2  0828               	movf	?___ftmul,w
 11820  17A3  00B7               	movwf	?_fround
 11821  17A4  0829               	movf	?___ftmul+1,w
 11822  17A5  00B8               	movwf	?_fround+1
 11823  17A6  082A               	movf	?___ftmul+2,w
 11824  17A7  00B9               	movwf	?_fround+2
 11825  17A8  0008               	return
 11826  17A9                     __end_ofPL56:	
 11827  17A9                     PL64:	
 11828  17A9  3E2D               	addlw	low ((__npowers_| (0+32768)+27))
 11829  17AA  0084               	movwf	4
 11830  17AB  3098               	movlw	high ((__npowers_| (0+32768)+27))
 11831  17AC  1803               	skipnc
 11832  17AD  3E01               	addlw	1
 11833  17AE  00FF               	movwf	127
 11834  17AF  0008               	return
 11835  17B0                     __end_ofPL64:	
 11836  17B0                     PL66:	
 11837  17B0  300A               	movlw	10
 11838  17B1  00F2               	movwf	___awmod@divisor
 11839  17B2  01F3               	clrf	___awmod@divisor+1
 11840  17B3  0841               	movf	scale@scl,w
 11841  17B4  00F4               	movwf	___awmod@dividend
 11842  17B5  01F5               	clrf	___awmod@dividend+1
 11843  17B6  0008               	return
 11844  17B7                     __end_ofPL66:	
 11845  17B7                     PL70:	
 11846  17B7  00AA               	movwf	___ftmul@f1+2
 11847  17B8  3064               	movlw	100
 11848  17B9  00A0               	movwf	___awdiv@divisor
 11849  17BA  01A1               	clrf	___awdiv@divisor+1
 11850  17BB  0841               	movf	scale@scl,w
 11851  17BC  00A2               	movwf	___awdiv@dividend
 11852  17BD  01A3               	clrf	___awdiv@dividend+1
 11853  17BE  0008               	return
 11854  17BF                     __end_ofPL70:	
 11855  17BF                     PL72:	
 11856  17BF  00AA               	movwf	___ftmul@f1+2
 11857  17C0  083E               	movf	_fround$1146,w
 11858  17C1  00AB               	movwf	___ftmul@f2
 11859  17C2  083F               	movf	_fround$1146+1,w
 11860  17C3  00AC               	movwf	___ftmul@f2+1
 11861  17C4  0840               	movf	_fround$1146+2,w
 11862  17C5  00AD               	movwf	___ftmul@f2+2
 11863  17C6  0008               	return
 11864  17C7                     __end_ofPL72:	
 11865  17C7                     PL74:	
 11866  17C7  00AA               	movwf	___ftmul@f1+2
 11867  17C8  083E               	movf	_scale$1148,w
 11868  17C9  00AB               	movwf	___ftmul@f2
 11869  17CA  083F               	movf	_scale$1148+1,w
 11870  17CB  00AC               	movwf	___ftmul@f2+1
 11871  17CC  0840               	movf	_scale$1148+2,w
 11872  17CD  00AD               	movwf	___ftmul@f2+2
 11873  17CE  0008               	return
 11874  17CF                     __end_ofPL74:	
 11875  17CF                     PL78:	
 11876  17CF  0820               	movf	?___awdiv,w
 11877  17D0  00BA               	movwf	??_scale
 11878  17D1  0821               	movf	?___awdiv+1,w
 11879  17D2  00BB               	movwf	??_scale+1
 11880  17D3  083A               	movf	??_scale,w
 11881  17D4  073A               	addwf	??_scale,w
 11882  17D5  073A               	addwf	??_scale,w
 11883  17D6  0008               	return
 11884  17D7                     __end_ofPL78:	
 11885  17D7                     PL80:	
 11886  17D7  00AA               	movwf	___ftmul@f1+2
 11887  17D8  300A               	movlw	10
 11888  17D9  00A0               	movwf	___awdiv@divisor
 11889  17DA  01A1               	clrf	___awdiv@divisor+1
 11890  17DB  0841               	movf	scale@scl,w
 11891  17DC  00A2               	movwf	___awdiv@dividend
 11892  17DD  01A3               	clrf	___awdiv@dividend+1
 11893  17DE  0008               	return
 11894  17DF                     __end_ofPL80:	
 11895  17DF                     PL86:	
 11896  17DF  3E48               	addlw	low ((__npowers_| (0+32768)+54))
 11897  17E0  0084               	movwf	4
 11898  17E1  3098               	movlw	high ((__npowers_| (0+32768)+54))
 11899  17E2  1803               	skipnc
 11900  17E3  3E01               	addlw	1
 11901  17E4  00FF               	movwf	127
 11902  17E5  0008               	return
 11903  17E6                     __end_ofPL86:	
 11904  17E6                     PL88:	
 11905  17E6  1683               	bsf	3,5	;RP0=1, select bank1
 11906  17E7  1303               	bcf	3,6	;RP1=0, select bank1
 11907  17E8  1287               	bcf	7,5	;volatile
 11908  17E9  1283               	bcf	3,5	;RP0=0, select bank0
 11909  17EA  1287               	bcf	7,5	;volatile
 11910  17EB  0008               	return
 11911  17EC                     __end_ofPL88:	
 11912  17EC                     PL92:	
 11913  17EC  0828               	movf	?___ftmul,w
 11914  17ED  00BE               	movwf	_fround$1146
 11915  17EE  0829               	movf	?___ftmul+1,w
 11916  17EF  00BF               	movwf	_fround$1146+1
 11917  17F0  082A               	movf	?___ftmul+2,w
 11918  17F1  00C0               	movwf	_fround$1146+2
 11919  17F2  0008               	return
 11920  17F3                     __end_ofPL92:	
 11921  17F3                     PL94:	
 11922  17F3  3E54               	addlw	low ((__powers_| (0+32768)+27))
 11923  17F4  0084               	movwf	4
 11924  17F5  3098               	movlw	high ((__powers_| (0+32768)+27))
 11925  17F6  1803               	skipnc
 11926  17F7  3E01               	addlw	1
 11927  17F8  00FF               	movwf	127
 11928  17F9  0008               	return
 11929  17FA                     __end_ofPL94:	
 11930  17FA                     PL102:	
 11931  17FA  3003               	movlw	3
 11932  17FB  00F8               	movwf	___bmul@multiplicand
 11933  17FC  300A               	movlw	10
 11934  17FD  00F2               	movwf	___lbmod@divisor
 11935  17FE  0841               	movf	fround@prec,w
 11936  17FF  0008               	return
 11937  1800                     __end_ofPL102:	
 11938                           
 11939                           	psect	text39
 11940  1BF1                     __ptext39:	
 11941 ;; *************** function __tdiv_to_l_ *****************
 11942 ;; Defined at:
 11943 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftdivl.c"
 11944 ;; Parameters:    Size  Location     Type
 11945 ;;  f1              3    2[COMMON] float 
 11946 ;;  f2              3    5[COMMON] float 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;  quot            4    3[BANK0 ] unsigned long 
 11949 ;;  exp1            1    8[BANK0 ] unsigned char 
 11950 ;;  cntr            1    7[BANK0 ] unsigned char 
 11951 ;; Return value:  Size  Location     Type
 11952 ;;                  4    2[COMMON] unsigned long 
 11953 ;; Registers used:
 11954 ;;		wreg, status,2, status,0
 11955 ;; Tracked objects:
 11956 ;;		On entry : 300/100
 11957 ;;		On exit  : 300/0
 11958 ;;		Unchanged: 0/0
 11959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11960 ;;      Params:         6       0       0       0       0
 11961 ;;      Locals:         0       6       0       0       0
 11962 ;;      Temps:          0       3       0       0       0
 11963 ;;      Totals:         6       9       0       0       0
 11964 ;;Total ram usage:       15 bytes
 11965 ;; Hardware stack levels used:    1
 11966 ;; Hardware stack levels required when called:    1
 11967 ;; This function calls:
 11968 ;;		Nothing
 11969 ;; This function is called by:
 11970 ;;		_sprintf
 11971 ;; This function uses a non-reentrant model
 11972 ;;
 11973                           
 11974                           
 11975                           ;psect for function __tdiv_to_l_
 11976  1BF1                     __tdiv_to_l_:	
 11977                           
 11978                           ;incstack = 0
 11979                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
 11980  1BF1  0872               	movf	__tdiv_to_l_@f1,w
 11981  1BF2  1283               	bcf	3,5	;RP0=0, select bank0
 11982  1BF3  00A0               	movwf	??__tdiv_to_l_
 11983  1BF4  0873               	movf	__tdiv_to_l_@f1+1,w
 11984  1BF5  00A1               	movwf	??__tdiv_to_l_+1
 11985  1BF6  0874               	movf	__tdiv_to_l_@f1+2,w
 11986  1BF7  00A2               	movwf	??__tdiv_to_l_+2
 11987  1BF8  1003               	clrc
 11988  1BF9  0D21               	rlf	??__tdiv_to_l_+1,w
 11989  1BFA  0D22               	rlf	??__tdiv_to_l_+2,w
 11990  1BFB  00A8               	movwf	__tdiv_to_l_@exp1
 11991  1BFC  0828               	movf	__tdiv_to_l_@exp1,w
 11992  1BFD  1D03               	btfss	3,2
 11993  1BFE  2C04               	goto	l5366
 11994  1BFF                     l5364:	
 11995  1BFF  01F2               	clrf	?__tdiv_to_l_
 11996  1C00  01F3               	clrf	?__tdiv_to_l_+1
 11997  1C01  01F4               	clrf	?__tdiv_to_l_+2
 11998  1C02  01F5               	clrf	?__tdiv_to_l_+3
 11999  1C03  0008               	return
 12000  1C04                     l5366:	
 12001  1C04  0875               	movf	__tdiv_to_l_@f2,w
 12002  1C05  00A0               	movwf	??__tdiv_to_l_
 12003  1C06  0876               	movf	__tdiv_to_l_@f2+1,w
 12004  1C07  00A1               	movwf	??__tdiv_to_l_+1
 12005  1C08  0877               	movf	__tdiv_to_l_@f2+2,w
 12006  1C09  00A2               	movwf	??__tdiv_to_l_+2
 12007  1C0A  1003               	clrc
 12008  1C0B  0D21               	rlf	??__tdiv_to_l_+1,w
 12009  1C0C  0D22               	rlf	??__tdiv_to_l_+2,w
 12010  1C0D  00A7               	movwf	__tdiv_to_l_@cntr
 12011  1C0E  0827               	movf	__tdiv_to_l_@cntr,w
 12012  1C0F  1903               	btfsc	3,2
 12013  1C10  2BFF               	goto	l5364
 12014  1C11  307F               	movlw	127
 12015  1C12  17F3               	bsf	__tdiv_to_l_@f1+1,7
 12016  1C13  01F4               	clrf	__tdiv_to_l_@f1+2
 12017  1C14  17F6               	bsf	__tdiv_to_l_@f2+1,7
 12018  1C15  01F7               	clrf	__tdiv_to_l_@f2+2
 12019  1C16  01A3               	clrf	__tdiv_to_l_@quot
 12020  1C17  01A4               	clrf	__tdiv_to_l_@quot+1
 12021  1C18  01A5               	clrf	__tdiv_to_l_@quot+2
 12022  1C19  01A6               	clrf	__tdiv_to_l_@quot+3
 12023  1C1A  02A8               	subwf	__tdiv_to_l_@exp1,f
 12024  1C1B  3098               	movlw	152
 12025  1C1C  0727               	addwf	__tdiv_to_l_@cntr,w
 12026  1C1D  00A0               	movwf	??__tdiv_to_l_
 12027  1C1E  02A8               	subwf	__tdiv_to_l_@exp1,f
 12028  1C1F  3018               	movlw	24
 12029  1C20  00A7               	movwf	__tdiv_to_l_@cntr
 12030  1C21                     l5380:	
 12031  1C21  1003               	clrc
 12032  1C22  0DA3               	rlf	__tdiv_to_l_@quot,f
 12033  1C23  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12034  1C24  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12035  1C25  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12036  1C26  0877               	movf	__tdiv_to_l_@f2+2,w
 12037  1C27  0274               	subwf	__tdiv_to_l_@f1+2,w
 12038  1C28  1D03               	skipz
 12039  1C29  2C30               	goto	u6305
 12040  1C2A  0876               	movf	__tdiv_to_l_@f2+1,w
 12041  1C2B  0273               	subwf	__tdiv_to_l_@f1+1,w
 12042  1C2C  1D03               	skipz
 12043  1C2D  2C30               	goto	u6305
 12044  1C2E  0875               	movf	__tdiv_to_l_@f2,w
 12045  1C2F  0272               	subwf	__tdiv_to_l_@f1,w
 12046  1C30                     u6305:	
 12047  1C30  1C03               	skipc
 12048  1C31  2C3E               	goto	L26
 12049  1C32  0875               	movf	__tdiv_to_l_@f2,w
 12050  1C33  02F2               	subwf	__tdiv_to_l_@f1,f
 12051  1C34  0876               	movf	__tdiv_to_l_@f2+1,w
 12052  1C35  1C03               	skipc
 12053  1C36  0F76               	incfsz	__tdiv_to_l_@f2+1,w
 12054  1C37  02F3               	subwf	__tdiv_to_l_@f1+1,f
 12055  1C38  0877               	movf	__tdiv_to_l_@f2+2,w
 12056  1C39  1C03               	skipc
 12057  1C3A  0A77               	incf	__tdiv_to_l_@f2+2,w
 12058  1C3B  02F4               	subwf	__tdiv_to_l_@f1+2,f
 12059  1C3C  1423               	bsf	__tdiv_to_l_@quot,0
 12060  1C3D  1003               	clrc
 12061  1C3E                     L26:	
 12062  1C3E  0DF2               	rlf	__tdiv_to_l_@f1,f
 12063  1C3F  0DF3               	rlf	__tdiv_to_l_@f1+1,f
 12064  1C40  0DF4               	rlf	__tdiv_to_l_@f1+2,f
 12065  1C41  0BA7               	decfsz	__tdiv_to_l_@cntr,f
 12066  1C42  2C21               	goto	l5380
 12067  1C43  1FA8               	btfss	__tdiv_to_l_@exp1,7
 12068  1C44  2C52               	goto	l5400
 12069  1C45  0828               	movf	__tdiv_to_l_@exp1,w
 12070  1C46  3A80               	xorlw	128
 12071  1C47  3E97               	addlw	151
 12072  1C48  1C03               	btfss	3,0
 12073  1C49  2BFF               	goto	l5364
 12074  1C4A                     l5396:	
 12075  1C4A  1003               	clrc
 12076  1C4B  0CA6               	rrf	__tdiv_to_l_@quot+3,f
 12077  1C4C  0CA5               	rrf	__tdiv_to_l_@quot+2,f
 12078  1C4D  0CA4               	rrf	__tdiv_to_l_@quot+1,f
 12079  1C4E  0CA3               	rrf	__tdiv_to_l_@quot,f
 12080  1C4F  0FA8               	incfsz	__tdiv_to_l_@exp1,f
 12081  1C50  2C4A               	goto	l5396
 12082  1C51  2C60               	goto	l5408
 12083  1C52                     l5400:	
 12084  1C52  3018               	movlw	24
 12085  1C53  0228               	subwf	__tdiv_to_l_@exp1,w
 12086  1C54  1803               	btfsc	3,0
 12087  1C55  2BFF               	goto	l5364
 12088  1C56                     l5406:	
 12089  1C56  0828               	movf	__tdiv_to_l_@exp1,w
 12090  1C57  1903               	btfsc	3,2
 12091  1C58  2C60               	goto	l5408
 12092  1C59  1003               	clrc
 12093  1C5A  0DA3               	rlf	__tdiv_to_l_@quot,f
 12094  1C5B  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12095  1C5C  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12096  1C5D  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12097  1C5E  03A8               	decf	__tdiv_to_l_@exp1,f
 12098  1C5F  2C56               	goto	l5406
 12099  1C60                     l5408:	
 12100  1C60  0826               	movf	__tdiv_to_l_@quot+3,w
 12101  1C61  00F5               	movwf	?__tdiv_to_l_+3
 12102  1C62  0825               	movf	__tdiv_to_l_@quot+2,w
 12103  1C63  00F4               	movwf	?__tdiv_to_l_+2
 12104  1C64  0824               	movf	__tdiv_to_l_@quot+1,w
 12105  1C65  00F3               	movwf	?__tdiv_to_l_+1
 12106  1C66  0823               	movf	__tdiv_to_l_@quot,w
 12107  1C67  00F2               	movwf	?__tdiv_to_l_
 12108  1C68  0008               	return
 12109  1C69                     __end_of__tdiv_to_l_:	
 12110                           
 12111                           	psect	text40
 12112  1D20                     __ptext40:	
 12113 ;; *************** function __div_to_l_ *****************
 12114 ;; Defined at:
 12115 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fldivl.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;  f1              3    2[COMMON] unsigned long 
 12118 ;;  f2              3    5[COMMON] unsigned long 
 12119 ;; Auto vars:     Size  Location     Type
 12120 ;;  quot            4    8[BANK0 ] unsigned long 
 12121 ;;  exp1            1   13[BANK0 ] unsigned char 
 12122 ;;  cntr            1   12[BANK0 ] unsigned char 
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  4    2[COMMON] unsigned long 
 12125 ;; Registers used:
 12126 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 300/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12132 ;;      Params:         6       0       0       0       0
 12133 ;;      Locals:         0       6       0       0       0
 12134 ;;      Temps:          0       8       0       0       0
 12135 ;;      Totals:         6      14       0       0       0
 12136 ;;Total ram usage:       20 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    1
 12139 ;; This function calls:
 12140 ;;		Nothing
 12141 ;; This function is called by:
 12142 ;;		_sprintf
 12143 ;; This function uses a non-reentrant model
 12144 ;;
 12145                           
 12146                           
 12147                           ;psect for function __div_to_l_
 12148  1D20                     __div_to_l_:	
 12149                           
 12150                           ;incstack = 0
 12151                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
 12152  1D20  3072               	movlw	low (__div_to_l_@f1| 0)
 12153  1D21  0084               	movwf	4
 12154  1D22  0800               	movf	0,w
 12155  1D23  1283               	bcf	3,5	;RP0=0, select bank0
 12156  1D24  1303               	bcf	3,6	;RP1=0, select bank0
 12157  1D25  00A0               	movwf	??__div_to_l_
 12158  1D26  0A84               	incf	4,f
 12159  1D27  0800               	movf	0,w
 12160  1D28  00A1               	movwf	??__div_to_l_+1
 12161  1D29  0A84               	incf	4,f
 12162  1D2A  0800               	movf	0,w
 12163  1D2B  00A2               	movwf	??__div_to_l_+2
 12164  1D2C  0A84               	incf	4,f
 12165  1D2D  0800               	movf	0,w
 12166  1D2E  00A3               	movwf	??__div_to_l_+3
 12167  1D2F  1003               	clrc
 12168  1D30  0D22               	rlf	??__div_to_l_+2,w
 12169  1D31  0D23               	rlf	??__div_to_l_+3,w
 12170  1D32  00AD               	movwf	__div_to_l_@exp1
 12171  1D33  082D               	movf	__div_to_l_@exp1,w
 12172  1D34  1D03               	btfss	3,2
 12173  1D35  2D3B               	goto	l3642
 12174  1D36                     l3640:	
 12175  1D36  01F2               	clrf	?__div_to_l_
 12176  1D37  01F3               	clrf	?__div_to_l_+1
 12177  1D38  01F4               	clrf	?__div_to_l_+2
 12178  1D39  01F5               	clrf	?__div_to_l_+3
 12179  1D3A  0008               	return
 12180  1D3B                     l3642:	
 12181  1D3B  3075               	movlw	low (__div_to_l_@f2| 0)
 12182  1D3C  25DE  160A  158A   	fcall	PL6	;call to abstracted procedure
 12183  1D3F  1003               	clrc
 12184  1D40  0D22               	rlf	??__div_to_l_+2,w
 12185  1D41  0D23               	rlf	??__div_to_l_+3,w
 12186  1D42  00AC               	movwf	__div_to_l_@cntr
 12187  1D43  082C               	movf	__div_to_l_@cntr,w
 12188  1D44  1903               	btfsc	3,2
 12189  1D45  2D36               	goto	l3640
 12190  1D46  3072               	movlw	low (__div_to_l_@f1| 0)
 12191  1D47  0084               	movwf	4
 12192  1D48  3080               	movlw	128
 12193  1D49  0A84               	incf	4,f
 12194  1D4A  0A84               	incf	4,f
 12195  1D4B  0480               	iorwf	0,f
 12196  1D4C  3072               	movlw	low (__div_to_l_@f1| 0)
 12197  1D4D  0A84               	incf	4,f
 12198  1D4E  0084               	movwf	4
 12199  1D4F  3075               	movlw	low (__div_to_l_@f2| 0)
 12200  1D50  0A84               	incf	4,f
 12201  1D51  0A84               	incf	4,f
 12202  1D52  0A84               	incf	4,f
 12203  1D53  0180               	clrf	0
 12204  1D54  0084               	movwf	4
 12205  1D55  3080               	movlw	128
 12206  1D56  0A84               	incf	4,f
 12207  1D57  0A84               	incf	4,f
 12208  1D58  0480               	iorwf	0,f
 12209  1D59  3075               	movlw	low (__div_to_l_@f2| 0)
 12210  1D5A  0A84               	incf	4,f
 12211  1D5B  0084               	movwf	4
 12212  1D5C  307F               	movlw	127
 12213  1D5D  0A84               	incf	4,f
 12214  1D5E  0A84               	incf	4,f
 12215  1D5F  0A84               	incf	4,f
 12216  1D60  0180               	clrf	0
 12217  1D61  01A8               	clrf	__div_to_l_@quot
 12218  1D62  01A9               	clrf	__div_to_l_@quot+1
 12219  1D63  01AA               	clrf	__div_to_l_@quot+2
 12220  1D64  01AB               	clrf	__div_to_l_@quot+3
 12221  1D65  02AD               	subwf	__div_to_l_@exp1,f
 12222  1D66  30A0               	movlw	160
 12223  1D67  072C               	addwf	__div_to_l_@cntr,w
 12224  1D68  00A0               	movwf	??__div_to_l_
 12225  1D69  02AD               	subwf	__div_to_l_@exp1,f
 12226  1D6A  3020               	movlw	32
 12227  1D6B  00AC               	movwf	__div_to_l_@cntr
 12228  1D6C                     l3656:	
 12229  1D6C  3075               	movlw	low (__div_to_l_@f2| 0)
 12230  1D6D  1003               	clrc
 12231  1D6E  0DA8               	rlf	__div_to_l_@quot,f
 12232  1D6F  0DA9               	rlf	__div_to_l_@quot+1,f
 12233  1D70  0DAA               	rlf	__div_to_l_@quot+2,f
 12234  1D71  0DAB               	rlf	__div_to_l_@quot+3,f
 12235  1D72  25DE  160A  158A   	fcall	PL6	;call to abstracted procedure
 12236  1D75  3072               	movlw	low (__div_to_l_@f1| 0)
 12237  1D76  0084               	movwf	4
 12238  1D77  0800               	movf	0,w
 12239  1D78  00A4               	movwf	??__div_to_l_+4
 12240  1D79  0A84               	incf	4,f
 12241  1D7A  0800               	movf	0,w
 12242  1D7B  00A5               	movwf	??__div_to_l_+5
 12243  1D7C  0A84               	incf	4,f
 12244  1D7D  0800               	movf	0,w
 12245  1D7E  00A6               	movwf	??__div_to_l_+6
 12246  1D7F  0A84               	incf	4,f
 12247  1D80  0800               	movf	0,w
 12248  1D81  00A7               	movwf	??__div_to_l_+7
 12249  1D82  0823               	movf	??__div_to_l_+3,w
 12250  1D83  0227               	subwf	??__div_to_l_+7,w
 12251  1D84  1D03               	skipz
 12252  1D85  2D90               	goto	u3805
 12253  1D86  0822               	movf	??__div_to_l_+2,w
 12254  1D87  0226               	subwf	??__div_to_l_+6,w
 12255  1D88  1D03               	skipz
 12256  1D89  2D90               	goto	u3805
 12257  1D8A  0821               	movf	??__div_to_l_+1,w
 12258  1D8B  0225               	subwf	??__div_to_l_+5,w
 12259  1D8C  1D03               	skipz
 12260  1D8D  2D90               	goto	u3805
 12261  1D8E  0820               	movf	??__div_to_l_,w
 12262  1D8F  0224               	subwf	??__div_to_l_+4,w
 12263  1D90                     u3805:	
 12264  1D90  1C03               	skipc
 12265  1D91  2DAC               	goto	l885
 12266  1D92  3075               	movlw	low (__div_to_l_@f2| 0)
 12267  1D93  25DE  160A  158A   	fcall	PL6	;call to abstracted procedure
 12268  1D96  3072               	movlw	low (__div_to_l_@f1| 0)
 12269  1D97  0084               	movwf	4
 12270  1D98  0820               	movf	??__div_to_l_,w
 12271  1D99  0280               	subwf	0,f
 12272  1D9A  0A84               	incf	4,f
 12273  1D9B  0821               	movf	??__div_to_l_+1,w
 12274  1D9C  1C03               	skipc
 12275  1D9D  0F21               	incfsz	??__div_to_l_+1,w
 12276  1D9E  0280               	subwf	0,f
 12277  1D9F  0A84               	incf	4,f
 12278  1DA0  0822               	movf	??__div_to_l_+2,w
 12279  1DA1  1C03               	skipc
 12280  1DA2  0F22               	incfsz	??__div_to_l_+2,w
 12281  1DA3  0280               	subwf	0,f
 12282  1DA4  0A84               	incf	4,f
 12283  1DA5  0823               	movf	??__div_to_l_+3,w
 12284  1DA6  1C03               	skipc
 12285  1DA7  0A23               	incf	??__div_to_l_+3,w
 12286  1DA8  0280               	subwf	0,f
 12287  1DA9  3003               	movlw	3
 12288  1DAA  0284               	subwf	4,f
 12289  1DAB  1428               	bsf	__div_to_l_@quot,0
 12290  1DAC                     l885:	
 12291  1DAC  3072               	movlw	low (__div_to_l_@f1| 0)
 12292  1DAD  0084               	movwf	4
 12293  1DAE  1003               	clrc
 12294  1DAF  0D80               	rlf	0,f
 12295  1DB0  0A84               	incf	4,f
 12296  1DB1  0D80               	rlf	0,f
 12297  1DB2  0A84               	incf	4,f
 12298  1DB3  0D80               	rlf	0,f
 12299  1DB4  0A84               	incf	4,f
 12300  1DB5  0D80               	rlf	0,f
 12301  1DB6  0BAC               	decfsz	__div_to_l_@cntr,f
 12302  1DB7  2D6C               	goto	l3656
 12303  1DB8  1FAD               	btfss	__div_to_l_@exp1,7
 12304  1DB9  2DC7               	goto	l3674
 12305  1DBA  082D               	movf	__div_to_l_@exp1,w
 12306  1DBB  3A80               	xorlw	128
 12307  1DBC  3E9F               	addlw	159
 12308  1DBD  1C03               	btfss	3,0
 12309  1DBE  2D36               	goto	l3640
 12310  1DBF                     l3670:	
 12311  1DBF  1003               	clrc
 12312  1DC0  0CAB               	rrf	__div_to_l_@quot+3,f
 12313  1DC1  0CAA               	rrf	__div_to_l_@quot+2,f
 12314  1DC2  0CA9               	rrf	__div_to_l_@quot+1,f
 12315  1DC3  0CA8               	rrf	__div_to_l_@quot,f
 12316  1DC4  0FAD               	incfsz	__div_to_l_@exp1,f
 12317  1DC5  2DBF               	goto	l3670
 12318  1DC6  2DD5               	goto	l3682
 12319  1DC7                     l3674:	
 12320  1DC7  3020               	movlw	32
 12321  1DC8  022D               	subwf	__div_to_l_@exp1,w
 12322  1DC9  1803               	btfsc	3,0
 12323  1DCA  2D36               	goto	l3640
 12324  1DCB                     l3680:	
 12325  1DCB  082D               	movf	__div_to_l_@exp1,w
 12326  1DCC  1903               	btfsc	3,2
 12327  1DCD  2DD5               	goto	l3682
 12328  1DCE  1003               	clrc
 12329  1DCF  0DA8               	rlf	__div_to_l_@quot,f
 12330  1DD0  0DA9               	rlf	__div_to_l_@quot+1,f
 12331  1DD1  0DAA               	rlf	__div_to_l_@quot+2,f
 12332  1DD2  0DAB               	rlf	__div_to_l_@quot+3,f
 12333  1DD3  03AD               	decf	__div_to_l_@exp1,f
 12334  1DD4  2DCB               	goto	l3680
 12335  1DD5                     l3682:	
 12336  1DD5  082B               	movf	__div_to_l_@quot+3,w
 12337  1DD6  00F5               	movwf	?__div_to_l_+3
 12338  1DD7  082A               	movf	__div_to_l_@quot+2,w
 12339  1DD8  00F4               	movwf	?__div_to_l_+2
 12340  1DD9  0829               	movf	__div_to_l_@quot+1,w
 12341  1DDA  00F3               	movwf	?__div_to_l_+1
 12342  1DDB  0828               	movf	__div_to_l_@quot,w
 12343  1DDC  00F2               	movwf	?__div_to_l_
 12344  1DDD  0008               	return
 12345  1DDE                     __end_of__div_to_l_:	
 12346  1DDE                     PL6:	
 12347  1DDE  0084               	movwf	4
 12348  1DDF  0800               	movf	0,w
 12349  1DE0  00A0               	movwf	??__div_to_l_
 12350  1DE1  0A84               	incf	4,f
 12351  1DE2  0800               	movf	0,w
 12352  1DE3  00A1               	movwf	??__div_to_l_+1
 12353  1DE4  0A84               	incf	4,f
 12354  1DE5  0800               	movf	0,w
 12355  1DE6  00A2               	movwf	??__div_to_l_+2
 12356  1DE7  0A84               	incf	4,f
 12357  1DE8  0800               	movf	0,w
 12358  1DE9  00A3               	movwf	??__div_to_l_+3
 12359  1DEA  0008               	return
 12360  1DEB                     __end_ofPL6:	
 12361                           
 12362                           	psect	text53
 12363  0803                     __ptext53:	
 12364 ;; *************** function _adcInit *****************
 12365 ;; Defined at:
 12366 ;;		line 4 in file "tgs4161.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;		None
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;		None
 12371 ;; Return value:  Size  Location     Type
 12372 ;;		None               void
 12373 ;; Registers used:
 12374 ;;		status,2
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/100
 12377 ;;		On exit  : 300/100
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12380 ;;      Params:         0       0       0       0       0
 12381 ;;      Locals:         0       0       0       0       0
 12382 ;;      Temps:          0       0       0       0       0
 12383 ;;      Totals:         0       0       0       0       0
 12384 ;;Total ram usage:        0 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    1
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_main
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           
 12395                           ;psect for function _adcInit
 12396  0803                     _adcInit:	
 12397                           
 12398                           ;tgs4161.c: 5: TRISA |= 0b00000001;
 12399                           
 12400                           ;incstack = 0
 12401                           ; Regs used in _adcInit: [status,2]
 12402  0803  1683               	bsf	3,5	;RP0=1, select bank1
 12403  0804  1303               	bcf	3,6	;RP1=0, select bank1
 12404  0805  1405               	bsf	5,0	;volatile
 12405                           
 12406                           ;tgs4161.c: 6: ANSEL |= 0b00000001;
 12407  0806  1703               	bsf	3,6	;RP1=1, select bank3
 12408  0807  1408               	bsf	8,0	;volatile
 12409                           
 12410                           ;tgs4161.c: 7: ADCON0 = 0b00000000;
 12411  0808  1283               	bcf	3,5	;RP0=0, select bank0
 12412  0809  1303               	bcf	3,6	;RP1=0, select bank0
 12413  080A  019F               	clrf	31	;volatile
 12414                           
 12415                           ;tgs4161.c: 8: ADCON1 |= 0b10000000;
 12416  080B  1683               	bsf	3,5	;RP0=1, select bank1
 12417  080C  179F               	bsf	31,7	;volatile
 12418                           
 12419                           ;tgs4161.c: 9: PIE1bits.ADIE = 0;
 12420  080D  130C               	bcf	12,6	;volatile
 12421  080E  0008               	return
 12422  080F                     __end_of_adcInit:	
 12423                           
 12424                           	psect	text54
 12425  100A                     __ptext54:	
 12426 ;; *************** function _UARTInit *****************
 12427 ;; Defined at:
 12428 ;;		line 4 in file "uart.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;  baud_rate       4    5[BANK0 ] const unsigned long 
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  x               2   14[BANK0 ] unsigned int 
 12433 ;;  k               1    0        unsigned char 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;                  1    wreg      unsigned char 
 12436 ;; Registers used:
 12437 ;;		wreg, status,2, status,0, pclath, cstack
 12438 ;; Tracked objects:
 12439 ;;		On entry : 300/0
 12440 ;;		On exit  : 200/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12443 ;;      Params:         0       4       0       0       0
 12444 ;;      Locals:         0       7       0       0       0
 12445 ;;      Temps:          0       0       0       0       0
 12446 ;;      Totals:         0      11       0       0       0
 12447 ;;Total ram usage:       11 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    2
 12450 ;; This function calls:
 12451 ;;		___lldiv
 12452 ;; This function is called by:
 12453 ;;		_main
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           
 12458                           ;psect for function _UARTInit
 12459  100A                     _UARTInit:	
 12460                           
 12461                           ;uart.c: 6: unsigned int x;
 12462                           ;uart.c: 7: unsigned char k;
 12463                           ;uart.c: 9: TRISCbits.TRISC6 = 0;
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _UARTInit: [wreg+status,2+status,0+pclath+cstack]
 12467  100A  1683               	bsf	3,5	;RP0=1, select bank1
 12468  100B  1307               	bcf	7,6	;volatile
 12469                           
 12470                           ;uart.c: 10: TRISCbits.TRISC7 = 0;
 12471  100C  1387               	bcf	7,7	;volatile
 12472                           
 12473                           ;uart.c: 11: INTCON |= 0b11000000;
 12474  100D  30C0               	movlw	192
 12475  100E  048B               	iorwf	11,f	;volatile
 12476                           
 12477                           ;uart.c: 12: PIE1bits.RCIE = 1;
 12478  100F  168C               	bsf	12,5	;volatile
 12479                           
 12480                           ;uart.c: 14: if((baud_rate > 115200) || (baud_rate < 300)) return 0;
 12481  1010  1283               	bcf	3,5	;RP0=0, select bank0
 12482  1011  0828               	movf	UARTInit@baud_rate+3,w
 12483  1012  1D03               	btfss	3,2
 12484  1013  0008               	return
 12485  1014  3001               	movlw	1
 12486  1015  0227               	subwf	UARTInit@baud_rate+2,w
 12487  1016  1D03               	skipz
 12488  1017  281E               	goto	u5473
 12489  1018  30C2               	movlw	194
 12490  1019  0226               	subwf	UARTInit@baud_rate+1,w
 12491  101A  1D03               	skipz
 12492  101B  281E               	goto	u5473
 12493  101C  3001               	movlw	1
 12494  101D  0225               	subwf	UARTInit@baud_rate,w
 12495  101E                     u5473:	
 12496  101E  1803               	btfsc	3,0
 12497  101F  0008               	return
 12498  1020  0828               	movf	UARTInit@baud_rate+3,w
 12499  1021  1D03               	btfss	3,2
 12500  1022  282E               	goto	l4852
 12501  1023  0827               	movf	UARTInit@baud_rate+2,w
 12502  1024  1D03               	btfss	3,2
 12503  1025  282E               	goto	l4852
 12504  1026  3001               	movlw	1
 12505  1027  0226               	subwf	UARTInit@baud_rate+1,w
 12506  1028  1D03               	skipz
 12507  1029  282C               	goto	u5483
 12508  102A  302C               	movlw	44
 12509  102B  0225               	subwf	UARTInit@baud_rate,w
 12510  102C                     u5483:	
 12511  102C  1C03               	btfss	3,0
 12512  102D  0008               	return
 12513  102E                     l4852:	
 12514                           
 12515                           ;uart.c: 18: }
 12516                           ;uart.c: 20: if(baud_rate == 9600) x = (8000000 / baud_rate)/k - 1;
 12517  102E  3080               	movlw	128
 12518  102F  0625               	xorwf	UARTInit@baud_rate,w
 12519  1030  3025               	movlw	37
 12520  1031  1903               	skipnz
 12521  1032  0626               	xorwf	UARTInit@baud_rate+1,w
 12522  1033  0427               	iorwf	UARTInit@baud_rate+2,w
 12523  1034  0428               	iorwf	UARTInit@baud_rate+3,w
 12524  1035  1D03               	btfss	3,2
 12525  1036  284D               	goto	l4858
 12526  1037  2085               	fcall	PL18	;call to abstracted procedure
 12527  1038  120A  118A  262B  160A  118A  	fcall	___lldiv
 12528  103D  206F               	fcall	PL4	;call to abstracted procedure
 12529  103E  120A  118A  262B  160A  118A  	fcall	___lldiv
 12530  1043  0873               	movf	?___lldiv+1,w
 12531  1044  00AF               	movwf	UARTInit@x+1
 12532  1045  0872               	movf	?___lldiv,w
 12533  1046  00AE               	movwf	UARTInit@x
 12534  1047  30FF               	movlw	255
 12535  1048  07AE               	addwf	UARTInit@x,f
 12536  1049  1803               	skipnc
 12537  104A  0AAF               	incf	UARTInit@x+1,f
 12538  104B  07AF               	addwf	UARTInit@x+1,f
 12539  104C  285B               	goto	l4860
 12540  104D                     l4858:	
 12541                           
 12542                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 12543  104D  2085               	fcall	PL18	;call to abstracted procedure
 12544  104E  120A  118A  262B  160A  118A  	fcall	___lldiv
 12545                           
 12546                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 12547  1053  206F               	fcall	PL4	;call to abstracted procedure
 12548  1054  120A  118A  262B   	fcall	___lldiv
 12549  1057  0873               	movf	?___lldiv+1,w
 12550  1058  00AF               	movwf	UARTInit@x+1
 12551  1059  0872               	movf	?___lldiv,w
 12552  105A  00AE               	movwf	UARTInit@x
 12553  105B                     l4860:	
 12554                           
 12555                           ;uart.c: 23: BRGH = 1;
 12556  105B  1683               	bsf	3,5	;RP0=1, select bank1
 12557  105C  1518               	bsf	24,2	;volatile
 12558                           
 12559                           ;uart.c: 24: BRG16 = 1;
 12560  105D  1703               	bsf	3,6	;RP1=1, select bank3
 12561  105E  1587               	bsf	7,3	;volatile
 12562                           
 12563                           ;uart.c: 25: SPBRG = x & 0xFF;
 12564  105F  1283               	bcf	3,5	;RP0=0, select bank0
 12565  1060  1303               	bcf	3,6	;RP1=0, select bank0
 12566  1061  082E               	movf	UARTInit@x,w
 12567  1062  1683               	bsf	3,5	;RP0=1, select bank1
 12568  1063  0099               	movwf	25	;volatile
 12569                           
 12570                           ;uart.c: 26: SPBRGH = (x>>8) & 0xFF;
 12571  1064  1283               	bcf	3,5	;RP0=0, select bank0
 12572  1065  082F               	movf	UARTInit@x+1,w
 12573  1066  1683               	bsf	3,5	;RP0=1, select bank1
 12574  1067  009A               	movwf	26	;volatile
 12575                           
 12576                           ;uart.c: 27: SYNC = 0;
 12577  1068  1218               	bcf	24,4	;volatile
 12578                           
 12579                           ;uart.c: 28: SPEN = 1;
 12580  1069  1283               	bcf	3,5	;RP0=0, select bank0
 12581  106A  1798               	bsf	24,7	;volatile
 12582                           
 12583                           ;uart.c: 29: CREN = 1;
 12584  106B  1618               	bsf	24,4	;volatile
 12585                           
 12586                           ;uart.c: 30: TXEN = 1;
 12587  106C  1683               	bsf	3,5	;RP0=1, select bank1
 12588  106D  1698               	bsf	24,5	;volatile
 12589  106E  0008               	return
 12590  106F                     __end_of_UARTInit:	
 12591  106F                     PL4:	
 12592  106F  0875               	movf	?___lldiv+3,w
 12593  1070  00AC               	movwf	_UARTInit$1145+3
 12594  1071  0874               	movf	?___lldiv+2,w
 12595  1072  00AB               	movwf	_UARTInit$1145+2
 12596  1073  0873               	movf	?___lldiv+1,w
 12597  1074  00AA               	movwf	_UARTInit$1145+1
 12598  1075  0872               	movf	?___lldiv,w
 12599  1076  00A9               	movwf	_UARTInit$1145
 12600  1077  3004               	movlw	4
 12601  1078  00F2               	movwf	___lldiv@divisor
 12602  1079  01F3               	clrf	___lldiv@divisor+1
 12603  107A  01F4               	clrf	___lldiv@divisor+2
 12604  107B  01F5               	clrf	___lldiv@divisor+3
 12605  107C  082C               	movf	_UARTInit$1145+3,w
 12606  107D  00F9               	movwf	___lldiv@dividend+3
 12607  107E  082B               	movf	_UARTInit$1145+2,w
 12608  107F  00F8               	movwf	___lldiv@dividend+2
 12609  1080  082A               	movf	_UARTInit$1145+1,w
 12610  1081  00F7               	movwf	___lldiv@dividend+1
 12611  1082  0829               	movf	_UARTInit$1145,w
 12612  1083  00F6               	movwf	___lldiv@dividend
 12613  1084  0008               	return
 12614  1085                     __end_ofPL4:	
 12615  1085                     PL18:	
 12616  1085  0828               	movf	UARTInit@baud_rate+3,w
 12617  1086  00F5               	movwf	___lldiv@divisor+3
 12618  1087  0827               	movf	UARTInit@baud_rate+2,w
 12619  1088  00F4               	movwf	___lldiv@divisor+2
 12620  1089  0826               	movf	UARTInit@baud_rate+1,w
 12621  108A  00F3               	movwf	___lldiv@divisor+1
 12622  108B  0825               	movf	UARTInit@baud_rate,w
 12623  108C  00F2               	movwf	___lldiv@divisor
 12624  108D  307A               	movlw	122
 12625  108E  01F9               	clrf	___lldiv@dividend+3
 12626  108F  00F8               	movwf	___lldiv@dividend+2
 12627  1090  3012               	movlw	18
 12628  1091  00F7               	movwf	___lldiv@dividend+1
 12629  1092  01F6               	clrf	___lldiv@dividend
 12630  1093  0008               	return
 12631  1094                     __end_ofPL18:	
 12632                           
 12633                           	psect	text59
 12634  1B01                     __ptext59:	
 12635 ;; *************** function _IOPinsInit *****************
 12636 ;; Defined at:
 12637 ;;		line 101 in file "main.c"
 12638 ;; Parameters:    Size  Location     Type
 12639 ;;		None
 12640 ;; Auto vars:     Size  Location     Type
 12641 ;;		None
 12642 ;; Return value:  Size  Location     Type
 12643 ;;		None               void
 12644 ;; Registers used:
 12645 ;;		None
 12646 ;; Tracked objects:
 12647 ;;		On entry : 300/100
 12648 ;;		On exit  : 300/0
 12649 ;;		Unchanged: 0/0
 12650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12651 ;;      Params:         0       0       0       0       0
 12652 ;;      Locals:         0       0       0       0       0
 12653 ;;      Temps:          0       0       0       0       0
 12654 ;;      Totals:         0       0       0       0       0
 12655 ;;Total ram usage:        0 bytes
 12656 ;; Hardware stack levels used:    1
 12657 ;; Hardware stack levels required when called:    1
 12658 ;; This function calls:
 12659 ;;		Nothing
 12660 ;; This function is called by:
 12661 ;;		_main
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           
 12666                           ;psect for function _IOPinsInit
 12667  1B01                     _IOPinsInit:	
 12668                           
 12669                           ;main.c: 102: RC4 = 0;
 12670                           
 12671                           ;incstack = 0
 12672                           ; Regs used in _IOPinsInit: []
 12673  1B01  1283               	bcf	3,5	;RP0=0, select bank0
 12674  1B02  1207               	bcf	7,4	;volatile
 12675                           
 12676                           ;main.c: 103: RC1 = 0;
 12677  1B03  1087               	bcf	7,1	;volatile
 12678                           
 12679                           ;main.c: 104: RC0 = 0;
 12680  1B04  1007               	bcf	7,0	;volatile
 12681                           
 12682                           ;main.c: 105: RC3 = 0;
 12683  1B05  1187               	bcf	7,3	;volatile
 12684                           
 12685                           ;main.c: 106: RA5 = 0;
 12686  1B06  1285               	bcf	5,5	;volatile
 12687  1B07  0008               	return
 12688  1B08                     __end_of_IOPinsInit:	
 12689                           
 12690                           	psect	text60
 12691  1B10                     __ptext60:	
 12692 ;; *************** function _IOPinsConfig *****************
 12693 ;; Defined at:
 12694 ;;		line 93 in file "main.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;		None
 12699 ;; Return value:  Size  Location     Type
 12700 ;;		None               void
 12701 ;; Registers used:
 12702 ;;		wreg, status,2, status,0
 12703 ;; Tracked objects:
 12704 ;;		On entry : 200/100
 12705 ;;		On exit  : 300/100
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12708 ;;      Params:         0       0       0       0       0
 12709 ;;      Locals:         0       0       0       0       0
 12710 ;;      Temps:          0       0       0       0       0
 12711 ;;      Totals:         0       0       0       0       0
 12712 ;;Total ram usage:        0 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    1
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_main
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           
 12723                           ;psect for function _IOPinsConfig
 12724  1B10                     _IOPinsConfig:	
 12725                           
 12726                           ;main.c: 94: TRISA |= 0b00011110;
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _IOPinsConfig: [wreg+status,2+status,0]
 12730  1B10  301E               	movlw	30
 12731  1B11  1683               	bsf	3,5	;RP0=1, select bank1
 12732  1B12  0485               	iorwf	5,f	;volatile
 12733                           
 12734                           ;main.c: 95: TRISA &= 0b11011111;
 12735  1B13  1285               	bcf	5,5	;volatile
 12736                           
 12737                           ;main.c: 96: ANSEL &= 0b00000001;
 12738  1B14  3001               	movlw	1
 12739  1B15  1703               	bsf	3,6	;RP1=1, select bank3
 12740  1B16  0588               	andwf	8,f	;volatile
 12741                           
 12742                           ;main.c: 97: TRISC &= 0b10000000;
 12743  1B17  3080               	movlw	128
 12744  1B18  1303               	bcf	3,6	;RP1=0, select bank1
 12745  1B19  0587               	andwf	7,f	;volatile
 12746                           
 12747                           ;main.c: 98: TRISC |= 0b10000000;
 12748  1B1A  1787               	bsf	7,7	;volatile
 12749  1B1B  0008               	return
 12750  1B1C                     __end_of_IOPinsConfig:	
 12751                           
 12752                           	psect	text61
 12753  1B1C                     __ptext61:	
 12754 ;; *************** function _isr *****************
 12755 ;; Defined at:
 12756 ;;		line 66 in file "main.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;		None
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;		None
 12761 ;; Return value:  Size  Location     Type
 12762 ;;		None               void
 12763 ;; Registers used:
 12764 ;;		wreg, status,2, status,0
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 300/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12770 ;;      Params:         0       0       0       0       0
 12771 ;;      Locals:         0       0       0       0       0
 12772 ;;      Temps:          2       0       0       0       0
 12773 ;;      Totals:         2       0       0       0       0
 12774 ;;Total ram usage:        2 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; This function calls:
 12777 ;;		Nothing
 12778 ;; This function is called by:
 12779 ;;		Interrupt level 1
 12780 ;; This function uses a non-reentrant model
 12781 ;;
 12782                           
 12783                           
 12784                           ;psect for function _isr
 12785  1B1C                     _isr:	
 12786                           
 12787                           ;main.c: 67: INTCONbits.T0IF = 0;
 12788  1B1C  110B               	bcf	11,2	;volatile
 12789                           
 12790                           ;main.c: 79: if(tmr_count == 91)
 12791  1B1D  305B               	movlw	91
 12792  1B1E  1683               	bsf	3,5	;RP0=1, select bank1
 12793  1B1F  1303               	bcf	3,6	;RP1=0, select bank1
 12794  1B20  0638               	xorwf	_tmr_count^(0+128),w
 12795  1B21  1D03               	btfss	3,2
 12796  1B22  2B27               	goto	i1l4886
 12797                           
 12798                           ;main.c: 80: {
 12799                           ;main.c: 81: tmr_count = 0;
 12800  1B23  01B8               	clrf	_tmr_count^(0+128)
 12801                           
 12802                           ;main.c: 82: measure = 1;
 12803  1B24  01B1               	clrf	_measure^(0+128)
 12804  1B25  0AB1               	incf	_measure^(0+128),f
 12805                           
 12806                           ;main.c: 83: }
 12807  1B26  2B2D               	goto	i1l4890
 12808  1B27                     i1l4886:	
 12809                           
 12810                           ;main.c: 84: else if(tmr_count == 65)
 12811  1B27  3041               	movlw	65
 12812  1B28  0638               	xorwf	_tmr_count^(0+128),w
 12813  1B29  1D03               	btfss	3,2
 12814  1B2A  2B2D               	goto	i1l4890
 12815                           
 12816                           ;main.c: 85: {
 12817                           ;main.c: 86: disp = 1;
 12818  1B2B  01AF               	clrf	_disp^(0+128)
 12819  1B2C  0AAF               	incf	_disp^(0+128),f
 12820  1B2D                     i1l4890:	
 12821                           
 12822                           ;main.c: 89: tmr_co2++;
 12823  1B2D  0AB8               	incf	_tmr_count^(0+128),f
 12824                           
 12825                           ;main.c: 90: TMR0 = 0;
 12826  1B2E  1283               	bcf	3,5	;RP0=0, select bank0
 12827  1B2F  0181               	clrf	1	;volatile
 12828  1B30  0871               	movf	??_isr+1,w
 12829  1B31  008A               	movwf	10
 12830  1B32  0E70               	swapf	??_isr^(0+-128),w
 12831  1B33  0083               	movwf	3
 12832  1B34  0EFE               	swapf	126,f
 12833  1B35  0E7E               	swapf	126,w
 12834  1B36  0009               	retfie
 12835  1B37                     __end_of_isr:	
 12836  007E                     btemp	set	126	;btemp
 12837  007E                     wtemp	set	126
 12838  007E                     wtemp0	set	126
 12839  0080                     wtemp1	set	128
 12840  0082                     wtemp2	set	130
 12841  0084                     wtemp3	set	132
 12842  0086                     wtemp4	set	134
 12843  0088                     wtemp5	set	136
 12844  007F                     wtemp6	set	127
 12845  007E                     ttemp	set	126
 12846  007E                     ttemp0	set	126
 12847  0081                     ttemp1	set	129
 12848  0084                     ttemp2	set	132
 12849  0087                     ttemp3	set	135
 12850  007F                     ttemp4	set	127
 12851  007E                     ltemp	set	126
 12852  007E                     ltemp0	set	126
 12853  0082                     ltemp1	set	130
 12854  0086                     ltemp2	set	134
 12855  0080                     ltemp3	set	128
 12856                           
 12857                           	psect	intentry
 12858  0004                     __pintentry:	
 12859                           ;incstack = 0
 12860                           ; Regs used in _isr: [wreg+status,2+status,0]
 12861                           
 12862  0004                     interrupt_function:	
 12863  007E                     saved_w	set	btemp
 12864  0004  00FE               	movwf	btemp
 12865  0005  0E03               	swapf	3,w
 12866  0006  00F0               	movwf	??_isr
 12867  0007  080A               	movf	10,w
 12868  0008  00F1               	movwf	??_isr+1
 12869  0009  160A  158A  2B1C   	ljmp	_isr


Data Sizes:
    Strings     199
    Constant    118
    Data        0
    BSS         79
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      79
    BANK1            80     27      73
    BANK3            96      0      30
    BANK2            96      0       0

Pointer List with Targets:

    measureSHT71@p_value	PTR unsigned char  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), getResSHT71@humi_val(BANK1[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_30(CODE[4]), STR_29(CODE[5]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[6]), STR_25(CODE[6]), STR_22(CODE[6]), STR_21(CODE[6]), 
		 -> STR_20(CODE[6]), STR_17(CODE[6]), STR_11(CODE[6]), STR_5(CODE[6]), 
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> str(BANK1[5]), humidity(BANK1[5]), temperature(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strncat	PTR unsigned char  size(1) Largest target is 30
		 -> uart_data(BANK3[30]), 

    getResSHT71@p_humi	PTR float  size(1) Largest target is 3
		 -> humi(BANK1[3]), 

    getResSHT71@p_temp	PTR float  size(1) Largest target is 3
		 -> temp(BANK1[3]), 

    readStatusRegSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    readStatusRegSHT71@p_value	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@inp(BANK1[1]), 

    calcSHT71@p_temperature	PTR float  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), 

    measureSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    LcdWriteString@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_24(CODE[10]), STR_23(CODE[17]), STR_19(CODE[9]), STR_18(CODE[17]), 
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[17]), STR_13(CODE[13]), 
		 -> STR_12(CODE[17]), STR_10(CODE[17]), STR_9(CODE[13]), STR_8(CODE[17]), 
		 -> STR_7(CODE[13]), STR_6(CODE[17]), humidity(BANK1[5]), STR_4(CODE[13]), 
		 -> STR_3(CODE[17]), temperature(BANK1[5]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _menuCO2->_LcdWriteString
    _measureTGS4161->___lwdiv
    _readStatusRegSHT71->_readByteSHT71
    _readStatusRegSHT71->_writeByteSHT71
    _measureSHT71->_readByteSHT71
    _measureSHT71->_writeByteSHT71
    ___lwtoft->___ftpack
    _displayCO2->_LcdWriteString
    _LcdWriteInt->___lwdiv
    _sprintf->___lldiv
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    ___ftmul->___ftpack
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___ftpack
    _LcdWriteString->_LcdWriteChar
    _LcdWriteChar->_LcdPort
    _LcdSetCursor->_LcdCmd
    _UARTInit->___lldiv
    _LcdInit->_LcdCmd
    _LcdCmd->_LcdPort

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getResSHT71
    _regulacija->___ftge
    _menu->_menuHumi
    _menuHumi->_sprintf
    _menuCO2->_LcdWriteInt
    _measureTGS4161->_adcRead
    _getTempDS18B20->___ftadd
    _getResSHT71->_calcSHT71
    _calcSHT71->___ftge
    _displaySoilTemp->_sprintf
    _displayCO2->_LcdWriteInt
    _LcdWriteInt->_LcdSetCursor
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf
    _sprintf->___ftge
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awdiv
    ___bmul->___lbdiv
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    _UARTInit->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_sprintf
    _menuHumi->_sprintf
    _displaySoilTemp->_sprintf
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  359223
                                             25 BANK1      2     2      0
                       _IOPinsConfig
                         _IOPinsInit
                            _LcdInit
                           _UARTInit
                            _adcInit
                    _displayAirMoist
                     _displayAirTemp
                         _displayCO2
                    _displaySoilTemp
                        _getResSHT71
                     _getTempDS18B20
                          _initSHT71
                         _initTimer0
                     _measureTGS4161
                               _menu
                         _regulacija
                       _resetDS18B20
                        _resetValues
 ---------------------------------------------------------------------------------
 (1) _resetValues                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _regulacija                                           2     2      0    7075
                                             52 BANK0      2     2      0
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _menu                                                 2     2      0  142532
                                             64 BANK0      2     2      0
                       _LcdSetCursor
                     _LcdWriteString
                            ___ftadd
                             ___ftge
                            ___ftsub
                           _menuHumi
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _menuHumi                                             2     2      0   77370
                                             62 BANK0      2     2      0
                       _LcdSetCursor
                     _LcdWriteString
                            ___ftadd
                             ___ftge
                            ___ftsub
                            _menuCO2
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _menuCO2                                              2     2      0   12208
                                             11 BANK0      2     2      0
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (1) _measureTGS4161                                      15    13      2    3032
                                              6 BANK0     15    13      2
                            ___lwdiv
                             ___wmul
                            _adcRead
 ---------------------------------------------------------------------------------
 (2) _adcRead                                             10     8      2     114
                                              2 COMMON     4     2      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSHT71                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTempDS18B20                                      15    12      3   13150
                                             46 BANK0     15    12      3
                            ___ftadd
                            ___ftmul
                           ___lwtoft
                        _readDS18B20
                       _resetDS18B20
                       _writeDS18B20
 ---------------------------------------------------------------------------------
 (2) _writeDS18B20                                         3     3      0      90
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetDS18B20                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readDS18B20                                          3     3      0      92
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getResSHT71                                         14    13      1   22237
                                             77 BANK0      1     0      1
                                              0 BANK1     13    13      0
                       _LcdSetCursor
                     _LcdWriteString
                           ___lwtoft
                          _calcSHT71
               _connectionResetSHT71
                       _measureSHT71
                 _readStatusRegSHT71
 ---------------------------------------------------------------------------------
 (2) _readStatusRegSHT71                                   3     2      1     376
                                              6 COMMON     3     2      1
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (2) _measureSHT71                                         7     5      2     685
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (3) _writeByteSHT71                                       4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _readByteSHT71                                        4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _connectionResetSHT71                                 1     1      0      46
                                              2 COMMON     1     1      0
                     _tranStartSHT71
 ---------------------------------------------------------------------------------
 (3) _tranStartSHT71                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calcSHT71                                           31    27      4   13224
                                             52 BANK0     25    21      4
                            ___ftadd
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2294
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _displaySoilTemp                                      3     0      3   52454
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayCO2                                           2     0      2   12304
                                             11 BANK0      2     0      2
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (4) _LcdWriteInt                                          7     3      4    7237
                                              4 BANK0      7     3      4
                       _LcdSetCursor
                       _LcdWriteChar
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     586
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _displayAirTemp                                       3     0      3   52454
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayAirMoist                                      3     0      3   52454
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    35      5   47387
                                             52 BANK0     10     5      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               14    11      3    8576
                                             23 BANK0     11     8      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              14    10      4    6764
                                             23 BANK0     11     7      4
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     318
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     436
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5292
                                              8 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     300
                                              8 COMMON     1     0      1
                                              3 BANK0      2     2      0
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1912
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    2235
                                              0 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     752
                                              5 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             13     9      4     411
                                             34 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5729
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5243
                                             34 BANK0     12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1832
                                             46 BANK0      6     0      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) _LcdWriteString                                       7     5      2    2080
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                       _LcdWriteChar
 ---------------------------------------------------------------------------------
 (5) _LcdWriteChar                                         4     4      0     260
                                              3 COMMON     4     4      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (5) _LcdSetCursor                                         5     4      1    2891
                                              6 COMMON     1     0      1
                                              0 BANK0      4     4      0
                             _LcdCmd
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                            15    11      4    1252
                                              5 BANK0     11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     904
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              2     2      0     279
                                              6 COMMON     2     2      0
                             _LcdCmd
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdCmd                                               3     3      0     155
                                              3 COMMON     3     3      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdPort                                              1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOPinsInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IOPinsConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOPinsConfig
   _IOPinsInit
   _LcdInit
     _LcdCmd
       _LcdPort
     _LcdPort
   _UARTInit
     ___lldiv
   _adcInit
   _displayAirMoist
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayAirTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayCO2
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteInt
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteChar
         _LcdPort
       ___lwdiv
       ___wmul
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
   _displaySoilTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _getResSHT71
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___lwtoft
       ___ftpack
     _calcSHT71
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _connectionResetSHT71
       _tranStartSHT71
     _measureSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
     _readStatusRegSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
   _getTempDS18B20
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _readDS18B20
     _resetDS18B20
     _writeDS18B20
   _initSHT71
   _initTimer0
   _measureTGS4161
     ___lwdiv
     ___wmul
     _adcRead
   _menu
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltoft (ARG)
         ___ftpack
     _menuHumi
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteString
         _LcdWriteChar
           _LcdPort
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       _menuCO2
         _LcdSetCursor
           _LcdCmd
             _LcdPort
         _LcdWriteInt
           _LcdSetCursor
             _LcdCmd
               _LcdPort
           _LcdWriteChar
             _LcdPort
           ___lwdiv
           ___wmul
         _LcdWriteString
           _LcdWriteChar
             _LcdPort
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _regulacija
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
   _resetDS18B20
   _resetValues

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      C2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1B      49       7       91.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      1E       9       31.3%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      C2      12        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Feb 27 19:07:42 2017

            UARTInit@baud_rate 0025                              _t 00A4                              pc 0002  
               ___bmul@product 0023                    __CFG_CP$OFF 0000                             PL2 06E0  
                           PL4 106F                             PL6 1DDE                             PL8 0700  
                           l21 125F                             l16 1249                             l51 0FC6  
                           l52 0FC8                             l53 0FCC                             l54 0FCD  
                           l55 0FD1                             l56 0FD2                             l57 0FD6  
                 ___awdiv@sign 0025                             fsr 0004            ___wmul@multiplicand 0074  
                 ___ftadd@exp1 004D                   ___ftadd@exp2 004C                            PL10 0714  
                          PL20 1FBC                            PL12 0720                            PL30 175B  
                          PL22 174D                            PL14 0FD8                            PL40 176F  
                          PL32 1762                            PL24 1FCA                            PL16 0728  
                          PL50 0767                            PL42 1777                            PL34 0741  
                          PL26 1FD8                            PL18 1085                            PL60 0FF1  
                          PL52 0772                            PL44 1784                            PL36 1FE6  
                          PL28 0733                            PL70 17B7                            PL62 077D  
                          PL54 1797                            PL46 075B                            PL38 074E  
                          PL80 17D7                            PL72 17BF                            PL64 17A9  
                          PL56 17A2                            PL48 178B                            PL90 078F  
                          PL82 0FF8                            PL74 17C7                            PL66 17B0  
                          PL58 0FE9                            PL92 17EC                            PL84 07F7  
                          PL76 1FF3                            PL68 0787                            PL94 17F3  
                          PL86 17DF                            PL78 17CF                            PL96 1FF9  
                          PL88 17E6                            PL98 0796                   ___ftadd@sign 004B  
                          l200 1D04                            l130 1386                            l210 1CE1  
                          l211 1CEC                            l127 1383                            l161 143A  
                          l410 09E8                            l148 13E1                            l156 1459  
                          l157 145B                            l405 09C8                            l431 0C04  
                          l361 1F4B                            l419 0AD6        __end_of_displaySoilTemp 1BF1  
                          l436 0C24                            l445 0D14                            l357 1F1D  
                          l384 0DB5                            l393 0E1E                            l627 050A  
                          l379 0D95                            l900 1713                            l468 1ECF  
                          l573 00D6                            l912 173B                            l936 0B6A  
                          l885 1DAC                            _RA1 0029                            _RB0 0030  
                          _RA2 002A                            _RB1 0031                            _RA3 002B  
                          _RC0 0038                            _RB2 0032                            _RA4 002C  
                          _RC1 0039                            _RB3 0033                            _RA5 002D  
                          _RB4 0034                            _RC3 003B                            _RB5 0035  
                          _RC4 003C                            _RB6 0036                            _RC5 003D  
                          _RB7 0037                   __CFG_CPD$OFF 0000                            _co2 00AD  
                          _isr 1B1C                            fsr0 0004                            _str 00BE  
                          indf 0000                   ___awmod@sign 0077                   __CFG_IESO$ON 0000  
                 __CFG_FOSC$HS 0000                   ?_readDS18B20 0070                    _zeljena_co2 007A  
                         PL100 1D1A                           PL102 17FA                   __CFG_LVP$OFF 0000  
                         l1028 1191                           l5000 1739                           l5002 1730  
                         l3164 0676                           l3180 16FF                           l3244 165D  
                         l5022 0EFC                           l4302 1275                           l5112 0B18  
                         l3168 067E                           l3256 1670                           l3264 1683  
                         l3248 1664                           l4320 137B                           l5130 0B35  
                         l4314 1371                           l5140 0B4E                           l5108 0B11  
                         l5220 16E1                           l5204 16C3                           l3436 11B8  
                         l3428 11A4                           l3268 168B                           l3452 0F43  
                         l4316 1373                           l5150 0B66                           l5142 0B52  
                         l5118 0B27                           l5310 1116                           l4326 138F  
                         l6014 1300                           l5136 0B44                           l3640 1D36  
                         l5400 1C52                           l5216 16D8                           l5208 16CC  
                         l5072 1621                           l3464 0F5A                           l4352 13CB  
                         l5162 0B80                           l5138 0B49                           l3642 1D3B  
                         l5250 119E                           l5082 162F                           l5066 1618  
                         l4338 13AD                           l4354 13D3                           l4266 129D  
                         l6042 1C9B                           l6034 1C79                           l6202 0D02  
                         l6130 1F6E                           l6122 1F35                           l6114 1F07  
                         l5260 0D31                           l5156 0B75                           l5148 0B61  
                         l3724 07A6                           l5236 118B                           l5340 152C  
                         l5500 00FD                           l6220 0D29                           l6212 0D1F  
                         l5254 0D2F                           l5174 0B9C                           l3742 07CA  
                         l3726 07AB                           l3670 1DBF                           l5406 1C56  
                         l5182 16A1                           l5318 1164                           l5094 1646  
                         l5334 14EB                           l5510 012F                           l3830 1452  
                         l4278 122F                           l6142 1FA8                           l6134 1F8C  
                         l5416 06AA                           l3752 07D6                           l3680 1DCB  
                         l3656 1D6C                           l5408 1C60                           l3584 0699  
                         l5352 15B1                           l5344 1544                           l5600 031E  
                         l5272 0E50                           l4288 1254                           l6240 1E38  
                         l3690 05D0                           l3754 07E0                           l3746 07D2  
                         l3682 1DD5                           l3674 1DC7                           l5186 16B2  
                         l5098 164E                           l5602 0336                           l5530 0187  
                         l5282 0E89                           l6218 0BED                           l6250 1E62  
                         l3772 0640                           l5428 05FD                           l5436 0622  
                         l5444 06C2                           l5380 1C21                           l5364 1BFF  
                         l5292 0EC1                           l6180 0C73                           l6164 0C10  
                         l6260 1E96                           l3694 05DF                           l3758 07EE  
                         l5446 06CD                           l5366 1C04                           l5358 15F3  
                         l5710 0533                           l5630 039C                           l5542 01D3  
                         l6094 0856                           l6174 0C30                           l6254 1E67  
                         l3784 066B                           l5720 0559                           l5712 0537  
                         l5704 0518                           l5624 0377                           l5608 0340  
                         l5616 0374                           l5464 0052                           l5472 0089  
                         l3872 1400                           l6256 1E78                           l6264 1EA7  
                         l6272 1EBB                           l5642 03E7                           l5626 038B  
                         l5554 0235                           l5546 0209                           l5538 01C1  
                         l5458 0040                           l5802 0E0C                           l6194 0CDC  
                         l6282 1EDC                           l6258 1E89                           l6266 1EB5  
                         l4860 105B                           l4852 102E                           l5396 1C4A  
                         l5732 057A                           l5716 0551                           l5660 0463  
                         l5572 02B1                           l5492 00D8                           l5484 009E  
                         l5740 002A                           l5812 0E29                           l6188 0C98  
                         l6292 1EE9                           l5726 0567                           l5718 0555  
                         l5638 03B6                           l5590 031A                           l5558 0247  
                         l5662 046E                           l5742 05BC                           l5494 00ED  
                         l5486 00D1                           l5910 0A9E                           l5672 0492  
                         l5592 0331                           l5568 0270                           l5840 094A  
                         l5816 0D7F                           l5904 0A5B                           l4858 104D  
                         l5738 0571                           l5586 02F1                           l5578 02B3  
                         l5692 04DE                           l5684 04A0                           l5844 0963  
                         ?_isr 0070                           l4990 1717                           l5678 049E  
                         l5790 0DE7                           l5918 0AC4                           l4992 171C  
                         l5696 04F2                           l5960 1221                           l5784 0DD5  
                         l5768 0DA1                           l5928 0AE1                           l5880 09D4  
                         l5936 09B1                           l4994 1721                           l5778 0DC1  
                         l5890 09F4                           l4996 172B                           l5796 0DFA  
                         l5896 0A36                           STR_1 1910                           STR_2 1945  
                         STR_3 18EE                           STR_4 192B                           STR_5 1945  
                         STR_6 1888                           STR_7 191E                           STR_8 1899  
                         STR_9 1938                           _BRGH 04C2                           _CREN 00C4  
                         u4025 0653                           u4130 13FD                           u3095 1676  
                         u3805 1D90                           u3495 0F4C                           u6305 1C30  
                         u6405 060B                           u3935 07AF                           u8007 129F  
                         u5473 101E                           u8017 1277                           u8107 0FB7  
                         u5483 102C                           u8027 12F8                           u6605 0233  
                         u6525 0144                           u8037 145E                           u4854 1235  
                         u8047 1403                           u4855 1233                           u8057 0F21  
                         u8067 0F2E                           u6715 0380                           u6635 02EA  
                         u8077 0F6E                           u6725 0396                           u6565 01DD  
                         u4894 1270                           u8087 0F7B                           u5775 1638  
                         u6575 0214                           u4895 126E                           u8097 0F88  
                         u6905 0544                           u6825 04D7                           u6675 0327  
                         u6845 04EB                           u7485 1FA3                           u6855 0501  
                         u7807 09BC                           u7495 1FB9                           u7727 1EC3  
                         u7817 09CF                           u7737 1ED7                           u7907 0E13  
                         u7827 09DC                           u7747 0BF8                           u7917 0E24  
                         u7837 09EF                           u7757 0C0B                           u6895 0528  
                         u7927 1CB9                           u7847 0ACB                           u7767 0C18  
                         u7937 1CFC                           u7857 0ADC                           u7777 0C2B  
                         u7947 11D2                           u7867 0D89                           u7787 0D09  
                         u7957 1245                           u7877 0D9C                           u7797 0D1A  
                         u7967 124E                           u7887 0DA9                           u7977 1286  
                         u7897 0DBC                           u7987 128F                           u7997 1298  
                         _TMR0 0001                           _SPEN 00C7                           _TXEN 04C5  
                         _SYNC 04C4                   __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000  
              ?_tranStartSHT71 0070                           _disp 00AF                           _main 1DEB  
                 ___ftpack@arg 0072                           _menu 0BB0                           _humi 00C8  
                 ___ftpack@exp 0075                           _temp 00CB                           btemp 007E  
                __CFG_BOREN$ON 0000                ?_displayAirTemp 005E                           ltemp 007E  
                         start 000C                           ttemp 007E                           wtemp 007E  
          __end_of_LcdWriteInt 0EE8                   _sprintf$1149 00CE                __end_of_LcdInit 0FAA  
              __end_of_LcdPort 0FD8              ___bmul@multiplier 0024                  __CFG_MCLRE$ON 0000  
             readByteSHT71@ack 0073                   ___ftmul@cntr 0035               ??_writeByteSHT71 0072  
             readByteSHT71@res 0074                   ___ftmul@sign 0036                   ___fttol@exp1 004E  
          _zeljena_temperatura 00A7           __end_of_LcdSetCursor 0F10                   ___fttol@lval 004A  
                        ??_isr 0070          __size_of_writeDS18B20 0030                    ?_IOPinsInit 0070  
                        ?_main 0070                          ?_menu 0070                __end_of_adcInit 080F  
              __end_of_adcRead 1D1A                __end_of___awdiv 1653                __end_of___lbdiv 11A0  
              __end_of___ftadd 0BB0                          STR_10 18AA                          STR_11 1945  
                        STR_20 1945                          STR_12 18FF                          STR_13 192B  
                        STR_21 1945                          STR_22 1945                          STR_30 194B  
                        STR_14 18DD                          STR_15 1920                          STR_23 18BB  
                        STR_16 1922                          STR_24 1921                          _BRG16 0C3B  
                        STR_25 1945                          STR_17 1945                  __CFG_WDTE$OFF 0000  
                        STR_26 1945                          STR_18 18CC                          STR_19 1922  
              __end_of___awmod 1690                __end_of___lbmod 11BC                __end_of___ftneg 06A3  
                        _ANSEL 0188                __end_of___lldiv 0674                __end_of___ftmul 16FD  
              ___awdiv@divisor 0020                __end_of___llmod 062B                __end_of___ftsub 06C0  
              __end_of___fttol 07F7                __end_of___lwdiv 0F5F                ___awdiv@counter 0024  
                        _SPBRG 0099                          _TRISA 0085                          _TRISB 0086  
                        _TRISC 0087                   ___lltoft@exp 0024               __end_of_UARTInit 106F  
              __end_of_menuCO2 0E34                __end_of_dpowers 1888                          _scale 147C  
              __end_of_isdigit 069B                  ___ftpack@sign 0076               ?_displayAirMoist 005E  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
              __end_of_sprintf 05C1                ___lbdiv@divisor 0077           __end_of_LcdWriteChar 0F35  
                 __end_ofPL100 1D20                   __end_ofPL102 1800                ___lbdiv@counter 0021  
             LcdSetCursor@temp 0023                   _writeDS18B20 122A                __initialization 000F  
                ?_measureSHT71 0076                writeDS18B20@Cmd 0073                   __end_of_main 1EEF  
                 __end_of_menu 0D2F               _zeljena_vlaznost 00AA         __size_of_readByteSHT71 0030  
                       ??_main 00E7                  ___fttol@sign1 0049                   adcRead@tempH 0022  
                       ??_menu 0060                   adcRead@tempL 0020               ?_displaySoilTemp 005E  
         __size_of__tdiv_to_l_ 0078           __size_of_getResSHT71 009D                         _ADCON0 001F  
                       _ADCON1 009F               ___llmod@dividend 0029                         ?_scale 0037  
                       _ADRESH 001E                         _ADRESL 009E               ___awdiv@dividend 0022  
             __end_of___ftpack 174D                         _ANSELH 0189               __end_of___lltoft 06E0  
             getResSHT71@error 00D3                    _LcdWriteInt 0E34                         i1l4890 1B2D  
                       i1l4886 1B27                         _INTCON 000B               __end_of___lwtoft 136A  
                    ??_LcdInit 0076                         _SPBRGH 009A                      ??_LcdPort 0072  
                 ?_resetValues 0070            __size_of_IOPinsInit 0007                         _LcdCmd 0FAA  
               __CFG_PWRTE$OFF 0000                 ??_measureSHT71 0078               __end_of__powers_ 1860  
                       ___bmul 16FD                         ___ftge 05C1                   readDS18B20@i 0074  
                       ___wmul 0674                      ??_adcInit 0072                      ??_adcRead 0074  
                    ??___awdiv 0078                      ??___lbdiv 0078                      ??___ftadd 0048  
                    ??___awmod 0076                      ??___lbmod 0073                      ??___ftneg 0075  
                    ??___lldiv 007A                      ??___ftmul 002E                      ??___llmod 007A  
                    ??___ftsub 007A                      ??___fttol 0046                      ??___lwdiv 0076  
      __size_of_measureTGS4161 0088               __end_of_menuHumi 0AEE                         _fround 1094  
             ___awdiv@quotient 0026                ___awmod@divisor 0072                ___awmod@counter 0076  
        ___ftmul@f3_as_product 0032                      ??_menuCO2 002B                      ??_isdigit 0072  
                       saved_w 007E                      ??_sprintf 0059               ___lbdiv@dividend 0020  
         __size_of_readDS18B20 0027                  _readByteSHT71 13DB                ___lbmod@divisor 0072  
      __end_of__initialization 0022        __size_of_LcdWriteString 0018                ___lbmod@counter 0075  
                   ___ftadd@f1 0042                     ___ftadd@f2 0045                     ___ftge@ff1 004E  
                   ___ftge@ff2 0051             __size_of_calcSHT71 0114                     ___ftneg@f1 0072  
        __size_of_LcdSetCursor 0028            ___bmul@multiplicand 0078                     ___ftmul@f1 0028  
                   ___ftmul@f2 002B                     ___ftsub@f1 0051                     ___ftsub@f2 004E  
                   ___fttol@f1 0042                 __pcstackCOMMON 0070                      ?_UARTInit 0025  
                   ___lltoft@c 0020                  __end_of_scale 160E                     __end_ofPL2 0700  
                   __end_ofPL4 1085                     __end_ofPL6 1DEB                     __end_ofPL8 0714  
             ___lbdiv@quotient 0022                     ___lwtoft@c 0020                     __div_to_l_ 1D20  
               _OPTION_REGbits 0081               ??_tranStartSHT71 0072                __div_to_l_@exp1 002D  
              __div_to_l_@cntr 002C                        ??_scale 003A                 ?_readByteSHT71 0070  
              __div_to_l_@quot 0028               ??_displayAirTemp 007A                   sprintf@width 00D4  
        __size_of_LcdWriteChar 0025                   calcSHT71@t_C 005E    __size_of_readStatusRegSHT71 0019  
                 _LcdSetCursor 0EE8                     __pbssBANK0 006E                     __pbssBANK1 00A0  
                   __pbssBANK3 0190             __size_of_initSHT71 0004                  ?_resetDS18B20 0070  
                      ?_LcdCmd 0070                  __div_to_l_@f1 0072                  __div_to_l_@f2 0075  
                   calcSHT71@t 005B                 _calcSHT71$1143 0061                 _calcSHT71$1144 0064  
__size_of_connectionResetSHT71 0017                     __pmaintext 1DEB                 displayCO2@co22 002B  
                      ?___bmul 0078                        ?___ftge 004E                        ?___wmul 0072  
                   ??_UARTInit 007A          connectionResetSHT71@i 0072                  ?_IOPinsConfig 0070  
                   __pintentry 0004                        ?_fround 0037              LcdWriteInt@column 0027  
                    ?___ftpack 0072                   ??_IOPinsInit 0072                      UARTInit@x 002E  
                    ?___lltoft 0020                      ?___lwtoft 0020              writeByteSHT71@cmd 0073  
            __end_of_calcSHT71 0975              getResSHT71@p_humi 006D                   _LcdWriteChar 0F10  
            getResSHT71@p_temp 00D2            getTempDS18B20@tempH 0059            getTempDS18B20@tempL 0057  
                      LcdCmd@a 0075        __size_of_getTempDS18B20 006E                     _disp_count 00B0  
         __end_of_measureSHT71 13DB      readStatusRegSHT71@p_value 0077                     _displayCO2 082E  
                   __stringtab 1800                        _LcdInit 0F5F                        _LcdPort 0FC0  
                    ?_menuHumi 0070                 ??_resetDS18B20 0072                __size_of_LcdCmd 0016  
           __end_of_IOPinsInit 1B08              __end_of__npowers_ 1839                     _scale$1148 003E  
         __size_of_resetValues 001F                 ??_IOPinsConfig 0072                __size_of___bmul 000E  
              __size_of___ftge 002C                        _adcInit 0803                     _initTimer0 1001  
                      _adcRead 1CF1                        ___awdiv 160E                        ___lbdiv 1185  
                      ___ftadd 0AEE                        ___awmod 1653                        ___lbmod 11A0  
                      ___ftneg 069B                        ___lldiv 062B                __size_of___wmul 0019  
                      ___ftmul 1690                        ___llmod 05ED                        ___ftsub 06A3  
                      ___fttol 079C            getResSHT71@checksum 00D7                 _measureTGS4161 1C69  
                      ___lwdiv 0F35              __end_of_initSHT71 1B01                     ??___ftpack 0077  
              __size_of_fround 00F1                     ??___lltoft 007A                        __ptext1 080F  
                      __ptext2 1EEF                        __ptext3 0BB0                        __ptext4 0975  
                      __ptext5 0D47                        __ptext6 1C69                        __ptext7 1CF1  
                      __ptext8 1001                        __ptext9 1AFD                 LcdWriteInt@row 0026  
                   ??___lwtoft 007A                        _menuCO2 0D47                    ?__div_to_l_ 0072  
                      _dpowers 1860                        _measure 00B1                        _isdigit 068D  
                 __size_of_isr 001B                        _ok_flag 006E            writeByteSHT71@error 0074  
             ___awmod@dividend 0074                ??_readByteSHT71 0072            getResSHT71@humi_val 00D4  
                      _sprintf 0026                        clrloop0 1B09           end_of_initialization 0022  
                   _minus_flag 00B4                   ?_LcdWriteInt 0024               measureSHT71@mode 0077  
          getResSHT71@temp_val 00D8               measureSHT71@temp 0023                 _LcdWriteString 0D2F  
                   _regulacija 1EEF                     ??_menuHumi 005E                ___lldiv@divisor 0072  
              ___lldiv@counter 0024            measureTGS4161@krez1 002A            measureTGS4161@krez2 002C  
     __size_of_displayAirMoist 003E         __end_of_measureTGS4161 1CF1                   __pstringtext 1800  
               __tdiv_to_l_@f1 0072                 __tdiv_to_l_@f2 0075                  ??__tdiv_to_l_ 0020  
              calcSHT71@rh_lin 0058                  ??_getResSHT71 00CE        __size_of_writeByteSHT71 0030  
             ___lbmod@dividend 0074                      _TRISBbits 0086                      _TRISCbits 0087  
                  ?_displayCO2 002B         __end_of_LcdWriteString 0D47       __size_of_displaySoilTemp 003E  
                LcdSetCursor@a 0020                  LcdSetCursor@b 0076                  LcdSetCursor@y 0022  
                LcdSetCursor@z 0021                    ___lbmod@rem 0076                 readByteSHT71@i 0075  
          __size_of__div_to_l_ 00BE                 __end_of_LcdCmd 0FC0                    ___ftmul@exp 0031  
              ?_measureTGS4161 0026                    ?_initTimer0 0070                 __end_of___bmul 170B  
               __end_of___ftge 05ED                 getResSHT71@inp 00D1                 __end_of___wmul 068D  
            readDS18B20@result 0073              __size_of_UARTInit 0065          __size_of_measureSHT71 0071  
               __end_of_fround 1185           __end_of_resetDS18B20 12A4              displaySoilTemp@t2 005E  
                  __end_ofPL10 0720                    __end_ofPL20 1FCA                    __end_ofPL12 0728  
                  __end_ofPL30 1762                    __end_ofPL22 175B                    __end_ofPL14 0FE9  
                  __end_ofPL40 1777                    __end_ofPL32 176F                    __end_ofPL24 1FD8  
                  __end_ofPL16 0733                    __end_ofPL50 0772                    __end_ofPL42 1784  
                  __end_ofPL34 074E                    __end_ofPL26 1FE6                    __end_ofPL18 1094  
                  __end_ofPL60 0FF8                    __end_ofPL52 077D                    __end_ofPL44 178B  
                  __end_ofPL36 1FF3                    __end_ofPL28 0741                    __end_ofPL70 17BF  
                  __end_ofPL62 0787                    __end_ofPL54 17A2                    __end_ofPL46 0767  
                  __end_ofPL38 075B                    __end_ofPL80 17DF                    __end_ofPL72 17C7  
                  __end_ofPL64 17B0                    __end_ofPL56 17A9                    __end_ofPL48 1797  
                  __end_ofPL90 0796                    __end_ofPL82 1000                    __end_ofPL74 17CF  
                  __end_ofPL66 17B7                    __end_ofPL58 0FF1                    __end_ofPL92 17F3  
                  __end_ofPL84 07FE                    __end_ofPL76 1FF9                    __end_ofPL68 078F  
                  __end_ofPL94 17FA                    __end_ofPL86 17E6                    __end_ofPL78 17D7  
                  __end_ofPL96 2000                    __end_ofPL88 17EC                    __end_ofPL98 079C  
          start_initialization 000F                 _getTempDS18B20 11BC                  ??_readDS18B20 0072  
          __end_of__tdiv_to_l_ 1C69                    __end_of_isr 1B37            __end_of_getResSHT71 135A  
              ?_LcdWriteString 0077           __end_of_IOPinsConfig 1B1C                    adcRead@temp 0024  
          measureSHT71@p_value 0020                    ?_regulacija 0070                ___llmod@divisor 0025  
       measureSHT71@p_checksum 0076                ___llmod@counter 002D                       ??_LcdCmd 0073  
                 _measureSHT71 136A                       ??___bmul 0079                       ??___ftge 007A  
                     ??___wmul 0076            __size_of_displayCO2 0033                       ??_fround 007A  
            ??_displayAirMoist 007A                  sprintf@tmpval 00D6         __end_of_getTempDS18B20 122A  
                   fround@prec 0041              __size_of___ftpack 0042              __size_of___lltoft 0020  
 __end_of_connectionResetSHT71 144C                    __pbssCOMMON 007A                      ___latbits 0002  
            __size_of___lwtoft 0010                  __pcstackBANK0 0020                  __pcstackBANK1 00CE  
             LcdWriteChar@temp 0074     __end_of_readStatusRegSHT71 12BD                      _calcSHT71 0861  
    getTempDS18B20@temperatura 0054            __size_of_initTimer0 0009            __end_of_readDS18B20 1281  
                     ?_LcdInit 0070                    sprintf@flag 00D2                       ?_LcdPort 0070  
                  sprintf@fval 00E0                    sprintf@prec 00E3                    calcSHT71@rh 006A  
         __size_of_LcdWriteInt 00B4                  _UARTInit$1145 0029                  ?_writeDS18B20 0070  
            ??_displaySoilTemp 007A              __size_of_menuHumi 0179               ___lwdiv@dividend 0074  
         displayAirMoist@humi2 005E                       ?_adcInit 0070                       ?_adcRead 0072  
                     ?___awdiv 0020                       ?___lbdiv 0077                       ?___ftadd 0042  
                     ?___awmod 0072                       ?___lbmod 0072                       ?___ftneg 0072  
                     ?___lldiv 0072                       ?___ftmul 0028                       ?___llmod 0025  
                     ?___ftsub 004E                      __npowers_ 1812                       ?___fttol 0042  
                     ?___lwdiv 0072                   _ok_flag_humi 00B6             getTempDS18B20@temp 005B  
                  __tdiv_to_l_ 1BF1                    _getResSHT71 12BD            __size_of_regulacija 00CD  
                 ??__div_to_l_ 0020                ?_getTempDS18B20 004E                 _writeByteSHT71 144C  
                     ?_menuCO2 0070                       ?_isdigit 0070                      _initSHT71 1AFD  
                   ?_calcSHT71 0054                  LcdWriteChar@a 0076                  LcdWriteChar@y 0075  
             ___lwdiv@quotient 0076                       ?_sprintf 0054                 __size_of_scale 0192  
                LcdWriteInt@ch 002A                      _menu_flag 00B3                measureTGS4161@i 0030  
            interrupt_function 0004                 ___wmul@product 0076                  ??_resetValues 0072  
               ??_writeDS18B20 0072                      clear_ram0 1B08                       _PIE1bits 008C  
       measureTGS4161@ppm_temp 002E        __size_of_tranStartSHT71 002A             __end_of__div_to_l_ 1DDE  
           measureTGS4161@temp 0031        __size_of_displayAirTemp 003E                       LcdPort@a 0072  
                    _uart_data 0190            calcSHT71@p_humidity 0054                       _UARTInit 100A  
        __size_of_resetDS18B20 0023                      _plus_flag 00B7         __end_of_writeByteSHT71 147C  
                    _tmr_count 00B8                     _ADCON0bits 001F                    __stringbase 1812  
            ___wmul@multiplier 0072          __size_of_IOPinsConfig 000C                     ?_initSHT71 0070  
                  _readDS18B20 125A                   ??_displayCO2 0079          __end_of_readByteSHT71 140B  
                writeDS18B20@i 0074               ??_measureTGS4161 0028               __size_of_LcdInit 004B  
             __size_of_LcdPort 0018                   _resetDS18B20 1281           _connectionResetSHT71 1435  
                 ??_initTimer0 0072                    _measure_co2 00B2            __end_of_resetValues 082E  
                 _IOPinsConfig 1B10             __end_of_displayCO2 0861               __size_of_adcInit 000C  
             __size_of_adcRead 0029               __size_of___awdiv 0045               __size_of___lbdiv 001B  
             __size_of___ftadd 00C2               __size_of___awmod 003D               __size_of___lbmod 001C  
             __size_of___ftneg 0008               __size_of___lldiv 0049               __size_of___ftmul 006D  
             __size_of___llmod 003E               __size_of___ftsub 001D               __size_of___fttol 005B  
             __size_of___lwdiv 002A                ?_writeByteSHT71 0070                       ___ftpack 170B  
                  _fround$1146 003E                    _fround$1147 003B             __end_of__stringtab 1812  
                     ___lltoft 06C0                    _isdigit$845 0072                       ___lwtoft 135A  
             ??_LcdWriteString 0020                     sprintf@exp 00DE                     sprintf@val 00DA  
             __size_of_menuCO2 00ED               __size_of_isdigit 000E                ___lwdiv@divisor 0072  
                  ??_calcSHT71 007A                ___lwdiv@counter 0078                    _ok_flag_co2 00B5  
                     __ptext10 11BC                       __ptext11 122A                       __ptext20 140B  
                     __ptext12 1281                       __ptext21 0861                       __ptext13 125A  
                     __ptext30 147C                       __ptext22 135A                       __ptext14 12BD  
                     __ptext31 1653                       __ptext23 1BB3                       __ptext15 12A4  
                     __ptext40 1D20                       __ptext32 160E                       __ptext24 082E  
                     __ptext16 136A                       __ptext41 0674                       __ptext33 068D  
                     __ptext25 0E34                       __ptext17 144C                       __ptext50 0D2F  
                     __ptext42 06C0                       __ptext34 1094                       __ptext26 0F35  
                     __ptext18 13DB                       __ptext51 0F10                       __ptext43 05ED  
                     __ptext35 11A0                       __ptext27 1B75                       __ptext19 1435  
                     __ptext60 1B10                       __ptext52 0EE8                       __ptext44 079C  
                     __ptext36 1185                       __ptext28 1B37                       __ptext61 1B1C  
                     __ptext53 0803                       __ptext45 06A3                       __ptext37 1690  
                     __ptext29 0026                       __ptext54 100A                       __ptext46 0AEE  
                     __ptext38 16FD                       __ptext55 062B                       __ptext47 170B  
                     __ptext39 1BF1                       __ptext56 0F5F                       __ptext48 069B  
                     __ptext57 0FAA                       __ptext49 05C1                       __ptext58 0FC0  
                     __ptext59 1B01              __CFG_BOR4V$BOR40V 0000                writeByteSHT71@i 0075  
                     __powers_ 1839            displayAirTemp@temp2 005E                  ?_LcdSetCursor 0076  
             __size_of_sprintf 059B             __end_of_initTimer0 100A                   ??_regulacija 0054  
                     _menuHumi 0975                  __size_of_main 0104   readStatusRegSHT71@p_checksum 0076  
                __size_of_menu 017F                   LcdWriteInt@i 0024                       _humidity 00B9  
              _displayAirMoist 1B37          ?_connectionResetSHT71 0070              measureTGS4161@ppm 0033  
              LcdWriteString@a 0077                LcdWriteString@i 0023                  ?_LcdWriteChar 0070  
           __end_of_regulacija 1FBC           __end_of_writeDS18B20 125A                    ??_initSHT71 0072  
                   _INTCONbits 000B              measureSHT71@error 0021                       isdigit@c 0073  
              _displaySoilTemp 1BB3                       scale@scl 0041                 ??_LcdSetCursor 0077  
                     intlevel1 0000                      sprintf@ap 00D1               __tdiv_to_l_@exp1 0028  
             __tdiv_to_l_@cntr 0027                      sprintf@sp 00E5               __tdiv_to_l_@quot 0023  
             ___lldiv@dividend 0076                    _resetValues 080F                 _tranStartSHT71 140B  
           _readStatusRegSHT71 12A4                      stringcode 180A                 _displayAirTemp 1B75  
     LcdWriteInt@ch_manje_1000 0029               ??_getTempDS18B20 0051            ?_readStatusRegSHT71 0076  
      readStatusRegSHT71@error 0078                   ?__tdiv_to_l_ 0072                 ??_LcdWriteChar 0073  
                   _IOPinsInit 1B01                   ?_getResSHT71 006D                     _OPTION_REG 0081  
                  _temperature 00C3                       sprintf@c 00E6                       sprintf@f 0054  
                  _tempervalue 00A0               ___lldiv@quotient 0020                       stringtab 1800  
      LcdWriteInt@ch_manje_100 0028               calcSHT71@rh_true 0067           ??_readStatusRegSHT71 0077  
                ??_LcdWriteInt 0079        __end_of_displayAirMoist 1B75         __end_of_tranStartSHT71 1435  
       __end_of_displayAirTemp 1BB3         ??_connectionResetSHT71 0072         calcSHT71@p_temperature 0057  
