

Microchip Technology PIC PRO Macro Assembler V1.35 build -356382666 
                                                                                               Wed Mar 01 21:12:28 2017

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text13,local,class=CODE,merge=1,delta=2
    17                           	psect	text15,local,class=CODE,merge=1,delta=2
    18                           	psect	text16,local,class=CODE,merge=1,delta=2
    19                           	psect	text17,local,class=CODE,merge=1,delta=2
    20                           	psect	text18,local,class=CODE,merge=1,delta=2
    21                           	psect	text19,local,class=CODE,merge=1,delta=2
    22                           	psect	text32,local,class=CODE,merge=1,delta=2
    23                           	psect	text43,local,class=CODE,merge=1,delta=2
    24                           	psect	text49,local,class=CODE,merge=1,delta=2
    25                           	psect	text62,local,class=CODE,merge=1,delta=2
    26                           	psect	text63,local,class=CODE,merge=1,delta=2
    27                           	psect	text65,local,class=CODE,merge=1,delta=2
    28                           	psect	text70,local,class=CODE,merge=1,delta=2
    29                           	psect	text71,local,class=CODE,merge=1,delta=2
    30                           	psect	text72,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	pa_nodes,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0007                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0089                     	;# 
    73  008C                     	;# 
    74  008D                     	;# 
    75  008E                     	;# 
    76  008F                     	;# 
    77  0090                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0093                     	;# 
    81  0093                     	;# 
    82  0093                     	;# 
    83  0094                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  0105                     	;# 
    96  0107                     	;# 
    97  0108                     	;# 
    98  0109                     	;# 
    99  010C                     	;# 
   100  010C                     	;# 
   101  010D                     	;# 
   102  010E                     	;# 
   103  010F                     	;# 
   104  0185                     	;# 
   105  0187                     	;# 
   106  0188                     	;# 
   107  0189                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  008F                     	;# 
   153  0090                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0093                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  0105                     	;# 
   172  0107                     	;# 
   173  0108                     	;# 
   174  0109                     	;# 
   175  010C                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  0185                     	;# 
   181  0187                     	;# 
   182  0188                     	;# 
   183  0189                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186  0000                     	;# 
   187  0001                     	;# 
   188  0002                     	;# 
   189  0003                     	;# 
   190  0004                     	;# 
   191  0005                     	;# 
   192  0006                     	;# 
   193  0007                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  000E                     	;# 
   201  000F                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0015                     	;# 
   208  0015                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001B                     	;# 
   216  001C                     	;# 
   217  001D                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  0081                     	;# 
   221  0085                     	;# 
   222  0086                     	;# 
   223  0087                     	;# 
   224  0089                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  008F                     	;# 
   229  0090                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0094                     	;# 
   236  0095                     	;# 
   237  0096                     	;# 
   238  0097                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  0105                     	;# 
   248  0107                     	;# 
   249  0108                     	;# 
   250  0109                     	;# 
   251  010C                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  0185                     	;# 
   257  0187                     	;# 
   258  0188                     	;# 
   259  0189                     	;# 
   260  018C                     	;# 
   261  018D                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0009                     	;# 
   271  000A                     	;# 
   272  000B                     	;# 
   273  000C                     	;# 
   274  000D                     	;# 
   275  000E                     	;# 
   276  000E                     	;# 
   277  000F                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0014                     	;# 
   283  0015                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  001D                     	;# 
   294  001E                     	;# 
   295  001F                     	;# 
   296  0081                     	;# 
   297  0085                     	;# 
   298  0086                     	;# 
   299  0087                     	;# 
   300  0089                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  008F                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0093                     	;# 
   309  0093                     	;# 
   310  0093                     	;# 
   311  0094                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  0105                     	;# 
   324  0107                     	;# 
   325  0108                     	;# 
   326  0109                     	;# 
   327  010C                     	;# 
   328  010C                     	;# 
   329  010D                     	;# 
   330  010E                     	;# 
   331  010F                     	;# 
   332  0185                     	;# 
   333  0187                     	;# 
   334  0188                     	;# 
   335  0189                     	;# 
   336  018C                     	;# 
   337  018D                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0009                     	;# 
   347  000A                     	;# 
   348  000B                     	;# 
   349  000C                     	;# 
   350  000D                     	;# 
   351  000E                     	;# 
   352  000E                     	;# 
   353  000F                     	;# 
   354  0010                     	;# 
   355  0011                     	;# 
   356  0012                     	;# 
   357  0013                     	;# 
   358  0014                     	;# 
   359  0015                     	;# 
   360  0015                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001B                     	;# 
   368  001C                     	;# 
   369  001D                     	;# 
   370  001E                     	;# 
   371  001F                     	;# 
   372  0081                     	;# 
   373  0085                     	;# 
   374  0086                     	;# 
   375  0087                     	;# 
   376  0089                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  008F                     	;# 
   381  0090                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0095                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009A                     	;# 
   394  009B                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  009F                     	;# 
   399  0105                     	;# 
   400  0107                     	;# 
   401  0108                     	;# 
   402  0109                     	;# 
   403  010C                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  010E                     	;# 
   407  010F                     	;# 
   408  0185                     	;# 
   409  0187                     	;# 
   410  0188                     	;# 
   411  0189                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0009                     	;# 
   423  000A                     	;# 
   424  000B                     	;# 
   425  000C                     	;# 
   426  000D                     	;# 
   427  000E                     	;# 
   428  000E                     	;# 
   429  000F                     	;# 
   430  0010                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0013                     	;# 
   434  0014                     	;# 
   435  0015                     	;# 
   436  0015                     	;# 
   437  0016                     	;# 
   438  0017                     	;# 
   439  0018                     	;# 
   440  0019                     	;# 
   441  001A                     	;# 
   442  001B                     	;# 
   443  001B                     	;# 
   444  001C                     	;# 
   445  001D                     	;# 
   446  001E                     	;# 
   447  001F                     	;# 
   448  0081                     	;# 
   449  0085                     	;# 
   450  0086                     	;# 
   451  0087                     	;# 
   452  0089                     	;# 
   453  008C                     	;# 
   454  008D                     	;# 
   455  008E                     	;# 
   456  008F                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0093                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0095                     	;# 
   465  0096                     	;# 
   466  0097                     	;# 
   467  0098                     	;# 
   468  0099                     	;# 
   469  009A                     	;# 
   470  009B                     	;# 
   471  009C                     	;# 
   472  009D                     	;# 
   473  009E                     	;# 
   474  009F                     	;# 
   475  0105                     	;# 
   476  0107                     	;# 
   477  0108                     	;# 
   478  0109                     	;# 
   479  010C                     	;# 
   480  010C                     	;# 
   481  010D                     	;# 
   482  010E                     	;# 
   483  010F                     	;# 
   484  0185                     	;# 
   485  0187                     	;# 
   486  0188                     	;# 
   487  0189                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490                           
   491                           	psect	stringtext
   492  1800                     __pstringtext:	
   493  1800                     stringtab:	
   494  1800                     __stringtab:	
   495                           
   496                           ;	String table - string pointers are 2 bytes each
   497  1800  1BFF               	btfsc	btemp+1,7
   498  1801  280A               	ljmp	stringcode
   499  1802  1383               	bcf	3,7
   500  1803  187F               	btfsc	btemp+1,0
   501  1804  1783               	bsf	3,7
   502  1805  0800               	movf	0,w
   503  1806  0A84               	incf	4,f
   504  1807  1903               	skipnz
   505  1808  0AFF               	incf	btemp+1,f
   506  1809  0008               	return
   507  180A                     stringcode:	
   508  180A  087F               	movf	btemp+1,w
   509  180B  397F               	andlw	127
   510  180C  008A               	movwf	10
   511  180D  0804               	movf	4,w
   512  180E  0A84               	incf	4,f
   513  180F  1903               	skipnz
   514  1810  0AFF               	incf	btemp+1,f
   515  1811  0082               	movwf	2
   516  1812                     __stringbase:	
   517  1812                     __end_of__stringtab:	
   518  1812                     __npowers_:	
   519  1812  3400               	retlw	0
   520  1813  3480               	retlw	128
   521  1814  343F               	retlw	63
   522  1815  34CD               	retlw	205
   523  1816  34CC               	retlw	204
   524  1817  343D               	retlw	61
   525  1818  34D7               	retlw	215
   526  1819  3423               	retlw	35
   527  181A  343C               	retlw	60
   528  181B  3412               	retlw	18
   529  181C  3483               	retlw	131
   530  181D  343A               	retlw	58
   531  181E  34B7               	retlw	183
   532  181F  34D1               	retlw	209
   533  1820  3438               	retlw	56
   534  1821  34C6               	retlw	198
   535  1822  3427               	retlw	39
   536  1823  3437               	retlw	55
   537  1824  3438               	retlw	56
   538  1825  3486               	retlw	134
   539  1826  3435               	retlw	53
   540  1827  34C0               	retlw	192
   541  1828  34D6               	retlw	214
   542  1829  3433               	retlw	51
   543  182A  34CC               	retlw	204
   544  182B  342B               	retlw	43
   545  182C  3432               	retlw	50
   546  182D  3470               	retlw	112
   547  182E  3489               	retlw	137
   548  182F  3430               	retlw	48
   549  1830  34E7               	retlw	231
   550  1831  34DB               	retlw	219
   551  1832  342E               	retlw	46
   552  1833  34E5               	retlw	229
   553  1834  343C               	retlw	60
   554  1835  341E               	retlw	30
   555  1836  3442               	retlw	66
   556  1837  34A2               	retlw	162
   557  1838  340D               	retlw	13
   558  1839                     __end_of__npowers_:	
   559  1839                     __powers_:	
   560  1839  3400               	retlw	0
   561  183A  3480               	retlw	128
   562  183B  343F               	retlw	63
   563  183C  3400               	retlw	0
   564  183D  3420               	retlw	32
   565  183E  3441               	retlw	65
   566  183F  3400               	retlw	0
   567  1840  34C8               	retlw	200
   568  1841  3442               	retlw	66
   569  1842  3400               	retlw	0
   570  1843  347A               	retlw	122
   571  1844  3444               	retlw	68
   572  1845  3440               	retlw	64
   573  1846  341C               	retlw	28
   574  1847  3446               	retlw	70
   575  1848  3450               	retlw	80
   576  1849  34C3               	retlw	195
   577  184A  3447               	retlw	71
   578  184B  3424               	retlw	36
   579  184C  3474               	retlw	116
   580  184D  3449               	retlw	73
   581  184E  3497               	retlw	151
   582  184F  3418               	retlw	24
   583  1850  344B               	retlw	75
   584  1851  34BC               	retlw	188
   585  1852  34BE               	retlw	190
   586  1853  344C               	retlw	76
   587  1854  346B               	retlw	107
   588  1855  346E               	retlw	110
   589  1856  344E               	retlw	78
   590  1857  3403               	retlw	3
   591  1858  3415               	retlw	21
   592  1859  3450               	retlw	80
   593  185A  3479               	retlw	121
   594  185B  34AD               	retlw	173
   595  185C  3460               	retlw	96
   596  185D  34F3               	retlw	243
   597  185E  3449               	retlw	73
   598  185F  3471               	retlw	113
   599  1860                     __end_of__powers_:	
   600  1860                     _dpowers:	
   601  1860  3401               	retlw	1
   602  1861  3400               	retlw	0
   603  1862  3400               	retlw	0
   604  1863  3400               	retlw	0
   605  1864  340A               	retlw	10
   606  1865  3400               	retlw	0
   607  1866  3400               	retlw	0
   608  1867  3400               	retlw	0
   609  1868  3464               	retlw	100
   610  1869  3400               	retlw	0
   611  186A  3400               	retlw	0
   612  186B  3400               	retlw	0
   613  186C  34E8               	retlw	232
   614  186D  3403               	retlw	3
   615  186E  3400               	retlw	0
   616  186F  3400               	retlw	0
   617  1870  3410               	retlw	16
   618  1871  3427               	retlw	39
   619  1872  3400               	retlw	0
   620  1873  3400               	retlw	0
   621  1874  34A0               	retlw	160
   622  1875  3486               	retlw	134
   623  1876  3401               	retlw	1
   624  1877  3400               	retlw	0
   625  1878  3440               	retlw	64
   626  1879  3442               	retlw	66
   627  187A  340F               	retlw	15
   628  187B  3400               	retlw	0
   629  187C  3480               	retlw	128
   630  187D  3496               	retlw	150
   631  187E  3498               	retlw	152
   632  187F  3400               	retlw	0
   633  1880  3400               	retlw	0
   634  1881  34E1               	retlw	225
   635  1882  34F5               	retlw	245
   636  1883  3405               	retlw	5
   637  1884  3400               	retlw	0
   638  1885  34CA               	retlw	202
   639  1886  349A               	retlw	154
   640  1887  343B               	retlw	59
   641  1888                     __end_of_dpowers:	
   642  001F                     _ADCON0	set	31
   643  001F                     _ADCON0bits	set	31
   644  001E                     _ADRESH	set	30
   645  000B                     _INTCON	set	11
   646  000B                     _INTCONbits	set	11
   647  000C                     _PIR1bits	set	12
   648  0010                     _T1CONbits	set	16
   649  0001                     _TMR0	set	1
   650  000F                     _TMR1H	set	15
   651  000E                     _TMR1L	set	14
   652  0019                     _TXREG	set	25
   653  0018                     _CARRY	set	24
   654  00C4                     _CREN	set	196
   655  005F                     _GIE	set	95
   656  0029                     _RA1	set	41
   657  002A                     _RA2	set	42
   658  002B                     _RA3	set	43
   659  002C                     _RA4	set	44
   660  002D                     _RA5	set	45
   661  0030                     _RB0	set	48
   662  0031                     _RB1	set	49
   663  0032                     _RB2	set	50
   664  0033                     _RB3	set	51
   665  0034                     _RB4	set	52
   666  0035                     _RB5	set	53
   667  0036                     _RB6	set	54
   668  0037                     _RB7	set	55
   669  0038                     _RC0	set	56
   670  0039                     _RC1	set	57
   671  003B                     _RC3	set	59
   672  003C                     _RC4	set	60
   673  003D                     _RC5	set	61
   674  00C7                     _SPEN	set	199
   675  009F                     _ADCON1	set	159
   676  009E                     _ADRESL	set	158
   677  0081                     _OPTION_REG	set	129
   678  0081                     _OPTION_REGbits	set	129
   679  008C                     _PIE1bits	set	140
   680  0099                     _SPBRG	set	153
   681  009A                     _SPBRGH	set	154
   682  0085                     _TRISA	set	133
   683  0086                     _TRISB	set	134
   684  0086                     _TRISBbits	set	134
   685  0087                     _TRISC	set	135
   686  0087                     _TRISCbits	set	135
   687  04C2                     _BRGH	set	1218
   688  04C4                     _SYNC	set	1220
   689  04C1                     _TRMT	set	1217
   690  04C5                     _TXEN	set	1221
   691  010D                     _EEADR	set	269
   692  010C                     _EEDATA	set	268
   693  0105                     _WDTCONbits	set	261
   694  0188                     _ANSEL	set	392
   695  0189                     _ANSELH	set	393
   696  018C                     _EECON1	set	396
   697  018D                     _EECON2	set	397
   698  0C3B                     _BRG16	set	3131
   699  0C60                     _RD	set	3168
   700  0C61                     _WR	set	3169
   701  0C62                     _WREN	set	3170
   702  1888                     STR_6:	
   703  1888  3441               	retlw	65	;'A'
   704  1889  3469               	retlw	105	;'i'
   705  188A  3472               	retlw	114	;'r'
   706  188B  3420               	retlw	32	;' '
   707  188C  346D               	retlw	109	;'m'
   708  188D  346F               	retlw	111	;'o'
   709  188E  3469               	retlw	105	;'i'
   710  188F  3473               	retlw	115	;'s'
   711  1890  3474               	retlw	116	;'t'
   712  1891  3420               	retlw	32	;' '
   713  1892  3420               	retlw	32	;' '
   714  1893  3420               	retlw	32	;' '
   715  1894  3420               	retlw	32	;' '
   716  1895  3420               	retlw	32	;' '
   717  1896  3420               	retlw	32	;' '
   718  1897  3420               	retlw	32	;' '
   719  1898  3400               	retlw	0
   720  1899                     STR_8:	
   721  1899  3443               	retlw	67	;'C'
   722  189A  344F               	retlw	79	;'O'
   723  189B  3432               	retlw	50	;'2'
   724  189C  3420               	retlw	32	;' '
   725  189D  3469               	retlw	105	;'i'
   726  189E  346E               	retlw	110	;'n'
   727  189F  3420               	retlw	32	;' '
   728  18A0  3461               	retlw	97	;'a'
   729  18A1  3469               	retlw	105	;'i'
   730  18A2  3472               	retlw	114	;'r'
   731  18A3  3420               	retlw	32	;' '
   732  18A4  3420               	retlw	32	;' '
   733  18A5  3420               	retlw	32	;' '
   734  18A6  3420               	retlw	32	;' '
   735  18A7  3420               	retlw	32	;' '
   736  18A8  3420               	retlw	32	;' '
   737  18A9  3400               	retlw	0
   738  18AA                     STR_10:	
   739  18AA  344D               	retlw	77	;'M'
   740  18AB  3465               	retlw	101	;'e'
   741  18AC  3461               	retlw	97	;'a'
   742  18AD  3473               	retlw	115	;'s'
   743  18AE  3475               	retlw	117	;'u'
   744  18AF  3472               	retlw	114	;'r'
   745  18B0  3469               	retlw	105	;'i'
   746  18B1  346E               	retlw	110	;'n'
   747  18B2  3467               	retlw	103	;'g'
   748  18B3  342E               	retlw	46	;'.'
   749  18B4  342E               	retlw	46	;'.'
   750  18B5  342E               	retlw	46	;'.'
   751  18B6  3420               	retlw	32	;' '
   752  18B7  3420               	retlw	32	;' '
   753  18B8  3420               	retlw	32	;' '
   754  18B9  3420               	retlw	32	;' '
   755  18BA  3400               	retlw	0
   756  18BB                     STR_23:	
   757  18BB  3453               	retlw	83	;'S'
   758  18BC  3465               	retlw	101	;'e'
   759  18BD  3474               	retlw	116	;'t'
   760  18BE  3420               	retlw	32	;' '
   761  18BF  3461               	retlw	97	;'a'
   762  18C0  3469               	retlw	105	;'i'
   763  18C1  3472               	retlw	114	;'r'
   764  18C2  3420               	retlw	32	;' '
   765  18C3  3474               	retlw	116	;'t'
   766  18C4  3465               	retlw	101	;'e'
   767  18C5  346D               	retlw	109	;'m'
   768  18C6  3470               	retlw	112	;'p'
   769  18C7  342E               	retlw	46	;'.'
   770  18C8  3420               	retlw	32	;' '
   771  18C9  3420               	retlw	32	;' '
   772  18CA  3420               	retlw	32	;' '
   773  18CB  3400               	retlw	0
   774  18CC                     STR_18:	
   775  18CC  3453               	retlw	83	;'S'
   776  18CD  3465               	retlw	101	;'e'
   777  18CE  3474               	retlw	116	;'t'
   778  18CF  3420               	retlw	32	;' '
   779  18D0  3461               	retlw	97	;'a'
   780  18D1  3469               	retlw	105	;'i'
   781  18D2  3472               	retlw	114	;'r'
   782  18D3  3420               	retlw	32	;' '
   783  18D4  346D               	retlw	109	;'m'
   784  18D5  346F               	retlw	111	;'o'
   785  18D6  3469               	retlw	105	;'i'
   786  18D7  3473               	retlw	115	;'s'
   787  18D8  3474               	retlw	116	;'t'
   788  18D9  3420               	retlw	32	;' '
   789  18DA  3420               	retlw	32	;' '
   790  18DB  3420               	retlw	32	;' '
   791  18DC  3400               	retlw	0
   792  18DD                     STR_14:	
   793  18DD  3453               	retlw	83	;'S'
   794  18DE  3465               	retlw	101	;'e'
   795  18DF  3474               	retlw	116	;'t'
   796  18E0  3420               	retlw	32	;' '
   797  18E1  3443               	retlw	67	;'C'
   798  18E2  344F               	retlw	79	;'O'
   799  18E3  3432               	retlw	50	;'2'
   800  18E4  3420               	retlw	32	;' '
   801  18E5  3469               	retlw	105	;'i'
   802  18E6  346E               	retlw	110	;'n'
   803  18E7  3420               	retlw	32	;' '
   804  18E8  3461               	retlw	97	;'a'
   805  18E9  3469               	retlw	105	;'i'
   806  18EA  3472               	retlw	114	;'r'
   807  18EB  3420               	retlw	32	;' '
   808  18EC  3420               	retlw	32	;' '
   809  18ED  3400               	retlw	0
   810  18EE                     STR_3:	
   811  18EE  3441               	retlw	65	;'A'
   812  18EF  3469               	retlw	105	;'i'
   813  18F0  3472               	retlw	114	;'r'
   814  18F1  3420               	retlw	32	;' '
   815  18F2  3474               	retlw	116	;'t'
   816  18F3  3465               	retlw	101	;'e'
   817  18F4  346D               	retlw	109	;'m'
   818  18F5  3470               	retlw	112	;'p'
   819  18F6  3465               	retlw	101	;'e'
   820  18F7  3472               	retlw	114	;'r'
   821  18F8  3461               	retlw	97	;'a'
   822  18F9  3474               	retlw	116	;'t'
   823  18FA  3475               	retlw	117	;'u'
   824  18FB  3472               	retlw	114	;'r'
   825  18FC  3465               	retlw	101	;'e'
   826  18FD  3420               	retlw	32	;' '
   827  18FE  3400               	retlw	0
   828  18FF                     STR_12:	
   829  18FF  3453               	retlw	83	;'S'
   830  1900  346F               	retlw	111	;'o'
   831  1901  3469               	retlw	105	;'i'
   832  1902  346C               	retlw	108	;'l'
   833  1903  3420               	retlw	32	;' '
   834  1904  3474               	retlw	116	;'t'
   835  1905  3465               	retlw	101	;'e'
   836  1906  346D               	retlw	109	;'m'
   837  1907  3470               	retlw	112	;'p'
   838  1908  3465               	retlw	101	;'e'
   839  1909  3472               	retlw	114	;'r'
   840  190A  3461               	retlw	97	;'a'
   841  190B  3474               	retlw	116	;'t'
   842  190C  3475               	retlw	117	;'u'
   843  190D  3472               	retlw	114	;'r'
   844  190E  3465               	retlw	101	;'e'
   845  190F  3400               	retlw	0
   846  1910                     STR_1:	
   847  1910  3447               	retlw	71	;'G'
   848  1911  3472               	retlw	114	;'r'
   849  1912  3465               	retlw	101	;'e'
   850  1913  3473               	retlw	115	;'s'
   851  1914  346B               	retlw	107	;'k'
   852  1915  3461               	retlw	97	;'a'
   853  1916  3420               	retlw	32	;' '
   854  1917  3453               	retlw	83	;'S'
   855  1918  3448               	retlw	72	;'H'
   856  1919  3454               	retlw	84	;'T'
   857  191A  3437               	retlw	55	;'7'
   858  191B  3431               	retlw	49	;'1'
   859  191C  3421               	retlw	33	;'!'
   860  191D  3400               	retlw	0
   861  191E                     STR_7:	
   862  191E  3420               	retlw	32	;' '
   863  191F  3425               	retlw	37	;'%'
   864  1920  3420               	retlw	32	;' '
   865  1921  3420               	retlw	32	;' '
   866  1922  3420               	retlw	32	;' '
   867  1923  3420               	retlw	32	;' '
   868  1924  3420               	retlw	32	;' '
   869  1925  3420               	retlw	32	;' '
   870  1926  3420               	retlw	32	;' '
   871  1927  3420               	retlw	32	;' '
   872  1928  3420               	retlw	32	;' '
   873  1929  3420               	retlw	32	;' '
   874  192A  3400               	retlw	0
   875  192B                     STR_4:	
   876  192B  3420               	retlw	32	;' '
   877  192C  3464               	retlw	100	;'d'
   878  192D  3465               	retlw	101	;'e'
   879  192E  3467               	retlw	103	;'g'
   880  192F  3420               	retlw	32	;' '
   881  1930  3420               	retlw	32	;' '
   882  1931  3420               	retlw	32	;' '
   883  1932  3420               	retlw	32	;' '
   884  1933  3420               	retlw	32	;' '
   885  1934  3420               	retlw	32	;' '
   886  1935  3420               	retlw	32	;' '
   887  1936  3420               	retlw	32	;' '
   888  1937  3400               	retlw	0
   889  1938                     STR_9:	
   890  1938  3420               	retlw	32	;' '
   891  1939  3470               	retlw	112	;'p'
   892  193A  3470               	retlw	112	;'p'
   893  193B  346D               	retlw	109	;'m'
   894  193C  3420               	retlw	32	;' '
   895  193D  3420               	retlw	32	;' '
   896  193E  3420               	retlw	32	;' '
   897  193F  3420               	retlw	32	;' '
   898  1940  3420               	retlw	32	;' '
   899  1941  3420               	retlw	32	;' '
   900  1942  3420               	retlw	32	;' '
   901  1943  3420               	retlw	32	;' '
   902  1944  3400               	retlw	0
   903  1945                     STR_28:	
   904  1945  340A               	retlw	10
   905  1946  3454               	retlw	84	;'T'
   906  1947  3447               	retlw	71	;'G'
   907  1948  3453               	retlw	83	;'S'
   908  1949  3420               	retlw	32	;' '
   909  194A  344F               	retlw	79	;'O'
   910  194B  344B               	retlw	75	;'K'
   911  194C  342E               	retlw	46	;'.'
   912  194D  340A               	retlw	10
   913  194E  3400               	retlw	0
   914  194F                     STR_27:	
   915  194F  340A               	retlw	10
   916  1950  3453               	retlw	83	;'S'
   917  1951  3448               	retlw	72	;'H'
   918  1952  3454               	retlw	84	;'T'
   919  1953  3420               	retlw	32	;' '
   920  1954  344F               	retlw	79	;'O'
   921  1955  344B               	retlw	75	;'K'
   922  1956  342E               	retlw	46	;'.'
   923  1957  340A               	retlw	10
   924  1958  3400               	retlw	0
   925  1959                     STR_29:	
   926  1959  340A               	retlw	10
   927  195A  3444               	retlw	68	;'D'
   928  195B  3453               	retlw	83	;'S'
   929  195C  3420               	retlw	32	;' '
   930  195D  344F               	retlw	79	;'O'
   931  195E  344B               	retlw	75	;'K'
   932  195F  342E               	retlw	46	;'.'
   933  1960  340A               	retlw	10
   934  1961  3400               	retlw	0
   935  1962                     STR_2:	
   936  1962  3420               	retlw	32	;' '
   937  1963  3425               	retlw	37	;'%'
   938  1964  342E               	retlw	46	;'.'
   939  1965  3431               	retlw	49	;'1'
   940  1966  3466               	retlw	102	;'f'
   941  1967  3400               	retlw	0
   942  1922                     
   943                           ; #config settings
   944  0000                     
   945                           	psect	cinit
   946  000F                     start_initialization:	
   947  000F                     __initialization:	
   948  000F  30A0               	movlw	low __pbssBANK1
   949                           
   950                           ; Clear objects allocated to COMMON
   951  0010  01FA               	clrf	__pbssCOMMON& (0+127)
   952  0011  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   953                           
   954                           ; Clear objects allocated to BANK0
   955  0012  01EE               	clrf	__pbssBANK0& (0+127)
   956                           
   957                           ; Clear objects allocated to BANK1
   958  0013  1383               	bcf	3,7	;select IRP bank0
   959  0014  0084               	movwf	4
   960  0015  30C2               	movlw	low (__pbssBANK1+34)
   961  0016  120A  158A  2008   	fcall	clear_ram0
   962  0019                     end_of_initialization:	
   963                           ;End of C runtime variable initialization code
   964                           
   965  0019                     __end_of__initialization:	
   966  0019  0183               	clrf	3
   967  001A  160A  158A  2D70   	ljmp	_main	;jump to C main() function
   968                           
   969                           	psect	bssEEDATA
   970  0000                     __pbssEEDATA:	
   971  0000                     _zeljena_temperatura:	
   972  0000  0000               	db	0
   973  0001  0000               	db	0
   974  0002  0000               	db	0
   975  0003                     _zeljena_vlaznost:	
   976  0003  0000               	db	0
   977  0004  0000               	db	0
   978  0005  0000               	db	0
   979  0006                     _zeljena_co2:	
   980  0006  0000               	db	0
   981  0007  0000               	db	0
   982                           
   983                           	psect	bssCOMMON
   984  007A                     __pbssCOMMON:	
   985  007A                     _minus_flag:	
   986  007A                     	ds	1
   987  007B                     _plus_flag:	
   988  007B                     	ds	1
   989                           
   990                           	psect	bssBANK0
   991  006E                     __pbssBANK0:	
   992  006E                     _ok_flag:	
   993  006E                     	ds	1
   994                           
   995                           	psect	bssBANK1
   996  00A0                     __pbssBANK1:	
   997  00A0                     _tempervalue:	
   998  00A0                     	ds	4
   999  00A4                     _t:	
  1000  00A4                     	ds	3
  1001  00A7                     _co2:	
  1002  00A7                     	ds	2
  1003  00A9                     _tmr_count:	
  1004  00A9                     	ds	2
  1005  00AB                     _disp:	
  1006  00AB                     	ds	1
  1007  00AC                     _disp_count:	
  1008  00AC                     	ds	1
  1009  00AD                     _measure:	
  1010  00AD                     	ds	1
  1011  00AE                     _measure_co2:	
  1012  00AE                     	ds	1
  1013  00AF                     _menu_flag:	
  1014  00AF                     	ds	1
  1015  00B0                     _ok_flag_co2:	
  1016  00B0                     	ds	1
  1017  00B1                     _ok_flag_humi:	
  1018  00B1                     	ds	1
  1019  00B2                     _humidity:	
  1020  00B2                     	ds	5
  1021  00B7                     _temperature:	
  1022  00B7                     	ds	5
  1023  00BC                     _humi:	
  1024  00BC                     	ds	3
  1025  00BF                     _temp:	
  1026  00BF                     	ds	3
  1027                           
  1028                           	psect	clrtext
  1029  0808                     clear_ram0:	
  1030                           ;	Called with FSR containing the base address, and
  1031                           ;	W with the last address+1
  1032                           
  1033  0808  0064               	clrwdt	;clear the watchdog before getting into this loop
  1034  0809                     clrloop0:	
  1035  0809  0180               	clrf	0	;clear RAM location pointed to by FSR
  1036  080A  0A84               	incf	4,f	;increment pointer
  1037  080B  0604               	xorwf	4,w	;XOR with final address
  1038  080C  1903               	btfsc	3,2	;have we reached the end yet?
  1039  080D  3400               	retlw	0	;all done for this memory range, return
  1040  080E  0604               	xorwf	4,w	;XOR again to restore value
  1041  080F  2809               	goto	clrloop0	;do the next byte
  1042                           
  1043                           	psect	cstackBANK1
  1044  00C2                     __pcstackBANK1:	
  1045  00C2                     ??_getResSHT71:	
  1046  00C2                     _sprintf$1257:	
  1047                           ; 0 bytes @ 0x0
  1048                           
  1049                           
  1050                           ; 3 bytes @ 0x0
  1051  00C2                     	ds	3
  1052  00C5                     getResSHT71@inp:	
  1053  00C5                     sprintf@ap:	
  1054                           ; 1 bytes @ 0x3
  1055                           
  1056                           
  1057                           ; 1 bytes @ 0x3
  1058  00C5                     	ds	1
  1059  00C6                     getResSHT71@p_temp:	
  1060  00C6                     sprintf@flag:	
  1061                           ; 1 bytes @ 0x4
  1062                           
  1063                           
  1064                           ; 2 bytes @ 0x4
  1065  00C6                     	ds	1
  1066  00C7                     getResSHT71@error:	
  1067                           
  1068                           ; 1 bytes @ 0x5
  1069  00C7                     	ds	1
  1070  00C8                     getResSHT71@humi_val:	
  1071  00C8                     sprintf@val:	
  1072                           ; 3 bytes @ 0x6
  1073                           
  1074                           
  1075                           ; 4 bytes @ 0x6
  1076  00C8                     	ds	3
  1077  00CB                     getResSHT71@checksum:	
  1078                           
  1079                           ; 1 bytes @ 0x9
  1080  00CB                     	ds	1
  1081  00CC                     getResSHT71@temp_val:	
  1082  00CC                     sprintf@tmpval:	
  1083                           ; 3 bytes @ 0xA
  1084                           
  1085                           
  1086                           ; 4 bytes @ 0xA
  1087  00CC                     	ds	4
  1088  00D0                     sprintf@exp:	
  1089                           
  1090                           ; 2 bytes @ 0xE
  1091  00D0                     	ds	2
  1092  00D2                     sprintf@prec:	
  1093                           
  1094                           ; 2 bytes @ 0x10
  1095  00D2                     	ds	2
  1096  00D4                     sprintf@sp:	
  1097                           
  1098                           ; 1 bytes @ 0x12
  1099  00D4                     	ds	1
  1100  00D5                     sprintf@fval:	
  1101                           
  1102                           ; 3 bytes @ 0x13
  1103  00D5                     	ds	3
  1104  00D8                     sprintf@c:	
  1105                           
  1106                           ; 1 bytes @ 0x16
  1107  00D8                     	ds	1
  1108  00D9                     ??_main:	
  1109                           
  1110                           ; 0 bytes @ 0x17
  1111  00D9                     	ds	2
  1112                           
  1113                           	psect	cstackCOMMON
  1114  0070                     __pcstackCOMMON:	
  1115  0070                     ?_isdigit:	
  1116  0070                     ?_writeDS18B20:	
  1117                           ; 1 bit 
  1118                           
  1119  0070                     ?_LcdPort:	
  1120                           ; 0 bytes @ 0x0
  1121                           
  1122  0070                     ?_LcdCmd:	
  1123                           ; 0 bytes @ 0x0
  1124                           
  1125  0070                     ?_LcdInit:	
  1126                           ; 0 bytes @ 0x0
  1127                           
  1128  0070                     ?_LcdWriteChar:	
  1129                           ; 0 bytes @ 0x0
  1130                           
  1131  0070                     ?_initSHT71:	
  1132                           ; 0 bytes @ 0x0
  1133                           
  1134  0070                     ?_tranStartSHT71:	
  1135                           ; 0 bytes @ 0x0
  1136                           
  1137  0070                     ?_connectionResetSHT71:	
  1138                           ; 0 bytes @ 0x0
  1139                           
  1140  0070                     ?_adcInit:	
  1141                           ; 0 bytes @ 0x0
  1142                           
  1143  0070                     ?_isr:	
  1144                           ; 0 bytes @ 0x0
  1145                           
  1146  0070                     ??_isr:	
  1147                           ; 0 bytes @ 0x0
  1148                           
  1149  0070                     ?_initWDT:	
  1150                           ; 0 bytes @ 0x0
  1151                           
  1152  0070                     ?_IOPinsConfig:	
  1153                           ; 0 bytes @ 0x0
  1154                           
  1155  0070                     ?_IOPinsInit:	
  1156                           ; 0 bytes @ 0x0
  1157                           
  1158  0070                     ?_resetValues:	
  1159                           ; 0 bytes @ 0x0
  1160                           
  1161  0070                     ?_initTimer0:	
  1162                           ; 0 bytes @ 0x0
  1163                           
  1164  0070                     ?_initTimer1:	
  1165                           ; 0 bytes @ 0x0
  1166                           
  1167  0070                     ?_regulacija:	
  1168                           ; 0 bytes @ 0x0
  1169                           
  1170  0070                     ?_manage_buttons:	
  1171                           ; 0 bytes @ 0x0
  1172                           
  1173  0070                     ?_menuCO2:	
  1174                           ; 0 bytes @ 0x0
  1175                           
  1176  0070                     ?_menuHumi:	
  1177                           ; 0 bytes @ 0x0
  1178                           
  1179  0070                     ?_menu:	
  1180                           ; 0 bytes @ 0x0
  1181                           
  1182  0070                     ?_main:	
  1183                           ; 0 bytes @ 0x0
  1184                           
  1185  0070                     ?_UARTWrite:	
  1186                           ; 0 bytes @ 0x0
  1187                           
  1188  0070                     ?_writeByteSHT71:	
  1189                           ; 0 bytes @ 0x0
  1190                           
  1191  0070                     ?_readByteSHT71:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ?_resetDS18B20:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ?_readDS18B20:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200                           
  1201                           ; 1 bytes @ 0x0
  1202  0070                     	ds	2
  1203  0072                     ??_writeByteSHT71:	
  1204  0072                     ??_readByteSHT71:	
  1205                           ; 0 bytes @ 0x2
  1206                           
  1207  0072                     ??_isdigit:	
  1208                           ; 0 bytes @ 0x2
  1209                           
  1210  0072                     ??_resetDS18B20:	
  1211                           ; 0 bytes @ 0x2
  1212                           
  1213  0072                     ??_writeDS18B20:	
  1214                           ; 0 bytes @ 0x2
  1215                           
  1216  0072                     ??_readDS18B20:	
  1217                           ; 0 bytes @ 0x2
  1218                           
  1219  0072                     ??_LcdPort:	
  1220                           ; 0 bytes @ 0x2
  1221                           
  1222  0072                     ??_initSHT71:	
  1223                           ; 0 bytes @ 0x2
  1224                           
  1225  0072                     ??_tranStartSHT71:	
  1226                           ; 0 bytes @ 0x2
  1227                           
  1228  0072                     ??_connectionResetSHT71:	
  1229                           ; 0 bytes @ 0x2
  1230                           
  1231  0072                     ??_adcInit:	
  1232                           ; 0 bytes @ 0x2
  1233                           
  1234  0072                     ??_initWDT:	
  1235                           ; 0 bytes @ 0x2
  1236                           
  1237  0072                     ??_IOPinsConfig:	
  1238                           ; 0 bytes @ 0x2
  1239                           
  1240  0072                     ??_IOPinsInit:	
  1241                           ; 0 bytes @ 0x2
  1242                           
  1243  0072                     ??_resetValues:	
  1244                           ; 0 bytes @ 0x2
  1245                           
  1246  0072                     ??_initTimer0:	
  1247                           ; 0 bytes @ 0x2
  1248                           
  1249  0072                     ??_initTimer1:	
  1250                           ; 0 bytes @ 0x2
  1251                           
  1252  0072                     ??_manage_buttons:	
  1253                           ; 0 bytes @ 0x2
  1254                           
  1255  0072                     ??_UARTWrite:	
  1256                           ; 0 bytes @ 0x2
  1257                           
  1258  0072                     ?_eecpymem:	
  1259                           ; 0 bytes @ 0x2
  1260                           
  1261  0072                     ?_memcpyee:	
  1262                           ; 0 bytes @ 0x2
  1263                           
  1264  0072                     ?___lbmod:	
  1265                           ; 0 bytes @ 0x2
  1266                           
  1267  0072                     ?_adcRead:	
  1268                           ; 1 bytes @ 0x2
  1269                           
  1270  0072                     ?___wmul:	
  1271                           ; 2 bytes @ 0x2
  1272                           
  1273  0072                     ?___awmod:	
  1274                           ; 2 bytes @ 0x2
  1275                           
  1276  0072                     ?___lwdiv:	
  1277                           ; 2 bytes @ 0x2
  1278                           
  1279  0072                     ?___ftpack:	
  1280                           ; 2 bytes @ 0x2
  1281                           
  1282  0072                     ?___ftneg:	
  1283                           ; 3 bytes @ 0x2
  1284                           
  1285  0072                     ?__tdiv_to_l_:	
  1286                           ; 3 bytes @ 0x2
  1287                           
  1288  0072                     ?__div_to_l_:	
  1289                           ; 4 bytes @ 0x2
  1290                           
  1291  0072                     ?___lldiv:	
  1292                           ; 4 bytes @ 0x2
  1293                           
  1294  0072                     ?___llmod:	
  1295                           ; 4 bytes @ 0x2
  1296                           
  1297  0072                     LcdPort@a:	
  1298                           ; 4 bytes @ 0x2
  1299                           
  1300  0072                     connectionResetSHT71@i:	
  1301                           ; 1 bytes @ 0x2
  1302                           
  1303  0072                     UARTWrite@data:	
  1304                           ; 1 bytes @ 0x2
  1305                           
  1306  0072                     eecpymem@from:	
  1307                           ; 1 bytes @ 0x2
  1308                           
  1309  0072                     memcpyee@from:	
  1310                           ; 1 bytes @ 0x2
  1311                           
  1312  0072                     _isdigit$955:	
  1313                           ; 1 bytes @ 0x2
  1314                           
  1315  0072                     ___lbmod@divisor:	
  1316                           ; 1 bytes @ 0x2
  1317                           
  1318  0072                     ___wmul@multiplier:	
  1319                           ; 1 bytes @ 0x2
  1320                           
  1321  0072                     ___awmod@divisor:	
  1322                           ; 2 bytes @ 0x2
  1323                           
  1324  0072                     ___lwdiv@divisor:	
  1325                           ; 2 bytes @ 0x2
  1326                           
  1327  0072                     __div_to_l_@f1:	
  1328                           ; 2 bytes @ 0x2
  1329                           
  1330  0072                     ___ftpack@arg:	
  1331                           ; 3 bytes @ 0x2
  1332                           
  1333  0072                     __tdiv_to_l_@f1:	
  1334                           ; 3 bytes @ 0x2
  1335                           
  1336  0072                     ___ftneg@f1:	
  1337                           ; 3 bytes @ 0x2
  1338                           
  1339  0072                     ___lldiv@divisor:	
  1340                           ; 3 bytes @ 0x2
  1341                           
  1342  0072                     ___llmod@divisor:	
  1343                           ; 4 bytes @ 0x2
  1344                           
  1345                           
  1346                           ; 4 bytes @ 0x2
  1347  0072                     	ds	1
  1348  0073                     ?_UARTWriteString:	
  1349  0073                     ??_LcdCmd:	
  1350                           ; 0 bytes @ 0x3
  1351                           
  1352  0073                     ??_LcdWriteChar:	
  1353                           ; 0 bytes @ 0x3
  1354                           
  1355  0073                     ??___lbmod:	
  1356                           ; 0 bytes @ 0x3
  1357                           
  1358  0073                     writeDS18B20@Cmd:	
  1359                           ; 0 bytes @ 0x3
  1360                           
  1361  0073                     readDS18B20@result:	
  1362                           ; 1 bytes @ 0x3
  1363                           
  1364  0073                     readByteSHT71@ack:	
  1365                           ; 1 bytes @ 0x3
  1366                           
  1367  0073                     writeByteSHT71@cmd:	
  1368                           ; 1 bytes @ 0x3
  1369                           
  1370  0073                     eecpymem@size:	
  1371                           ; 1 bytes @ 0x3
  1372                           
  1373  0073                     memcpyee@size:	
  1374                           ; 1 bytes @ 0x3
  1375                           
  1376  0073                     isdigit@c:	
  1377                           ; 1 bytes @ 0x3
  1378                           
  1379  0073                     UARTWriteString@str:	
  1380                           ; 1 bytes @ 0x3
  1381                           
  1382                           
  1383                           ; 2 bytes @ 0x3
  1384  0073                     	ds	1
  1385  0074                     ??_adcRead:	
  1386  0074                     ??_eecpymem:	
  1387                           ; 0 bytes @ 0x4
  1388                           
  1389  0074                     ??_memcpyee:	
  1390                           ; 0 bytes @ 0x4
  1391                           
  1392  0074                     writeDS18B20@i:	
  1393                           ; 0 bytes @ 0x4
  1394                           
  1395  0074                     readDS18B20@i:	
  1396                           ; 1 bytes @ 0x4
  1397                           
  1398  0074                     LcdWriteChar@temp:	
  1399                           ; 1 bytes @ 0x4
  1400                           
  1401  0074                     readByteSHT71@res:	
  1402                           ; 1 bytes @ 0x4
  1403                           
  1404  0074                     writeByteSHT71@error:	
  1405                           ; 1 bytes @ 0x4
  1406                           
  1407  0074                     eecpymem@cp:	
  1408                           ; 1 bytes @ 0x4
  1409                           
  1410  0074                     memcpyee@ptr:	
  1411                           ; 1 bytes @ 0x4
  1412                           
  1413  0074                     ___lbmod@dividend:	
  1414                           ; 1 bytes @ 0x4
  1415                           
  1416  0074                     ___wmul@multiplicand:	
  1417                           ; 1 bytes @ 0x4
  1418                           
  1419  0074                     ___awmod@dividend:	
  1420                           ; 2 bytes @ 0x4
  1421                           
  1422  0074                     ___lwdiv@dividend:	
  1423                           ; 2 bytes @ 0x4
  1424                           
  1425                           
  1426                           ; 2 bytes @ 0x4
  1427  0074                     	ds	1
  1428  0075                     ??_UARTWriteString:	
  1429  0075                     ??___ftneg:	
  1430                           ; 0 bytes @ 0x5
  1431                           
  1432  0075                     LcdCmd@a:	
  1433                           ; 0 bytes @ 0x5
  1434                           
  1435  0075                     LcdWriteChar@y:	
  1436                           ; 1 bytes @ 0x5
  1437                           
  1438  0075                     readByteSHT71@i:	
  1439                           ; 1 bytes @ 0x5
  1440                           
  1441  0075                     writeByteSHT71@i:	
  1442                           ; 1 bytes @ 0x5
  1443                           
  1444  0075                     eecpymem@to:	
  1445                           ; 1 bytes @ 0x5
  1446                           
  1447  0075                     memcpyee@to:	
  1448                           ; 1 bytes @ 0x5
  1449                           
  1450  0075                     ___ftpack@exp:	
  1451                           ; 1 bytes @ 0x5
  1452                           
  1453  0075                     ___lbmod@counter:	
  1454                           ; 1 bytes @ 0x5
  1455                           
  1456  0075                     __div_to_l_@f2:	
  1457                           ; 1 bytes @ 0x5
  1458                           
  1459  0075                     __tdiv_to_l_@f2:	
  1460                           ; 3 bytes @ 0x5
  1461                           
  1462                           
  1463                           ; 3 bytes @ 0x5
  1464  0075                     	ds	1
  1465  0076                     ?_LcdSetCursor:	
  1466  0076                     ??_LcdInit:	
  1467                           ; 0 bytes @ 0x6
  1468                           
  1469  0076                     ??___wmul:	
  1470                           ; 0 bytes @ 0x6
  1471                           
  1472  0076                     ??___awmod:	
  1473                           ; 0 bytes @ 0x6
  1474                           
  1475  0076                     ??___lwdiv:	
  1476                           ; 0 bytes @ 0x6
  1477                           
  1478  0076                     ?_measureSHT71:	
  1479                           ; 0 bytes @ 0x6
  1480                           
  1481  0076                     ?_readStatusRegSHT71:	
  1482                           ; 1 bytes @ 0x6
  1483                           
  1484  0076                     ?___eetoi:	
  1485                           ; 1 bytes @ 0x6
  1486                           
  1487  0076                     ?___eetoft:	
  1488                           ; 2 bytes @ 0x6
  1489                           
  1490  0076                     LcdSetCursor@b:	
  1491                           ; 3 bytes @ 0x6
  1492                           
  1493  0076                     LcdWriteChar@a:	
  1494                           ; 1 bytes @ 0x6
  1495                           
  1496  0076                     measureSHT71@p_checksum:	
  1497                           ; 1 bytes @ 0x6
  1498                           
  1499  0076                     readStatusRegSHT71@p_checksum:	
  1500                           ; 1 bytes @ 0x6
  1501                           
  1502  0076                     ___awmod@counter:	
  1503                           ; 1 bytes @ 0x6
  1504                           
  1505  0076                     ___ftpack@sign:	
  1506                           ; 1 bytes @ 0x6
  1507                           
  1508  0076                     ___lbmod@rem:	
  1509                           ; 1 bytes @ 0x6
  1510                           
  1511  0076                     ___wmul@product:	
  1512                           ; 1 bytes @ 0x6
  1513                           
  1514  0076                     ___lwdiv@quotient:	
  1515                           ; 2 bytes @ 0x6
  1516                           
  1517  0076                     ___lldiv@dividend:	
  1518                           ; 2 bytes @ 0x6
  1519                           
  1520  0076                     ___llmod@dividend:	
  1521                           ; 4 bytes @ 0x6
  1522                           
  1523                           
  1524                           ; 4 bytes @ 0x6
  1525  0076                     	ds	1
  1526  0077                     ??___ftpack:	
  1527  0077                     ??_LcdSetCursor:	
  1528                           ; 0 bytes @ 0x7
  1529                           
  1530  0077                     ?_LcdWriteString:	
  1531                           ; 0 bytes @ 0x7
  1532                           
  1533  0077                     ??_readStatusRegSHT71:	
  1534                           ; 0 bytes @ 0x7
  1535                           
  1536  0077                     ?___lbdiv:	
  1537                           ; 0 bytes @ 0x7
  1538                           
  1539  0077                     measureSHT71@mode:	
  1540                           ; 1 bytes @ 0x7
  1541                           
  1542  0077                     readStatusRegSHT71@p_value:	
  1543                           ; 1 bytes @ 0x7
  1544                           
  1545  0077                     ___awmod@sign:	
  1546                           ; 1 bytes @ 0x7
  1547                           
  1548  0077                     ___lbdiv@divisor:	
  1549                           ; 1 bytes @ 0x7
  1550                           
  1551  0077                     LcdWriteString@a:	
  1552                           ; 1 bytes @ 0x7
  1553                           
  1554                           
  1555                           ; 2 bytes @ 0x7
  1556  0077                     	ds	1
  1557  0078                     ??_measureSHT71:	
  1558  0078                     ??___awdiv:	
  1559                           ; 0 bytes @ 0x8
  1560                           
  1561  0078                     ??___lbdiv:	
  1562                           ; 0 bytes @ 0x8
  1563                           
  1564  0078                     ?___bmul:	
  1565                           ; 0 bytes @ 0x8
  1566                           
  1567  0078                     readStatusRegSHT71@error:	
  1568                           ; 1 bytes @ 0x8
  1569                           
  1570  0078                     ___bmul@multiplicand:	
  1571                           ; 1 bytes @ 0x8
  1572                           
  1573  0078                     ___lwdiv@counter:	
  1574                           ; 1 bytes @ 0x8
  1575                           
  1576  0078                     UARTWriteString@i:	
  1577                           ; 1 bytes @ 0x8
  1578                           
  1579                           
  1580                           ; 2 bytes @ 0x8
  1581  0078                     	ds	1
  1582  0079                     ??_LcdWriteInt:	
  1583  0079                     ??_displayCO2:	
  1584                           ; 0 bytes @ 0x9
  1585                           
  1586  0079                     ??___eetoi:	
  1587                           ; 0 bytes @ 0x9
  1588                           
  1589  0079                     ??___itoee:	
  1590                           ; 0 bytes @ 0x9
  1591                           
  1592  0079                     ??___bmul:	
  1593                           ; 0 bytes @ 0x9
  1594                           
  1595  0079                     ___itoee@addr:	
  1596                           ; 0 bytes @ 0x9
  1597                           
  1598                           
  1599                           ; 1 bytes @ 0x9
  1600  0079                     	ds	1
  1601  007A                     ??_UARTInit:	
  1602  007A                     ??_calcSHT71:	
  1603                           ; 0 bytes @ 0xA
  1604                           
  1605  007A                     ??_displayAirTemp:	
  1606                           ; 0 bytes @ 0xA
  1607                           
  1608  007A                     ??_displayAirMoist:	
  1609                           ; 0 bytes @ 0xA
  1610                           
  1611  007A                     ??_displaySoilTemp:	
  1612                           ; 0 bytes @ 0xA
  1613                           
  1614  007A                     ??_menuCO2:	
  1615                           ; 0 bytes @ 0xA
  1616                           
  1617  007A                     ??_menuHumi:	
  1618                           ; 0 bytes @ 0xA
  1619                           
  1620  007A                     ??_menu:	
  1621                           ; 0 bytes @ 0xA
  1622                           
  1623  007A                     ??_fround:	
  1624                           ; 0 bytes @ 0xA
  1625                           
  1626  007A                     ??___eetoft:	
  1627                           ; 0 bytes @ 0xA
  1628                           
  1629  007A                     ??___fttoee:	
  1630                           ; 0 bytes @ 0xA
  1631                           
  1632  007A                     ??___ftge:	
  1633                           ; 0 bytes @ 0xA
  1634                           
  1635  007A                     ??___ftsub:	
  1636                           ; 0 bytes @ 0xA
  1637                           
  1638  007A                     ??___lldiv:	
  1639                           ; 0 bytes @ 0xA
  1640                           
  1641  007A                     ??___llmod:	
  1642                           ; 0 bytes @ 0xA
  1643                           
  1644  007A                     ??___lltoft:	
  1645                           ; 0 bytes @ 0xA
  1646                           
  1647  007A                     ??___lwtoft:	
  1648                           ; 0 bytes @ 0xA
  1649                           
  1650                           
  1651                           	psect	cstackBANK0
  1652  0020                     __pcstackBANK0:	
  1653                           ; 0 bytes @ 0xA
  1654                           
  1655  0020                     ??__tdiv_to_l_:	
  1656  0020                     ??__div_to_l_:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0020                     ??_LcdWriteString:	
  1660                           ; 0 bytes @ 0x0
  1661                           
  1662  0020                     ?___awdiv:	
  1663                           ; 0 bytes @ 0x0
  1664                           
  1665  0020                     ?___lltoft:	
  1666                           ; 2 bytes @ 0x0
  1667                           
  1668  0020                     ?___lwtoft:	
  1669                           ; 3 bytes @ 0x0
  1670                           
  1671  0020                     LcdSetCursor@a:	
  1672                           ; 3 bytes @ 0x0
  1673                           
  1674  0020                     measureSHT71@p_value:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0020                     ___lbdiv@dividend:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0020                     ___llmod@counter:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0020                     adcRead@loop_count:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0020                     ___eetoi@data:	
  1687                           ; 2 bytes @ 0x0
  1688                           
  1689  0020                     ___awdiv@divisor:	
  1690                           ; 2 bytes @ 0x0
  1691                           
  1692  0020                     ___lwtoft@c:	
  1693                           ; 2 bytes @ 0x0
  1694                           
  1695  0020                     ___eetoft@data:	
  1696                           ; 2 bytes @ 0x0
  1697                           
  1698  0020                     ___lldiv@quotient:	
  1699                           ; 3 bytes @ 0x0
  1700                           
  1701  0020                     ___lltoft@c:	
  1702                           ; 4 bytes @ 0x0
  1703                           
  1704                           
  1705                           ; 4 bytes @ 0x0
  1706  0020                     	ds	1
  1707  0021                     LcdSetCursor@z:	
  1708  0021                     measureSHT71@loop_cnt:	
  1709                           ; 1 bytes @ 0x1
  1710                           
  1711  0021                     ___lbdiv@counter:	
  1712                           ; 1 bytes @ 0x1
  1713                           
  1714                           
  1715                           ; 1 bytes @ 0x1
  1716  0021                     	ds	1
  1717  0022                     LcdSetCursor@y:	
  1718  0022                     ___eetoi@addr:	
  1719                           ; 1 bytes @ 0x2
  1720                           
  1721  0022                     ___lbdiv@quotient:	
  1722                           ; 1 bytes @ 0x2
  1723                           
  1724  0022                     measureSHT71@error:	
  1725                           ; 1 bytes @ 0x2
  1726                           
  1727  0022                     adcRead@tempL:	
  1728                           ; 2 bytes @ 0x2
  1729                           
  1730  0022                     ___awdiv@dividend:	
  1731                           ; 2 bytes @ 0x2
  1732                           
  1733                           
  1734                           ; 2 bytes @ 0x2
  1735  0022                     	ds	1
  1736  0023                     ?___itoee:	
  1737  0023                     LcdSetCursor@temp:	
  1738                           ; 2 bytes @ 0x3
  1739                           
  1740  0023                     ___eetoft@addr:	
  1741                           ; 1 bytes @ 0x3
  1742                           
  1743  0023                     ___bmul@product:	
  1744                           ; 1 bytes @ 0x3
  1745                           
  1746  0023                     LcdWriteString@i:	
  1747                           ; 1 bytes @ 0x3
  1748                           
  1749  0023                     ___itoee@data:	
  1750                           ; 2 bytes @ 0x3
  1751                           
  1752  0023                     __tdiv_to_l_@quot:	
  1753                           ; 2 bytes @ 0x3
  1754                           
  1755                           
  1756                           ; 4 bytes @ 0x3
  1757  0023                     	ds	1
  1758  0024                     ?_LcdWriteInt:	
  1759  0024                     ___bmul@multiplier:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0024                     ___awdiv@counter:	
  1763                           ; 1 bytes @ 0x4
  1764                           
  1765  0024                     ___lldiv@counter:	
  1766                           ; 1 bytes @ 0x4
  1767                           
  1768  0024                     ___lltoft@exp:	
  1769                           ; 1 bytes @ 0x4
  1770                           
  1771  0024                     LcdWriteInt@i:	
  1772                           ; 1 bytes @ 0x4
  1773                           
  1774  0024                     measureSHT71@temp:	
  1775                           ; 2 bytes @ 0x4
  1776                           
  1777  0024                     adcRead@tempH:	
  1778                           ; 2 bytes @ 0x4
  1779                           
  1780                           
  1781                           ; 2 bytes @ 0x4
  1782  0024                     	ds	1
  1783  0025                     ?_UARTInit:	
  1784  0025                     ___awdiv@sign:	
  1785                           ; 1 bytes @ 0x5
  1786                           
  1787  0025                     UARTInit@baud_rate:	
  1788                           ; 1 bytes @ 0x5
  1789                           
  1790                           
  1791                           ; 4 bytes @ 0x5
  1792  0025                     	ds	1
  1793  0026                     LcdWriteInt@row:	
  1794  0026                     adcRead@temp:	
  1795                           ; 1 bytes @ 0x6
  1796                           
  1797  0026                     ___awdiv@quotient:	
  1798                           ; 2 bytes @ 0x6
  1799                           
  1800                           
  1801                           ; 2 bytes @ 0x6
  1802  0026                     	ds	1
  1803  0027                     LcdWriteInt@column:	
  1804  0027                     __tdiv_to_l_@cntr:	
  1805                           ; 1 bytes @ 0x7
  1806                           
  1807                           
  1808                           ; 1 bytes @ 0x7
  1809  0027                     	ds	1
  1810  0028                     ?_measureTGS4161:	
  1811  0028                     ?___ftmul:	
  1812                           ; 2 bytes @ 0x8
  1813                           
  1814  0028                     LcdWriteInt@ch_manje_100:	
  1815                           ; 3 bytes @ 0x8
  1816                           
  1817  0028                     __tdiv_to_l_@exp1:	
  1818                           ; 1 bytes @ 0x8
  1819                           
  1820  0028                     ___ftmul@f1:	
  1821                           ; 1 bytes @ 0x8
  1822                           
  1823  0028                     __div_to_l_@quot:	
  1824                           ; 3 bytes @ 0x8
  1825                           
  1826                           
  1827                           ; 4 bytes @ 0x8
  1828  0028                     	ds	1
  1829  0029                     LcdWriteInt@ch_manje_1000:	
  1830  0029                     _UARTInit$1253:	
  1831                           ; 1 bytes @ 0x9
  1832                           
  1833                           
  1834                           ; 4 bytes @ 0x9
  1835  0029                     	ds	1
  1836  002A                     ??_measureTGS4161:	
  1837  002A                     LcdWriteInt@ch:	
  1838                           ; 0 bytes @ 0xA
  1839                           
  1840                           
  1841                           ; 1 bytes @ 0xA
  1842  002A                     	ds	1
  1843  002B                     ?_displayCO2:	
  1844  002B                     displayCO2@co22:	
  1845                           ; 0 bytes @ 0xB
  1846                           
  1847  002B                     ___ftmul@f2:	
  1848                           ; 2 bytes @ 0xB
  1849                           
  1850                           
  1851                           ; 3 bytes @ 0xB
  1852  002B                     	ds	1
  1853  002C                     __div_to_l_@cntr:	
  1854  002C                     measureTGS4161@krez1:	
  1855                           ; 1 bytes @ 0xC
  1856                           
  1857                           
  1858                           ; 2 bytes @ 0xC
  1859  002C                     	ds	1
  1860  002D                     __div_to_l_@exp1:	
  1861                           
  1862                           ; 1 bytes @ 0xD
  1863  002D                     	ds	1
  1864  002E                     ??___ftmul:	
  1865  002E                     measureTGS4161@krez2:	
  1866                           ; 0 bytes @ 0xE
  1867                           
  1868  002E                     UARTInit@x:	
  1869                           ; 2 bytes @ 0xE
  1870                           
  1871                           
  1872                           ; 2 bytes @ 0xE
  1873  002E                     	ds	2
  1874  0030                     measureTGS4161@ppm_temp:	
  1875                           
  1876                           ; 2 bytes @ 0x10
  1877  0030                     	ds	1
  1878  0031                     ___ftmul@exp:	
  1879                           
  1880                           ; 1 bytes @ 0x11
  1881  0031                     	ds	1
  1882  0032                     measureTGS4161@i:	
  1883  0032                     ___ftmul@f3_as_product:	
  1884                           ; 1 bytes @ 0x12
  1885                           
  1886                           
  1887                           ; 3 bytes @ 0x12
  1888  0032                     	ds	1
  1889  0033                     measureTGS4161@temp:	
  1890                           
  1891                           ; 2 bytes @ 0x13
  1892  0033                     	ds	2
  1893  0035                     ___ftmul@cntr:	
  1894  0035                     measureTGS4161@ppm:	
  1895                           ; 1 bytes @ 0x15
  1896                           
  1897                           
  1898                           ; 2 bytes @ 0x15
  1899  0035                     	ds	1
  1900  0036                     ___ftmul@sign:	
  1901                           
  1902                           ; 1 bytes @ 0x16
  1903  0036                     	ds	1
  1904  0037                     ?_fround:	
  1905  0037                     ?_scale:	
  1906                           ; 3 bytes @ 0x17
  1907                           
  1908                           
  1909                           ; 3 bytes @ 0x17
  1910  0037                     	ds	3
  1911  003A                     ??_scale:	
  1912                           
  1913                           ; 0 bytes @ 0x1A
  1914  003A                     	ds	1
  1915  003B                     _fround$1255:	
  1916                           
  1917                           ; 3 bytes @ 0x1B
  1918  003B                     	ds	3
  1919  003E                     _fround$1254:	
  1920  003E                     _scale$1256:	
  1921                           ; 3 bytes @ 0x1E
  1922                           
  1923                           
  1924                           ; 3 bytes @ 0x1E
  1925  003E                     	ds	3
  1926  0041                     fround@prec:	
  1927  0041                     scale@scl:	
  1928                           ; 1 bytes @ 0x21
  1929                           
  1930                           
  1931                           ; 1 bytes @ 0x21
  1932  0041                     	ds	1
  1933  0042                     ?___ftadd:	
  1934  0042                     ?___fttol:	
  1935                           ; 3 bytes @ 0x22
  1936                           
  1937  0042                     ___ftadd@f1:	
  1938                           ; 4 bytes @ 0x22
  1939                           
  1940  0042                     ___fttol@f1:	
  1941                           ; 3 bytes @ 0x22
  1942                           
  1943                           
  1944                           ; 3 bytes @ 0x22
  1945  0042                     	ds	3
  1946  0045                     ___ftadd@f2:	
  1947                           
  1948                           ; 3 bytes @ 0x25
  1949  0045                     	ds	1
  1950  0046                     ??___fttol:	
  1951                           
  1952                           ; 0 bytes @ 0x26
  1953  0046                     	ds	2
  1954  0048                     ??___ftadd:	
  1955                           
  1956                           ; 0 bytes @ 0x28
  1957  0048                     	ds	1
  1958  0049                     ___fttol@sign1:	
  1959                           
  1960                           ; 1 bytes @ 0x29
  1961  0049                     	ds	1
  1962  004A                     ___fttol@lval:	
  1963                           
  1964                           ; 4 bytes @ 0x2A
  1965  004A                     	ds	1
  1966  004B                     ___ftadd@sign:	
  1967                           
  1968                           ; 1 bytes @ 0x2B
  1969  004B                     	ds	1
  1970  004C                     ___ftadd@exp2:	
  1971                           
  1972                           ; 1 bytes @ 0x2C
  1973  004C                     	ds	1
  1974  004D                     ___ftadd@exp1:	
  1975                           
  1976                           ; 1 bytes @ 0x2D
  1977  004D                     	ds	1
  1978  004E                     ?___ftge:	
  1979  004E                     ?_getTempDS18B20:	
  1980                           ; 1 bit 
  1981                           
  1982  004E                     ?___fttoee:	
  1983                           ; 3 bytes @ 0x2E
  1984                           
  1985  004E                     ?___ftsub:	
  1986                           ; 3 bytes @ 0x2E
  1987                           
  1988  004E                     ___fttol@exp1:	
  1989                           ; 3 bytes @ 0x2E
  1990                           
  1991  004E                     ___fttoee@data:	
  1992                           ; 1 bytes @ 0x2E
  1993                           
  1994  004E                     ___ftge@ff1:	
  1995                           ; 3 bytes @ 0x2E
  1996                           
  1997  004E                     ___ftsub@f2:	
  1998                           ; 3 bytes @ 0x2E
  1999                           
  2000                           
  2001                           ; 3 bytes @ 0x2E
  2002  004E                     	ds	3
  2003  0051                     ??_getTempDS18B20:	
  2004  0051                     ___fttoee@addr:	
  2005                           ; 0 bytes @ 0x31
  2006                           
  2007  0051                     ___ftge@ff2:	
  2008                           ; 1 bytes @ 0x31
  2009                           
  2010  0051                     ___ftsub@f1:	
  2011                           ; 3 bytes @ 0x31
  2012                           
  2013                           
  2014                           ; 3 bytes @ 0x31
  2015  0051                     	ds	3
  2016  0054                     ??_regulacija:	
  2017  0054                     ?_sprintf:	
  2018                           ; 0 bytes @ 0x34
  2019                           
  2020  0054                     ?_calcSHT71:	
  2021                           ; 2 bytes @ 0x34
  2022                           
  2023  0054                     sprintf@f:	
  2024                           ; 3 bytes @ 0x34
  2025                           
  2026  0054                     getTempDS18B20@temperatura:	
  2027                           ; 2 bytes @ 0x34
  2028                           
  2029  0054                     calcSHT71@p_humidity:	
  2030                           ; 3 bytes @ 0x34
  2031                           
  2032                           
  2033                           ; 3 bytes @ 0x34
  2034  0054                     	ds	3
  2035  0057                     calcSHT71@p_temperature:	
  2036  0057                     getTempDS18B20@tempL:	
  2037                           ; 1 bytes @ 0x37
  2038                           
  2039                           
  2040                           ; 2 bytes @ 0x37
  2041  0057                     	ds	1
  2042  0058                     calcSHT71@rh_lin:	
  2043                           
  2044                           ; 3 bytes @ 0x38
  2045  0058                     	ds	1
  2046  0059                     ??_sprintf:	
  2047  0059                     getTempDS18B20@tempH:	
  2048                           ; 0 bytes @ 0x39
  2049                           
  2050                           
  2051                           ; 2 bytes @ 0x39
  2052  0059                     	ds	2
  2053  005B                     getTempDS18B20@temp:	
  2054  005B                     calcSHT71@t:	
  2055                           ; 2 bytes @ 0x3B
  2056                           
  2057                           
  2058                           ; 3 bytes @ 0x3B
  2059  005B                     	ds	3
  2060  005E                     ?_displayAirTemp:	
  2061  005E                     ?_displayAirMoist:	
  2062                           ; 0 bytes @ 0x3E
  2063                           
  2064  005E                     ?_displaySoilTemp:	
  2065                           ; 0 bytes @ 0x3E
  2066                           
  2067  005E                     calcSHT71@t_C:	
  2068                           ; 0 bytes @ 0x3E
  2069                           
  2070  005E                     displayAirTemp@temp2:	
  2071                           ; 3 bytes @ 0x3E
  2072                           
  2073  005E                     displayAirMoist@humi2:	
  2074                           ; 3 bytes @ 0x3E
  2075                           
  2076  005E                     displaySoilTemp@t2:	
  2077                           ; 3 bytes @ 0x3E
  2078                           
  2079                           
  2080                           ; 3 bytes @ 0x3E
  2081  005E                     	ds	3
  2082  0061                     _calcSHT71$1251:	
  2083                           
  2084                           ; 3 bytes @ 0x41
  2085  0061                     	ds	3
  2086  0064                     _calcSHT71$1252:	
  2087                           
  2088                           ; 3 bytes @ 0x44
  2089  0064                     	ds	3
  2090  0067                     calcSHT71@rh_true:	
  2091                           
  2092                           ; 3 bytes @ 0x47
  2093  0067                     	ds	3
  2094  006A                     calcSHT71@rh:	
  2095                           
  2096                           ; 3 bytes @ 0x4A
  2097  006A                     	ds	3
  2098  006D                     ?_getResSHT71:	
  2099  006D                     getResSHT71@p_humi:	
  2100                           ; 0 bytes @ 0x4D
  2101                           
  2102                           
  2103                           ; 1 bytes @ 0x4D
  2104  006D                     	ds	1
  2105                           
  2106                           	psect	maintext
  2107  1D70                     __pmaintext:	
  2108 ;;
  2109 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2110 ;;
  2111 ;; *************** function _main *****************
  2112 ;; Defined at:
  2113 ;;		line 450 in file "main.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;		None               void
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : B00/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0
  2129 ;;      Temps:          0       0       2       0       0
  2130 ;;      Totals:         0       0       2       0       0
  2131 ;;Total ram usage:        2 bytes
  2132 ;; Hardware stack levels required when called:    8
  2133 ;; This function calls:
  2134 ;;		_IOPinsConfig
  2135 ;;		_IOPinsInit
  2136 ;;		_LcdInit
  2137 ;;		_UARTInit
  2138 ;;		_UARTWriteString
  2139 ;;		_adcInit
  2140 ;;		_displayAirMoist
  2141 ;;		_displayAirTemp
  2142 ;;		_displayCO2
  2143 ;;		_displaySoilTemp
  2144 ;;		_getResSHT71
  2145 ;;		_getTempDS18B20
  2146 ;;		_initSHT71
  2147 ;;		_initTimer0
  2148 ;;		_initTimer1
  2149 ;;		_initWDT
  2150 ;;		_measureTGS4161
  2151 ;;		_menu
  2152 ;;		_regulacija
  2153 ;;		_resetDS18B20
  2154 ;;		_resetValues
  2155 ;; This function is called by:
  2156 ;;		Startup code after reset
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           
  2161                           ;psect for function _main
  2162  1D70                     _main:	
  2163                           
  2164                           ;main.c: 452: LcdInit();
  2165                           
  2166                           ;incstack = 0
  2167                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2168  1D70  120A  158A  271C  160A  158A  	fcall	_LcdInit
  2169                           
  2170                           ;main.c: 453: initSHT71();
  2171  1D75  160A  118A  20A1  160A  158A  	fcall	_initSHT71
  2172                           
  2173                           ;main.c: 454: resetDS18B20();
  2174  1D7A  160A  118A  216E  160A  158A  	fcall	_resetDS18B20
  2175                           
  2176                           ;main.c: 455: adcInit();
  2177  1D7F  120A  158A  2026  160A  158A  	fcall	_adcInit
  2178                           
  2179                           ;main.c: 456: UARTInit(9600);
  2180  1D84  3000               	movlw	0
  2181  1D85  1283               	bcf	3,5	;RP0=0, select bank0
  2182  1D86  00A8               	movwf	UARTInit@baud_rate+3
  2183  1D87  00A7               	movwf	UARTInit@baud_rate+2
  2184  1D88  3025               	movlw	37
  2185  1D89  00A6               	movwf	UARTInit@baud_rate+1
  2186  1D8A  3080               	movlw	128
  2187  1D8B  00A5               	movwf	UARTInit@baud_rate
  2188  1D8C  120A  118A  201D  160A  158A  	fcall	_UARTInit
  2189                           
  2190                           ;main.c: 457: IOPinsConfig();
  2191  1D91  120A  158A  201A  160A  158A  	fcall	_IOPinsConfig
  2192                           
  2193                           ;main.c: 458: IOPinsInit();
  2194  1D96  120A  158A  2001  160A  158A  	fcall	_IOPinsInit
  2195                           
  2196                           ;main.c: 459: resetValues();
  2197  1D9B  120A  118A  27DF  160A  158A  	fcall	_resetValues
  2198                           
  2199                           ;main.c: 460: initTimer1();
  2200  1DA0  120A  118A  27F1  160A  158A  	fcall	_initTimer1
  2201                           
  2202                           ;main.c: 461: initTimer0();
  2203  1DA5  120A  158A  2010  160A  158A  	fcall	_initTimer0
  2204                           
  2205                           ;main.c: 462: initWDT();
  2206  1DAA  160A  118A  20A5  160A  158A  	fcall	_initWDT
  2207                           
  2208                           ;main.c: 464: getResSHT71(&temp, &humi);
  2209  1DAF  30BC               	movlw	(low (_humi| 0))& (0+255)
  2210  1DB0  1303               	bcf	3,6	;RP1=0, select bank0
  2211  1DB1  00ED               	movwf	getResSHT71@p_humi
  2212  1DB2  30BF               	movlw	(low (_temp| 0))& (0+255)
  2213  1DB3  160A  118A  21AA  160A  158A  	fcall	_getResSHT71
  2214                           
  2215                           ;main.c: 466: t = getTempDS18B20();
  2216  1DB8  160A  118A  20AB  160A  158A  	fcall	_getTempDS18B20
  2217  1DBD  084E               	movf	?_getTempDS18B20,w
  2218  1DBE  1683               	bsf	3,5	;RP0=1, select bank1
  2219  1DBF  00A4               	movwf	_t^(0+128)
  2220  1DC0  1283               	bcf	3,5	;RP0=0, select bank0
  2221  1DC1  084F               	movf	?_getTempDS18B20+1,w
  2222  1DC2  1683               	bsf	3,5	;RP0=1, select bank1
  2223  1DC3  00A5               	movwf	(_t+1)^(0+128)
  2224  1DC4  1283               	bcf	3,5	;RP0=0, select bank0
  2225  1DC5  0850               	movf	?_getTempDS18B20+2,w
  2226  1DC6  1683               	bsf	3,5	;RP0=1, select bank1
  2227  1DC7  00A6               	movwf	(_t+2)^(0+128)
  2228  1DC8                     l6018:	
  2229                           
  2230                           ;main.c: 469: {
  2231                           ;main.c: 470: if(measure)
  2232  1DC8  1683               	bsf	3,5	;RP0=1, select bank1
  2233  1DC9  1303               	bcf	3,6	;RP1=0, select bank1
  2234  1DCA  082D               	movf	_measure^(0+128),w
  2235  1DCB  1903               	btfsc	3,2
  2236  1DCC  2E0E               	goto	l6034
  2237  1DCD  30BC               	movlw	(low (_humi| 0))& (0+255)
  2238                           
  2239                           ;main.c: 471: {
  2240                           ;main.c: 472: measure = 0;
  2241  1DCE  01AD               	clrf	_measure^(0+128)
  2242                           
  2243                           ;main.c: 473: getResSHT71(&temp, &humi);
  2244  1DCF  1283               	bcf	3,5	;RP0=0, select bank0
  2245  1DD0  00ED               	movwf	getResSHT71@p_humi
  2246  1DD1  30BF               	movlw	(low (_temp| 0))& (0+255)
  2247  1DD2  160A  118A  21AA  160A  158A  	fcall	_getResSHT71
  2248                           
  2249                           ;main.c: 474: UARTWriteString("\nSHT OK.\n");
  2250  1DD7  304F               	movlw	low (STR_27| (0+32768))
  2251  1DD8  00F3               	movwf	UARTWriteString@str
  2252  1DD9  3099               	movlw	high (STR_27| (0+32768))
  2253  1DDA  00F4               	movwf	UARTWriteString@str+1
  2254  1DDB  120A  158A  205F  160A  158A  	fcall	_UARTWriteString
  2255                           
  2256                           ;main.c: 478: co2 = measureTGS4161();
  2257  1DE0  160A  158A  24A3  160A  158A  	fcall	_measureTGS4161
  2258  1DE5  0829               	movf	?_measureTGS4161+1,w
  2259  1DE6  1683               	bsf	3,5	;RP0=1, select bank1
  2260  1DE7  00A8               	movwf	(_co2+1)^(0+128)
  2261  1DE8  1283               	bcf	3,5	;RP0=0, select bank0
  2262  1DE9  0828               	movf	?_measureTGS4161,w
  2263  1DEA  1683               	bsf	3,5	;RP0=1, select bank1
  2264  1DEB  00A7               	movwf	_co2^(0+128)
  2265                           
  2266                           ;main.c: 479: UARTWriteString("\nTGS OK.\n");
  2267  1DEC  3045               	movlw	low (STR_28| (0+32768))
  2268  1DED  00F3               	movwf	UARTWriteString@str
  2269  1DEE  3099               	movlw	high (STR_28| (0+32768))
  2270  1DEF  00F4               	movwf	UARTWriteString@str+1
  2271  1DF0  120A  158A  205F  160A  158A  	fcall	_UARTWriteString
  2272                           
  2273                           ;main.c: 482: t = getTempDS18B20();
  2274  1DF5  160A  118A  20AB  160A  158A  	fcall	_getTempDS18B20
  2275  1DFA  084E               	movf	?_getTempDS18B20,w
  2276  1DFB  1683               	bsf	3,5	;RP0=1, select bank1
  2277  1DFC  00A4               	movwf	_t^(0+128)
  2278  1DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2279  1DFE  084F               	movf	?_getTempDS18B20+1,w
  2280  1DFF  1683               	bsf	3,5	;RP0=1, select bank1
  2281  1E00  00A5               	movwf	(_t+1)^(0+128)
  2282  1E01  1283               	bcf	3,5	;RP0=0, select bank0
  2283  1E02  0850               	movf	?_getTempDS18B20+2,w
  2284  1E03  1683               	bsf	3,5	;RP0=1, select bank1
  2285  1E04  00A6               	movwf	(_t+2)^(0+128)
  2286                           
  2287                           ;main.c: 483: UARTWriteString("\nDS OK.\n");
  2288  1E05  3059               	movlw	low (STR_29| (0+32768))
  2289  1E06  00F3               	movwf	UARTWriteString@str
  2290  1E07  3099               	movlw	high (STR_29| (0+32768))
  2291  1E08  00F4               	movwf	UARTWriteString@str+1
  2292  1E09  120A  158A  205F  160A  158A  	fcall	_UARTWriteString
  2293  1E0E                     l6034:	
  2294                           
  2295                           ;main.c: 484: }
  2296                           ;main.c: 486: if(disp)
  2297  1E0E  1683               	bsf	3,5	;RP0=1, select bank1
  2298  1E0F  082B               	movf	_disp^(0+128),w
  2299  1E10  1903               	btfsc	3,2
  2300  1E11  2E68               	goto	l6056
  2301                           
  2302                           ;main.c: 487: {
  2303                           ;main.c: 488: disp = 0;
  2304  1E12  01AB               	clrf	_disp^(0+128)
  2305                           
  2306                           ;main.c: 490: switch(disp_count)
  2307  1E13  2E54               	goto	l6048
  2308  1E14                     l6038:	
  2309                           
  2310                           ;main.c: 493: displayAirTemp(temp);
  2311  1E14  083F               	movf	_temp^(0+128),w
  2312  1E15  1283               	bcf	3,5	;RP0=0, select bank0
  2313  1E16  00DE               	movwf	displayAirTemp@temp2
  2314  1E17  1683               	bsf	3,5	;RP0=1, select bank1
  2315  1E18  0840               	movf	(_temp+1)^(0+128),w
  2316  1E19  1283               	bcf	3,5	;RP0=0, select bank0
  2317  1E1A  00DF               	movwf	displayAirTemp@temp2+1
  2318  1E1B  1683               	bsf	3,5	;RP0=1, select bank1
  2319  1E1C  0841               	movf	(_temp+2)^(0+128),w
  2320  1E1D  1283               	bcf	3,5	;RP0=0, select bank0
  2321  1E1E  00E0               	movwf	displayAirTemp@temp2+2
  2322  1E1F  120A  158A  20C4  160A  158A  	fcall	_displayAirTemp
  2323                           
  2324                           ;main.c: 494: break;
  2325  1E24  2E62               	goto	l6050
  2326  1E25                     l6040:	
  2327                           
  2328                           ;main.c: 496: displayAirMoist(humi);
  2329  1E25  083C               	movf	_humi^(0+128),w
  2330  1E26  1283               	bcf	3,5	;RP0=0, select bank0
  2331  1E27  00DE               	movwf	displayAirMoist@humi2
  2332  1E28  1683               	bsf	3,5	;RP0=1, select bank1
  2333  1E29  083D               	movf	(_humi+1)^(0+128),w
  2334  1E2A  1283               	bcf	3,5	;RP0=0, select bank0
  2335  1E2B  00DF               	movwf	displayAirMoist@humi2+1
  2336  1E2C  1683               	bsf	3,5	;RP0=1, select bank1
  2337  1E2D  083E               	movf	(_humi+2)^(0+128),w
  2338  1E2E  1283               	bcf	3,5	;RP0=0, select bank0
  2339  1E2F  00E0               	movwf	displayAirMoist@humi2+2
  2340  1E30  120A  158A  20F8  160A  158A  	fcall	_displayAirMoist
  2341                           
  2342                           ;main.c: 497: break;
  2343  1E35  2E62               	goto	l6050
  2344  1E36                     l6042:	
  2345                           
  2346                           ;main.c: 499: displayCO2(co2);
  2347  1E36  0828               	movf	(_co2+1)^(0+128),w
  2348  1E37  1283               	bcf	3,5	;RP0=0, select bank0
  2349  1E38  00AC               	movwf	displayCO2@co22+1
  2350  1E39  1683               	bsf	3,5	;RP0=1, select bank1
  2351  1E3A  0827               	movf	_co2^(0+128),w
  2352  1E3B  1283               	bcf	3,5	;RP0=0, select bank0
  2353  1E3C  00AB               	movwf	displayCO2@co22
  2354  1E3D  120A  158A  212C  160A  158A  	fcall	_displayCO2
  2355                           
  2356                           ;main.c: 500: break;
  2357  1E42  2E62               	goto	l6050
  2358  1E43                     l6044:	
  2359                           
  2360                           ;main.c: 502: displaySoilTemp(t);
  2361  1E43  0824               	movf	_t^(0+128),w
  2362  1E44  1283               	bcf	3,5	;RP0=0, select bank0
  2363  1E45  00DE               	movwf	displaySoilTemp@t2
  2364  1E46  1683               	bsf	3,5	;RP0=1, select bank1
  2365  1E47  0825               	movf	(_t+1)^(0+128),w
  2366  1E48  1283               	bcf	3,5	;RP0=0, select bank0
  2367  1E49  00DF               	movwf	displaySoilTemp@t2+1
  2368  1E4A  1683               	bsf	3,5	;RP0=1, select bank1
  2369  1E4B  0826               	movf	(_t+2)^(0+128),w
  2370  1E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2371  1E4D  00E0               	movwf	displaySoilTemp@t2+2
  2372  1E4E  120A  158A  2090  160A  158A  	fcall	_displaySoilTemp
  2373                           
  2374                           ;main.c: 503: break;
  2375  1E53  2E62               	goto	l6050
  2376  1E54                     l6048:	
  2377  1E54  082C               	movf	_disp_count^(0+128),w
  2378                           
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 4, Range of values is 1 to 4
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           13     7 (average)
  2384                           ; direct_byte           23    11 (fixed)
  2385                           ; jumptable            263     9 (fixed)
  2386                           ;	Chosen strategy is simple_byte
  2387  1E55  3A01               	xorlw	1	; case 1
  2388  1E56  1903               	skipnz
  2389  1E57  2E14               	goto	l6038
  2390  1E58  3A03               	xorlw	3	; case 2
  2391  1E59  1903               	skipnz
  2392  1E5A  2E25               	goto	l6040
  2393  1E5B  3A01               	xorlw	1	; case 3
  2394  1E5C  1903               	skipnz
  2395  1E5D  2E36               	goto	l6042
  2396  1E5E  3A07               	xorlw	7	; case 4
  2397  1E5F  1903               	skipnz
  2398  1E60  2E43               	goto	l6044
  2399  1E61  2E62               	goto	l6050
  2400  1E62                     l6050:	
  2401                           
  2402                           ;main.c: 506: disp_count++;
  2403  1E62  1683               	bsf	3,5	;RP0=1, select bank1
  2404  1E63  3005               	movlw	5
  2405  1E64  0AAC               	incf	_disp_count^(0+128),f
  2406                           
  2407                           ;main.c: 507: if(disp_count > 4) disp_count = 0;
  2408  1E65  022C               	subwf	_disp_count^(0+128),w
  2409  1E66  1803               	btfsc	3,0
  2410  1E67  01AC               	clrf	_disp_count^(0+128)
  2411  1E68                     l6056:	
  2412                           
  2413                           ;main.c: 508: }
  2414                           ;main.c: 510: if (RA4)
  2415  1E68  1283               	bcf	3,5	;RP0=0, select bank0
  2416  1E69  1E05               	btfss	5,4	;volatile
  2417  1E6A  2E89               	goto	l6066
  2418                           
  2419                           ;main.c: 511: {
  2420                           ;main.c: 512: _delay((unsigned long)((20)*(8000000/4000.0)));
  2421  1E6B  3034               	movlw	52
  2422  1E6C  1683               	bsf	3,5	;RP0=1, select bank1
  2423  1E6D  00DA               	movwf	(??_main^(0+128)+1)
  2424  1E6E  30F1               	movlw	241
  2425  1E6F  00D9               	movwf	??_main^(0+128)
  2426  1E70                     u6887:	
  2427  1E70  0BD9               	decfsz	??_main^(0+128),f
  2428  1E71  2E70               	goto	u6887
  2429  1E72  0BDA               	decfsz	(??_main^(0+128)+1),f
  2430  1E73  2E70               	goto	u6887
  2431  1E74  2E75               	nop2
  2432                           
  2433                           ;main.c: 513: if(RA4) menu_flag = 1;
  2434  1E75  1283               	bcf	3,5	;RP0=0, select bank0
  2435  1E76  1303               	bcf	3,6	;RP1=0, select bank0
  2436  1E77  1E05               	btfss	5,4	;volatile
  2437  1E78  2E7C               	goto	l448
  2438  1E79  1683               	bsf	3,5	;RP0=1, select bank1
  2439  1E7A  01AF               	clrf	_menu_flag^(0+128)
  2440  1E7B  0AAF               	incf	_menu_flag^(0+128),f
  2441  1E7C                     l448:	
  2442  1E7C  1283               	bcf	3,5	;RP0=0, select bank0
  2443  1E7D  1A05               	btfsc	5,4	;volatile
  2444  1E7E  2E7C               	goto	l448
  2445                           
  2446                           ;main.c: 515: _delay((unsigned long)((20)*(8000000/4000.0)));
  2447  1E7F  3034               	movlw	52
  2448  1E80  1683               	bsf	3,5	;RP0=1, select bank1
  2449  1E81  00DA               	movwf	(??_main^(0+128)+1)
  2450  1E82  30F1               	movlw	241
  2451  1E83  00D9               	movwf	??_main^(0+128)
  2452  1E84                     u6897:	
  2453  1E84  0BD9               	decfsz	??_main^(0+128),f
  2454  1E85  2E84               	goto	u6897
  2455  1E86  0BDA               	decfsz	(??_main^(0+128)+1),f
  2456  1E87  2E84               	goto	u6897
  2457  1E88  2E89               	nop2
  2458  1E89                     l6066:	
  2459                           
  2460                           ;main.c: 516: }
  2461                           ;main.c: 517: if(menu_flag)
  2462  1E89  1683               	bsf	3,5	;RP0=1, select bank1
  2463  1E8A  1303               	bcf	3,6	;RP1=0, select bank1
  2464  1E8B  082F               	movf	_menu_flag^(0+128),w
  2465  1E8C  1903               	btfsc	3,2
  2466  1E8D  2E96               	goto	l6076
  2467                           
  2468                           ;main.c: 518: {
  2469                           ;main.c: 519: menu_flag = 0;
  2470  1E8E  01AF               	clrf	_menu_flag^(0+128)
  2471                           
  2472                           ;main.c: 520: PIE1bits.TMR1IE = 0;
  2473  1E8F  100C               	bcf	12,0	;volatile
  2474                           
  2475                           ;main.c: 521: menu();
  2476  1E90  120A  158A  2454  160A  158A  	fcall	_menu
  2477                           
  2478                           ;main.c: 522: PIE1bits.TMR1IE = 1;
  2479  1E95  140C               	bsf	12,0	;volatile
  2480  1E96                     l6076:	
  2481                           
  2482                           ;main.c: 523: }
  2483                           ;main.c: 525: regulacija();
  2484  1E96  120A  158A  2566  160A  158A  	fcall	_regulacija
  2485  1E9B  0064               	clrwdt	;# 
  2486  1E9C  2DC8               	goto	l6018
  2487  1E9D                     __end_of_main:	
  2488                           
  2489                           	psect	text1
  2490  07DF                     __ptext1:	
  2491 ;; *************** function _resetValues *****************
  2492 ;; Defined at:
  2493 ;;		line 175 in file "main.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;		None               void
  2500 ;; Registers used:
  2501 ;;		status,2
  2502 ;; Tracked objects:
  2503 ;;		On entry : 300/0
  2504 ;;		On exit  : 300/100
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2507 ;;      Params:         0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0
  2510 ;;      Totals:         0       0       0       0       0
  2511 ;;Total ram usage:        0 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           
  2522                           ;psect for function _resetValues
  2523  07DF                     _resetValues:	
  2524                           
  2525                           ;main.c: 176: ok_flag = 0;
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _resetValues: [status,2]
  2529  07DF  01EE               	clrf	_ok_flag
  2530                           
  2531                           ;main.c: 177: menu_flag = 0;
  2532  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  2533  07E1  01AF               	clrf	_menu_flag^(0+128)
  2534                           
  2535                           ;main.c: 178: plus_flag = 0;
  2536  07E2  01FB               	clrf	_plus_flag
  2537                           
  2538                           ;main.c: 179: minus_flag = 0;
  2539  07E3  01FA               	clrf	_minus_flag
  2540                           
  2541                           ;main.c: 180: tmr_count = 0;
  2542  07E4  01A9               	clrf	_tmr_count^(0+128)
  2543  07E5  01AA               	clrf	(_tmr_count+1)^(0+128)
  2544                           
  2545                           ;main.c: 181: measure = 0;
  2546  07E6  01AD               	clrf	_measure^(0+128)
  2547                           
  2548                           ;main.c: 182: disp_count = 0;
  2549  07E7  01AC               	clrf	_disp_count^(0+128)
  2550                           
  2551                           ;main.c: 183: disp = 1;
  2552  07E8  01AB               	clrf	_disp^(0+128)
  2553  07E9  0AAB               	incf	_disp^(0+128),f
  2554                           
  2555                           ;main.c: 187: ok_flag_humi = 0;
  2556  07EA  01B1               	clrf	_ok_flag_humi^(0+128)
  2557                           
  2558                           ;main.c: 189: tmr_co2 = 0;
  2559  07EB  01B0               	clrf	_ok_flag_co2^(0+128)
  2560                           
  2561                           ;main.c: 190: measure_co2 = 1;
  2562  07EC  01AE               	clrf	_measure_co2^(0+128)
  2563  07ED  0AAE               	incf	_measure_co2^(0+128),f
  2564                           
  2565                           ;main.c: 191: co2 = 0;
  2566  07EE  01A7               	clrf	_co2^(0+128)
  2567  07EF  01A8               	clrf	(_co2+1)^(0+128)
  2568  07F0  0008               	return
  2569  07F1                     __end_of_resetValues:	
  2570                           
  2571                           	psect	text13
  2572  1CA3                     __ptext13:	
  2573 ;; *************** function _measureTGS4161 *****************
  2574 ;; Defined at:
  2575 ;;		line 35 in file "tgs4161.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  ppm             2   21[BANK0 ] unsigned int 
  2580 ;;  temp            2   19[BANK0 ] unsigned int 
  2581 ;;  ppm_temp        2   16[BANK0 ] unsigned int 
  2582 ;;  krez2           2   14[BANK0 ] unsigned int 
  2583 ;;  krez1           2   12[BANK0 ] unsigned int 
  2584 ;;  i               1   18[BANK0 ] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2    8[BANK0 ] unsigned int 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, pclath, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 300/0
  2591 ;;		On exit  : 300/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2594 ;;      Params:         0       2       0       0       0
  2595 ;;      Locals:         0      11       0       0       0
  2596 ;;      Temps:          0       2       0       0       0
  2597 ;;      Totals:         0      15       0       0       0
  2598 ;;Total ram usage:       15 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    2
  2601 ;; This function calls:
  2602 ;;		___lwdiv
  2603 ;;		___wmul
  2604 ;;		_adcRead
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _measureTGS4161
  2612  1CA3                     _measureTGS4161:	
  2613  1CA3  30E9               	movlw	233
  2614                           
  2615                           ;incstack = 0
  2616                           ; Regs used in _measureTGS4161: [wreg+status,2+status,0+pclath+cstack]
  2617  1CA4  01B5               	clrf	measureTGS4161@ppm
  2618  1CA5  01B6               	clrf	measureTGS4161@ppm+1
  2619  1CA6  01B0               	clrf	measureTGS4161@ppm_temp
  2620  1CA7  01B1               	clrf	measureTGS4161@ppm_temp+1
  2621                           
  2622                           ;tgs4161.c: 37: char i;
  2623                           ;tgs4161.c: 39: krez1 = -23.43;
  2624  1CA8  00AC               	movwf	measureTGS4161@krez1
  2625  1CA9  30FF               	movlw	255
  2626  1CAA  00AD               	movwf	measureTGS4161@krez1+1
  2627                           
  2628                           ;tgs4161.c: 40: krez2 = -53.63;
  2629  1CAB  30CB               	movlw	203
  2630  1CAC  00AE               	movwf	measureTGS4161@krez2
  2631  1CAD  30FF               	movlw	255
  2632  1CAE  00AF               	movwf	measureTGS4161@krez2+1
  2633                           
  2634                           ;tgs4161.c: 42: INTCONbits.T0IE = 0;
  2635  1CAF  128B               	bcf	11,5	;volatile
  2636                           
  2637                           ;tgs4161.c: 43: for(i=0;i<7;i++)
  2638  1CB0  01B2               	clrf	measureTGS4161@i
  2639  1CB1                     l5836:	
  2640                           
  2641                           ;tgs4161.c: 44: {
  2642                           ;tgs4161.c: 45: temp = adcRead();
  2643  1CB1  2529  160A  158A   	fcall	_adcRead
  2644  1CB4  0873               	movf	?_adcRead+1,w
  2645  1CB5  00B4               	movwf	measureTGS4161@temp+1
  2646  1CB6  0872               	movf	?_adcRead,w
  2647  1CB7  00B3               	movwf	measureTGS4161@temp
  2648                           
  2649                           ;tgs4161.c: 47: if(temp > 236) ppm = krez1*temp + 6650;
  2650  1CB8  3000               	movlw	0
  2651  1CB9  0234               	subwf	measureTGS4161@temp+1,w
  2652  1CBA  30ED               	movlw	237
  2653  1CBB  1903               	skipnz
  2654  1CBC  0233               	subwf	measureTGS4161@temp,w
  2655  1CBD  1C03               	skipc
  2656  1CBE  2CD3               	goto	l5844
  2657  1CBF  082D               	movf	measureTGS4161@krez1+1,w
  2658  1CC0  00F3               	movwf	___wmul@multiplier+1
  2659  1CC1  082C               	movf	measureTGS4161@krez1,w
  2660  1CC2  256A               	fcall	PL96	;call to abstracted procedure
  2661  1CC3  120A  118A  259B  160A  158A  	fcall	___wmul
  2662  1CC8  0873               	movf	?___wmul+1,w
  2663  1CC9  1283               	bcf	3,5	;RP0=0, select bank0
  2664  1CCA  00B6               	movwf	measureTGS4161@ppm+1
  2665  1CCB  0872               	movf	?___wmul,w
  2666  1CCC  00B5               	movwf	measureTGS4161@ppm
  2667  1CCD  30FA               	movlw	250
  2668  1CCE  07B5               	addwf	measureTGS4161@ppm,f
  2669  1CCF  1803               	skipnc
  2670  1CD0  0AB6               	incf	measureTGS4161@ppm+1,f
  2671  1CD1  3019               	movlw	25
  2672  1CD2  2CE6               	goto	L1
  2673  1CD3                     l5844:	
  2674                           
  2675                           ;tgs4161.c: 48: else ppm = krez2*temp + 13500;
  2676  1CD3  082F               	movf	measureTGS4161@krez2+1,w
  2677  1CD4  00F3               	movwf	___wmul@multiplier+1
  2678  1CD5  082E               	movf	measureTGS4161@krez2,w
  2679  1CD6  256A               	fcall	PL96	;call to abstracted procedure
  2680  1CD7  120A  118A  259B  160A  158A  	fcall	___wmul
  2681  1CDC  0873               	movf	?___wmul+1,w
  2682  1CDD  1283               	bcf	3,5	;RP0=0, select bank0
  2683  1CDE  00B6               	movwf	measureTGS4161@ppm+1
  2684  1CDF  0872               	movf	?___wmul,w
  2685  1CE0  00B5               	movwf	measureTGS4161@ppm
  2686  1CE1  30BC               	movlw	188
  2687  1CE2  07B5               	addwf	measureTGS4161@ppm,f
  2688  1CE3  1803               	skipnc
  2689  1CE4  0AB6               	incf	measureTGS4161@ppm+1,f
  2690  1CE5  3034               	movlw	52
  2691  1CE6                     L1:	
  2692  1CE6  07B6               	addwf	measureTGS4161@ppm+1,f
  2693                           
  2694                           ;tgs4161.c: 49: ppm_temp += ppm;
  2695  1CE7  0835               	movf	measureTGS4161@ppm,w
  2696  1CE8  07B0               	addwf	measureTGS4161@ppm_temp,f
  2697  1CE9  1803               	skipnc
  2698  1CEA  0AB1               	incf	measureTGS4161@ppm_temp+1,f
  2699  1CEB  0836               	movf	measureTGS4161@ppm+1,w
  2700  1CEC  07B1               	addwf	measureTGS4161@ppm_temp+1,f
  2701                           
  2702                           ;tgs4161.c: 50: _delay((unsigned long)((20)*(8000000/4000.0)));
  2703  1CED  3034               	movlw	52
  2704  1CEE  00AB               	movwf	??_measureTGS4161+1
  2705  1CEF  30F1               	movlw	241
  2706  1CF0  00AA               	movwf	??_measureTGS4161
  2707  1CF1                     u6967:	
  2708  1CF1  0BAA               	decfsz	??_measureTGS4161,f
  2709  1CF2  2CF1               	goto	u6967
  2710  1CF3  0BAB               	decfsz	??_measureTGS4161+1,f
  2711  1CF4  2CF1               	goto	u6967
  2712  1CF5  2CF6               	nop2
  2713  1CF6  1283               	bcf	3,5	;RP0=0, select bank0
  2714  1CF7  1303               	bcf	3,6	;RP1=0, select bank0
  2715  1CF8  3007               	movlw	7
  2716  1CF9  0AB2               	incf	measureTGS4161@i,f
  2717  1CFA  0232               	subwf	measureTGS4161@i,w
  2718  1CFB  1C03               	skipc
  2719  1CFC  2CB1               	goto	l5836
  2720                           
  2721                           ;tgs4161.c: 51: }
  2722                           ;tgs4161.c: 52: INTCONbits.T0IE = 1;
  2723  1CFD  168B               	bsf	11,5	;volatile
  2724                           
  2725                           ;tgs4161.c: 54: ppm = ppm_temp/7;
  2726  1CFE  3007               	movlw	7
  2727  1CFF  00F2               	movwf	___lwdiv@divisor
  2728  1D00  01F3               	clrf	___lwdiv@divisor+1
  2729  1D01  0831               	movf	measureTGS4161@ppm_temp+1,w
  2730  1D02  00F5               	movwf	___lwdiv@dividend+1
  2731  1D03  0830               	movf	measureTGS4161@ppm_temp,w
  2732  1D04  00F4               	movwf	___lwdiv@dividend
  2733  1D05  120A  158A  26F2  160A  158A  	fcall	___lwdiv
  2734  1D0A  0873               	movf	?___lwdiv+1,w
  2735  1D0B  00B6               	movwf	measureTGS4161@ppm+1
  2736  1D0C  0872               	movf	?___lwdiv,w
  2737  1D0D  00B5               	movwf	measureTGS4161@ppm
  2738                           
  2739                           ;tgs4161.c: 55: if(ppm < 350) ppm = 350;
  2740  1D0E  3001               	movlw	1
  2741  1D0F  0236               	subwf	measureTGS4161@ppm+1,w
  2742  1D10  305E               	movlw	94
  2743  1D11  1903               	skipnz
  2744  1D12  0235               	subwf	measureTGS4161@ppm,w
  2745  1D13  1803               	skipnc
  2746  1D14  2D19               	goto	l213
  2747  1D15  305E               	movlw	94
  2748  1D16  00B5               	movwf	measureTGS4161@ppm
  2749  1D17  3001               	movlw	1
  2750  1D18  00B6               	movwf	measureTGS4161@ppm+1
  2751  1D19                     l213:	
  2752                           
  2753                           ;tgs4161.c: 56: if(ppm > 5500) ppm = 5500;
  2754  1D19  3015               	movlw	21
  2755  1D1A  0236               	subwf	measureTGS4161@ppm+1,w
  2756  1D1B  307D               	movlw	125
  2757  1D1C  1903               	skipnz
  2758  1D1D  0235               	subwf	measureTGS4161@ppm,w
  2759  1D1E  1C03               	skipc
  2760  1D1F  2D24               	goto	l214
  2761  1D20  307C               	movlw	124
  2762  1D21  00B5               	movwf	measureTGS4161@ppm
  2763  1D22  3015               	movlw	21
  2764  1D23  00B6               	movwf	measureTGS4161@ppm+1
  2765  1D24                     l214:	
  2766                           
  2767                           ;tgs4161.c: 58: return ppm;
  2768  1D24  0836               	movf	measureTGS4161@ppm+1,w
  2769  1D25  00A9               	movwf	?_measureTGS4161+1
  2770  1D26  0835               	movf	measureTGS4161@ppm,w
  2771  1D27  00A8               	movwf	?_measureTGS4161
  2772  1D28  0008               	return
  2773  1D29                     __end_of_measureTGS4161:	
  2774  1D29                     __ptext14:	
  2775 ;; *************** function _adcRead *****************
  2776 ;; Defined at:
  2777 ;;		line 12 in file "tgs4161.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  temp            2    6[BANK0 ] unsigned int 
  2782 ;;  tempH           2    4[BANK0 ] unsigned short 
  2783 ;;  tempL           2    2[BANK0 ] unsigned short 
  2784 ;;  loop_count      2    0[BANK0 ] unsigned int 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  2    2[COMMON] unsigned int 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 300/0
  2791 ;;		On exit  : 300/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2794 ;;      Params:         2       0       0       0       0
  2795 ;;      Locals:         0       8       0       0       0
  2796 ;;      Temps:          2       0       0       0       0
  2797 ;;      Totals:         4       8       0       0       0
  2798 ;;Total ram usage:       12 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    1
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_measureTGS4161
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _adcRead
  2810  1D29                     _adcRead:	
  2811                           
  2812                           ;tgs4161.c: 14: unsigned short tempL=0, tempH=0;
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _adcRead: [wreg+status,2+status,0]
  2816  1D29  01A2               	clrf	adcRead@tempL
  2817  1D2A  01A3               	clrf	adcRead@tempL+1
  2818  1D2B  01A4               	clrf	adcRead@tempH
  2819  1D2C  01A5               	clrf	adcRead@tempH+1
  2820                           
  2821                           ;tgs4161.c: 15: unsigned int loop_count=0;
  2822  1D2D  01A0               	clrf	adcRead@loop_count
  2823  1D2E  01A1               	clrf	adcRead@loop_count+1
  2824                           
  2825                           ;tgs4161.c: 17: ADCON0bits.ADON = 1;
  2826  1D2F  141F               	bsf	31,0	;volatile
  2827                           
  2828                           ;tgs4161.c: 18: _delay((unsigned long)((1)*(8000000/4000.0)));
  2829  1D30  3003               	movlw	3
  2830  1D31  00F5               	movwf	??_adcRead+1
  2831  1D32  3097               	movlw	151
  2832  1D33  00F4               	movwf	??_adcRead
  2833  1D34                     u6977:	
  2834  1D34  0BF4               	decfsz	??_adcRead,f
  2835  1D35  2D34               	goto	u6977
  2836  1D36  0BF5               	decfsz	??_adcRead+1,f
  2837  1D37  2D34               	goto	u6977
  2838  1D38  2D39               	nop2
  2839                           
  2840                           ;tgs4161.c: 19: ADCON0bits.GO = 1;
  2841  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  2842  1D3A  1303               	bcf	3,6	;RP1=0, select bank0
  2843  1D3B  149F               	bsf	31,1	;volatile
  2844  1D3C                     l202:	
  2845                           ;tgs4161.c: 21: while(ADCON0bits.GO)
  2846                           
  2847  1D3C  1C9F               	btfss	31,1	;volatile
  2848  1D3D  2D56               	goto	l4338
  2849                           
  2850                           ;tgs4161.c: 22: {
  2851                           ;tgs4161.c: 23: _delay((unsigned long)((10)*(8000000/4000.0)));
  2852  1D3E  301A               	movlw	26
  2853  1D3F  00F5               	movwf	??_adcRead+1
  2854  1D40  30F8               	movlw	248
  2855  1D41  00F4               	movwf	??_adcRead
  2856  1D42                     u6987:	
  2857  1D42  0BF4               	decfsz	??_adcRead,f
  2858  1D43  2D42               	goto	u6987
  2859  1D44  0BF5               	decfsz	??_adcRead+1,f
  2860  1D45  2D42               	goto	u6987
  2861  1D46  0000               	nop
  2862                           
  2863                           ;tgs4161.c: 24: if(++loop_count > 150) return 0;
  2864  1D47  1283               	bcf	3,5	;RP0=0, select bank0
  2865  1D48  1303               	bcf	3,6	;RP1=0, select bank0
  2866  1D49  0AA0               	incf	adcRead@loop_count,f
  2867  1D4A  1903               	skipnz
  2868  1D4B  0AA1               	incf	adcRead@loop_count+1,f
  2869  1D4C  3000               	movlw	0
  2870  1D4D  0221               	subwf	adcRead@loop_count+1,w
  2871  1D4E  3097               	movlw	151
  2872  1D4F  1903               	skipnz
  2873  1D50  0220               	subwf	adcRead@loop_count,w
  2874  1D51  1C03               	skipc
  2875  1D52  2D3C               	goto	l202
  2876  1D53  01F2               	clrf	?_adcRead
  2877  1D54  01F3               	clrf	?_adcRead+1
  2878  1D55  0008               	return
  2879  1D56                     l4338:	
  2880                           
  2881                           ;tgs4161.c: 25: }
  2882                           ;tgs4161.c: 27: tempL |= ADRESL;
  2883  1D56  1683               	bsf	3,5	;RP0=1, select bank1
  2884  1D57  081E               	movf	30,w	;volatile
  2885  1D58  1283               	bcf	3,5	;RP0=0, select bank0
  2886  1D59  04A2               	iorwf	adcRead@tempL,f
  2887                           
  2888                           ;tgs4161.c: 28: tempH |= ADRESH;
  2889  1D5A  081E               	movf	30,w	;volatile
  2890  1D5B  04A4               	iorwf	adcRead@tempH,f
  2891                           
  2892                           ;tgs4161.c: 30: temp = ((unsigned int)tempH <<8) + (unsigned int)tempL;
  2893  1D5C  0824               	movf	adcRead@tempH,w
  2894  1D5D  00A7               	movwf	adcRead@temp+1
  2895  1D5E  01A6               	clrf	adcRead@temp
  2896  1D5F  0822               	movf	adcRead@tempL,w
  2897  1D60  07A6               	addwf	adcRead@temp,f
  2898  1D61  1803               	skipnc
  2899  1D62  0AA7               	incf	adcRead@temp+1,f
  2900  1D63  0823               	movf	adcRead@tempL+1,w
  2901  1D64  07A7               	addwf	adcRead@temp+1,f
  2902                           
  2903                           ;tgs4161.c: 32: return temp;
  2904  1D65  0827               	movf	adcRead@temp+1,w
  2905  1D66  00F3               	movwf	?_adcRead+1
  2906  1D67  0826               	movf	adcRead@temp,w
  2907  1D68  00F2               	movwf	?_adcRead
  2908  1D69  0008               	return
  2909  1D6A                     __end_of_adcRead:	
  2910  1D6A                     PL96:	
  2911  1D6A  00F2               	movwf	___wmul@multiplier
  2912  1D6B  0834               	movf	measureTGS4161@temp+1,w
  2913  1D6C  00F5               	movwf	___wmul@multiplicand+1
  2914  1D6D  0833               	movf	measureTGS4161@temp,w
  2915  1D6E  00F4               	movwf	___wmul@multiplicand
  2916  1D6F  0008               	return
  2917  1D70                     __end_ofPL96:	
  2918                           
  2919                           	psect	text15
  2920  10A5                     __ptext15:	
  2921 ;; *************** function _initWDT *****************
  2922 ;; Defined at:
  2923 ;;		line 108 in file "main.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;		None
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;		None               void
  2930 ;; Registers used:
  2931 ;;		wreg, status,2, status,0
  2932 ;; Tracked objects:
  2933 ;;		On entry : 300/0
  2934 ;;		On exit  : 300/200
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2937 ;;      Params:         0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0
  2940 ;;      Totals:         0       0       0       0       0
  2941 ;;Total ram usage:        0 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    1
  2944 ;; This function calls:
  2945 ;;		Nothing
  2946 ;; This function is called by:
  2947 ;;		_main
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           
  2952                           ;psect for function _initWDT
  2953  10A5                     _initWDT:	
  2954                           
  2955                           ;main.c: 110: WDTCONbits.WDTPS = 0b1000;
  2956                           
  2957                           ;incstack = 0
  2958                           ; Regs used in _initWDT: [wreg+status,2+status,0]
  2959  10A5  1703               	bsf	3,6	;RP1=1, select bank2
  2960  10A6  0805               	movf	5,w	;volatile
  2961  10A7  39E1               	andlw	-31
  2962  10A8  3810               	iorlw	16
  2963  10A9  0085               	movwf	5	;volatile
  2964  10AA  0008               	return
  2965  10AB                     __end_of_initWDT:	
  2966                           
  2967                           	psect	text16
  2968  07F1                     __ptext16:	
  2969 ;; *************** function _initTimer1 *****************
  2970 ;; Defined at:
  2971 ;;		line 203 in file "main.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;		None
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;		None               void
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0
  2980 ;; Tracked objects:
  2981 ;;		On entry : 300/100
  2982 ;;		On exit  : 300/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2985 ;;      Params:         0       0       0       0       0
  2986 ;;      Locals:         0       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0
  2988 ;;      Totals:         0       0       0       0       0
  2989 ;;Total ram usage:        0 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _initTimer1
  3001  07F1                     _initTimer1:	
  3002                           
  3003                           ;main.c: 205: T1CONbits.T1CKPS = 0b01;
  3004                           
  3005                           ;incstack = 0
  3006                           ; Regs used in _initTimer1: [wreg+status,2+status,0]
  3007  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3008  07F2  0810               	movf	16,w	;volatile
  3009  07F3  39CF               	andlw	-49
  3010  07F4  3810               	iorlw	16
  3011  07F5  0090               	movwf	16	;volatile
  3012                           
  3013                           ;main.c: 206: TMR1H = 0xD8;
  3014  07F6  30D8               	movlw	216
  3015  07F7  008F               	movwf	15	;volatile
  3016                           
  3017                           ;main.c: 207: TMR1L = 0xEF;
  3018  07F8  30EF               	movlw	239
  3019  07F9  008E               	movwf	14	;volatile
  3020                           
  3021                           ;main.c: 208: PIE1bits.TMR1IE = 1;
  3022  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  3023  07FB  140C               	bsf	12,0	;volatile
  3024                           
  3025                           ;main.c: 209: INTCONbits.GIE = 1;
  3026  07FC  178B               	bsf	11,7	;volatile
  3027                           
  3028                           ;main.c: 210: T1CONbits.TMR1ON = 1;
  3029  07FD  1283               	bcf	3,5	;RP0=0, select bank0
  3030  07FE  1410               	bsf	16,0	;volatile
  3031  07FF  0008               	return
  3032  0800                     __end_of_initTimer1:	
  3033                           
  3034                           	psect	text17
  3035  0810                     __ptext17:	
  3036 ;; *************** function _initTimer0 *****************
  3037 ;; Defined at:
  3038 ;;		line 194 in file "main.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;		None               void
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0
  3047 ;; Tracked objects:
  3048 ;;		On entry : 300/0
  3049 ;;		On exit  : 300/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3052 ;;      Params:         0       0       0       0       0
  3053 ;;      Locals:         0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0
  3055 ;;      Totals:         0       0       0       0       0
  3056 ;;Total ram usage:        0 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    1
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function _initTimer0
  3068  0810                     _initTimer0:	
  3069                           
  3070                           ;main.c: 195: OPTION_REGbits.T0CS = 0;
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _initTimer0: [wreg+status,2+status,0]
  3074  0810  1683               	bsf	3,5	;RP0=1, select bank1
  3075  0811  1281               	bcf	1,5	;volatile
  3076                           
  3077                           ;main.c: 196: OPTION_REGbits.PSA = 1;
  3078  0812  1581               	bsf	1,3	;volatile
  3079                           
  3080                           ;main.c: 197: OPTION_REG |= 0b00000111;
  3081  0813  3007               	movlw	7
  3082  0814  0481               	iorwf	1,f	;volatile
  3083                           
  3084                           ;main.c: 198: INTCONbits.GIE = 1;
  3085  0815  178B               	bsf	11,7	;volatile
  3086                           
  3087                           ;main.c: 199: TMR0 = 0;
  3088  0816  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0817  0181               	clrf	1	;volatile
  3090                           
  3091                           ;main.c: 200: INTCONbits.T0IE = 1;
  3092  0818  168B               	bsf	11,5	;volatile
  3093  0819  0008               	return
  3094  081A                     __end_of_initTimer0:	
  3095                           
  3096                           	psect	text18
  3097  10A1                     __ptext18:	
  3098 ;; *************** function _initSHT71 *****************
  3099 ;; Defined at:
  3100 ;;		line 10 in file "sht71.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		None
  3109 ;; Tracked objects:
  3110 ;;		On entry : 300/0
  3111 ;;		On exit  : 300/100
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3114 ;;      Params:         0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0
  3117 ;;      Totals:         0       0       0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    1
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _initSHT71
  3130  10A1                     _initSHT71:	
  3131                           
  3132                           ;sht71.c: 11: TRISBbits.TRISB7 = 0;
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _initSHT71: []
  3136  10A1  1683               	bsf	3,5	;RP0=1, select bank1
  3137  10A2  1386               	bcf	6,7	;volatile
  3138                           
  3139                           ;sht71.c: 12: TRISBbits.TRISB7 = 0;
  3140  10A3  1386               	bcf	6,7	;volatile
  3141  10A4  0008               	return
  3142  10A5                     __end_of_initSHT71:	
  3143                           
  3144                           	psect	text19
  3145  10AB                     __ptext19:	
  3146 ;; *************** function _getTempDS18B20 *****************
  3147 ;; Defined at:
  3148 ;;		line 67 in file "ds18b20.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;  temperatura     3   52[BANK0 ] float 
  3153 ;;  temp            2   59[BANK0 ] unsigned int 
  3154 ;;  tempH           2   57[BANK0 ] unsigned short 
  3155 ;;  tempL           2   55[BANK0 ] unsigned short 
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  3   46[BANK0 ] float 
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/200
  3162 ;;		On exit  : 300/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3165 ;;      Params:         0       3       0       0       0
  3166 ;;      Locals:         0       9       0       0       0
  3167 ;;      Temps:          0       3       0       0       0
  3168 ;;      Totals:         0      15       0       0       0
  3169 ;;Total ram usage:       15 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    3
  3172 ;; This function calls:
  3173 ;;		___ftadd
  3174 ;;		___ftmul
  3175 ;;		___lwtoft
  3176 ;;		_readDS18B20
  3177 ;;		_resetDS18B20
  3178 ;;		_writeDS18B20
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _getTempDS18B20
  3186  10AB                     _getTempDS18B20:	
  3187                           
  3188                           ;ds18b20.c: 68: unsigned temp;
  3189                           ;ds18b20.c: 69: unsigned short tempL, tempH;
  3190                           ;ds18b20.c: 70: float temperatura;
  3191                           ;ds18b20.c: 71: if(!resetDS18B20())
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _getTempDS18B20: [wreg+status,2+status,0+pclath+cstack]
  3195  10AB  216E  160A  118A   	fcall	_resetDS18B20
  3196  10AE  3A00               	xorlw	0
  3197  10AF  1D03               	skipz
  3198  10B0  290E               	goto	l5762
  3199                           
  3200                           ;ds18b20.c: 72: {
  3201                           ;ds18b20.c: 73: writeDS18B20(0xCC);
  3202  10B1  30CC               	movlw	204
  3203  10B2  2117  160A  118A   	fcall	_writeDS18B20
  3204                           
  3205                           ;ds18b20.c: 74: writeDS18B20(0x44);
  3206  10B5  3044               	movlw	68
  3207  10B6  2117  160A  118A   	fcall	_writeDS18B20
  3208                           
  3209                           ;ds18b20.c: 75: _delay((unsigned long)((750)*(8000000/4000.0)));
  3210  10B9  3008               	movlw	8
  3211  10BA  1283               	bcf	3,5	;RP0=0, select bank0
  3212  10BB  1303               	bcf	3,6	;RP1=0, select bank0
  3213  10BC  00D3               	movwf	??_getTempDS18B20+2
  3214  10BD  309D               	movlw	157
  3215  10BE  00D2               	movwf	??_getTempDS18B20+1
  3216  10BF  300B               	movlw	11
  3217  10C0  00D1               	movwf	??_getTempDS18B20
  3218  10C1                     u6997:	
  3219  10C1  0BD1               	decfsz	??_getTempDS18B20,f
  3220  10C2  28C1               	goto	u6997
  3221  10C3  0BD2               	decfsz	??_getTempDS18B20+1,f
  3222  10C4  28C1               	goto	u6997
  3223  10C5  0BD3               	decfsz	??_getTempDS18B20+2,f
  3224  10C6  28C1               	goto	u6997
  3225  10C7  28C8               	nop2
  3226                           
  3227                           ;ds18b20.c: 77: resetDS18B20();
  3228  10C8  216E  160A  118A   	fcall	_resetDS18B20
  3229                           
  3230                           ;ds18b20.c: 78: writeDS18B20(0xCC);
  3231  10CB  30CC               	movlw	204
  3232  10CC  2117  160A  118A   	fcall	_writeDS18B20
  3233                           
  3234                           ;ds18b20.c: 79: writeDS18B20(0xBE);
  3235  10CF  30BE               	movlw	190
  3236  10D0  2117  160A  118A   	fcall	_writeDS18B20
  3237                           
  3238                           ;ds18b20.c: 81: tempL = readDS18B20();
  3239  10D3  2147  160A  118A   	fcall	_readDS18B20
  3240  10D6  1283               	bcf	3,5	;RP0=0, select bank0
  3241  10D7  1303               	bcf	3,6	;RP1=0, select bank0
  3242  10D8  00D7               	movwf	getTempDS18B20@tempL
  3243  10D9  01D8               	clrf	getTempDS18B20@tempL+1
  3244                           
  3245                           ;ds18b20.c: 82: tempH = readDS18B20();
  3246  10DA  2147  160A  118A   	fcall	_readDS18B20
  3247  10DD  1283               	bcf	3,5	;RP0=0, select bank0
  3248  10DE  1303               	bcf	3,6	;RP1=0, select bank0
  3249  10DF  00D9               	movwf	getTempDS18B20@tempH
  3250  10E0  01DA               	clrf	getTempDS18B20@tempH+1
  3251                           
  3252                           ;ds18b20.c: 84: temp = ((unsigned int)tempH << 8) + (unsigned int)tempL;
  3253  10E1  00DC               	movwf	getTempDS18B20@temp+1
  3254  10E2  01DB               	clrf	getTempDS18B20@temp
  3255  10E3  0857               	movf	getTempDS18B20@tempL,w
  3256  10E4  07DB               	addwf	getTempDS18B20@temp,f
  3257  10E5  1803               	skipnc
  3258  10E6  0ADC               	incf	getTempDS18B20@temp+1,f
  3259  10E7  0858               	movf	getTempDS18B20@tempL+1,w
  3260  10E8  07DC               	addwf	getTempDS18B20@temp+1,f
  3261                           
  3262                           ;ds18b20.c: 85: temperatura = (float)temp * 0.0625 - 0.3;
  3263  10E9  309A               	movlw	154
  3264  10EA  00C2               	movwf	___ftadd@f1
  3265  10EB  3099               	movlw	153
  3266  10EC  00C3               	movwf	___ftadd@f1+1
  3267  10ED  30BE               	movlw	190
  3268  10EE  00C4               	movwf	___ftadd@f1+2
  3269  10EF  3080               	movlw	128
  3270  10F0  01A8               	clrf	___ftmul@f1
  3271  10F1  00A9               	movwf	___ftmul@f1+1
  3272  10F2  303D               	movlw	61
  3273  10F3  00AA               	movwf	___ftmul@f1+2
  3274  10F4  085C               	movf	getTempDS18B20@temp+1,w
  3275  10F5  00A1               	movwf	___lwtoft@c+1
  3276  10F6  085B               	movf	getTempDS18B20@temp,w
  3277  10F7  00A0               	movwf	___lwtoft@c
  3278  10F8  2247  160A  118A   	fcall	___lwtoft
  3279  10FB  0820               	movf	?___lwtoft,w
  3280  10FC  00AB               	movwf	___ftmul@f2
  3281  10FD  0821               	movf	?___lwtoft+1,w
  3282  10FE  00AC               	movwf	___ftmul@f2+1
  3283  10FF  0822               	movf	?___lwtoft+2,w
  3284  1100  00AD               	movwf	___ftmul@f2+2
  3285  1101  26AA  160A  118A   	fcall	___ftmul
  3286  1104  27C4               	fcall	PL60	;call to abstracted procedure
  3287  1105  120A  118A  25BC   	fcall	___ftadd
  3288  1108  0842               	movf	?___ftadd,w
  3289  1109  00D4               	movwf	getTempDS18B20@temperatura
  3290  110A  0843               	movf	?___ftadd+1,w
  3291  110B  00D5               	movwf	getTempDS18B20@temperatura+1
  3292  110C  0844               	movf	?___ftadd+2,w
  3293  110D  00D6               	movwf	getTempDS18B20@temperatura+2
  3294  110E                     l5762:	
  3295                           
  3296                           ;ds18b20.c: 86: }
  3297                           ;ds18b20.c: 87: return temperatura;
  3298  110E  1283               	bcf	3,5	;RP0=0, select bank0
  3299  110F  1303               	bcf	3,6	;RP1=0, select bank0
  3300  1110  0854               	movf	getTempDS18B20@temperatura,w
  3301  1111  00CE               	movwf	?_getTempDS18B20
  3302  1112  0855               	movf	getTempDS18B20@temperatura+1,w
  3303  1113  00CF               	movwf	?_getTempDS18B20+1
  3304  1114  0856               	movf	getTempDS18B20@temperatura+2,w
  3305  1115  00D0               	movwf	?_getTempDS18B20+2
  3306  1116  0008               	return
  3307  1117                     __end_of_getTempDS18B20:	
  3308  1117                     __ptext20:	
  3309 ;; *************** function _writeDS18B20 *****************
  3310 ;; Defined at:
  3311 ;;		line 23 in file "ds18b20.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  Cmd             1    wreg     unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  Cmd             1    3[COMMON] unsigned char 
  3316 ;;  i               1    4[COMMON] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;		None               void
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/200
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3326 ;;      Params:         0       0       0       0       0
  3327 ;;      Locals:         2       0       0       0       0
  3328 ;;      Temps:          1       0       0       0       0
  3329 ;;      Totals:         3       0       0       0       0
  3330 ;;Total ram usage:        3 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    1
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_getTempDS18B20
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           
  3341                           ;psect for function _writeDS18B20
  3342  1117                     _writeDS18B20:	
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _writeDS18B20: [wreg+status,2+status,0]
  3346                           ;writeDS18B20@Cmd stored from wreg
  3347  1117  00F3               	movwf	writeDS18B20@Cmd
  3348                           
  3349                           ;ds18b20.c: 24: char i;
  3350                           ;ds18b20.c: 25: TRISCbits.TRISC5 = 1;
  3351  1118  1683               	bsf	3,5	;RP0=1, select bank1
  3352  1119  1303               	bcf	3,6	;RP1=0, select bank1
  3353  111A  1687               	bsf	7,5	;volatile
  3354                           
  3355                           ;ds18b20.c: 26: for(i = 0; i < 8; i++)
  3356  111B  01F4               	clrf	writeDS18B20@i
  3357  111C                     l4176:	
  3358                           
  3359                           ;ds18b20.c: 27: {
  3360                           ;ds18b20.c: 28: if((Cmd & (1<<i))!= 0)
  3361  111C  3001               	movlw	1
  3362  111D  00F2               	movwf	??_writeDS18B20
  3363  111E  0A74               	incf	writeDS18B20@i,w
  3364  111F  2922               	goto	u4504
  3365  1120                     u4505:	
  3366  1120  1003               	clrc
  3367  1121  0DF2               	rlf	??_writeDS18B20,f
  3368  1122                     u4504:	
  3369  1122  3EFF               	addlw	-1
  3370  1123  1D03               	skipz
  3371  1124  2920               	goto	u4505
  3372  1125  0872               	movf	??_writeDS18B20,w
  3373  1126  0573               	andwf	writeDS18B20@Cmd,w
  3374  1127  1903               	btfsc	3,2
  3375  1128  2936               	goto	l16
  3376                           
  3377                           ;ds18b20.c: 29: {
  3378                           ;ds18b20.c: 30: TRISCbits.TRISC5 = 0;
  3379                           
  3380                           ;ds18b20.c: 31: RC5 = 0;
  3381  1129  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3382                           
  3383                           ;ds18b20.c: 32: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3384  112C  292D               	nop2	;2 cycle nop
  3385                           
  3386                           ;ds18b20.c: 33: TRISCbits.TRISC5 = 1;
  3387  112D  1683               	bsf	3,5	;RP0=1, select bank1
  3388  112E  1303               	bcf	3,6	;RP1=0, select bank1
  3389  112F  1687               	bsf	7,5	;volatile
  3390                           
  3391                           ;ds18b20.c: 34: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3392  1130  3027               	movlw	39
  3393  1131  00F2               	movwf	??_writeDS18B20
  3394  1132                     u7007:	
  3395  1132  0BF2               	decfsz	??_writeDS18B20,f
  3396  1133  2932               	goto	u7007
  3397  1134  2935               	nop2	;nop
  3398                           
  3399                           ;ds18b20.c: 35: }
  3400  1135  2941               	goto	l4186
  3401  1136                     l16:	
  3402                           
  3403                           ;ds18b20.c: 36: else
  3404                           ;ds18b20.c: 37: {
  3405                           ;ds18b20.c: 39: TRISCbits.TRISC5 = 0;
  3406                           
  3407                           ;ds18b20.c: 40: RC5 = 0;
  3408  1136  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3409                           
  3410                           ;ds18b20.c: 41: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3411  1139  3027               	movlw	39
  3412  113A  00F2               	movwf	??_writeDS18B20
  3413  113B                     u7017:	
  3414  113B  0BF2               	decfsz	??_writeDS18B20,f
  3415  113C  293B               	goto	u7017
  3416  113D  293E               	nop2	;nop
  3417                           
  3418                           ;ds18b20.c: 42: TRISCbits.TRISC5 = 1;
  3419  113E  1683               	bsf	3,5	;RP0=1, select bank1
  3420  113F  1303               	bcf	3,6	;RP1=0, select bank1
  3421  1140  1687               	bsf	7,5	;volatile
  3422  1141                     l4186:	
  3423  1141  3008               	movlw	8
  3424  1142  0AF4               	incf	writeDS18B20@i,f
  3425  1143  0274               	subwf	writeDS18B20@i,w
  3426  1144  1803               	btfsc	3,0
  3427  1145  0008               	return
  3428  1146  291C               	goto	l4176
  3429  1147                     __end_of_writeDS18B20:	
  3430  1147                     __ptext22:	
  3431 ;; *************** function _readDS18B20 *****************
  3432 ;; Defined at:
  3433 ;;		line 48 in file "ds18b20.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  i               1    4[COMMON] unsigned char 
  3438 ;;  result          1    3[COMMON] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/200
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3448 ;;      Params:         0       0       0       0       0
  3449 ;;      Locals:         2       0       0       0       0
  3450 ;;      Temps:          1       0       0       0       0
  3451 ;;      Totals:         3       0       0       0       0
  3452 ;;Total ram usage:        3 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_getTempDS18B20
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _readDS18B20
  3464  1147                     _readDS18B20:	
  3465                           
  3466                           ;ds18b20.c: 49: char i,result = 0;
  3467                           
  3468                           ;incstack = 0
  3469                           ; Regs used in _readDS18B20: [wreg+status,2+status,0]
  3470  1147  01F3               	clrf	readDS18B20@result
  3471                           
  3472                           ;ds18b20.c: 50: TRISCbits.TRISC5 = 1;
  3473  1148  1683               	bsf	3,5	;RP0=1, select bank1
  3474  1149  1303               	bcf	3,6	;RP1=0, select bank1
  3475  114A  1687               	bsf	7,5	;volatile
  3476                           
  3477                           ;ds18b20.c: 52: for(i = 0; i < 8; i++)
  3478  114B  01F4               	clrf	readDS18B20@i
  3479  114C                     l21:	
  3480                           
  3481                           ;ds18b20.c: 53: {
  3482                           ;ds18b20.c: 54: TRISCbits.TRISC5 = 0;
  3483                           
  3484                           ;ds18b20.c: 55: RC5 = 0;
  3485  114C  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3486                           
  3487                           ;ds18b20.c: 56: _delay((unsigned long)((2)*(8000000/4000000.0)));
  3488  114F  2950               	nop2	;2 cycle nop
  3489  1150  2951               	nop2	;2 cycle nop
  3490                           
  3491                           ;ds18b20.c: 57: TRISCbits.TRISC5 = 1;
  3492  1151  1683               	bsf	3,5	;RP0=1, select bank1
  3493  1152  1303               	bcf	3,6	;RP1=0, select bank1
  3494  1153  1687               	bsf	7,5	;volatile
  3495                           
  3496                           ;ds18b20.c: 59: if(RC5 != 0) result |= 1<<i;
  3497  1154  1283               	bcf	3,5	;RP0=0, select bank0
  3498  1155  1E87               	btfss	7,5	;volatile
  3499  1156  2962               	goto	l4200
  3500  1157  3001               	movlw	1
  3501  1158  00F2               	movwf	??_readDS18B20
  3502  1159  0A74               	incf	readDS18B20@i,w
  3503  115A  295D               	goto	u4544
  3504  115B                     u4545:	
  3505  115B  1003               	clrc
  3506  115C  0DF2               	rlf	??_readDS18B20,f
  3507  115D                     u4544:	
  3508  115D  3EFF               	addlw	-1
  3509  115E  1D03               	skipz
  3510  115F  295B               	goto	u4545
  3511  1160  0872               	movf	??_readDS18B20,w
  3512  1161  04F3               	iorwf	readDS18B20@result,f
  3513  1162                     l4200:	
  3514                           
  3515                           ;ds18b20.c: 61: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3516  1162  3027               	movlw	39
  3517  1163  00F2               	movwf	??_readDS18B20
  3518  1164                     u7067:	
  3519  1164  0BF2               	decfsz	??_readDS18B20,f
  3520  1165  2964               	goto	u7067
  3521  1166  2967               	nop2	;nop
  3522  1167  3008               	movlw	8
  3523  1168  0AF4               	incf	readDS18B20@i,f
  3524  1169  0274               	subwf	readDS18B20@i,w
  3525  116A  1C03               	skipc
  3526  116B  294C               	goto	l21
  3527                           
  3528                           ;ds18b20.c: 62: }
  3529                           ;ds18b20.c: 63: return result;
  3530  116C  0873               	movf	readDS18B20@result,w
  3531  116D  0008               	return
  3532  116E                     __end_of_readDS18B20:	
  3533  116E                     __ptext21:	
  3534 ;; *************** function _resetDS18B20 *****************
  3535 ;; Defined at:
  3536 ;;		line 3 in file "ds18b20.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/100
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3550 ;;      Params:         0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0
  3552 ;;      Temps:          1       0       0       0       0
  3553 ;;      Totals:         1       0       0       0       0
  3554 ;;Total ram usage:        1 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_getTempDS18B20
  3561 ;;		_main
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           
  3566                           ;psect for function _resetDS18B20
  3567  116E                     _resetDS18B20:	
  3568                           
  3569                           ;ds18b20.c: 4: TRISCbits.TRISC5 = 0;
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _resetDS18B20: [wreg]
  3573                           
  3574                           ;ds18b20.c: 5: RC5 = 0;
  3575  116E  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3576                           
  3577                           ;ds18b20.c: 6: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3578  1171  3089               	movlw	137
  3579  1172  00F2               	movwf	??_resetDS18B20
  3580  1173                     u7027:	
  3581  1173  2974               	nop2
  3582  1174  2975               	nop2
  3583  1175  0BF2               	decfsz	??_resetDS18B20,f
  3584  1176  2973               	goto	u7027
  3585                           
  3586                           ;ds18b20.c: 7: TRISCbits.TRISC5 = 1;
  3587  1177  1683               	bsf	3,5	;RP0=1, select bank1
  3588  1178  1303               	bcf	3,6	;RP1=0, select bank1
  3589  1179  1687               	bsf	7,5	;volatile
  3590                           
  3591                           ;ds18b20.c: 8: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3592  117A  3027               	movlw	39
  3593  117B  00F2               	movwf	??_resetDS18B20
  3594  117C                     u7037:	
  3595  117C  0BF2               	decfsz	??_resetDS18B20,f
  3596  117D  297C               	goto	u7037
  3597  117E  297F               	nop2	;nop
  3598                           
  3599                           ;ds18b20.c: 10: if (RC5 == 0)
  3600  117F  1283               	bcf	3,5	;RP0=0, select bank0
  3601  1180  1303               	bcf	3,6	;RP1=0, select bank0
  3602  1181  1A87               	btfsc	7,5	;volatile
  3603  1182  298A               	goto	l4164
  3604                           
  3605                           ;ds18b20.c: 11: {
  3606                           ;ds18b20.c: 12: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3607  1183  3089               	movlw	137
  3608  1184  00F2               	movwf	??_resetDS18B20
  3609  1185                     u7047:	
  3610  1185  2986               	nop2
  3611  1186  2987               	nop2
  3612  1187  0BF2               	decfsz	??_resetDS18B20,f
  3613  1188  2985               	goto	u7047
  3614                           
  3615                           ;ds18b20.c: 13: return 0;
  3616  1189  3400               	retlw	0
  3617  118A                     l4164:	
  3618                           
  3619                           ;ds18b20.c: 15: else
  3620                           ;ds18b20.c: 16: {
  3621                           ;ds18b20.c: 17: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3622  118A  3089               	movlw	137
  3623  118B  00F2               	movwf	??_resetDS18B20
  3624  118C                     u7057:	
  3625  118C  298D               	nop2
  3626  118D  298E               	nop2
  3627  118E  0BF2               	decfsz	??_resetDS18B20,f
  3628  118F  298C               	goto	u7057
  3629                           
  3630                           ;ds18b20.c: 18: return 1;
  3631  1190  3401               	retlw	1
  3632  1191                     __end_of_resetDS18B20:	
  3633  1191                     __ptext24:	
  3634 ;; *************** function _readStatusRegSHT71 *****************
  3635 ;; Defined at:
  3636 ;;		line 216 in file "sht71.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  p_value         1    wreg     PTR unsigned char 
  3639 ;;		 -> getResSHT71@inp(1), 
  3640 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  3641 ;;		 -> getResSHT71@checksum(1), 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  p_value         1    7[COMMON] PTR unsigned char 
  3644 ;;		 -> getResSHT71@inp(1), 
  3645 ;;  error           1    8[COMMON] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      unsigned char 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : B00/100
  3652 ;;		On exit  : B00/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3655 ;;      Params:         1       0       0       0       0
  3656 ;;      Locals:         2       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0
  3658 ;;      Totals:         3       0       0       0       0
  3659 ;;Total ram usage:        3 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    2
  3662 ;; This function calls:
  3663 ;;		_readByteSHT71
  3664 ;;		_tranStartSHT71
  3665 ;;		_writeByteSHT71
  3666 ;; This function is called by:
  3667 ;;		_getResSHT71
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           
  3672                           ;psect for function _readStatusRegSHT71
  3673  1191                     _readStatusRegSHT71:	
  3674                           
  3675                           ;incstack = 0
  3676                           ; Regs used in _readStatusRegSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3677                           ;readStatusRegSHT71@p_value stored from wreg
  3678  1191  00F7               	movwf	readStatusRegSHT71@p_value
  3679                           
  3680                           ;sht71.c: 219: tranStartSHT71();
  3681  1192  2309  160A  118A   	fcall	_tranStartSHT71
  3682                           
  3683                           ;sht71.c: 220: error = writeByteSHT71(0x07);
  3684  1195  3007               	movlw	7
  3685  1196  2333  160A  118A   	fcall	_writeByteSHT71
  3686  1199  00F8               	movwf	readStatusRegSHT71@error
  3687                           
  3688                           ;sht71.c: 221: *p_value = readByteSHT71(1);
  3689  119A  0877               	movf	readStatusRegSHT71@p_value,w
  3690  119B  0084               	movwf	4
  3691  119C  3001               	movlw	1
  3692  119D  22D9  160A  118A   	fcall	_readByteSHT71
  3693  11A0  1383               	bcf	3,7	;select IRP bank0
  3694  11A1  0080               	movwf	0
  3695                           
  3696                           ;sht71.c: 222: *p_checksum = readByteSHT71(0);
  3697  11A2  0876               	movf	readStatusRegSHT71@p_checksum,w
  3698  11A3  0084               	movwf	4
  3699  11A4  3000               	movlw	0
  3700  11A5  22D9               	fcall	_readByteSHT71
  3701  11A6  1383               	bcf	3,7	;select IRP bank0
  3702  11A7  0080               	movwf	0
  3703                           
  3704                           ;sht71.c: 223: return error;
  3705  11A8  0878               	movf	readStatusRegSHT71@error,w
  3706  11A9  0008               	return
  3707  11AA                     __end_of_readStatusRegSHT71:	
  3708  11AA                     __ptext23:	
  3709 ;; *************** function _getResSHT71 *****************
  3710 ;; Defined at:
  3711 ;;		line 226 in file "sht71.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  p_temp          1    wreg     PTR float 
  3714 ;;		 -> temp(3), 
  3715 ;;  p_humi          1   77[BANK0 ] PTR float 
  3716 ;;		 -> humi(3), 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  p_temp          1    4[BANK1 ] PTR float 
  3719 ;;		 -> temp(3), 
  3720 ;;  temp_val        3   10[BANK1 ] struct .
  3721 ;;  humi_val        3    6[BANK1 ] struct .
  3722 ;;  checksum        1    9[BANK1 ] unsigned char 
  3723 ;;  error           1    5[BANK1 ] unsigned char 
  3724 ;;  inp             1    3[BANK1 ] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;		None               void
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 300/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3734 ;;      Params:         0       1       0       0       0
  3735 ;;      Locals:         0       0      10       0       0
  3736 ;;      Temps:          0       0       3       0       0
  3737 ;;      Totals:         0       1      13       0       0
  3738 ;;Total ram usage:       14 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    4
  3741 ;; This function calls:
  3742 ;;		_LcdSetCursor
  3743 ;;		_LcdWriteString
  3744 ;;		___lwtoft
  3745 ;;		_calcSHT71
  3746 ;;		_connectionResetSHT71
  3747 ;;		_measureSHT71
  3748 ;;		_readStatusRegSHT71
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           
  3755                           ;psect for function _getResSHT71
  3756  11AA                     _getResSHT71:	
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _getResSHT71: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3760                           ;getResSHT71@p_temp stored from wreg
  3761  11AA  1683               	bsf	3,5	;RP0=1, select bank1
  3762  11AB  00C6               	movwf	getResSHT71@p_temp^(0+128)
  3763  11AC  30CB               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  3764                           
  3765                           ;sht71.c: 227: value humi_val,temp_val;
  3766                           ;sht71.c: 228: unsigned char error, checksum;
  3767                           ;sht71.c: 229: char inp;
  3768                           ;sht71.c: 230: error=0;
  3769  11AD  01C7               	clrf	getResSHT71@error^(0+128)
  3770                           
  3771                           ;sht71.c: 231: error += measureSHT71((unsigned char*) (&humi_val.i),&checksum,3);
  3772  11AE  00F6               	movwf	measureSHT71@p_checksum
  3773  11AF  3003               	movlw	3
  3774  11B0  00F7               	movwf	measureSHT71@mode
  3775  11B1  30C8               	movlw	(low (getResSHT71@humi_val| 0))& (0+255)
  3776  11B2  2257  160A  118A   	fcall	_measureSHT71
  3777  11B5  1683               	bsf	3,5	;RP0=1, select bank1
  3778  11B6  07C7               	addwf	getResSHT71@error^(0+128),f
  3779                           
  3780                           ;sht71.c: 232: error += measureSHT71((unsigned char*) (&temp_val.i),&checksum,2);
  3781  11B7  30CB               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  3782  11B8  00F6               	movwf	measureSHT71@p_checksum
  3783  11B9  3002               	movlw	2
  3784  11BA  00F7               	movwf	measureSHT71@mode
  3785  11BB  30CC               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  3786  11BC  2257  160A  118A   	fcall	_measureSHT71
  3787  11BF  1683               	bsf	3,5	;RP0=1, select bank1
  3788  11C0  07C7               	addwf	getResSHT71@error^(0+128),f
  3789                           
  3790                           ;sht71.c: 233: error += readStatusRegSHT71(&inp, &checksum);
  3791  11C1  30CB               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  3792  11C2  00F6               	movwf	readStatusRegSHT71@p_checksum
  3793  11C3  30C5               	movlw	(low (getResSHT71@inp| 0))& (0+255)
  3794  11C4  2191  160A  118A   	fcall	_readStatusRegSHT71
  3795  11C7  1683               	bsf	3,5	;RP0=1, select bank1
  3796  11C8  07C7               	addwf	getResSHT71@error^(0+128),f
  3797                           
  3798                           ;sht71.c: 234: if(error != 0)
  3799  11C9  0847               	movf	getResSHT71@error^(0+128),w
  3800  11CA  1903               	btfsc	3,2
  3801  11CB  29ED               	goto	l5816
  3802                           
  3803                           ;sht71.c: 235: {
  3804                           ;sht71.c: 236: connectionResetSHT71();
  3805  11CC  2363               	fcall	_connectionResetSHT71
  3806  11CD  3001               	movlw	1
  3807                           
  3808                           ;sht71.c: 237: LcdSetCursor(1,1);
  3809  11CE  01F6               	clrf	LcdSetCursor@b
  3810  11CF  0AF6               	incf	LcdSetCursor@b,f
  3811  11D0  120A  158A  2685  160A  118A  	fcall	_LcdSetCursor
  3812                           
  3813                           ;sht71.c: 238: LcdWriteString("Greska SHT71!");
  3814  11D5  3010               	movlw	low (STR_1| (0+32768))
  3815  11D6  00F7               	movwf	LcdWriteString@a
  3816  11D7  3099               	movlw	high (STR_1| (0+32768))
  3817  11D8  00F8               	movwf	LcdWriteString@a+1
  3818  11D9  120A  158A  26AE  160A  118A  	fcall	_LcdWriteString
  3819                           
  3820                           ;sht71.c: 239: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3821  11DE  300B               	movlw	11
  3822  11DF  1683               	bsf	3,5	;RP0=1, select bank1
  3823  11E0  00C4               	movwf	(??_getResSHT71^(0+128)+2)
  3824  11E1  3026               	movlw	38
  3825  11E2  00C3               	movwf	(??_getResSHT71^(0+128)+1)
  3826  11E3  3066               	movlw	102
  3827  11E4  00C2               	movwf	??_getResSHT71^(0+128)
  3828  11E5                     u7077:	
  3829  11E5  0BC2               	decfsz	??_getResSHT71^(0+128),f
  3830  11E6  29E5               	goto	u7077
  3831  11E7  0BC3               	decfsz	(??_getResSHT71^(0+128)+1),f
  3832  11E8  29E5               	goto	u7077
  3833  11E9  0BC4               	decfsz	(??_getResSHT71^(0+128)+2),f
  3834  11EA  29E5               	goto	u7077
  3835  11EB  29EC               	nop2
  3836                           
  3837                           ;sht71.c: 240: }
  3838  11EC  0008               	return
  3839  11ED                     l5816:	
  3840                           
  3841                           ;sht71.c: 241: else
  3842                           ;sht71.c: 242: {
  3843                           ;sht71.c: 243: humi_val.f = (float)tempervalue[1];
  3844  11ED  0823               	movf	((_tempervalue+1)^(0+128)+2),w
  3845  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  3846  11EF  00A1               	movwf	___lwtoft@c+1
  3847  11F0  1683               	bsf	3,5	;RP0=1, select bank1
  3848  11F1  0822               	movf	(_tempervalue^(0+128)+2),w
  3849  11F2  1283               	bcf	3,5	;RP0=0, select bank0
  3850  11F3  00A0               	movwf	___lwtoft@c
  3851  11F4  2247  160A  118A   	fcall	___lwtoft
  3852  11F7  0820               	movf	?___lwtoft,w
  3853  11F8  1683               	bsf	3,5	;RP0=1, select bank1
  3854  11F9  00C8               	movwf	getResSHT71@humi_val^(0+128)
  3855  11FA  1283               	bcf	3,5	;RP0=0, select bank0
  3856  11FB  0821               	movf	?___lwtoft+1,w
  3857  11FC  1683               	bsf	3,5	;RP0=1, select bank1
  3858  11FD  00C9               	movwf	(getResSHT71@humi_val+1)^(0+128)
  3859  11FE  1283               	bcf	3,5	;RP0=0, select bank0
  3860  11FF  0822               	movf	?___lwtoft+2,w
  3861  1200  1683               	bsf	3,5	;RP0=1, select bank1
  3862  1201  00CA               	movwf	(getResSHT71@humi_val+2)^(0+128)
  3863                           
  3864                           ;sht71.c: 244: temp_val.f = (float)tempervalue[0];
  3865  1202  0821               	movf	(_tempervalue+1)^(0+128),w
  3866  1203  1283               	bcf	3,5	;RP0=0, select bank0
  3867  1204  00A1               	movwf	___lwtoft@c+1
  3868  1205  1683               	bsf	3,5	;RP0=1, select bank1
  3869  1206  0820               	movf	_tempervalue^(0+128),w
  3870  1207  1283               	bcf	3,5	;RP0=0, select bank0
  3871  1208  00A0               	movwf	___lwtoft@c
  3872  1209  2247  160A  118A   	fcall	___lwtoft
  3873  120C  0820               	movf	?___lwtoft,w
  3874  120D  1683               	bsf	3,5	;RP0=1, select bank1
  3875  120E  00CC               	movwf	getResSHT71@temp_val^(0+128)
  3876  120F  1283               	bcf	3,5	;RP0=0, select bank0
  3877  1210  0821               	movf	?___lwtoft+1,w
  3878  1211  1683               	bsf	3,5	;RP0=1, select bank1
  3879  1212  00CD               	movwf	(getResSHT71@temp_val+1)^(0+128)
  3880  1213  1283               	bcf	3,5	;RP0=0, select bank0
  3881  1214  0822               	movf	?___lwtoft+2,w
  3882  1215  1683               	bsf	3,5	;RP0=1, select bank1
  3883  1216  00CE               	movwf	(getResSHT71@temp_val+2)^(0+128)
  3884                           
  3885                           ;sht71.c: 245: humi_val.f = calcSHT71(humi_val.f,&temp_val.f);
  3886  1217  0848               	movf	getResSHT71@humi_val^(0+128),w
  3887  1218  1283               	bcf	3,5	;RP0=0, select bank0
  3888  1219  00D4               	movwf	calcSHT71@p_humidity
  3889  121A  1683               	bsf	3,5	;RP0=1, select bank1
  3890  121B  0849               	movf	(getResSHT71@humi_val+1)^(0+128),w
  3891  121C  1283               	bcf	3,5	;RP0=0, select bank0
  3892  121D  00D5               	movwf	calcSHT71@p_humidity+1
  3893  121E  1683               	bsf	3,5	;RP0=1, select bank1
  3894  121F  084A               	movf	(getResSHT71@humi_val+2)^(0+128),w
  3895  1220  1283               	bcf	3,5	;RP0=0, select bank0
  3896  1221  00D6               	movwf	calcSHT71@p_humidity+2
  3897  1222  30CC               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  3898  1223  00D7               	movwf	calcSHT71@p_temperature
  3899  1224  237A               	fcall	_calcSHT71
  3900  1225  0854               	movf	?_calcSHT71,w
  3901  1226  1683               	bsf	3,5	;RP0=1, select bank1
  3902  1227  00C8               	movwf	getResSHT71@humi_val^(0+128)
  3903  1228  1283               	bcf	3,5	;RP0=0, select bank0
  3904  1229  0855               	movf	?_calcSHT71+1,w
  3905  122A  1683               	bsf	3,5	;RP0=1, select bank1
  3906  122B  00C9               	movwf	(getResSHT71@humi_val+1)^(0+128)
  3907  122C  1283               	bcf	3,5	;RP0=0, select bank0
  3908  122D  0856               	movf	?_calcSHT71+2,w
  3909  122E  1683               	bsf	3,5	;RP0=1, select bank1
  3910  122F  00CA               	movwf	(getResSHT71@humi_val+2)^(0+128)
  3911                           
  3912                           ;sht71.c: 246: *p_temp = temp_val.f;
  3913  1230  0846               	movf	getResSHT71@p_temp^(0+128),w
  3914  1231  0084               	movwf	4
  3915  1232  084C               	movf	getResSHT71@temp_val^(0+128),w
  3916  1233  0080               	movwf	0
  3917  1234  0A84               	incf	4,f
  3918  1235  084D               	movf	(getResSHT71@temp_val+1)^(0+128),w
  3919  1236  0080               	movwf	0
  3920  1237  0A84               	incf	4,f
  3921  1238  084E               	movf	(getResSHT71@temp_val+2)^(0+128),w
  3922  1239  0080               	movwf	0
  3923                           
  3924                           ;sht71.c: 247: *p_humi = humi_val.f;
  3925  123A  1283               	bcf	3,5	;RP0=0, select bank0
  3926  123B  086D               	movf	getResSHT71@p_humi,w
  3927  123C  0084               	movwf	4
  3928  123D  1683               	bsf	3,5	;RP0=1, select bank1
  3929  123E  0848               	movf	getResSHT71@humi_val^(0+128),w
  3930  123F  0080               	movwf	0
  3931  1240  0A84               	incf	4,f
  3932  1241  0849               	movf	(getResSHT71@humi_val+1)^(0+128),w
  3933  1242  0080               	movwf	0
  3934  1243  0A84               	incf	4,f
  3935  1244  084A               	movf	(getResSHT71@humi_val+2)^(0+128),w
  3936  1245  0080               	movwf	0
  3937  1246  0008               	return
  3938  1247                     __end_of_getResSHT71:	
  3939  1247                     __ptext31:	
  3940 ;; *************** function ___lwtoft *****************
  3941 ;; Defined at:
  3942 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  c               2    0[BANK0 ] unsigned int 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  3    0[BANK0 ] float 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 300/0
  3953 ;;		On exit  : 300/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3956 ;;      Params:         0       3       0       0       0
  3957 ;;      Locals:         0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0
  3959 ;;      Totals:         0       3       0       0       0
  3960 ;;Total ram usage:        3 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    2
  3963 ;; This function calls:
  3964 ;;		___ftpack
  3965 ;; This function is called by:
  3966 ;;		_getTempDS18B20
  3967 ;;		_getResSHT71
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           
  3972                           ;psect for function ___lwtoft
  3973  1247                     ___lwtoft:	
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3977  1247  0820               	movf	___lwtoft@c,w
  3978  1248  00F2               	movwf	___ftpack@arg
  3979  1249  0821               	movf	___lwtoft@c+1,w
  3980  124A  00F3               	movwf	___ftpack@arg+1
  3981  124B  308E               	movlw	142
  3982  124C  01F4               	clrf	___ftpack@arg+2
  3983  124D  00F5               	movwf	___ftpack@exp
  3984  124E  01F6               	clrf	___ftpack@sign
  3985  124F  2725               	fcall	___ftpack
  3986  1250  0872               	movf	?___ftpack,w
  3987  1251  00A0               	movwf	?___lwtoft
  3988  1252  0873               	movf	?___ftpack+1,w
  3989  1253  00A1               	movwf	?___lwtoft+1
  3990  1254  0874               	movf	?___ftpack+2,w
  3991  1255  00A2               	movwf	?___lwtoft+2
  3992  1256  0008               	return
  3993  1257                     __end_of___lwtoft:	
  3994  1257                     __ptext25:	
  3995 ;; *************** function _measureSHT71 *****************
  3996 ;; Defined at:
  3997 ;;		line 91 in file "sht71.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  p_value         1    wreg     PTR unsigned char 
  4000 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  4001 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  4002 ;;		 -> getResSHT71@checksum(1), 
  4003 ;;  mode            1    7[COMMON] unsigned char 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  p_value         1    0[BANK0 ] PTR unsigned char 
  4006 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  4007 ;;  temp            2    4[BANK0 ] unsigned int 
  4008 ;;  error           2    2[BANK0 ] unsigned int 
  4009 ;;  loop_cnt        1    1[BANK0 ] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      unsigned char 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 300/100
  4016 ;;		On exit  : B00/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4019 ;;      Params:         2       0       0       0       0
  4020 ;;      Locals:         0       6       0       0       0
  4021 ;;      Temps:          2       0       0       0       0
  4022 ;;      Totals:         4       6       0       0       0
  4023 ;;Total ram usage:       10 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    2
  4026 ;; This function calls:
  4027 ;;		_readByteSHT71
  4028 ;;		_tranStartSHT71
  4029 ;;		_writeByteSHT71
  4030 ;; This function is called by:
  4031 ;;		_getResSHT71
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _measureSHT71
  4037  1257                     _measureSHT71:	
  4038                           
  4039                           ;sht71.c: 92: unsigned error = 0;
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _measureSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4043  1257  1283               	bcf	3,5	;RP0=0, select bank0
  4044  1258  01A2               	clrf	measureSHT71@error
  4045  1259  01A3               	clrf	measureSHT71@error+1
  4046                           
  4047                           ;sht71.c: 94: unsigned char loop_cnt=0;
  4048  125A  01A1               	clrf	measureSHT71@loop_cnt
  4049                           
  4050                           ;sht71.c: 96: tranStartSHT71();
  4051  125B  2309  160A  118A   	fcall	_tranStartSHT71
  4052                           
  4053                           ;sht71.c: 97: switch(mode){
  4054  125E  2A69               	goto	l4218
  4055  125F                     l4212:	
  4056  125F  3003               	movlw	3
  4057  1260  2A62               	goto	L3
  4058  1261                     l4214:	
  4059  1261  3005               	movlw	5
  4060  1262                     L3:	
  4061  1262  2333  160A  118A   	fcall	_writeByteSHT71
  4062  1265  07A2               	addwf	measureSHT71@error,f
  4063  1266  1803               	skipnc
  4064  1267  0AA3               	incf	measureSHT71@error+1,f
  4065  1268  2A71               	goto	l127
  4066  1269                     l4218:	
  4067  1269  0877               	movf	measureSHT71@mode,w
  4068                           
  4069                           ; Switch size 1, requested type "space"
  4070                           ; Number of cases is 2, Range of values is 2 to 3
  4071                           ; switch strategies available:
  4072                           ; Name         Instructions Cycles
  4073                           ; simple_byte            7     4 (average)
  4074                           ; direct_byte           17    11 (fixed)
  4075                           ; jumptable            263     9 (fixed)
  4076                           ;	Chosen strategy is simple_byte
  4077  126A  3A02               	xorlw	2	; case 2
  4078  126B  1903               	skipnz
  4079  126C  2A5F               	goto	l4212
  4080  126D  3A01               	xorlw	1	; case 3
  4081  126E  1903               	skipnz
  4082  126F  2A61               	goto	l4214
  4083  1270  2A71               	goto	l127
  4084  1271                     l127:	
  4085                           
  4086                           ;sht71.c: 102: TRISBbits.TRISB7 = 1;
  4087  1271  1683               	bsf	3,5	;RP0=1, select bank1
  4088  1272  1303               	bcf	3,6	;RP1=0, select bank1
  4089  1273  1786               	bsf	6,7	;volatile
  4090  1274  2A83               	goto	l130
  4091  1275                     l4220:	
  4092  1275  30C9               	movlw	201
  4093  1276  0AA1               	incf	measureSHT71@loop_cnt,f
  4094  1277  0221               	subwf	measureSHT71@loop_cnt,w
  4095  1278  1803               	btfsc	3,0
  4096  1279  2A87               	goto	l134
  4097                           
  4098                           ;sht71.c: 106: _delay((unsigned long)((10)*(8000000/4000.0)));
  4099  127A  301A               	movlw	26
  4100  127B  00F9               	movwf	??_measureSHT71+1
  4101  127C  30F8               	movlw	248
  4102  127D  00F8               	movwf	??_measureSHT71
  4103  127E                     u7087:	
  4104  127E  0BF8               	decfsz	??_measureSHT71,f
  4105  127F  2A7E               	goto	u7087
  4106  1280  0BF9               	decfsz	??_measureSHT71+1,f
  4107  1281  2A7E               	goto	u7087
  4108  1282  0000               	nop
  4109  1283                     l130:	
  4110                           ;sht71.c: 103: while (1)
  4111                           
  4112                           
  4113                           ;sht71.c: 104: {
  4114                           ;sht71.c: 105: if((RB7 == 0) || (++loop_cnt > 200)) break;
  4115  1283  1283               	bcf	3,5	;RP0=0, select bank0
  4116  1284  1303               	bcf	3,6	;RP1=0, select bank0
  4117  1285  1B86               	btfsc	6,7	;volatile
  4118  1286  2A75               	goto	l4220
  4119  1287                     l134:	
  4120                           
  4121                           ;sht71.c: 107: }
  4122                           ;sht71.c: 108: if(RB7) error += 1;
  4123  1287  1F86               	btfss	6,7	;volatile
  4124  1288  2AC9               	goto	l4252
  4125  1289  0AA2               	incf	measureSHT71@error,f
  4126  128A  1903               	skipnz
  4127  128B  0AA3               	incf	measureSHT71@error+1,f
  4128  128C  2AC9               	goto	l4252
  4129  128D                     l4226:	
  4130                           
  4131                           ;sht71.c: 111: temp = readByteSHT71(1);
  4132  128D  3001               	movlw	1
  4133  128E  22D9  160A  118A   	fcall	_readByteSHT71
  4134  1291  00A4               	movwf	measureSHT71@temp
  4135  1292  01A5               	clrf	measureSHT71@temp+1
  4136                           
  4137                           ;sht71.c: 112: temp <<= 8;
  4138  1293  00A5               	movwf	measureSHT71@temp+1
  4139  1294  01A4               	clrf	measureSHT71@temp
  4140                           
  4141                           ;sht71.c: 113: tempervalue[0] = temp;
  4142  1295  1683               	bsf	3,5	;RP0=1, select bank1
  4143  1296  00A1               	movwf	(_tempervalue+1)^(0+128)
  4144  1297  1283               	bcf	3,5	;RP0=0, select bank0
  4145  1298  0824               	movf	measureSHT71@temp,w
  4146  1299  1683               	bsf	3,5	;RP0=1, select bank1
  4147  129A  00A0               	movwf	_tempervalue^(0+128)
  4148                           
  4149                           ;sht71.c: 114: temp = 0;
  4150  129B  1283               	bcf	3,5	;RP0=0, select bank0
  4151  129C  3001               	movlw	1
  4152  129D  01A4               	clrf	measureSHT71@temp
  4153  129E  01A5               	clrf	measureSHT71@temp+1
  4154                           
  4155                           ;sht71.c: 115: temp = readByteSHT71(1);
  4156  129F  22D9  160A  118A   	fcall	_readByteSHT71
  4157  12A2  00A4               	movwf	measureSHT71@temp
  4158  12A3  01A5               	clrf	measureSHT71@temp+1
  4159                           
  4160                           ;sht71.c: 116: tempervalue[0] |= temp;
  4161  12A4  1683               	bsf	3,5	;RP0=1, select bank1
  4162  12A5  04A0               	iorwf	_tempervalue^(0+128),f
  4163  12A6  1283               	bcf	3,5	;RP0=0, select bank0
  4164  12A7  0825               	movf	measureSHT71@temp+1,w
  4165  12A8  1683               	bsf	3,5	;RP0=1, select bank1
  4166  12A9  04A1               	iorwf	(_tempervalue+1)^(0+128),f
  4167                           
  4168                           ;sht71.c: 117: break;
  4169  12AA  2AD1               	goto	l4254
  4170  12AB                     l4238:	
  4171                           
  4172                           ;sht71.c: 119: temp = readByteSHT71(1);
  4173  12AB  3001               	movlw	1
  4174  12AC  22D9  160A  118A   	fcall	_readByteSHT71
  4175  12AF  00A4               	movwf	measureSHT71@temp
  4176  12B0  01A5               	clrf	measureSHT71@temp+1
  4177                           
  4178                           ;sht71.c: 120: temp <<= 8;
  4179  12B1  00A5               	movwf	measureSHT71@temp+1
  4180  12B2  01A4               	clrf	measureSHT71@temp
  4181                           
  4182                           ;sht71.c: 121: tempervalue[1] = temp;
  4183  12B3  1683               	bsf	3,5	;RP0=1, select bank1
  4184  12B4  00A3               	movwf	((_tempervalue+1)^(0+128)+2)
  4185  12B5  1283               	bcf	3,5	;RP0=0, select bank0
  4186  12B6  0824               	movf	measureSHT71@temp,w
  4187  12B7  1683               	bsf	3,5	;RP0=1, select bank1
  4188  12B8  00A2               	movwf	(_tempervalue^(0+128)+2)
  4189                           
  4190                           ;sht71.c: 122: temp = 0;
  4191  12B9  1283               	bcf	3,5	;RP0=0, select bank0
  4192  12BA  3001               	movlw	1
  4193  12BB  01A4               	clrf	measureSHT71@temp
  4194  12BC  01A5               	clrf	measureSHT71@temp+1
  4195                           
  4196                           ;sht71.c: 123: temp = readByteSHT71(1);
  4197  12BD  22D9  160A  118A   	fcall	_readByteSHT71
  4198  12C0  00A4               	movwf	measureSHT71@temp
  4199  12C1  01A5               	clrf	measureSHT71@temp+1
  4200                           
  4201                           ;sht71.c: 124: tempervalue[1] |= temp;
  4202  12C2  1683               	bsf	3,5	;RP0=1, select bank1
  4203  12C3  04A2               	iorwf	(_tempervalue^(0+128)+2),f
  4204  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  4205  12C5  0825               	movf	measureSHT71@temp+1,w
  4206  12C6  1683               	bsf	3,5	;RP0=1, select bank1
  4207  12C7  04A3               	iorwf	((_tempervalue+1)^(0+128)+2),f
  4208                           
  4209                           ;sht71.c: 125: break;
  4210  12C8  2AD1               	goto	l4254
  4211  12C9                     l4252:	
  4212  12C9  0877               	movf	measureSHT71@mode,w
  4213                           
  4214                           ; Switch size 1, requested type "space"
  4215                           ; Number of cases is 2, Range of values is 2 to 3
  4216                           ; switch strategies available:
  4217                           ; Name         Instructions Cycles
  4218                           ; simple_byte            7     4 (average)
  4219                           ; direct_byte           17    11 (fixed)
  4220                           ; jumptable            263     9 (fixed)
  4221                           ;	Chosen strategy is simple_byte
  4222  12CA  3A02               	xorlw	2	; case 2
  4223  12CB  1903               	skipnz
  4224  12CC  2A8D               	goto	l4226
  4225  12CD  3A01               	xorlw	1	; case 3
  4226  12CE  1903               	skipnz
  4227  12CF  2AAB               	goto	l4238
  4228  12D0  2AD1               	goto	l4254
  4229  12D1                     l4254:	
  4230                           
  4231                           ;sht71.c: 128: *p_checksum = readByteSHT71(0);
  4232  12D1  0876               	movf	measureSHT71@p_checksum,w
  4233  12D2  0084               	movwf	4
  4234  12D3  3000               	movlw	0
  4235  12D4  22D9               	fcall	_readByteSHT71
  4236  12D5  1383               	bcf	3,7	;select IRP bank0
  4237  12D6  0080               	movwf	0
  4238                           
  4239                           ;sht71.c: 129: return error;
  4240  12D7  0822               	movf	measureSHT71@error,w
  4241  12D8  0008               	return
  4242  12D9                     __end_of_measureSHT71:	
  4243  12D9                     __ptext27:	
  4244 ;; *************** function _readByteSHT71 *****************
  4245 ;; Defined at:
  4246 ;;		line 151 in file "sht71.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  ack             1    wreg     unsigned char 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  ack             1    3[COMMON] unsigned char 
  4251 ;;  i               1    5[COMMON] unsigned char 
  4252 ;;  res             1    4[COMMON] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      unsigned char 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0
  4257 ;; Tracked objects:
  4258 ;;		On entry : 200/0
  4259 ;;		On exit  : 300/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4262 ;;      Params:         0       0       0       0       0
  4263 ;;      Locals:         3       0       0       0       0
  4264 ;;      Temps:          1       0       0       0       0
  4265 ;;      Totals:         4       0       0       0       0
  4266 ;;Total ram usage:        4 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    1
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_measureSHT71
  4273 ;;		_readStatusRegSHT71
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           
  4278                           ;psect for function _readByteSHT71
  4279  12D9                     _readByteSHT71:	
  4280                           
  4281                           ;incstack = 0
  4282                           ; Regs used in _readByteSHT71: [wreg+status,2+status,0]
  4283                           ;readByteSHT71@ack stored from wreg
  4284  12D9  00F3               	movwf	readByteSHT71@ack
  4285                           
  4286                           ;sht71.c: 152: unsigned char i, res=0;
  4287  12DA  01F4               	clrf	readByteSHT71@res
  4288                           
  4289                           ;sht71.c: 153: TRISBbits.TRISB7 = 1;
  4290  12DB  1683               	bsf	3,5	;RP0=1, select bank1
  4291  12DC  1786               	bsf	6,7	;volatile
  4292                           
  4293                           ;sht71.c: 154: for (i=0x80;i>0;i/=2)
  4294  12DD  3080               	movlw	128
  4295  12DE  00F5               	movwf	readByteSHT71@i
  4296  12DF                     l150:	
  4297                           
  4298                           ;sht71.c: 155: {
  4299                           ;sht71.c: 156: RB6 = 1;
  4300  12DF  1283               	bcf	3,5	;RP0=0, select bank0
  4301  12E0  1706               	bsf	6,6	;volatile
  4302                           
  4303                           ;sht71.c: 157: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4304  12E1  2AE2               	nop2	;2 cycle nop
  4305  12E2  2AE3               	nop2	;2 cycle nop
  4306                           
  4307                           ;sht71.c: 158: if (RB7) res = (res | i);
  4308  12E3  1283               	bcf	3,5	;RP0=0, select bank0
  4309  12E4  1303               	bcf	3,6	;RP1=0, select bank0
  4310  12E5  0875               	movf	readByteSHT71@i,w
  4311  12E6  1B86               	btfsc	6,7	;volatile
  4312  12E7  04F4               	iorwf	readByteSHT71@res,f
  4313                           
  4314                           ;sht71.c: 159: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4315  12E8  2AE9               	nop2	;2 cycle nop
  4316  12E9  2AEA               	nop2	;2 cycle nop
  4317                           
  4318                           ;sht71.c: 160: RB6 = 0;
  4319  12EA  1283               	bcf	3,5	;RP0=0, select bank0
  4320  12EB  1303               	bcf	3,6	;RP1=0, select bank0
  4321  12EC  1306               	bcf	6,6	;volatile
  4322  12ED  1003               	clrc
  4323  12EE  0CF5               	rrf	readByteSHT71@i,f
  4324  12EF  0875               	movf	readByteSHT71@i,w
  4325  12F0  1D03               	btfss	3,2
  4326  12F1  2ADF               	goto	l150
  4327                           
  4328                           ;sht71.c: 161: }
  4329                           ;sht71.c: 162: TRISBbits.TRISB7 = 0;
  4330  12F2  1683               	bsf	3,5	;RP0=1, select bank1
  4331  12F3  1386               	bcf	6,7	;volatile
  4332                           
  4333                           ;sht71.c: 163: RB7 = !ack;
  4334  12F4  0873               	movf	readByteSHT71@ack,w
  4335  12F5  1D03               	btfss	3,2
  4336  12F6  2AFB               	goto	u4050
  4337  12F7  1283               	bcf	3,5	;RP0=0, select bank0
  4338  12F8  1303               	bcf	3,6	;RP1=0, select bank0
  4339  12F9  1786               	bsf	6,7	;volatile
  4340  12FA  2AFE               	goto	l3868
  4341  12FB                     u4050:	
  4342  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  4343  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  4344  12FD  1386               	bcf	6,7	;volatile
  4345  12FE                     l3868:	
  4346                           
  4347                           ;sht71.c: 164: RB6 = 1;
  4348  12FE  1706               	bsf	6,6	;volatile
  4349                           
  4350                           ;sht71.c: 165: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4351  12FF  3003               	movlw	3
  4352  1300  00F2               	movwf	??_readByteSHT71
  4353  1301                     u7107:	
  4354  1301  0BF2               	decfsz	??_readByteSHT71,f
  4355  1302  2B01               	goto	u7107
  4356                           
  4357                           ;sht71.c: 166: RB6 = 0;
  4358  1303  1283               	bcf	3,5	;RP0=0, select bank0
  4359  1304  1303               	bcf	3,6	;RP1=0, select bank0
  4360  1305  1306               	bcf	6,6	;volatile
  4361                           
  4362                           ;sht71.c: 167: RB7 = 1;
  4363  1306  1786               	bsf	6,7	;volatile
  4364                           
  4365                           ;sht71.c: 168: return res;
  4366  1307  0874               	movf	readByteSHT71@res,w
  4367  1308  0008               	return
  4368  1309                     __end_of_readByteSHT71:	
  4369  1309                     __ptext29:	
  4370 ;; *************** function _tranStartSHT71 *****************
  4371 ;; Defined at:
  4372 ;;		line 15 in file "sht71.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;		None               void
  4379 ;; Registers used:
  4380 ;;		None
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/100
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4386 ;;      Params:         0       0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0
  4389 ;;      Totals:         0       0       0       0       0
  4390 ;;Total ram usage:        0 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    1
  4393 ;; This function calls:
  4394 ;;		Nothing
  4395 ;; This function is called by:
  4396 ;;		_measureSHT71
  4397 ;;		_connectionResetSHT71
  4398 ;;		_readStatusRegSHT71
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _tranStartSHT71
  4404  1309                     _tranStartSHT71:	
  4405                           
  4406                           ;sht71.c: 16: TRISBbits.TRISB7 = 0;
  4407                           
  4408                           ;incstack = 0
  4409                           ; Regs used in _tranStartSHT71: []
  4410  1309  1683               	bsf	3,5	;RP0=1, select bank1
  4411  130A  1303               	bcf	3,6	;RP1=0, select bank1
  4412  130B  1386               	bcf	6,7	;volatile
  4413                           
  4414                           ;sht71.c: 17: RB7 = 1;
  4415  130C  1283               	bcf	3,5	;RP0=0, select bank0
  4416  130D  1786               	bsf	6,7	;volatile
  4417                           
  4418                           ;sht71.c: 18: RB6 = 0;
  4419  130E  1306               	bcf	6,6	;volatile
  4420                           
  4421                           ;sht71.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4422  130F  2B10               	nop2	;2 cycle nop
  4423  1310  2B11               	nop2	;2 cycle nop
  4424                           
  4425                           ;sht71.c: 20: RB6 = 1;
  4426  1311  1283               	bcf	3,5	;RP0=0, select bank0
  4427  1312  1303               	bcf	3,6	;RP1=0, select bank0
  4428  1313  1706               	bsf	6,6	;volatile
  4429                           
  4430                           ;sht71.c: 21: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4431  1314  2B15               	nop2	;2 cycle nop
  4432  1315  2B16               	nop2	;2 cycle nop
  4433                           
  4434                           ;sht71.c: 22: RB7 = 0;
  4435  1316  1283               	bcf	3,5	;RP0=0, select bank0
  4436  1317  1303               	bcf	3,6	;RP1=0, select bank0
  4437  1318  1386               	bcf	6,7	;volatile
  4438                           
  4439                           ;sht71.c: 23: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4440  1319  2B1A               	nop2	;2 cycle nop
  4441                           
  4442                           ;sht71.c: 24: RB6 = 0;
  4443  131A  1283               	bcf	3,5	;RP0=0, select bank0
  4444  131B  1303               	bcf	3,6	;RP1=0, select bank0
  4445  131C  1306               	bcf	6,6	;volatile
  4446                           
  4447                           ;sht71.c: 25: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4448  131D  2B1E               	nop2	;2 cycle nop
  4449  131E  2B1F               	nop2	;2 cycle nop
  4450                           
  4451                           ;sht71.c: 26: RB6 = 1;
  4452  131F  1283               	bcf	3,5	;RP0=0, select bank0
  4453  1320  1303               	bcf	3,6	;RP1=0, select bank0
  4454  1321  1706               	bsf	6,6	;volatile
  4455                           
  4456                           ;sht71.c: 27: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4457  1322  2B23               	nop2	;2 cycle nop
  4458  1323  2B24               	nop2	;2 cycle nop
  4459                           
  4460                           ;sht71.c: 28: RB7 = 1;
  4461  1324  1283               	bcf	3,5	;RP0=0, select bank0
  4462  1325  1303               	bcf	3,6	;RP1=0, select bank0
  4463  1326  1786               	bsf	6,7	;volatile
  4464                           
  4465                           ;sht71.c: 29: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4466  1327  2B28               	nop2	;2 cycle nop
  4467                           
  4468                           ;sht71.c: 30: RB6 = 0;
  4469  1328  1283               	bcf	3,5	;RP0=0, select bank0
  4470  1329  1303               	bcf	3,6	;RP1=0, select bank0
  4471  132A  1306               	bcf	6,6	;volatile
  4472                           
  4473                           ;sht71.c: 31: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4474  132B  2B2C               	nop2	;2 cycle nop
  4475  132C  2B2D               	nop2	;2 cycle nop
  4476                           
  4477                           ;sht71.c: 32: RB7 = 0;
  4478  132D  1283               	bcf	3,5	;RP0=0, select bank0
  4479  132E  1303               	bcf	3,6	;RP1=0, select bank0
  4480  132F  1386               	bcf	6,7	;volatile
  4481                           
  4482                           ;sht71.c: 33: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4483  1330  2B31               	nop2	;2 cycle nop
  4484  1331  2B32               	nop2	;2 cycle nop
  4485  1332  0008               	return
  4486  1333                     __end_of_tranStartSHT71:	
  4487  1333                     __ptext26:	
  4488 ;; *************** function _writeByteSHT71 *****************
  4489 ;; Defined at:
  4490 ;;		line 171 in file "sht71.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  cmd             1    wreg     unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  cmd             1    3[COMMON] unsigned char 
  4495 ;;  i               1    5[COMMON] unsigned char 
  4496 ;;  error           1    4[COMMON] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      unsigned char 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/100
  4503 ;;		On exit  : 300/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4506 ;;      Params:         0       0       0       0       0
  4507 ;;      Locals:         3       0       0       0       0
  4508 ;;      Temps:          1       0       0       0       0
  4509 ;;      Totals:         4       0       0       0       0
  4510 ;;Total ram usage:        4 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    1
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_measureSHT71
  4517 ;;		_readStatusRegSHT71
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function _writeByteSHT71
  4523  1333                     _writeByteSHT71:	
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in _writeByteSHT71: [wreg+status,2+status,0]
  4527                           ;writeByteSHT71@cmd stored from wreg
  4528  1333  00F3               	movwf	writeByteSHT71@cmd
  4529                           
  4530                           ;sht71.c: 173: TRISBbits.TRISB7 = 0;
  4531  1334  1683               	bsf	3,5	;RP0=1, select bank1
  4532  1335  1303               	bcf	3,6	;RP1=0, select bank1
  4533  1336  1386               	bcf	6,7	;volatile
  4534                           
  4535                           ;sht71.c: 175: for (i=0x80;i>0;i/=2)
  4536  1337  3080               	movlw	128
  4537  1338  00F5               	movwf	writeByteSHT71@i
  4538  1339                     l3826:	
  4539                           
  4540                           ;sht71.c: 176: {
  4541                           ;sht71.c: 177: if (i & cmd)
  4542  1339  0875               	movf	writeByteSHT71@i,w
  4543  133A  0573               	andwf	writeByteSHT71@cmd,w
  4544  133B  1903               	btfsc	3,2
  4545  133C  2B40               	goto	l158
  4546                           
  4547                           ;sht71.c: 178: RB7 = 1;
  4548  133D  1283               	bcf	3,5	;RP0=0, select bank0
  4549  133E  1786               	bsf	6,7	;volatile
  4550  133F  2B42               	goto	l159
  4551  1340                     l158:	
  4552                           
  4553                           ;sht71.c: 179: else RB7 = 0;
  4554  1340  1283               	bcf	3,5	;RP0=0, select bank0
  4555  1341  1386               	bcf	6,7	;volatile
  4556  1342                     l159:	
  4557                           
  4558                           ;sht71.c: 180: RB6 = 1;
  4559  1342  1706               	bsf	6,6	;volatile
  4560                           
  4561                           ;sht71.c: 181: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4562  1343  3003               	movlw	3
  4563  1344  00F2               	movwf	??_writeByteSHT71
  4564  1345                     u7097:	
  4565  1345  0BF2               	decfsz	??_writeByteSHT71,f
  4566  1346  2B45               	goto	u7097
  4567                           
  4568                           ;sht71.c: 182: RB6 = 0;
  4569  1347  1283               	bcf	3,5	;RP0=0, select bank0
  4570  1348  1303               	bcf	3,6	;RP1=0, select bank0
  4571  1349  1306               	bcf	6,6	;volatile
  4572  134A  1003               	clrc
  4573  134B  0CF5               	rrf	writeByteSHT71@i,f
  4574  134C  0875               	movf	writeByteSHT71@i,w
  4575  134D  1D03               	btfss	3,2
  4576  134E  2B39               	goto	l3826
  4577                           
  4578                           ;sht71.c: 183: }
  4579                           ;sht71.c: 184: RB7 = 1;
  4580  134F  1786               	bsf	6,7	;volatile
  4581                           
  4582                           ;sht71.c: 185: TRISBbits.TRISB7 = 1;
  4583  1350  1683               	bsf	3,5	;RP0=1, select bank1
  4584  1351  1786               	bsf	6,7	;volatile
  4585                           
  4586                           ;sht71.c: 186: RB6 = 1;
  4587  1352  1283               	bcf	3,5	;RP0=0, select bank0
  4588  1353  1706               	bsf	6,6	;volatile
  4589                           
  4590                           ;sht71.c: 187: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4591  1354  2B55               	nop2	;2 cycle nop
  4592  1355  2B56               	nop2	;2 cycle nop
  4593                           
  4594                           ;sht71.c: 188: error = RB7;
  4595  1356  3000               	movlw	0
  4596  1357  1283               	bcf	3,5	;RP0=0, select bank0
  4597  1358  1303               	bcf	3,6	;RP1=0, select bank0
  4598  1359  1B86               	btfsc	6,7	;volatile
  4599  135A  3001               	movlw	1
  4600  135B  00F4               	movwf	writeByteSHT71@error
  4601                           
  4602                           ;sht71.c: 189: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4603  135C  2B5D               	nop2	;2 cycle nop
  4604  135D  2B5E               	nop2	;2 cycle nop
  4605                           
  4606                           ;sht71.c: 190: RB6 = 0;
  4607  135E  1283               	bcf	3,5	;RP0=0, select bank0
  4608  135F  1303               	bcf	3,6	;RP1=0, select bank0
  4609  1360  1306               	bcf	6,6	;volatile
  4610                           
  4611                           ;sht71.c: 191: return error;
  4612  1361  0874               	movf	writeByteSHT71@error,w
  4613  1362  0008               	return
  4614  1363                     __end_of_writeByteSHT71:	
  4615  1363                     __ptext28:	
  4616 ;; *************** function _connectionResetSHT71 *****************
  4617 ;; Defined at:
  4618 ;;		line 194 in file "sht71.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  i               1    2[COMMON] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;		None               void
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, pclath, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : B00/100
  4629 ;;		On exit  : 300/100
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4632 ;;      Params:         0       0       0       0       0
  4633 ;;      Locals:         1       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0
  4635 ;;      Totals:         1       0       0       0       0
  4636 ;;Total ram usage:        1 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    2
  4639 ;; This function calls:
  4640 ;;		_tranStartSHT71
  4641 ;; This function is called by:
  4642 ;;		_getResSHT71
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function _connectionResetSHT71
  4648  1363                     _connectionResetSHT71:	
  4649                           
  4650                           ;sht71.c: 195: unsigned char i;
  4651                           ;sht71.c: 196: TRISBbits.TRISB7 = 0;
  4652                           
  4653                           ;incstack = 0
  4654                           ; Regs used in _connectionResetSHT71: [wreg+status,2+status,0+pclath+cstack]
  4655  1363  1386               	bcf	6,7	;volatile
  4656                           
  4657                           ;sht71.c: 197: RB7 = 1;
  4658  1364  1283               	bcf	3,5	;RP0=0, select bank0
  4659  1365  1786               	bsf	6,7	;volatile
  4660                           
  4661                           ;sht71.c: 198: RB6=0;
  4662  1366  1306               	bcf	6,6	;volatile
  4663                           
  4664                           ;sht71.c: 199: for(i=0;i<9;i++)
  4665  1367  01F2               	clrf	connectionResetSHT71@i
  4666  1368                     l163:	
  4667                           
  4668                           ;sht71.c: 200: { RB6 = 1;
  4669  1368  1283               	bcf	3,5	;RP0=0, select bank0
  4670  1369  1303               	bcf	3,6	;RP1=0, select bank0
  4671  136A  1706               	bsf	6,6	;volatile
  4672                           
  4673                           ;sht71.c: 201: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4674  136B  2B6C               	nop2	;2 cycle nop
  4675                           
  4676                           ;sht71.c: 202: RB6 = 0;
  4677  136C  1283               	bcf	3,5	;RP0=0, select bank0
  4678  136D  1303               	bcf	3,6	;RP1=0, select bank0
  4679  136E  1306               	bcf	6,6	;volatile
  4680                           
  4681                           ;sht71.c: 203: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4682  136F  2B70               	nop2	;2 cycle nop
  4683  1370  3009               	movlw	9
  4684  1371  0AF2               	incf	connectionResetSHT71@i,f
  4685  1372  0272               	subwf	connectionResetSHT71@i,w
  4686  1373  1C03               	skipc
  4687  1374  2B68               	goto	l163
  4688                           
  4689                           ;sht71.c: 204: }
  4690                           ;sht71.c: 205: tranStartSHT71();
  4691  1375  2309               	fcall	_tranStartSHT71
  4692                           
  4693                           ;sht71.c: 206: TRISBbits.TRISB7 = 1;
  4694  1376  1683               	bsf	3,5	;RP0=1, select bank1
  4695  1377  1303               	bcf	3,6	;RP1=0, select bank1
  4696  1378  1786               	bsf	6,7	;volatile
  4697  1379  0008               	return
  4698  137A                     __end_of_connectionResetSHT71:	
  4699  137A                     __ptext30:	
  4700 ;; *************** function _calcSHT71 *****************
  4701 ;; Defined at:
  4702 ;;		line 132 in file "sht71.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  p_humidity      3   52[BANK0 ] float 
  4705 ;;  p_temperatur    1   55[BANK0 ] PTR float 
  4706 ;;		 -> getResSHT71@temp_val(3), 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  rh              3   74[BANK0 ] float 
  4709 ;;  rh_true         3   71[BANK0 ] float 
  4710 ;;  t_C             3   62[BANK0 ] float 
  4711 ;;  t               3   59[BANK0 ] float 
  4712 ;;  rh_lin          3   56[BANK0 ] float 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  3   52[BANK0 ] float 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 300/0
  4719 ;;		On exit  : B00/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4722 ;;      Params:         0       4       0       0       0
  4723 ;;      Locals:         0      21       0       0       0
  4724 ;;      Temps:          0       0       0       0       0
  4725 ;;      Totals:         0      25       0       0       0
  4726 ;;Total ram usage:       25 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    3
  4729 ;; This function calls:
  4730 ;;		___ftadd
  4731 ;;		___ftge
  4732 ;;		___ftmul
  4733 ;; This function is called by:
  4734 ;;		_getResSHT71
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _calcSHT71
  4740  137A                     _calcSHT71:	
  4741                           
  4742                           ;sht71.c: 133: float rh_lin;
  4743                           ;sht71.c: 134: float rh_true;
  4744                           ;sht71.c: 135: float t = *p_temperature;
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _calcSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4748  137A  0857               	movf	calcSHT71@p_temperature,w
  4749  137B  0084               	movwf	4
  4750  137C  1383               	bcf	3,7	;select IRP bank0
  4751  137D  0800               	movf	0,w
  4752  137E  00DB               	movwf	calcSHT71@t
  4753  137F  0A84               	incf	4,f
  4754  1380  0800               	movf	0,w
  4755  1381  00DC               	movwf	calcSHT71@t+1
  4756  1382  0A84               	incf	4,f
  4757  1383  0800               	movf	0,w
  4758  1384  00DD               	movwf	calcSHT71@t+2
  4759                           
  4760                           ;sht71.c: 136: float rh = p_humidity;
  4761  1385  0854               	movf	calcSHT71@p_humidity,w
  4762  1386  00EA               	movwf	calcSHT71@rh
  4763  1387  0855               	movf	calcSHT71@p_humidity+1,w
  4764  1388  00EB               	movwf	calcSHT71@rh+1
  4765  1389  0856               	movf	calcSHT71@p_humidity+2,w
  4766  138A  00EC               	movwf	calcSHT71@rh+2
  4767                           
  4768                           ;sht71.c: 137: float t_C;
  4769                           ;sht71.c: 139: t_C = t*0.01 + -40.1 - 1;
  4770  138B  3066               	movlw	102
  4771  138C  00C2               	movwf	___ftadd@f1
  4772  138D  3024               	movlw	36
  4773  138E  00C3               	movwf	___ftadd@f1+1
  4774  138F  30C2               	movlw	194
  4775  1390  00C4               	movwf	___ftadd@f1+2
  4776  1391  30D7               	movlw	215
  4777  1392  00A8               	movwf	___ftmul@f1
  4778  1393  3023               	movlw	35
  4779  1394  00A9               	movwf	___ftmul@f1+1
  4780  1395  303C               	movlw	60
  4781  1396  00AA               	movwf	___ftmul@f1+2
  4782  1397  085B               	movf	calcSHT71@t,w
  4783  1398  00AB               	movwf	___ftmul@f2
  4784  1399  085C               	movf	calcSHT71@t+1,w
  4785  139A  00AC               	movwf	___ftmul@f2+1
  4786  139B  085D               	movf	calcSHT71@t+2,w
  4787  139C  00AD               	movwf	___ftmul@f2+2
  4788  139D  26AA  160A  118A   	fcall	___ftmul
  4789  13A0  27C4               	fcall	PL60	;call to abstracted procedure
  4790  13A1  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4791  13A6  0842               	movf	?___ftadd,w
  4792  13A7  00DE               	movwf	calcSHT71@t_C
  4793  13A8  0843               	movf	?___ftadd+1,w
  4794  13A9  00DF               	movwf	calcSHT71@t_C+1
  4795  13AA  0844               	movf	?___ftadd+2,w
  4796  13AB  00E0               	movwf	calcSHT71@t_C+2
  4797                           
  4798                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  4799  13AC  086A               	movf	calcSHT71@rh,w
  4800  13AD  00A8               	movwf	___ftmul@f1
  4801  13AE  086B               	movf	calcSHT71@rh+1,w
  4802  13AF  00A9               	movwf	___ftmul@f1+1
  4803  13B0  086C               	movf	calcSHT71@rh+2,w
  4804  13B1  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  4805  13B4  26AA  160A  118A   	fcall	___ftmul
  4806  13B7  0828               	movf	?___ftmul,w
  4807  13B8  00E1               	movwf	_calcSHT71$1251
  4808  13B9  0829               	movf	?___ftmul+1,w
  4809  13BA  00E2               	movwf	_calcSHT71$1251+1
  4810  13BB  082A               	movf	?___ftmul+2,w
  4811  13BC  00E3               	movwf	_calcSHT71$1251+2
  4812                           
  4813                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  4814  13BD  30E3               	movlw	227
  4815  13BE  00A8               	movwf	___ftmul@f1
  4816  13BF  3025               	movlw	37
  4817  13C0  00A9               	movwf	___ftmul@f1+1
  4818  13C1  303D               	movlw	61
  4819  13C2  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  4820  13C5  26AA  160A  118A   	fcall	___ftmul
  4821  13C8  0828               	movf	?___ftmul,w
  4822  13C9  00C2               	movwf	___ftadd@f1
  4823  13CA  0829               	movf	?___ftmul+1,w
  4824  13CB  00C3               	movwf	___ftadd@f1+1
  4825  13CC  082A               	movf	?___ftmul+2,w
  4826  13CD  00C4               	movwf	___ftadd@f1+2
  4827  13CE  30E8               	movlw	232
  4828  13CF  00A8               	movwf	___ftmul@f1
  4829  13D0  303B               	movlw	59
  4830  13D1  00A9               	movwf	___ftmul@f1+1
  4831  13D2  30B6               	movlw	182
  4832  13D3  00AA               	movwf	___ftmul@f1+2
  4833  13D4  0861               	movf	_calcSHT71$1251,w
  4834  13D5  00AB               	movwf	___ftmul@f2
  4835  13D6  0862               	movf	_calcSHT71$1251+1,w
  4836  13D7  00AC               	movwf	___ftmul@f2+1
  4837  13D8  0863               	movf	_calcSHT71$1251+2,w
  4838  13D9  00AD               	movwf	___ftmul@f2+2
  4839  13DA  26AA  160A  118A   	fcall	___ftmul
  4840  13DD  27C4               	fcall	PL60	;call to abstracted procedure
  4841  13DE  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4842  13E3  0842               	movf	?___ftadd,w
  4843  13E4  00E4               	movwf	_calcSHT71$1252
  4844  13E5  0843               	movf	?___ftadd+1,w
  4845  13E6  00E5               	movwf	_calcSHT71$1252+1
  4846  13E7  0844               	movf	?___ftadd+2,w
  4847  13E8  00E6               	movwf	_calcSHT71$1252+2
  4848                           
  4849                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  4850  13E9  3080               	movlw	128
  4851  13EA  01C2               	clrf	___ftadd@f1
  4852  13EB  00C3               	movwf	___ftadd@f1+1
  4853  13EC  30C0               	movlw	192
  4854  13ED  27CB               	fcall	PL64	;call to abstracted procedure
  4855  13EE  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4856  13F3  0842               	movf	?___ftadd,w
  4857  13F4  00D8               	movwf	calcSHT71@rh_lin
  4858  13F5  0843               	movf	?___ftadd+1,w
  4859  13F6  00D9               	movwf	calcSHT71@rh_lin+1
  4860  13F7  0844               	movf	?___ftadd+2,w
  4861  13F8  00DA               	movwf	calcSHT71@rh_lin+2
  4862                           
  4863                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  4864  13F9  30D7               	movlw	215
  4865  13FA  00C2               	movwf	___ftadd@f1
  4866  13FB  3023               	movlw	35
  4867  13FC  00C3               	movwf	___ftadd@f1+1
  4868  13FD  303C               	movlw	60
  4869  13FE  00C4               	movwf	___ftadd@f1+2
  4870  13FF  30C6               	movlw	198
  4871  1400  00A8               	movwf	___ftmul@f1
  4872  1401  30A7               	movlw	167
  4873  1402  00A9               	movwf	___ftmul@f1+1
  4874  1403  3038               	movlw	56
  4875  1404  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  4876  1407  26AA  160A  118A   	fcall	___ftmul
  4877  140A  27C4               	fcall	PL60	;call to abstracted procedure
  4878  140B  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4879  1410  0842               	movf	?___ftadd,w
  4880  1411  00E1               	movwf	_calcSHT71$1251
  4881  1412  0843               	movf	?___ftadd+1,w
  4882  1413  00E2               	movwf	_calcSHT71$1251+1
  4883  1414  0844               	movf	?___ftadd+2,w
  4884  1415  00E3               	movwf	_calcSHT71$1251+2
  4885                           
  4886                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  4887  1416  0861               	movf	_calcSHT71$1251,w
  4888  1417  00A8               	movwf	___ftmul@f1
  4889  1418  0862               	movf	_calcSHT71$1251+1,w
  4890  1419  00A9               	movwf	___ftmul@f1+1
  4891  141A  0863               	movf	_calcSHT71$1251+2,w
  4892  141B  00AA               	movwf	___ftmul@f1+2
  4893  141C  30C8               	movlw	200
  4894  141D  01C2               	clrf	___ftadd@f1
  4895  141E  00C3               	movwf	___ftadd@f1+1
  4896  141F  30C1               	movlw	193
  4897  1420  00C4               	movwf	___ftadd@f1+2
  4898  1421  085E               	movf	calcSHT71@t_C,w
  4899  1422  00C5               	movwf	___ftadd@f2
  4900  1423  085F               	movf	calcSHT71@t_C+1,w
  4901  1424  00C6               	movwf	___ftadd@f2+1
  4902  1425  0860               	movf	calcSHT71@t_C+2,w
  4903  1426  00C7               	movwf	___ftadd@f2+2
  4904  1427  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4905  142C  0842               	movf	?___ftadd,w
  4906  142D  00AB               	movwf	___ftmul@f2
  4907  142E  0843               	movf	?___ftadd+1,w
  4908  142F  00AC               	movwf	___ftmul@f2+1
  4909  1430  0844               	movf	?___ftadd+2,w
  4910  1431  00AD               	movwf	___ftmul@f2+2
  4911  1432  26AA  160A  118A   	fcall	___ftmul
  4912  1435  0828               	movf	?___ftmul,w
  4913  1436  00E4               	movwf	_calcSHT71$1252
  4914  1437  0829               	movf	?___ftmul+1,w
  4915  1438  00E5               	movwf	_calcSHT71$1252+1
  4916  1439  082A               	movf	?___ftmul+2,w
  4917  143A  00E6               	movwf	_calcSHT71$1252+2
  4918                           
  4919                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  4920  143B  0858               	movf	calcSHT71@rh_lin,w
  4921  143C  00C2               	movwf	___ftadd@f1
  4922  143D  0859               	movf	calcSHT71@rh_lin+1,w
  4923  143E  00C3               	movwf	___ftadd@f1+1
  4924  143F  085A               	movf	calcSHT71@rh_lin+2,w
  4925  1440  27CB               	fcall	PL64	;call to abstracted procedure
  4926  1441  120A  118A  25BC  160A  118A  	fcall	___ftadd
  4927  1446  0842               	movf	?___ftadd,w
  4928  1447  00E7               	movwf	calcSHT71@rh_true
  4929  1448  0843               	movf	?___ftadd+1,w
  4930  1449  00E8               	movwf	calcSHT71@rh_true+1
  4931  144A  0844               	movf	?___ftadd+2,w
  4932  144B  00E9               	movwf	calcSHT71@rh_true+2
  4933                           
  4934                           ;sht71.c: 144: if(rh_true > 99) rh_true = 99;
  4935  144C  30C6               	movlw	198
  4936  144D  01CE               	clrf	___ftge@ff1
  4937  144E  00CF               	movwf	___ftge@ff1+1
  4938  144F  3042               	movlw	66
  4939  1450  00D0               	movwf	___ftge@ff1+2
  4940  1451  0867               	movf	calcSHT71@rh_true,w
  4941  1452  00D1               	movwf	___ftge@ff2
  4942  1453  0868               	movf	calcSHT71@rh_true+1,w
  4943  1454  00D2               	movwf	___ftge@ff2+1
  4944  1455  0869               	movf	calcSHT71@rh_true+2,w
  4945  1456  00D3               	movwf	___ftge@ff2+2
  4946  1457  120A  118A  248C  160A  118A  	fcall	___ftge
  4947  145C  1803               	btfsc	3,0
  4948  145D  2C63               	goto	l5680
  4949  145E  30C6               	movlw	198
  4950  145F  01E7               	clrf	calcSHT71@rh_true
  4951  1460  00E8               	movwf	calcSHT71@rh_true+1
  4952  1461  3042               	movlw	66
  4953  1462  00E9               	movwf	calcSHT71@rh_true+2
  4954  1463                     l5680:	
  4955                           
  4956                           ;sht71.c: 145: if(rh_true < 0.1) rh_true = 0.1;
  4957  1463  0867               	movf	calcSHT71@rh_true,w
  4958  1464  00CE               	movwf	___ftge@ff1
  4959  1465  0868               	movf	calcSHT71@rh_true+1,w
  4960  1466  00CF               	movwf	___ftge@ff1+1
  4961  1467  0869               	movf	calcSHT71@rh_true+2,w
  4962  1468  00D0               	movwf	___ftge@ff1+2
  4963  1469  30CD               	movlw	205
  4964  146A  00D1               	movwf	___ftge@ff2
  4965  146B  30CC               	movlw	204
  4966  146C  00D2               	movwf	___ftge@ff2+1
  4967  146D  303D               	movlw	61
  4968  146E  00D3               	movwf	___ftge@ff2+2
  4969  146F  120A  118A  248C  160A  118A  	fcall	___ftge
  4970  1474  1803               	btfsc	3,0
  4971  1475  2C7C               	goto	l5684
  4972  1476  30CD               	movlw	205
  4973  1477  00E7               	movwf	calcSHT71@rh_true
  4974  1478  30CC               	movlw	204
  4975  1479  00E8               	movwf	calcSHT71@rh_true+1
  4976  147A  303D               	movlw	61
  4977  147B  00E9               	movwf	calcSHT71@rh_true+2
  4978  147C                     l5684:	
  4979                           
  4980                           ;sht71.c: 147: *p_temperature = t_C;
  4981  147C  0857               	movf	calcSHT71@p_temperature,w
  4982  147D  0084               	movwf	4
  4983  147E  085E               	movf	calcSHT71@t_C,w
  4984  147F  1383               	bcf	3,7	;select IRP bank0
  4985  1480  0080               	movwf	0
  4986  1481  0A84               	incf	4,f
  4987  1482  085F               	movf	calcSHT71@t_C+1,w
  4988  1483  0080               	movwf	0
  4989  1484  0A84               	incf	4,f
  4990  1485  0860               	movf	calcSHT71@t_C+2,w
  4991  1486  0080               	movwf	0
  4992                           
  4993                           ;sht71.c: 148: return rh_true;
  4994  1487  0867               	movf	calcSHT71@rh_true,w
  4995  1488  00D4               	movwf	?_calcSHT71
  4996  1489  0868               	movf	calcSHT71@rh_true+1,w
  4997  148A  00D5               	movwf	?_calcSHT71+1
  4998  148B  0869               	movf	calcSHT71@rh_true+2,w
  4999  148C  00D6               	movwf	?_calcSHT71+2
  5000  148D  0008               	return
  5001  148E                     __end_of_calcSHT71:	
  5002  148E                     __ptext39:	
  5003 ;; *************** function _scale *****************
  5004 ;; Defined at:
  5005 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  scl             1    wreg     char 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  scl             1   33[BANK0 ] char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  3   23[BANK0 ] char 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 300/100
  5016 ;;		On exit  : 300/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5019 ;;      Params:         0       3       0       0       0
  5020 ;;      Locals:         0       4       0       0       0
  5021 ;;      Temps:          0       4       0       0       0
  5022 ;;      Totals:         0      11       0       0       0
  5023 ;;Total ram usage:       11 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    3
  5026 ;; This function calls:
  5027 ;;		___awdiv
  5028 ;;		___awmod
  5029 ;;		___bmul
  5030 ;;		___ftmul
  5031 ;; This function is called by:
  5032 ;;		_sprintf
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _scale
  5038  148E                     _scale:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5042                           ;scale@scl stored from wreg
  5043  148E  1283               	bcf	3,5	;RP0=0, select bank0
  5044  148F  00C1               	movwf	scale@scl
  5045                           
  5046                           ;doprnt.c: 428: if(scl < 0) {
  5047  1490  1FC1               	btfss	scale@scl,7
  5048  1491  2D5E               	goto	l5272
  5049                           
  5050                           ;doprnt.c: 429: scl = -scl;
  5051  1492  09C1               	comf	scale@scl,f
  5052  1493  0AC1               	incf	scale@scl,f
  5053                           
  5054                           ;doprnt.c: 430: if(scl>=110)
  5055  1494  0841               	movf	scale@scl,w
  5056  1495  3A80               	xorlw	128
  5057  1496  3E12               	addlw	-238
  5058  1497  1C03               	skipc
  5059  1498  2D01               	goto	l5262
  5060                           
  5061                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5062  1499  279E  160A  118A   	fcall	PL44	;call to abstracted procedure
  5063  149C  266D  160A  118A   	fcall	___awmod
  5064  149F  0873               	movf	?___awmod+1,w
  5065  14A0  00A3               	movwf	___awdiv@dividend+1
  5066  14A1  0872               	movf	?___awmod,w
  5067  14A2  00A2               	movwf	___awdiv@dividend
  5068  14A3  2628  160A  118A   	fcall	___awdiv
  5069  14A6  27EB               	fcall	PL78	;call to abstracted procedure
  5070  14A7  160A  158A  27DD  160A  118A  	fcall	PL56	;call to abstracted procedure
  5071  14AC  160A  158A  2000  160A  118A  	fcall	stringtab
  5072  14B1  00A8               	movwf	___ftmul@f1
  5073  14B2  160A  158A  2000  160A  118A  	fcall	stringtab
  5074  14B7  00A9               	movwf	___ftmul@f1+1
  5075  14B8  160A  158A  2000  160A  118A  	fcall	stringtab
  5076  14BD  27E3  160A  118A   	fcall	PL74	;call to abstracted procedure
  5077  14C0  1BA2               	btfsc	___awdiv@dividend,7
  5078  14C1  03A3               	decf	___awdiv@dividend+1,f
  5079  14C2  2628  160A  118A   	fcall	___awdiv
  5080  14C5  2775               	fcall	PL28	;call to abstracted procedure
  5081  14C6  160A  158A  27EC  160A  118A  	fcall	PL82	;call to abstracted procedure
  5082  14CB  160A  158A  2000  160A  118A  	fcall	stringtab
  5083  14D0  00AB               	movwf	___ftmul@f2
  5084  14D1  160A  158A  2000  160A  118A  	fcall	stringtab
  5085  14D6  00AC               	movwf	___ftmul@f2+1
  5086  14D7  160A  158A  2000  160A  118A  	fcall	stringtab
  5087  14DC  00AD               	movwf	___ftmul@f2+2
  5088  14DD  26AA  160A  118A   	fcall	___ftmul
  5089                           
  5090                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5091  14E0  2791  160A  118A   	fcall	PL40	;call to abstracted procedure
  5092  14E3  1BF4               	btfsc	___awmod@dividend,7
  5093  14E4  03F5               	decf	___awmod@dividend+1,f
  5094  14E5  266D  160A  118A   	fcall	___awmod
  5095  14E8  2767               	fcall	PL18	;call to abstracted procedure
  5096  14E9  160A  158A  2000  160A  118A  	fcall	stringtab
  5097  14EE  00A8               	movwf	___ftmul@f1
  5098  14EF  160A  158A  2000  160A  118A  	fcall	stringtab
  5099  14F4  00A9               	movwf	___ftmul@f1+1
  5100  14F5  160A  158A  2000  160A  118A  	fcall	stringtab
  5101  14FA  27DB  160A  118A   	fcall	PL70	;call to abstracted procedure
  5102  14FD  26AA  160A  118A   	fcall	___ftmul
  5103  1500  2F7D               	ljmp	PL32	;call to abstracted procedure
  5104  1501                     l5262:	
  5105                           
  5106                           ;doprnt.c: 432: else if(scl > 10)
  5107  1501  0841               	movf	scale@scl,w
  5108  1502  3A80               	xorlw	128
  5109  1503  3E75               	addlw	-139
  5110  1504  1C03               	skipc
  5111  1505  2D44               	goto	l5268
  5112                           
  5113                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5114  1506  27BD  160A  118A   	fcall	PL58	;call to abstracted procedure
  5115  1509  1BF4               	btfsc	___awmod@dividend,7
  5116  150A  03F5               	decf	___awmod@dividend+1,f
  5117  150B  266D  160A  118A   	fcall	___awmod
  5118  150E  2767               	fcall	PL18	;call to abstracted procedure
  5119  150F  160A  158A  2000  160A  118A  	fcall	stringtab
  5120  1514  00A8               	movwf	___ftmul@f1
  5121  1515  160A  158A  2000  160A  118A  	fcall	stringtab
  5122  151A  00A9               	movwf	___ftmul@f1+1
  5123  151B  160A  158A  2000  160A  118A  	fcall	stringtab
  5124  1520  27D3  160A  118A   	fcall	PL66	;call to abstracted procedure
  5125  1523  1BA2               	btfsc	___awdiv@dividend,7
  5126  1524  03A3               	decf	___awdiv@dividend+1,f
  5127  1525  2628  160A  118A   	fcall	___awdiv
  5128  1528  2775               	fcall	PL28	;call to abstracted procedure
  5129  1529  160A  158A  27DD  160A  118A  	fcall	PL56	;call to abstracted procedure
  5130  152E  160A  158A  2000  160A  118A  	fcall	stringtab
  5131  1533  00AB               	movwf	___ftmul@f2
  5132  1534  160A  158A  2000  160A  118A  	fcall	stringtab
  5133  1539  00AC               	movwf	___ftmul@f2+1
  5134  153A  160A  158A  2000  160A  118A  	fcall	stringtab
  5135  153F  00AD               	movwf	___ftmul@f2+2
  5136  1540  26AA  160A  118A   	fcall	___ftmul
  5137  1543  2F7D               	ljmp	PL32	;call to abstracted procedure
  5138  1544                     l5268:	
  5139                           
  5140                           ;doprnt.c: 434: return _npowers_[scl];
  5141  1544  3003               	movlw	3
  5142  1545  00F8               	movwf	___bmul@multiplicand
  5143  1546  0841               	movf	scale@scl,w
  5144  1547  2717               	fcall	___bmul
  5145  1548  160A  158A  27CF  160A  118A  	fcall	PL30	;call to abstracted procedure
  5146  154D  160A  158A  2000  160A  118A  	fcall	stringtab
  5147  1552  00B7               	movwf	?_scale
  5148  1553  160A  158A  2000  160A  118A  	fcall	stringtab
  5149  1558  00B8               	movwf	?_scale+1
  5150  1559  160A  158A  2000   	fcall	stringtab
  5151  155C  00B9               	movwf	?_scale+2
  5152  155D  0008               	return
  5153  155E                     l5272:	
  5154                           
  5155                           ;doprnt.c: 435: }
  5156                           ;doprnt.c: 436: if(scl>=110)
  5157  155E  0841               	movf	scale@scl,w
  5158  155F  3A80               	xorlw	128
  5159  1560  3E12               	addlw	-238
  5160  1561  1C03               	skipc
  5161  1562  2DCB               	goto	l5280
  5162                           
  5163                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5164  1563  279E  160A  118A   	fcall	PL44	;call to abstracted procedure
  5165  1566  266D  160A  118A   	fcall	___awmod
  5166  1569  0873               	movf	?___awmod+1,w
  5167  156A  00A3               	movwf	___awdiv@dividend+1
  5168  156B  0872               	movf	?___awmod,w
  5169  156C  00A2               	movwf	___awdiv@dividend
  5170  156D  2628  160A  118A   	fcall	___awdiv
  5171  1570  27EB  160A  118A   	fcall	PL78	;call to abstracted procedure
  5172  1573  27F9               	fcall	PL88	;call to abstracted procedure
  5173  1574  160A  158A  2000  160A  118A  	fcall	stringtab
  5174  1579  00A8               	movwf	___ftmul@f1
  5175  157A  160A  158A  2000  160A  118A  	fcall	stringtab
  5176  157F  00A9               	movwf	___ftmul@f1+1
  5177  1580  160A  158A  2000  160A  118A  	fcall	stringtab
  5178  1585  27E3  160A  118A   	fcall	PL74	;call to abstracted procedure
  5179  1588  1BA2               	btfsc	___awdiv@dividend,7
  5180  1589  03A3               	decf	___awdiv@dividend+1,f
  5181  158A  2628  160A  118A   	fcall	___awdiv
  5182  158D  2775               	fcall	PL28	;call to abstracted procedure
  5183  158E  3E6F               	addlw	low ((__powers_| (0+32768)+54))
  5184  158F  0084               	movwf	4
  5185  1590  3098               	movlw	high ((__powers_| (0+32768)+54))
  5186  1591  1803               	skipnc
  5187  1592  3E01               	addlw	1
  5188  1593  00FF               	movwf	127
  5189  1594  160A  158A  2000  160A  118A  	fcall	stringtab
  5190  1599  00AB               	movwf	___ftmul@f2
  5191  159A  160A  158A  2000  160A  118A  	fcall	stringtab
  5192  159F  00AC               	movwf	___ftmul@f2+1
  5193  15A0  160A  158A  2000  160A  118A  	fcall	stringtab
  5194  15A5  00AD               	movwf	___ftmul@f2+2
  5195  15A6  26AA  160A  118A   	fcall	___ftmul
  5196                           
  5197                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5198  15A9  2791  160A  118A   	fcall	PL40	;call to abstracted procedure
  5199  15AC  1BF4               	btfsc	___awmod@dividend,7
  5200  15AD  03F5               	decf	___awmod@dividend+1,f
  5201  15AE  266D  160A  118A   	fcall	___awmod
  5202  15B1  0872               	movf	?___awmod,w
  5203  15B2  2784               	fcall	PL34	;call to abstracted procedure
  5204  15B3  160A  158A  2000  160A  118A  	fcall	stringtab
  5205  15B8  00A8               	movwf	___ftmul@f1
  5206  15B9  160A  158A  2000  160A  118A  	fcall	stringtab
  5207  15BE  00A9               	movwf	___ftmul@f1+1
  5208  15BF  160A  158A  2000  160A  118A  	fcall	stringtab
  5209  15C4  27DB  160A  118A   	fcall	PL70	;call to abstracted procedure
  5210  15C7  26AA  160A  118A   	fcall	___ftmul
  5211  15CA  2F7D               	ljmp	PL32	;call to abstracted procedure
  5212  15CB                     l5280:	
  5213                           
  5214                           ;doprnt.c: 438: else if(scl > 10)
  5215  15CB  0841               	movf	scale@scl,w
  5216  15CC  3A80               	xorlw	128
  5217  15CD  3E75               	addlw	-139
  5218  15CE  1C03               	skipc
  5219  15CF  2E0D               	goto	l5286
  5220                           
  5221                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5222  15D0  27BD  160A  118A   	fcall	PL58	;call to abstracted procedure
  5223  15D3  1BF4               	btfsc	___awmod@dividend,7
  5224  15D4  03F5               	decf	___awmod@dividend+1,f
  5225  15D5  266D  160A  118A   	fcall	___awmod
  5226  15D8  0872               	movf	?___awmod,w
  5227  15D9  2784               	fcall	PL34	;call to abstracted procedure
  5228  15DA  160A  158A  2000  160A  118A  	fcall	stringtab
  5229  15DF  00A8               	movwf	___ftmul@f1
  5230  15E0  160A  158A  2000  160A  118A  	fcall	stringtab
  5231  15E5  00A9               	movwf	___ftmul@f1+1
  5232  15E6  160A  158A  2000  160A  118A  	fcall	stringtab
  5233  15EB  27D3  160A  118A   	fcall	PL66	;call to abstracted procedure
  5234  15EE  1BA2               	btfsc	___awdiv@dividend,7
  5235  15EF  03A3               	decf	___awdiv@dividend+1,f
  5236  15F0  2628  160A  118A   	fcall	___awdiv
  5237  15F3  2775  160A  118A   	fcall	PL28	;call to abstracted procedure
  5238  15F6  27F9               	fcall	PL88	;call to abstracted procedure
  5239  15F7  160A  158A  2000  160A  118A  	fcall	stringtab
  5240  15FC  00AB               	movwf	___ftmul@f2
  5241  15FD  160A  158A  2000  160A  118A  	fcall	stringtab
  5242  1602  00AC               	movwf	___ftmul@f2+1
  5243  1603  160A  158A  2000  160A  118A  	fcall	stringtab
  5244  1608  00AD               	movwf	___ftmul@f2+2
  5245  1609  26AA  160A  118A   	fcall	___ftmul
  5246  160C  2F7D               	ljmp	PL32	;call to abstracted procedure
  5247  160D                     l5286:	
  5248                           
  5249                           ;doprnt.c: 440: return _powers_[scl];
  5250  160D  3003               	movlw	3
  5251  160E  00F8               	movwf	___bmul@multiplicand
  5252  160F  0841               	movf	scale@scl,w
  5253  1610  2717               	fcall	___bmul
  5254  1611  3E39               	addlw	low (__powers_| (0+32768))
  5255  1612  0084               	movwf	4
  5256  1613  3098               	movlw	high (__powers_| (0+32768))
  5257  1614  1803               	skipnc
  5258  1615  3E01               	addlw	1
  5259  1616  00FF               	movwf	127
  5260  1617  160A  158A  2000  160A  118A  	fcall	stringtab
  5261  161C  00B7               	movwf	?_scale
  5262  161D  160A  158A  2000  160A  118A  	fcall	stringtab
  5263  1622  00B8               	movwf	?_scale+1
  5264  1623  160A  158A  2000   	fcall	stringtab
  5265  1626  00B9               	movwf	?_scale+2
  5266  1627  0008               	return
  5267  1628                     __end_of_scale:	
  5268  1628                     __ptext41:	
  5269 ;; *************** function ___awdiv *****************
  5270 ;; Defined at:
  5271 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  divisor         2    0[BANK0 ] int 
  5274 ;;  dividend        2    2[BANK0 ] int 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  quotient        2    6[BANK0 ] int 
  5277 ;;  sign            1    5[BANK0 ] unsigned char 
  5278 ;;  counter         1    4[BANK0 ] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  2    0[BANK0 ] int 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 300/0
  5285 ;;		On exit  : 300/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5288 ;;      Params:         0       4       0       0       0
  5289 ;;      Locals:         0       4       0       0       0
  5290 ;;      Temps:          0       0       0       0       0
  5291 ;;      Totals:         0       8       0       0       0
  5292 ;;Total ram usage:        8 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    1
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_scale
  5299 ;;		_sprintf
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function ___awdiv
  5305  1628                     ___awdiv:	
  5306                           
  5307                           ;incstack = 0
  5308                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5309  1628  01A5               	clrf	___awdiv@sign
  5310  1629  1FA1               	btfss	___awdiv@divisor+1,7
  5311  162A  2E32               	goto	l4994
  5312  162B  09A0               	comf	___awdiv@divisor,f
  5313  162C  09A1               	comf	___awdiv@divisor+1,f
  5314  162D  0AA0               	incf	___awdiv@divisor,f
  5315  162E  1903               	skipnz
  5316  162F  0AA1               	incf	___awdiv@divisor+1,f
  5317  1630  01A5               	clrf	___awdiv@sign
  5318  1631  0AA5               	incf	___awdiv@sign,f
  5319  1632                     l4994:	
  5320  1632  1FA3               	btfss	___awdiv@dividend+1,7
  5321  1633  2E3B               	goto	l5000
  5322  1634  09A2               	comf	___awdiv@dividend,f
  5323  1635  09A3               	comf	___awdiv@dividend+1,f
  5324  1636  0AA2               	incf	___awdiv@dividend,f
  5325  1637  1903               	skipnz
  5326  1638  0AA3               	incf	___awdiv@dividend+1,f
  5327  1639  3001               	movlw	1
  5328  163A  06A5               	xorwf	___awdiv@sign,f
  5329  163B                     l5000:	
  5330  163B  01A6               	clrf	___awdiv@quotient
  5331  163C  01A7               	clrf	___awdiv@quotient+1
  5332  163D  0820               	movf	___awdiv@divisor,w
  5333  163E  0421               	iorwf	___awdiv@divisor+1,w
  5334  163F  1903               	btfsc	3,2
  5335  1640  2E60               	goto	l5022
  5336  1641  01A4               	clrf	___awdiv@counter
  5337  1642                     L20:	
  5338  1642  0AA4               	incf	___awdiv@counter,f
  5339  1643  1BA1               	btfsc	___awdiv@divisor+1,7
  5340  1644  2E49               	goto	l5010
  5341  1645  1003               	clrc
  5342  1646  0DA0               	rlf	___awdiv@divisor,f
  5343  1647  0DA1               	rlf	___awdiv@divisor+1,f
  5344  1648  2E42               	goto	L20
  5345  1649                     l5010:	
  5346  1649  1003               	clrc
  5347  164A  0DA6               	rlf	___awdiv@quotient,f
  5348  164B  0DA7               	rlf	___awdiv@quotient+1,f
  5349  164C  0821               	movf	___awdiv@divisor+1,w
  5350  164D  0223               	subwf	___awdiv@dividend+1,w
  5351  164E  1D03               	skipz
  5352  164F  2E52               	goto	u5395
  5353  1650  0820               	movf	___awdiv@divisor,w
  5354  1651  0222               	subwf	___awdiv@dividend,w
  5355  1652                     u5395:	
  5356  1652  1C03               	skipc
  5357  1653  2E5C               	goto	L21
  5358  1654  0820               	movf	___awdiv@divisor,w
  5359  1655  02A2               	subwf	___awdiv@dividend,f
  5360  1656  0821               	movf	___awdiv@divisor+1,w
  5361  1657  1C03               	skipc
  5362  1658  03A3               	decf	___awdiv@dividend+1,f
  5363  1659  02A3               	subwf	___awdiv@dividend+1,f
  5364  165A  1426               	bsf	___awdiv@quotient,0
  5365  165B  1003               	clrc
  5366  165C                     L21:	
  5367  165C  0CA1               	rrf	___awdiv@divisor+1,f
  5368  165D  0CA0               	rrf	___awdiv@divisor,f
  5369  165E  0BA4               	decfsz	___awdiv@counter,f
  5370  165F  2E49               	goto	l5010
  5371  1660                     l5022:	
  5372  1660  0825               	movf	___awdiv@sign,w
  5373  1661  1903               	btfsc	3,2
  5374  1662  2E68               	goto	l5026
  5375  1663  09A6               	comf	___awdiv@quotient,f
  5376  1664  09A7               	comf	___awdiv@quotient+1,f
  5377  1665  0AA6               	incf	___awdiv@quotient,f
  5378  1666  1903               	skipnz
  5379  1667  0AA7               	incf	___awdiv@quotient+1,f
  5380  1668                     l5026:	
  5381  1668  0827               	movf	___awdiv@quotient+1,w
  5382  1669  00A1               	movwf	?___awdiv+1
  5383  166A  0826               	movf	___awdiv@quotient,w
  5384  166B  00A0               	movwf	?___awdiv
  5385  166C  0008               	return
  5386  166D                     __end_of___awdiv:	
  5387  166D                     __ptext40:	
  5388 ;; *************** function ___awmod *****************
  5389 ;; Defined at:
  5390 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  divisor         2    2[COMMON] int 
  5393 ;;  dividend        2    4[COMMON] int 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  sign            1    7[COMMON] unsigned char 
  5396 ;;  counter         1    6[COMMON] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  2    2[COMMON] int 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0
  5401 ;; Tracked objects:
  5402 ;;		On entry : 300/0
  5403 ;;		On exit  : 300/0
  5404 ;;		Unchanged: 300/0
  5405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5406 ;;      Params:         4       0       0       0       0
  5407 ;;      Locals:         2       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0
  5409 ;;      Totals:         6       0       0       0       0
  5410 ;;Total ram usage:        6 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    1
  5413 ;; This function calls:
  5414 ;;		Nothing
  5415 ;; This function is called by:
  5416 ;;		_scale
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function ___awmod
  5422  166D                     ___awmod:	
  5423                           
  5424                           ;incstack = 0
  5425                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5426  166D  01F7               	clrf	___awmod@sign
  5427  166E  1FF5               	btfss	___awmod@dividend+1,7
  5428  166F  2E77               	goto	l3200
  5429  1670  09F4               	comf	___awmod@dividend,f
  5430  1671  09F5               	comf	___awmod@dividend+1,f
  5431  1672  0AF4               	incf	___awmod@dividend,f
  5432  1673  1903               	skipnz
  5433  1674  0AF5               	incf	___awmod@dividend+1,f
  5434  1675  01F7               	clrf	___awmod@sign
  5435  1676  0AF7               	incf	___awmod@sign,f
  5436  1677                     l3200:	
  5437  1677  1FF3               	btfss	___awmod@divisor+1,7
  5438  1678  2E7E               	goto	l3204
  5439  1679  09F2               	comf	___awmod@divisor,f
  5440  167A  09F3               	comf	___awmod@divisor+1,f
  5441  167B  0AF2               	incf	___awmod@divisor,f
  5442  167C  1903               	skipnz
  5443  167D  0AF3               	incf	___awmod@divisor+1,f
  5444  167E                     l3204:	
  5445  167E  0872               	movf	___awmod@divisor,w
  5446  167F  0473               	iorwf	___awmod@divisor+1,w
  5447  1680  1903               	btfsc	3,2
  5448  1681  2E9D               	goto	l3220
  5449  1682  01F6               	clrf	___awmod@counter
  5450  1683                     L18:	
  5451  1683  0AF6               	incf	___awmod@counter,f
  5452  1684  1BF3               	btfsc	___awmod@divisor+1,7
  5453  1685  2E8A               	goto	l3212
  5454  1686  1003               	clrc
  5455  1687  0DF2               	rlf	___awmod@divisor,f
  5456  1688  0DF3               	rlf	___awmod@divisor+1,f
  5457  1689  2E83               	goto	L18
  5458  168A                     l3212:	
  5459  168A  0873               	movf	___awmod@divisor+1,w
  5460  168B  0275               	subwf	___awmod@dividend+1,w
  5461  168C  1D03               	skipz
  5462  168D  2E90               	goto	u2945
  5463  168E  0872               	movf	___awmod@divisor,w
  5464  168F  0274               	subwf	___awmod@dividend,w
  5465  1690                     u2945:	
  5466  1690  1C03               	skipc
  5467  1691  2E99               	goto	L19
  5468  1692  0872               	movf	___awmod@divisor,w
  5469  1693  02F4               	subwf	___awmod@dividend,f
  5470  1694  0873               	movf	___awmod@divisor+1,w
  5471  1695  1C03               	skipc
  5472  1696  03F5               	decf	___awmod@dividend+1,f
  5473  1697  02F5               	subwf	___awmod@dividend+1,f
  5474  1698  1003               	clrc
  5475  1699                     L19:	
  5476  1699  0CF3               	rrf	___awmod@divisor+1,f
  5477  169A  0CF2               	rrf	___awmod@divisor,f
  5478  169B  0BF6               	decfsz	___awmod@counter,f
  5479  169C  2E8A               	goto	l3212
  5480  169D                     l3220:	
  5481  169D  0877               	movf	___awmod@sign,w
  5482  169E  1903               	btfsc	3,2
  5483  169F  2EA5               	goto	l3224
  5484  16A0  09F4               	comf	___awmod@dividend,f
  5485  16A1  09F5               	comf	___awmod@dividend+1,f
  5486  16A2  0AF4               	incf	___awmod@dividend,f
  5487  16A3  1903               	skipnz
  5488  16A4  0AF5               	incf	___awmod@dividend+1,f
  5489  16A5                     l3224:	
  5490  16A5  0875               	movf	___awmod@dividend+1,w
  5491  16A6  00F3               	movwf	?___awmod+1
  5492  16A7  0874               	movf	___awmod@dividend,w
  5493  16A8  00F2               	movwf	?___awmod
  5494  16A9  0008               	return
  5495  16AA                     __end_of___awmod:	
  5496  16AA                     __ptext46:	
  5497 ;; *************** function ___ftmul *****************
  5498 ;; Defined at:
  5499 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftmul.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  f1              3    8[BANK0 ] float 
  5502 ;;  f2              3   11[BANK0 ] float 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  5505 ;;  sign            1   22[BANK0 ] unsigned char 
  5506 ;;  cntr            1   21[BANK0 ] unsigned char 
  5507 ;;  exp             1   17[BANK0 ] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  3    8[BANK0 ] float 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0, pclath, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 300/0
  5514 ;;		On exit  : 300/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5517 ;;      Params:         0       6       0       0       0
  5518 ;;      Locals:         0       6       0       0       0
  5519 ;;      Temps:          0       3       0       0       0
  5520 ;;      Totals:         0      15       0       0       0
  5521 ;;Total ram usage:       15 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    2
  5524 ;; This function calls:
  5525 ;;		___ftpack
  5526 ;; This function is called by:
  5527 ;;		_getTempDS18B20
  5528 ;;		_calcSHT71
  5529 ;;		_fround
  5530 ;;		_scale
  5531 ;;		_sprintf
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function ___ftmul
  5537  16AA                     ___ftmul:	
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5541  16AA  0828               	movf	___ftmul@f1,w
  5542  16AB  00AE               	movwf	??___ftmul
  5543  16AC  0829               	movf	___ftmul@f1+1,w
  5544  16AD  00AF               	movwf	??___ftmul+1
  5545  16AE  082A               	movf	___ftmul@f1+2,w
  5546  16AF  00B0               	movwf	??___ftmul+2
  5547  16B0  1003               	clrc
  5548  16B1  0D2F               	rlf	??___ftmul+1,w
  5549  16B2  0D30               	rlf	??___ftmul+2,w
  5550  16B3  00B1               	movwf	___ftmul@exp
  5551  16B4  0831               	movf	___ftmul@exp,w
  5552  16B5  1D03               	btfss	3,2
  5553  16B6  2EBB               	goto	l5110
  5554  16B7  01A8               	clrf	?___ftmul
  5555  16B8  01A9               	clrf	?___ftmul+1
  5556  16B9  01AA               	clrf	?___ftmul+2
  5557  16BA  0008               	return
  5558  16BB                     l5110:	
  5559  16BB  082B               	movf	___ftmul@f2,w
  5560  16BC  00AE               	movwf	??___ftmul
  5561  16BD  082C               	movf	___ftmul@f2+1,w
  5562  16BE  00AF               	movwf	??___ftmul+1
  5563  16BF  082D               	movf	___ftmul@f2+2,w
  5564  16C0  00B0               	movwf	??___ftmul+2
  5565  16C1  1003               	clrc
  5566  16C2  0D2F               	rlf	??___ftmul+1,w
  5567  16C3  0D30               	rlf	??___ftmul+2,w
  5568  16C4  00B6               	movwf	___ftmul@sign
  5569  16C5  0836               	movf	___ftmul@sign,w
  5570  16C6  1D03               	btfss	3,2
  5571  16C7  2ECC               	goto	l5114
  5572  16C8  01A8               	clrf	?___ftmul
  5573  16C9  01A9               	clrf	?___ftmul+1
  5574  16CA  01AA               	clrf	?___ftmul+2
  5575  16CB  0008               	return
  5576  16CC                     l5114:	
  5577  16CC  0836               	movf	___ftmul@sign,w
  5578  16CD  3E7B               	addlw	123
  5579  16CE  07B1               	addwf	___ftmul@exp,f
  5580  16CF  082A               	movf	___ftmul@f1+2,w
  5581  16D0  00B6               	movwf	___ftmul@sign
  5582  16D1  082D               	movf	___ftmul@f2+2,w
  5583  16D2  06B6               	xorwf	___ftmul@sign,f
  5584  16D3  3080               	movlw	128
  5585  16D4  05B6               	andwf	___ftmul@sign,f
  5586  16D5  3007               	movlw	7
  5587  16D6  17A9               	bsf	___ftmul@f1+1,7
  5588  16D7  17AC               	bsf	___ftmul@f2+1,7
  5589  16D8  01AD               	clrf	___ftmul@f2+2
  5590  16D9  01B2               	clrf	___ftmul@f3_as_product
  5591  16DA  01B3               	clrf	___ftmul@f3_as_product+1
  5592  16DB  01B4               	clrf	___ftmul@f3_as_product+2
  5593  16DC  00B5               	movwf	___ftmul@cntr
  5594  16DD                     l5132:	
  5595  16DD  1C28               	btfss	___ftmul@f1,0
  5596  16DE  2EE6               	goto	l5136
  5597  16DF  27AA  160A  118A   	fcall	PL48	;call to abstracted procedure
  5598  16E2  1803               	skipnc
  5599  16E3  0A2D               	incf	___ftmul@f2+2,w
  5600  16E4  1D03               	btfss	3,2
  5601  16E5  07B4               	addwf	___ftmul@f3_as_product+2,f
  5602  16E6                     l5136:	
  5603  16E6  1003               	clrc
  5604  16E7  0CAA               	rrf	___ftmul@f1+2,f
  5605  16E8  0CA9               	rrf	___ftmul@f1+1,f
  5606  16E9  0CA8               	rrf	___ftmul@f1,f
  5607  16EA  1003               	clrc
  5608  16EB  0DAB               	rlf	___ftmul@f2,f
  5609  16EC  0DAC               	rlf	___ftmul@f2+1,f
  5610  16ED  0DAD               	rlf	___ftmul@f2+2,f
  5611  16EE  0BB5               	decfsz	___ftmul@cntr,f
  5612  16EF  2EDD               	goto	l5132
  5613  16F0  3009               	movlw	9
  5614  16F1  00B5               	movwf	___ftmul@cntr
  5615  16F2                     l5144:	
  5616  16F2  1C28               	btfss	___ftmul@f1,0
  5617  16F3  2EFB               	goto	l5148
  5618  16F4  27AA  160A  118A   	fcall	PL48	;call to abstracted procedure
  5619  16F7  1803               	skipnc
  5620  16F8  0A2D               	incf	___ftmul@f2+2,w
  5621  16F9  1D03               	btfss	3,2
  5622  16FA  07B4               	addwf	___ftmul@f3_as_product+2,f
  5623  16FB                     l5148:	
  5624  16FB  1003               	clrc
  5625  16FC  0CAA               	rrf	___ftmul@f1+2,f
  5626  16FD  0CA9               	rrf	___ftmul@f1+1,f
  5627  16FE  0CA8               	rrf	___ftmul@f1,f
  5628  16FF  1003               	clrc
  5629  1700  0CB4               	rrf	___ftmul@f3_as_product+2,f
  5630  1701  0CB3               	rrf	___ftmul@f3_as_product+1,f
  5631  1702  0CB2               	rrf	___ftmul@f3_as_product,f
  5632  1703  0BB5               	decfsz	___ftmul@cntr,f
  5633  1704  2EF2               	goto	l5144
  5634  1705  0832               	movf	___ftmul@f3_as_product,w
  5635  1706  00F2               	movwf	___ftpack@arg
  5636  1707  0833               	movf	___ftmul@f3_as_product+1,w
  5637  1708  00F3               	movwf	___ftpack@arg+1
  5638  1709  0834               	movf	___ftmul@f3_as_product+2,w
  5639  170A  00F4               	movwf	___ftpack@arg+2
  5640  170B  0831               	movf	___ftmul@exp,w
  5641  170C  00F5               	movwf	___ftpack@exp
  5642  170D  0836               	movf	___ftmul@sign,w
  5643  170E  00F6               	movwf	___ftpack@sign
  5644  170F  2725               	fcall	___ftpack
  5645  1710  0872               	movf	?___ftpack,w
  5646  1711  00A8               	movwf	?___ftmul
  5647  1712  0873               	movf	?___ftpack+1,w
  5648  1713  00A9               	movwf	?___ftmul+1
  5649  1714  0874               	movf	?___ftpack+2,w
  5650  1715  00AA               	movwf	?___ftmul+2
  5651  1716  0008               	return
  5652  1717                     __end_of___ftmul:	
  5653  1717                     __ptext47:	
  5654 ;; *************** function ___bmul *****************
  5655 ;; Defined at:
  5656 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  multiplier      1    wreg     unsigned char 
  5659 ;;  multiplicand    1    8[COMMON] unsigned char 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  multiplier      1    4[BANK0 ] unsigned char 
  5662 ;;  product         1    3[BANK0 ] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 300/0
  5669 ;;		On exit  : 300/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5672 ;;      Params:         1       0       0       0       0
  5673 ;;      Locals:         0       2       0       0       0
  5674 ;;      Temps:          0       0       0       0       0
  5675 ;;      Totals:         1       2       0       0       0
  5676 ;;Total ram usage:        3 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    1
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_fround
  5683 ;;		_scale
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function ___bmul
  5689  1717                     ___bmul:	
  5690                           
  5691                           ;incstack = 0
  5692                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5693                           ;___bmul@multiplier stored from wreg
  5694  1717  00A4               	movwf	___bmul@multiplier
  5695  1718  01A3               	clrf	___bmul@product
  5696  1719                     l3136:	
  5697  1719  0878               	movf	___bmul@multiplicand,w
  5698  171A  1824               	btfsc	___bmul@multiplier,0
  5699  171B  07A3               	addwf	___bmul@product,f
  5700  171C  1003               	clrc
  5701  171D  0DF8               	rlf	___bmul@multiplicand,f
  5702  171E  1003               	clrc
  5703  171F  0CA4               	rrf	___bmul@multiplier,f
  5704  1720  0824               	movf	___bmul@multiplier,w
  5705  1721  1D03               	btfss	3,2
  5706  1722  2F19               	goto	l3136
  5707  1723  0823               	movf	___bmul@product,w
  5708  1724  0008               	return
  5709  1725                     __end_of___bmul:	
  5710  1725                     __ptext56:	
  5711 ;; *************** function ___ftpack *****************
  5712 ;; Defined at:
  5713 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\float.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  arg             3    2[COMMON] unsigned um
  5716 ;;  exp             1    5[COMMON] unsigned char 
  5717 ;;  sign            1    6[COMMON] unsigned char 
  5718 ;; Auto vars:     Size  Location     Type
  5719 ;;		None
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  3    2[COMMON] float 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 300/0
  5726 ;;		On exit  : 300/0
  5727 ;;		Unchanged: 300/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5729 ;;      Params:         5       0       0       0       0
  5730 ;;      Locals:         0       0       0       0       0
  5731 ;;      Temps:          3       0       0       0       0
  5732 ;;      Totals:         8       0       0       0       0
  5733 ;;Total ram usage:        8 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    1
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		___ftadd
  5740 ;;		___ftmul
  5741 ;;		___lltoft
  5742 ;;		___lwtoft
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           
  5747                           ;psect for function ___ftpack
  5748  1725                     ___ftpack:	
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5752  1725  0875               	movf	___ftpack@exp,w
  5753  1726  1903               	btfsc	3,2
  5754  1727  2F2D               	goto	l854
  5755  1728  0874               	movf	___ftpack@arg+2,w
  5756  1729  0473               	iorwf	___ftpack@arg+1,w
  5757  172A  0472               	iorwf	___ftpack@arg,w
  5758  172B  1D03               	skipz
  5759  172C  2F36               	goto	l4878
  5760  172D                     l854:	
  5761  172D  01F2               	clrf	?___ftpack
  5762  172E  01F3               	clrf	?___ftpack+1
  5763  172F  01F4               	clrf	?___ftpack+2
  5764  1730  0008               	return
  5765  1731                     l4876:	
  5766  1731  0AF5               	incf	___ftpack@exp,f
  5767  1732  1003               	clrc
  5768  1733  0CF4               	rrf	___ftpack@arg+2,f
  5769  1734  0CF3               	rrf	___ftpack@arg+1,f
  5770  1735  0CF2               	rrf	___ftpack@arg,f
  5771  1736                     l4878:	
  5772  1736  30FE               	movlw	254
  5773  1737  0574               	andwf	___ftpack@arg+2,w
  5774  1738  1903               	btfsc	3,2
  5775  1739  2F45               	goto	l4882
  5776  173A  2F31               	goto	l4876
  5777  173B                     l4880:	
  5778  173B  0AF5               	incf	___ftpack@exp,f
  5779  173C  0AF2               	incf	___ftpack@arg,f
  5780  173D  1903               	skipnz
  5781  173E  0AF3               	incf	___ftpack@arg+1,f
  5782  173F  1903               	skipnz
  5783  1740  0AF4               	incf	___ftpack@arg+2,f
  5784  1741  1003               	clrc
  5785  1742  0CF4               	rrf	___ftpack@arg+2,f
  5786  1743  0CF3               	rrf	___ftpack@arg+1,f
  5787  1744  0CF2               	rrf	___ftpack@arg,f
  5788  1745                     l4882:	
  5789  1745  30FF               	movlw	255
  5790  1746  0574               	andwf	___ftpack@arg+2,w
  5791  1747  1903               	btfsc	3,2
  5792  1748  2F53               	goto	l4886
  5793  1749  2F3B               	goto	l4880
  5794  174A                     l4888:	
  5795  174A  3002               	movlw	2
  5796  174B  0275               	subwf	___ftpack@exp,w
  5797  174C  1C03               	btfss	3,0
  5798  174D  2F55               	goto	l866
  5799  174E  03F5               	decf	___ftpack@exp,f
  5800  174F  1003               	clrc
  5801  1750  0DF2               	rlf	___ftpack@arg,f
  5802  1751  0DF3               	rlf	___ftpack@arg+1,f
  5803  1752  0DF4               	rlf	___ftpack@arg+2,f
  5804  1753                     l4886:	
  5805  1753  1FF3               	btfss	___ftpack@arg+1,7
  5806  1754  2F4A               	goto	l4888
  5807  1755                     l866:	
  5808  1755  1C75               	btfss	___ftpack@exp,0
  5809  1756  13F3               	bcf	___ftpack@arg+1,7
  5810  1757  1003               	clrc
  5811  1758  0CF5               	rrf	___ftpack@exp,f
  5812  1759  0875               	movf	___ftpack@exp,w
  5813  175A  00F9               	movwf	??___ftpack+2
  5814  175B  01F8               	clrf	??___ftpack+1
  5815  175C  01F7               	clrf	??___ftpack
  5816  175D  0877               	movf	??___ftpack,w
  5817  175E  04F2               	iorwf	___ftpack@arg,f
  5818  175F  0878               	movf	??___ftpack+1,w
  5819  1760  04F3               	iorwf	___ftpack@arg+1,f
  5820  1761  0879               	movf	??___ftpack+2,w
  5821  1762  04F4               	iorwf	___ftpack@arg+2,f
  5822  1763  0876               	movf	___ftpack@sign,w
  5823  1764  1D03               	btfss	3,2
  5824  1765  17F4               	bsf	___ftpack@arg+2,7
  5825  1766  0008               	return
  5826  1767                     __end_of___ftpack:	
  5827  1767                     PL18:	
  5828  1767  0872               	movf	?___awmod,w
  5829  1768  00BA               	movwf	??_scale
  5830  1769  0873               	movf	?___awmod+1,w
  5831  176A  00BB               	movwf	??_scale+1
  5832  176B  083A               	movf	??_scale,w
  5833  176C  073A               	addwf	??_scale,w
  5834  176D  073A               	addwf	??_scale,w
  5835  176E  3E12               	addlw	low (__npowers_| (0+32768))
  5836  176F  0084               	movwf	4
  5837  1770  3098               	movlw	high (__npowers_| (0+32768))
  5838  1771  1803               	skipnc
  5839  1772  3E01               	addlw	1
  5840  1773  00FF               	movwf	127
  5841  1774  0008               	return
  5842  1775                     __end_ofPL18:	
  5843  1775                     PL28:	
  5844  1775  0820               	movf	?___awdiv,w
  5845  1776  00BC               	movwf	??_scale+2
  5846  1777  0821               	movf	?___awdiv+1,w
  5847  1778  00BD               	movwf	??_scale+3
  5848  1779  083C               	movf	??_scale+2,w
  5849  177A  073C               	addwf	??_scale+2,w
  5850  177B  073C               	addwf	??_scale+2,w
  5851  177C  0008               	return
  5852  177D                     __end_ofPL28:	
  5853  177D                     PL32:	
  5854  177D  0828               	movf	?___ftmul,w
  5855  177E  00B7               	movwf	?_scale
  5856  177F  0829               	movf	?___ftmul+1,w
  5857  1780  00B8               	movwf	?_scale+1
  5858  1781  082A               	movf	?___ftmul+2,w
  5859  1782  00B9               	movwf	?_scale+2
  5860  1783  0008               	return
  5861  1784                     __end_ofPL32:	
  5862  1784                     PL34:	
  5863  1784  00BA               	movwf	??_scale
  5864  1785  0873               	movf	?___awmod+1,w
  5865  1786  00BB               	movwf	??_scale+1
  5866  1787  083A               	movf	??_scale,w
  5867  1788  073A               	addwf	??_scale,w
  5868  1789  073A               	addwf	??_scale,w
  5869  178A  3E39               	addlw	low (__powers_| (0+32768))
  5870  178B  0084               	movwf	4
  5871  178C  3098               	movlw	high (__powers_| (0+32768))
  5872  178D  1803               	skipnc
  5873  178E  3E01               	addlw	1
  5874  178F  00FF               	movwf	127
  5875  1790  0008               	return
  5876  1791                     __end_ofPL34:	
  5877  1791                     PL40:	
  5878  1791  0828               	movf	?___ftmul,w
  5879  1792  00BE               	movwf	_scale$1256
  5880  1793  0829               	movf	?___ftmul+1,w
  5881  1794  00BF               	movwf	_scale$1256+1
  5882  1795  082A               	movf	?___ftmul+2,w
  5883  1796  00C0               	movwf	_scale$1256+2
  5884  1797  300A               	movlw	10
  5885  1798  00F2               	movwf	___awmod@divisor
  5886  1799  01F3               	clrf	___awmod@divisor+1
  5887  179A  0841               	movf	scale@scl,w
  5888  179B  00F4               	movwf	___awmod@dividend
  5889  179C  01F5               	clrf	___awmod@dividend+1
  5890  179D  0008               	return
  5891  179E                     __end_ofPL40:	
  5892  179E                     PL44:	
  5893  179E  300A               	movlw	10
  5894  179F  00A0               	movwf	___awdiv@divisor
  5895  17A0  01A1               	clrf	___awdiv@divisor+1
  5896  17A1  0841               	movf	scale@scl,w
  5897  17A2  00F4               	movwf	___awmod@dividend
  5898  17A3  01F5               	clrf	___awmod@dividend+1
  5899  17A4  1BF4               	btfsc	___awmod@dividend,7
  5900  17A5  03F5               	decf	___awmod@dividend+1,f
  5901  17A6  3064               	movlw	100
  5902  17A7  00F2               	movwf	___awmod@divisor
  5903  17A8  01F3               	clrf	___awmod@divisor+1
  5904  17A9  0008               	return
  5905  17AA                     __end_ofPL44:	
  5906  17AA                     PL48:	
  5907  17AA  082B               	movf	___ftmul@f2,w
  5908  17AB  07B2               	addwf	___ftmul@f3_as_product,f
  5909  17AC  082C               	movf	___ftmul@f2+1,w
  5910  17AD  1103               	clrz
  5911  17AE  1803               	skipnc
  5912  17AF  0A2C               	incf	___ftmul@f2+1,w
  5913  17B0  1D03               	btfss	3,2
  5914  17B1  07B3               	addwf	___ftmul@f3_as_product+1,f
  5915  17B2  082D               	movf	___ftmul@f2+2,w
  5916  17B3  1103               	clrz
  5917  17B4  0008               	return
  5918  17B5                     __end_ofPL48:	
  5919  17B5                     PL54:	
  5920  17B5  00AA               	movwf	___ftmul@f1+2
  5921  17B6  086A               	movf	calcSHT71@rh,w
  5922  17B7  00AB               	movwf	___ftmul@f2
  5923  17B8  086B               	movf	calcSHT71@rh+1,w
  5924  17B9  00AC               	movwf	___ftmul@f2+1
  5925  17BA  086C               	movf	calcSHT71@rh+2,w
  5926  17BB  00AD               	movwf	___ftmul@f2+2
  5927  17BC  0008               	return
  5928  17BD                     __end_ofPL54:	
  5929  17BD                     PL58:	
  5930  17BD  300A               	movlw	10
  5931  17BE  00F2               	movwf	___awmod@divisor
  5932  17BF  01F3               	clrf	___awmod@divisor+1
  5933  17C0  0841               	movf	scale@scl,w
  5934  17C1  00F4               	movwf	___awmod@dividend
  5935  17C2  01F5               	clrf	___awmod@dividend+1
  5936  17C3  0008               	return
  5937  17C4                     __end_ofPL58:	
  5938  17C4                     PL60:	
  5939  17C4  0828               	movf	?___ftmul,w
  5940  17C5  00C5               	movwf	___ftadd@f2
  5941  17C6  0829               	movf	?___ftmul+1,w
  5942  17C7  00C6               	movwf	___ftadd@f2+1
  5943  17C8  082A               	movf	?___ftmul+2,w
  5944  17C9  00C7               	movwf	___ftadd@f2+2
  5945  17CA  0008               	return
  5946  17CB                     __end_ofPL60:	
  5947  17CB                     PL64:	
  5948  17CB  00C4               	movwf	___ftadd@f1+2
  5949  17CC  0864               	movf	_calcSHT71$1252,w
  5950  17CD  00C5               	movwf	___ftadd@f2
  5951  17CE  0865               	movf	_calcSHT71$1252+1,w
  5952  17CF  00C6               	movwf	___ftadd@f2+1
  5953  17D0  0866               	movf	_calcSHT71$1252+2,w
  5954  17D1  00C7               	movwf	___ftadd@f2+2
  5955  17D2  0008               	return
  5956  17D3                     __end_ofPL64:	
  5957  17D3                     PL66:	
  5958  17D3  00AA               	movwf	___ftmul@f1+2
  5959  17D4  300A               	movlw	10
  5960  17D5  00A0               	movwf	___awdiv@divisor
  5961  17D6  01A1               	clrf	___awdiv@divisor+1
  5962  17D7  0841               	movf	scale@scl,w
  5963  17D8  00A2               	movwf	___awdiv@dividend
  5964  17D9  01A3               	clrf	___awdiv@dividend+1
  5965  17DA  0008               	return
  5966  17DB                     __end_ofPL66:	
  5967  17DB                     PL70:	
  5968  17DB  00AA               	movwf	___ftmul@f1+2
  5969  17DC  083E               	movf	_scale$1256,w
  5970  17DD  00AB               	movwf	___ftmul@f2
  5971  17DE  083F               	movf	_scale$1256+1,w
  5972  17DF  00AC               	movwf	___ftmul@f2+1
  5973  17E0  0840               	movf	_scale$1256+2,w
  5974  17E1  00AD               	movwf	___ftmul@f2+2
  5975  17E2  0008               	return
  5976  17E3                     __end_ofPL70:	
  5977  17E3                     PL74:	
  5978  17E3  00AA               	movwf	___ftmul@f1+2
  5979  17E4  3064               	movlw	100
  5980  17E5  00A0               	movwf	___awdiv@divisor
  5981  17E6  01A1               	clrf	___awdiv@divisor+1
  5982  17E7  0841               	movf	scale@scl,w
  5983  17E8  00A2               	movwf	___awdiv@dividend
  5984  17E9  01A3               	clrf	___awdiv@dividend+1
  5985  17EA  0008               	return
  5986  17EB                     __end_ofPL74:	
  5987  17EB                     PL78:	
  5988  17EB  0820               	movf	?___awdiv,w
  5989  17EC  00BA               	movwf	??_scale
  5990  17ED  0821               	movf	?___awdiv+1,w
  5991  17EE  00BB               	movwf	??_scale+1
  5992  17EF  083A               	movf	??_scale,w
  5993  17F0  073A               	addwf	??_scale,w
  5994  17F1  073A               	addwf	??_scale,w
  5995  17F2  0008               	return
  5996  17F3                     __end_ofPL78:	
  5997  17F3                     PL86:	
  5998  17F3  1683               	bsf	3,5	;RP0=1, select bank1
  5999  17F4  1303               	bcf	3,6	;RP1=0, select bank1
  6000  17F5  1287               	bcf	7,5	;volatile
  6001  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  6002  17F7  1287               	bcf	7,5	;volatile
  6003  17F8  0008               	return
  6004  17F9                     __end_ofPL86:	
  6005  17F9                     PL88:	
  6006  17F9  3E54               	addlw	low ((__powers_| (0+32768)+27))
  6007  17FA  0084               	movwf	4
  6008  17FB  3098               	movlw	high ((__powers_| (0+32768)+27))
  6009  17FC  1803               	skipnc
  6010  17FD  3E01               	addlw	1
  6011  17FE  00FF               	movwf	127
  6012  17FF  0008               	return
  6013  1800                     __end_ofPL88:	
  6014                           
  6015                           	psect	text32
  6016  0890                     __ptext32:	
  6017 ;; *************** function _displaySoilTemp *****************
  6018 ;; Defined at:
  6019 ;;		line 165 in file "main.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  t2              3   62[BANK0 ] float 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;		None               void
  6026 ;; Registers used:
  6027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 300/0
  6030 ;;		On exit  : 300/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6033 ;;      Params:         0       3       0       0       0
  6034 ;;      Locals:         0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0
  6036 ;;      Totals:         0       3       0       0       0
  6037 ;;Total ram usage:        3 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    5
  6040 ;; This function calls:
  6041 ;;		_LcdSetCursor
  6042 ;;		_LcdWriteString
  6043 ;;		_sprintf
  6044 ;; This function is called by:
  6045 ;;		_main
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           
  6050                           ;psect for function _displaySoilTemp
  6051  0890                     _displaySoilTemp:	
  6052                           
  6053                           ;main.c: 166: sprintf(temperature, " %.1f", t2);
  6054                           
  6055                           ;incstack = 0
  6056                           ; Regs used in _displaySoilTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6057  0890  3062               	movlw	low (STR_2| (0+32768))
  6058  0891  00D4               	movwf	sprintf@f
  6059  0892  3099               	movlw	high (STR_2| (0+32768))
  6060  0893  00D5               	movwf	sprintf@f+1
  6061  0894  085E               	movf	displaySoilTemp@t2,w
  6062  0895  00D6               	movwf	?_sprintf+2
  6063  0896  085F               	movf	displaySoilTemp@t2+1,w
  6064  0897  00D7               	movwf	?_sprintf+3
  6065  0898  0860               	movf	displaySoilTemp@t2+2,w
  6066  0899  00D8               	movwf	?_sprintf+4
  6067  089A  30B7               	movlw	(low (_temperature| 0))& (0+255)
  6068  089B  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6069  08A0  3001               	movlw	1
  6070                           
  6071                           ;main.c: 167: LcdSetCursor(1,1);
  6072  08A1  01F6               	clrf	LcdSetCursor@b
  6073  08A2  0AF6               	incf	LcdSetCursor@b,f
  6074  08A3  2685  120A  158A   	fcall	_LcdSetCursor
  6075                           
  6076                           ;main.c: 168: LcdWriteString((char *)"Soil temperature");
  6077  08A6  30FF               	movlw	low (STR_12| (0+32768))
  6078  08A7  00F7               	movwf	LcdWriteString@a
  6079  08A8  3098               	movlw	high (STR_12| (0+32768))
  6080  08A9  00F8               	movwf	LcdWriteString@a+1
  6081  08AA  26AE  120A  158A   	fcall	_LcdWriteString
  6082  08AD  3002               	movlw	2
  6083                           
  6084                           ;main.c: 169: LcdSetCursor(2,1);
  6085  08AE  01F6               	clrf	LcdSetCursor@b
  6086  08AF  0AF6               	incf	LcdSetCursor@b,f
  6087  08B0  2685  120A  158A   	fcall	_LcdSetCursor
  6088                           
  6089                           ;main.c: 170: LcdWriteString(temperature);
  6090  08B3  30B7               	movlw	(low (_temperature| 0))& (0+255)
  6091  08B4  00F7               	movwf	LcdWriteString@a
  6092  08B5  01F8               	clrf	LcdWriteString@a+1
  6093  08B6  26AE  120A  158A   	fcall	_LcdWriteString
  6094                           
  6095                           ;main.c: 171: LcdSetCursor(2,6);
  6096  08B9  3006               	movlw	6
  6097  08BA  00F6               	movwf	LcdSetCursor@b
  6098  08BB  3002               	movlw	2
  6099  08BC  2685  120A  158A   	fcall	_LcdSetCursor
  6100                           
  6101                           ;main.c: 172: LcdWriteString((char *)" deg        ");
  6102  08BF  302B               	movlw	low (STR_4| (0+32768))
  6103  08C0  00F7               	movwf	LcdWriteString@a
  6104  08C1  3099               	movlw	high (STR_4| (0+32768))
  6105  08C2  00F8               	movwf	LcdWriteString@a+1
  6106  08C3  2EAE               	ljmp	l5182
  6107  08C4                     __end_of_displaySoilTemp:	
  6108  08C4                     __ptext36:	
  6109 ;; *************** function _displayAirTemp *****************
  6110 ;; Defined at:
  6111 ;;		line 129 in file "main.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  temp2           3   62[BANK0 ] float 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;		None               void
  6118 ;; Registers used:
  6119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 300/0
  6122 ;;		On exit  : 300/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6125 ;;      Params:         0       3       0       0       0
  6126 ;;      Locals:         0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0
  6128 ;;      Totals:         0       3       0       0       0
  6129 ;;Total ram usage:        3 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    5
  6132 ;; This function calls:
  6133 ;;		_LcdSetCursor
  6134 ;;		_LcdWriteString
  6135 ;;		_sprintf
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _displayAirTemp
  6143  08C4                     _displayAirTemp:	
  6144                           
  6145                           ;main.c: 130: sprintf(temperature, " %.1f", temp2);
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _displayAirTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6149  08C4  3062               	movlw	low (STR_2| (0+32768))
  6150  08C5  00D4               	movwf	sprintf@f
  6151  08C6  3099               	movlw	high (STR_2| (0+32768))
  6152  08C7  00D5               	movwf	sprintf@f+1
  6153  08C8  085E               	movf	displayAirTemp@temp2,w
  6154  08C9  00D6               	movwf	?_sprintf+2
  6155  08CA  085F               	movf	displayAirTemp@temp2+1,w
  6156  08CB  00D7               	movwf	?_sprintf+3
  6157  08CC  0860               	movf	displayAirTemp@temp2+2,w
  6158  08CD  00D8               	movwf	?_sprintf+4
  6159  08CE  30B7               	movlw	(low (_temperature| 0))& (0+255)
  6160  08CF  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6161  08D4  3001               	movlw	1
  6162                           
  6163                           ;main.c: 131: LcdSetCursor(1,1);
  6164  08D5  01F6               	clrf	LcdSetCursor@b
  6165  08D6  0AF6               	incf	LcdSetCursor@b,f
  6166  08D7  2685  120A  158A   	fcall	_LcdSetCursor
  6167                           
  6168                           ;main.c: 132: LcdWriteString((char *)"Air temperature ");
  6169  08DA  30EE               	movlw	low (STR_3| (0+32768))
  6170  08DB  00F7               	movwf	LcdWriteString@a
  6171  08DC  3098               	movlw	high (STR_3| (0+32768))
  6172  08DD  00F8               	movwf	LcdWriteString@a+1
  6173  08DE  26AE  120A  158A   	fcall	_LcdWriteString
  6174  08E1  3002               	movlw	2
  6175                           
  6176                           ;main.c: 133: LcdSetCursor(2,1);
  6177  08E2  01F6               	clrf	LcdSetCursor@b
  6178  08E3  0AF6               	incf	LcdSetCursor@b,f
  6179  08E4  2685  120A  158A   	fcall	_LcdSetCursor
  6180                           
  6181                           ;main.c: 134: LcdWriteString(temperature);
  6182  08E7  30B7               	movlw	(low (_temperature| 0))& (0+255)
  6183  08E8  00F7               	movwf	LcdWriteString@a
  6184  08E9  01F8               	clrf	LcdWriteString@a+1
  6185  08EA  26AE  120A  158A   	fcall	_LcdWriteString
  6186                           
  6187                           ;main.c: 135: LcdSetCursor(2,6);
  6188  08ED  3006               	movlw	6
  6189  08EE  00F6               	movwf	LcdSetCursor@b
  6190  08EF  3002               	movlw	2
  6191  08F0  2685  120A  158A   	fcall	_LcdSetCursor
  6192                           
  6193                           ;main.c: 136: LcdWriteString((char *)" deg        ");
  6194  08F3  302B               	movlw	low (STR_4| (0+32768))
  6195  08F4  00F7               	movwf	LcdWriteString@a
  6196  08F5  3099               	movlw	high (STR_4| (0+32768))
  6197  08F6  00F8               	movwf	LcdWriteString@a+1
  6198  08F7  2EAE               	ljmp	l5182
  6199  08F8                     __end_of_displayAirTemp:	
  6200  08F8                     __ptext37:	
  6201 ;; *************** function _displayAirMoist *****************
  6202 ;; Defined at:
  6203 ;;		line 139 in file "main.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  humi2           3   62[BANK0 ] float 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;		None
  6208 ;; Return value:  Size  Location     Type
  6209 ;;		None               void
  6210 ;; Registers used:
  6211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 300/0
  6214 ;;		On exit  : 300/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6217 ;;      Params:         0       3       0       0       0
  6218 ;;      Locals:         0       0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0
  6220 ;;      Totals:         0       3       0       0       0
  6221 ;;Total ram usage:        3 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    5
  6224 ;; This function calls:
  6225 ;;		_LcdSetCursor
  6226 ;;		_LcdWriteString
  6227 ;;		_sprintf
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function _displayAirMoist
  6235  08F8                     _displayAirMoist:	
  6236                           
  6237                           ;main.c: 140: sprintf(humidity, " %.1f", humi2);
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _displayAirMoist: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6241  08F8  3062               	movlw	low (STR_2| (0+32768))
  6242  08F9  00D4               	movwf	sprintf@f
  6243  08FA  3099               	movlw	high (STR_2| (0+32768))
  6244  08FB  00D5               	movwf	sprintf@f+1
  6245  08FC  085E               	movf	displayAirMoist@humi2,w
  6246  08FD  00D6               	movwf	?_sprintf+2
  6247  08FE  085F               	movf	displayAirMoist@humi2+1,w
  6248  08FF  00D7               	movwf	?_sprintf+3
  6249  0900  0860               	movf	displayAirMoist@humi2+2,w
  6250  0901  00D8               	movwf	?_sprintf+4
  6251  0902  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6252  0903  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6253  0908  3001               	movlw	1
  6254                           
  6255                           ;main.c: 141: LcdSetCursor(1,1);
  6256  0909  01F6               	clrf	LcdSetCursor@b
  6257  090A  0AF6               	incf	LcdSetCursor@b,f
  6258  090B  2685  120A  158A   	fcall	_LcdSetCursor
  6259                           
  6260                           ;main.c: 142: LcdWriteString((char *)"Air moist       ");
  6261  090E  3088               	movlw	low (STR_6| (0+32768))
  6262  090F  00F7               	movwf	LcdWriteString@a
  6263  0910  3098               	movlw	high (STR_6| (0+32768))
  6264  0911  00F8               	movwf	LcdWriteString@a+1
  6265  0912  26AE  120A  158A   	fcall	_LcdWriteString
  6266  0915  3002               	movlw	2
  6267                           
  6268                           ;main.c: 143: LcdSetCursor(2,1);
  6269  0916  01F6               	clrf	LcdSetCursor@b
  6270  0917  0AF6               	incf	LcdSetCursor@b,f
  6271  0918  2685  120A  158A   	fcall	_LcdSetCursor
  6272                           
  6273                           ;main.c: 144: LcdWriteString(humidity);
  6274  091B  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6275  091C  00F7               	movwf	LcdWriteString@a
  6276  091D  01F8               	clrf	LcdWriteString@a+1
  6277  091E  26AE  120A  158A   	fcall	_LcdWriteString
  6278                           
  6279                           ;main.c: 145: LcdSetCursor(2,6);
  6280  0921  3006               	movlw	6
  6281  0922  00F6               	movwf	LcdSetCursor@b
  6282  0923  3002               	movlw	2
  6283  0924  2685  120A  158A   	fcall	_LcdSetCursor
  6284                           
  6285                           ;main.c: 146: LcdWriteString((char *)" %          ");
  6286  0927  301E               	movlw	low (STR_7| (0+32768))
  6287  0928  00F7               	movwf	LcdWriteString@a
  6288  0929  3099               	movlw	high (STR_7| (0+32768))
  6289  092A  00F8               	movwf	LcdWriteString@a+1
  6290  092B  2EAE               	ljmp	l5182
  6291  092C                     __end_of_displayAirMoist:	
  6292  092C                     __ptext33:	
  6293 ;; *************** function _displayCO2 *****************
  6294 ;; Defined at:
  6295 ;;		line 149 in file "main.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  co22            2   11[BANK0 ] unsigned int 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 300/0
  6306 ;;		On exit  : 300/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6309 ;;      Params:         0       2       0       0       0
  6310 ;;      Locals:         0       0       0       0       0
  6311 ;;      Temps:          0       0       0       0       0
  6312 ;;      Totals:         0       2       0       0       0
  6313 ;;Total ram usage:        2 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    5
  6316 ;; This function calls:
  6317 ;;		_LcdSetCursor
  6318 ;;		_LcdWriteInt
  6319 ;;		_LcdWriteString
  6320 ;; This function is called by:
  6321 ;;		_main
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _displayCO2
  6327  092C                     _displayCO2:	
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _displayCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6331  092C  3001               	movlw	1
  6332                           
  6333                           ;main.c: 150: LcdSetCursor(1,1);
  6334  092D  01F6               	clrf	LcdSetCursor@b
  6335  092E  0AF6               	incf	LcdSetCursor@b,f
  6336  092F  2685  120A  158A   	fcall	_LcdSetCursor
  6337                           
  6338                           ;main.c: 151: LcdWriteString((char *)"CO2 in air      ");
  6339  0932  3099               	movlw	low (STR_8| (0+32768))
  6340  0933  00F7               	movwf	LcdWriteString@a
  6341  0934  3098               	movlw	high (STR_8| (0+32768))
  6342  0935  00F8               	movwf	LcdWriteString@a+1
  6343  0936  26AE  120A  158A   	fcall	_LcdWriteString
  6344                           
  6345                           ;main.c: 152: if(measure_co2)
  6346  0939  1683               	bsf	3,5	;RP0=1, select bank1
  6347  093A  082E               	movf	_measure_co2^(0+128),w
  6348  093B  1903               	btfsc	3,2
  6349  093C  2954               	goto	l5896
  6350                           
  6351                           ;main.c: 153: {
  6352                           ;main.c: 154: LcdWriteInt(co22,2,1);
  6353  093D  1283               	bcf	3,5	;RP0=0, select bank0
  6354  093E  082C               	movf	displayCO2@co22+1,w
  6355  093F  00A5               	movwf	LcdWriteInt@i+1
  6356  0940  082B               	movf	displayCO2@co22,w
  6357  0941  00A4               	movwf	LcdWriteInt@i
  6358  0942  3002               	movlw	2
  6359  0943  00A6               	movwf	LcdWriteInt@row
  6360  0944  01A7               	clrf	LcdWriteInt@column
  6361  0945  0AA7               	incf	LcdWriteInt@column,f
  6362  0946  23A0  120A  158A   	fcall	_LcdWriteInt
  6363                           
  6364                           ;main.c: 155: LcdSetCursor(2,5);
  6365  0949  3005               	movlw	5
  6366  094A  00F6               	movwf	LcdSetCursor@b
  6367  094B  3002               	movlw	2
  6368  094C  2685  120A  158A   	fcall	_LcdSetCursor
  6369                           
  6370                           ;main.c: 156: LcdWriteString((char *)" ppm        ");
  6371  094F  3038               	movlw	low (STR_9| (0+32768))
  6372  0950  00F7               	movwf	LcdWriteString@a
  6373  0951  3099               	movlw	high (STR_9| (0+32768))
  6374  0952  00F8               	movwf	LcdWriteString@a+1
  6375  0953  2EAE               	ljmp	l5182
  6376  0954                     l5896:	
  6377                           ;main.c: 157: }
  6378                           
  6379  0954  3002               	movlw	2
  6380                           
  6381                           ;main.c: 158: else
  6382                           ;main.c: 159: {
  6383                           ;main.c: 160: LcdSetCursor(2,1);
  6384  0955  01F6               	clrf	LcdSetCursor@b
  6385  0956  0AF6               	incf	LcdSetCursor@b,f
  6386  0957  2685  120A  158A   	fcall	_LcdSetCursor
  6387                           
  6388                           ;main.c: 161: LcdWriteString((char *)"Measuring...    ");
  6389  095A  30AA               	movlw	low (STR_10| (0+32768))
  6390  095B  00F7               	movwf	LcdWriteString@a
  6391  095C  3098               	movlw	high (STR_10| (0+32768))
  6392  095D  00F8               	movwf	LcdWriteString@a+1
  6393  095E  2EAE               	ljmp	l5182
  6394  095F                     __end_of_displayCO2:	
  6395  095F                     __ptext4:	
  6396 ;; *************** function _menuHumi *****************
  6397 ;; Defined at:
  6398 ;;		line 341 in file "main.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;		None               void
  6405 ;; Registers used:
  6406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 300/0
  6409 ;;		On exit  : 300/100
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6412 ;;      Params:         0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    6
  6419 ;; This function calls:
  6420 ;;		_LcdSetCursor
  6421 ;;		_LcdWriteString
  6422 ;;		___eetoft
  6423 ;;		___ftadd
  6424 ;;		___ftge
  6425 ;;		___fttoee
  6426 ;;		_manage_buttons
  6427 ;;		_menuCO2
  6428 ;;		_sprintf
  6429 ;; This function is called by:
  6430 ;;		_menu
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _menuHumi
  6436  095F                     _menuHumi:	
  6437                           
  6438                           ;main.c: 342: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _menuHumi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6442  095F  3062               	movlw	low (STR_2| (0+32768))
  6443  0960  00D4               	movwf	sprintf@f
  6444  0961  3099               	movlw	high (STR_2| (0+32768))
  6445  0962  00D5               	movwf	sprintf@f+1
  6446  0963  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6447  0964  264B               	fcall	___eetoft
  6448  0965  0876               	movf	?___eetoft,w
  6449  0966  00D6               	movwf	?_sprintf+2
  6450  0967  0877               	movf	?___eetoft+1,w
  6451  0968  00D7               	movwf	?_sprintf+3
  6452  0969  0878               	movf	?___eetoft+2,w
  6453  096A  00D8               	movwf	?_sprintf+4
  6454  096B  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6455  096C  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6456  0971  3001               	movlw	1
  6457                           
  6458                           ;main.c: 343: LcdSetCursor(1,1);
  6459  0972  01F6               	clrf	LcdSetCursor@b
  6460  0973  0AF6               	incf	LcdSetCursor@b,f
  6461  0974  2685  120A  158A   	fcall	_LcdSetCursor
  6462                           
  6463                           ;main.c: 344: LcdWriteString((char *)"Set air moist   ");
  6464  0977  30CC               	movlw	low (STR_18| (0+32768))
  6465  0978  00F7               	movwf	LcdWriteString@a
  6466  0979  3098               	movlw	high (STR_18| (0+32768))
  6467  097A  00F8               	movwf	LcdWriteString@a+1
  6468  097B  26AE  120A  158A   	fcall	_LcdWriteString
  6469  097E  3002               	movlw	2
  6470                           
  6471                           ;main.c: 345: LcdSetCursor(2,1);
  6472  097F  01F6               	clrf	LcdSetCursor@b
  6473  0980  0AF6               	incf	LcdSetCursor@b,f
  6474  0981  2685  120A  158A   	fcall	_LcdSetCursor
  6475                           
  6476                           ;main.c: 346: LcdWriteString(humidity);
  6477  0984  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6478  0985  00F7               	movwf	LcdWriteString@a
  6479  0986  01F8               	clrf	LcdWriteString@a+1
  6480  0987  26AE  120A  158A   	fcall	_LcdWriteString
  6481                           
  6482                           ;main.c: 347: LcdSetCursor(2,6);
  6483  098A  3006               	movlw	6
  6484  098B  00F6               	movwf	LcdSetCursor@b
  6485  098C  3002               	movlw	2
  6486  098D  2685  120A  158A   	fcall	_LcdSetCursor
  6487                           
  6488                           ;main.c: 348: LcdWriteString((char *)"        ");
  6489  0990  3022               	movlw	low ((STR_7+4)| (0+32768))
  6490  0991  00F7               	movwf	LcdWriteString@a
  6491  0992  3099               	movlw	high ((STR_7+4)| (0+32768))
  6492  0993  00F8               	movwf	LcdWriteString@a+1
  6493  0994  26AE  120A  158A   	fcall	_LcdWriteString
  6494  0997                     l5738:	
  6495                           ;main.c: 350: while(!ok_flag_co2)
  6496                           
  6497  0997  1683               	bsf	3,5	;RP0=1, select bank1
  6498  0998  0830               	movf	_ok_flag_co2^(0+128),w
  6499  0999  1D03               	btfss	3,2
  6500  099A  0008               	return
  6501                           
  6502                           ;main.c: 351: {
  6503                           ;main.c: 352: manage_buttons();
  6504  099B  226B  120A  158A   	fcall	_manage_buttons
  6505                           
  6506                           ;main.c: 354: if(plus_flag)
  6507  099E  087B               	movf	_plus_flag,w
  6508  099F  1903               	btfsc	3,2
  6509  09A0  29FF               	goto	l5716
  6510                           
  6511                           ;main.c: 355: {
  6512                           ;main.c: 356: zeljena_vlaznost += 1;
  6513  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  6514  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  6515  09A3  3080               	movlw	128
  6516  09A4  01C2               	clrf	___ftadd@f1
  6517  09A5  00C3               	movwf	___ftadd@f1+1
  6518  09A6  303F               	movlw	63
  6519  09A7  00C4               	movwf	___ftadd@f1+2
  6520  09A8  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6521  09A9  264B               	fcall	___eetoft
  6522  09AA  0876               	movf	?___eetoft,w
  6523  09AB  00C5               	movwf	___ftadd@f2
  6524  09AC  0877               	movf	?___eetoft+1,w
  6525  09AD  00C6               	movwf	___ftadd@f2+1
  6526  09AE  0878               	movf	?___eetoft+2,w
  6527  09AF  00C7               	movwf	___ftadd@f2+2
  6528  09B0  120A  118A  25BC  120A  158A  	fcall	___ftadd
  6529  09B5  0842               	movf	?___ftadd,w
  6530  09B6  00CE               	movwf	___fttoee@data
  6531  09B7  0843               	movf	?___ftadd+1,w
  6532  09B8  00CF               	movwf	___fttoee@data+1
  6533  09B9  0844               	movf	?___ftadd+2,w
  6534  09BA  00D0               	movwf	___fttoee@data+2
  6535  09BB  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6536  09BC  26C6  120A  158A   	fcall	___fttoee
  6537                           
  6538                           ;main.c: 357: if(zeljena_vlaznost > 99) zeljena_vlaznost = 99;
  6539  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  6540  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  6541  09C1  30C6               	movlw	198
  6542  09C2  01CE               	clrf	___ftge@ff1
  6543  09C3  00CF               	movwf	___ftge@ff1+1
  6544  09C4  3042               	movlw	66
  6545  09C5  00D0               	movwf	___ftge@ff1+2
  6546  09C6  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6547  09C7  264B               	fcall	___eetoft
  6548  09C8  0876               	movf	?___eetoft,w
  6549  09C9  00D1               	movwf	___ftge@ff2
  6550  09CA  0877               	movf	?___eetoft+1,w
  6551  09CB  00D2               	movwf	___ftge@ff2+1
  6552  09CC  0878               	movf	?___eetoft+2,w
  6553  09CD  00D3               	movwf	___ftge@ff2+2
  6554  09CE  120A  118A  248C  120A  158A  	fcall	___ftge
  6555  09D3  1803               	btfsc	3,0
  6556  09D4  29DE               	goto	l5708
  6557  09D5  30C6               	movlw	198
  6558  09D6  01CE               	clrf	___fttoee@data
  6559  09D7  00CF               	movwf	___fttoee@data+1
  6560  09D8  3042               	movlw	66
  6561  09D9  00D0               	movwf	___fttoee@data+2
  6562  09DA  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6563  09DB  26C6  120A  158A   	fcall	___fttoee
  6564  09DE                     l5708:	
  6565  09DE  3062               	movlw	low (STR_2| (0+32768))
  6566                           
  6567                           ;main.c: 358: plus_flag = 0;
  6568  09DF  01FB               	clrf	_plus_flag
  6569                           
  6570                           ;main.c: 360: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6571  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  6572  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  6573  09E2  00D4               	movwf	sprintf@f
  6574  09E3  3099               	movlw	high (STR_2| (0+32768))
  6575  09E4  00D5               	movwf	sprintf@f+1
  6576  09E5  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6577  09E6  264B               	fcall	___eetoft
  6578  09E7  0876               	movf	?___eetoft,w
  6579  09E8  00D6               	movwf	?_sprintf+2
  6580  09E9  0877               	movf	?___eetoft+1,w
  6581  09EA  00D7               	movwf	?_sprintf+3
  6582  09EB  0878               	movf	?___eetoft+2,w
  6583  09EC  00D8               	movwf	?_sprintf+4
  6584  09ED  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6585  09EE  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6586  09F3  3002               	movlw	2
  6587                           
  6588                           ;main.c: 361: LcdSetCursor(2,1);
  6589  09F4  01F6               	clrf	LcdSetCursor@b
  6590  09F5  0AF6               	incf	LcdSetCursor@b,f
  6591  09F6  2685  120A  158A   	fcall	_LcdSetCursor
  6592                           
  6593                           ;main.c: 362: LcdWriteString(humidity);
  6594  09F9  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6595  09FA  00F7               	movwf	LcdWriteString@a
  6596  09FB  01F8               	clrf	LcdWriteString@a+1
  6597  09FC  26AE  120A  158A   	fcall	_LcdWriteString
  6598  09FF                     l5716:	
  6599                           
  6600                           ;main.c: 363: }
  6601                           ;main.c: 365: if(minus_flag)
  6602  09FF  087A               	movf	_minus_flag,w
  6603  0A00  1903               	btfsc	3,2
  6604  0A01  2A5E               	goto	l5730
  6605                           
  6606                           ;main.c: 366: {
  6607                           ;main.c: 367: zeljena_vlaznost -= 1;
  6608  0A02  1283               	bcf	3,5	;RP0=0, select bank0
  6609  0A03  1303               	bcf	3,6	;RP1=0, select bank0
  6610  0A04  3080               	movlw	128
  6611  0A05  01C2               	clrf	___ftadd@f1
  6612  0A06  00C3               	movwf	___ftadd@f1+1
  6613  0A07  30BF               	movlw	191
  6614  0A08  00C4               	movwf	___ftadd@f1+2
  6615  0A09  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6616  0A0A  264B               	fcall	___eetoft
  6617  0A0B  0876               	movf	?___eetoft,w
  6618  0A0C  00C5               	movwf	___ftadd@f2
  6619  0A0D  0877               	movf	?___eetoft+1,w
  6620  0A0E  00C6               	movwf	___ftadd@f2+1
  6621  0A0F  0878               	movf	?___eetoft+2,w
  6622  0A10  00C7               	movwf	___ftadd@f2+2
  6623  0A11  120A  118A  25BC  120A  158A  	fcall	___ftadd
  6624  0A16  0842               	movf	?___ftadd,w
  6625  0A17  00CE               	movwf	___fttoee@data
  6626  0A18  0843               	movf	?___ftadd+1,w
  6627  0A19  00CF               	movwf	___fttoee@data+1
  6628  0A1A  0844               	movf	?___ftadd+2,w
  6629  0A1B  00D0               	movwf	___fttoee@data+2
  6630  0A1C  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6631  0A1D  26C6  120A  158A   	fcall	___fttoee
  6632                           
  6633                           ;main.c: 368: if(zeljena_vlaznost < 30) zeljena_vlaznost = 30;
  6634  0A20  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6635  0A21  264B               	fcall	___eetoft
  6636  0A22  0876               	movf	?___eetoft,w
  6637  0A23  00CE               	movwf	___ftge@ff1
  6638  0A24  0877               	movf	?___eetoft+1,w
  6639  0A25  00CF               	movwf	___ftge@ff1+1
  6640  0A26  0878               	movf	?___eetoft+2,w
  6641  0A27  00D0               	movwf	___ftge@ff1+2
  6642  0A28  30F0               	movlw	240
  6643  0A29  01D1               	clrf	___ftge@ff2
  6644  0A2A  00D2               	movwf	___ftge@ff2+1
  6645  0A2B  3041               	movlw	65
  6646  0A2C  00D3               	movwf	___ftge@ff2+2
  6647  0A2D  120A  118A  248C  120A  158A  	fcall	___ftge
  6648  0A32  1803               	btfsc	3,0
  6649  0A33  2A3D               	goto	l5722
  6650  0A34  30F0               	movlw	240
  6651  0A35  01CE               	clrf	___fttoee@data
  6652  0A36  00CF               	movwf	___fttoee@data+1
  6653  0A37  3041               	movlw	65
  6654  0A38  00D0               	movwf	___fttoee@data+2
  6655  0A39  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6656  0A3A  26C6  120A  158A   	fcall	___fttoee
  6657  0A3D                     l5722:	
  6658  0A3D  3062               	movlw	low (STR_2| (0+32768))
  6659                           
  6660                           ;main.c: 369: minus_flag = 0;
  6661  0A3E  01FA               	clrf	_minus_flag
  6662                           
  6663                           ;main.c: 371: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6664  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  6665  0A40  1303               	bcf	3,6	;RP1=0, select bank0
  6666  0A41  00D4               	movwf	sprintf@f
  6667  0A42  3099               	movlw	high (STR_2| (0+32768))
  6668  0A43  00D5               	movwf	sprintf@f+1
  6669  0A44  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6670  0A45  264B               	fcall	___eetoft
  6671  0A46  0876               	movf	?___eetoft,w
  6672  0A47  00D6               	movwf	?_sprintf+2
  6673  0A48  0877               	movf	?___eetoft+1,w
  6674  0A49  00D7               	movwf	?_sprintf+3
  6675  0A4A  0878               	movf	?___eetoft+2,w
  6676  0A4B  00D8               	movwf	?_sprintf+4
  6677  0A4C  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6678  0A4D  120A  118A  20A7  120A  158A  	fcall	_sprintf
  6679  0A52  3002               	movlw	2
  6680                           
  6681                           ;main.c: 372: LcdSetCursor(2,1);
  6682  0A53  01F6               	clrf	LcdSetCursor@b
  6683  0A54  0AF6               	incf	LcdSetCursor@b,f
  6684  0A55  2685  120A  158A   	fcall	_LcdSetCursor
  6685                           
  6686                           ;main.c: 373: LcdWriteString(humidity);
  6687  0A58  30B2               	movlw	(low (_humidity| 0))& (0+255)
  6688  0A59  00F7               	movwf	LcdWriteString@a
  6689  0A5A  01F8               	clrf	LcdWriteString@a+1
  6690  0A5B  26AE  120A  158A   	fcall	_LcdWriteString
  6691  0A5E                     l5730:	
  6692                           
  6693                           ;main.c: 374: }
  6694                           ;main.c: 376: if(ok_flag)
  6695  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  6696  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  6697  0A60  086E               	movf	_ok_flag,w
  6698  0A61  1903               	btfsc	3,2
  6699  0A62  2997               	goto	l5738
  6700                           
  6701                           ;main.c: 377: {
  6702                           ;main.c: 378: ok_flag = 0;
  6703  0A63  01EE               	clrf	_ok_flag
  6704                           
  6705                           ;main.c: 379: ok_flag_humi = 1;
  6706  0A64  1683               	bsf	3,5	;RP0=1, select bank1
  6707  0A65  01B1               	clrf	_ok_flag_humi^(0+128)
  6708  0A66  0AB1               	incf	_ok_flag_humi^(0+128),f
  6709                           
  6710                           ;main.c: 380: menuCO2();
  6711  0A67  22C7  120A  158A   	fcall	_menuCO2
  6712  0A6A  2997               	goto	l5738
  6713  0A6B                     __end_of_menuHumi:	
  6714  0A6B                     __ptext6:	
  6715 ;; *************** function _manage_buttons *****************
  6716 ;; Defined at:
  6717 ;;		line 274 in file "main.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;		None
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;		None
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg
  6726 ;; Tracked objects:
  6727 ;;		On entry : 200/100
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6731 ;;      Params:         0       0       0       0       0
  6732 ;;      Locals:         0       0       0       0       0
  6733 ;;      Temps:          3       0       0       0       0
  6734 ;;      Totals:         3       0       0       0       0
  6735 ;;Total ram usage:        3 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    1
  6738 ;; This function calls:
  6739 ;;		Nothing
  6740 ;; This function is called by:
  6741 ;;		_menuCO2
  6742 ;;		_menuHumi
  6743 ;;		_menu
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _manage_buttons
  6749  0A6B                     _manage_buttons:	
  6750                           
  6751                           ;main.c: 276: if(RA2)
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _manage_buttons: [wreg]
  6755  0A6B  1283               	bcf	3,5	;RP0=0, select bank0
  6756  0A6C  1D05               	btfss	5,2	;volatile
  6757  0A6D  2A89               	goto	l3480
  6758                           
  6759                           ;main.c: 277: {
  6760                           ;main.c: 278: _delay((unsigned long)((20)*(8000000/4000.0)));
  6761  0A6E  3034               	movlw	52
  6762  0A6F  00F3               	movwf	??_manage_buttons+1
  6763  0A70  30F1               	movlw	241
  6764  0A71  00F2               	movwf	??_manage_buttons
  6765  0A72                     u6907:	
  6766  0A72  0BF2               	decfsz	??_manage_buttons,f
  6767  0A73  2A72               	goto	u6907
  6768  0A74  0BF3               	decfsz	??_manage_buttons+1,f
  6769  0A75  2A72               	goto	u6907
  6770  0A76  2A77               	nop2
  6771                           
  6772                           ;main.c: 279: if(RA2) plus_flag = 1;
  6773  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  6774  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  6775  0A79  1D05               	btfss	5,2	;volatile
  6776  0A7A  2A7D               	goto	l3478
  6777  0A7B  01FB               	clrf	_plus_flag
  6778  0A7C  0AFB               	incf	_plus_flag,f
  6779  0A7D                     l3478:	
  6780                           
  6781                           ;main.c: 280: _delay((unsigned long)((150)*(8000000/4000.0)));
  6782  0A7D  3002               	movlw	2
  6783  0A7E  00F4               	movwf	??_manage_buttons+2
  6784  0A7F  3086               	movlw	134
  6785  0A80  00F3               	movwf	??_manage_buttons+1
  6786  0A81  3099               	movlw	153
  6787  0A82  00F2               	movwf	??_manage_buttons
  6788  0A83                     u6917:	
  6789  0A83  0BF2               	decfsz	??_manage_buttons,f
  6790  0A84  2A83               	goto	u6917
  6791  0A85  0BF3               	decfsz	??_manage_buttons+1,f
  6792  0A86  2A83               	goto	u6917
  6793  0A87  0BF4               	decfsz	??_manage_buttons+2,f
  6794  0A88  2A83               	goto	u6917
  6795  0A89                     l3480:	
  6796                           
  6797                           ;main.c: 281: }
  6798                           ;main.c: 283: if(RA3)
  6799  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  6800  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  6801  0A8B  1D85               	btfss	5,3	;volatile
  6802  0A8C  2AA8               	goto	l3490
  6803                           
  6804                           ;main.c: 284: {
  6805                           ;main.c: 285: _delay((unsigned long)((20)*(8000000/4000.0)));
  6806  0A8D  3034               	movlw	52
  6807  0A8E  00F3               	movwf	??_manage_buttons+1
  6808  0A8F  30F1               	movlw	241
  6809  0A90  00F2               	movwf	??_manage_buttons
  6810  0A91                     u6927:	
  6811  0A91  0BF2               	decfsz	??_manage_buttons,f
  6812  0A92  2A91               	goto	u6927
  6813  0A93  0BF3               	decfsz	??_manage_buttons+1,f
  6814  0A94  2A91               	goto	u6927
  6815  0A95  2A96               	nop2
  6816                           
  6817                           ;main.c: 286: if(RA3) minus_flag = 1;
  6818  0A96  1283               	bcf	3,5	;RP0=0, select bank0
  6819  0A97  1303               	bcf	3,6	;RP1=0, select bank0
  6820  0A98  1D85               	btfss	5,3	;volatile
  6821  0A99  2A9C               	goto	l3488
  6822  0A9A  01FA               	clrf	_minus_flag
  6823  0A9B  0AFA               	incf	_minus_flag,f
  6824  0A9C                     l3488:	
  6825                           
  6826                           ;main.c: 287: _delay((unsigned long)((150)*(8000000/4000.0)));
  6827  0A9C  3002               	movlw	2
  6828  0A9D  00F4               	movwf	??_manage_buttons+2
  6829  0A9E  3086               	movlw	134
  6830  0A9F  00F3               	movwf	??_manage_buttons+1
  6831  0AA0  3099               	movlw	153
  6832  0AA1  00F2               	movwf	??_manage_buttons
  6833  0AA2                     u6937:	
  6834  0AA2  0BF2               	decfsz	??_manage_buttons,f
  6835  0AA3  2AA2               	goto	u6937
  6836  0AA4  0BF3               	decfsz	??_manage_buttons+1,f
  6837  0AA5  2AA2               	goto	u6937
  6838  0AA6  0BF4               	decfsz	??_manage_buttons+2,f
  6839  0AA7  2AA2               	goto	u6937
  6840  0AA8                     l3490:	
  6841                           
  6842                           ;main.c: 288: }
  6843                           ;main.c: 290: if(RA1)
  6844  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  6845  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  6846  0AAA  1C85               	btfss	5,1	;volatile
  6847  0AAB  0008               	return
  6848                           
  6849                           ;main.c: 291: {
  6850                           ;main.c: 292: _delay((unsigned long)((20)*(8000000/4000.0)));
  6851  0AAC  3034               	movlw	52
  6852  0AAD  00F3               	movwf	??_manage_buttons+1
  6853  0AAE  30F1               	movlw	241
  6854  0AAF  00F2               	movwf	??_manage_buttons
  6855  0AB0                     u6947:	
  6856  0AB0  0BF2               	decfsz	??_manage_buttons,f
  6857  0AB1  2AB0               	goto	u6947
  6858  0AB2  0BF3               	decfsz	??_manage_buttons+1,f
  6859  0AB3  2AB0               	goto	u6947
  6860  0AB4  2AB5               	nop2
  6861                           
  6862                           ;main.c: 293: if(RA1) ok_flag = 1;
  6863  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  6864  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  6865  0AB7  1C85               	btfss	5,1	;volatile
  6866  0AB8  2ABB               	goto	l397
  6867  0AB9  01EE               	clrf	_ok_flag
  6868  0ABA  0AEE               	incf	_ok_flag,f
  6869  0ABB                     l397:	
  6870  0ABB  1885               	btfsc	5,1	;volatile
  6871  0ABC  2ABB               	goto	l397
  6872                           
  6873                           ;main.c: 295: _delay((unsigned long)((20)*(8000000/4000.0)));
  6874  0ABD  3034               	movlw	52
  6875  0ABE  00F3               	movwf	??_manage_buttons+1
  6876  0ABF  30F1               	movlw	241
  6877  0AC0  00F2               	movwf	??_manage_buttons
  6878  0AC1                     u6957:	
  6879  0AC1  0BF2               	decfsz	??_manage_buttons,f
  6880  0AC2  2AC1               	goto	u6957
  6881  0AC3  0BF3               	decfsz	??_manage_buttons+1,f
  6882  0AC4  2AC1               	goto	u6957
  6883  0AC5  2AC6               	nop2
  6884  0AC6  0008               	return
  6885  0AC7                     __end_of_manage_buttons:	
  6886  0AC7                     __ptext5:	
  6887 ;; *************** function _menuCO2 *****************
  6888 ;; Defined at:
  6889 ;;		line 299 in file "main.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;		None               void
  6896 ;; Registers used:
  6897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 300/100
  6900 ;;		On exit  : 300/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6903 ;;      Params:         0       0       0       0       0
  6904 ;;      Locals:         0       0       0       0       0
  6905 ;;      Temps:          0       0       0       0       0
  6906 ;;      Totals:         0       0       0       0       0
  6907 ;;Total ram usage:        0 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    5
  6910 ;; This function calls:
  6911 ;;		_LcdSetCursor
  6912 ;;		_LcdWriteInt
  6913 ;;		_LcdWriteString
  6914 ;;		___eetoi
  6915 ;;		___itoee
  6916 ;;		_manage_buttons
  6917 ;; This function is called by:
  6918 ;;		_menuHumi
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _menuCO2
  6924  0AC7                     _menuCO2:	
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in _menuCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6928  0AC7  3001               	movlw	1
  6929                           
  6930                           ;main.c: 300: LcdSetCursor(1,1);
  6931  0AC8  01F6               	clrf	LcdSetCursor@b
  6932  0AC9  0AF6               	incf	LcdSetCursor@b,f
  6933  0ACA  2685  120A  158A   	fcall	_LcdSetCursor
  6934                           
  6935                           ;main.c: 301: LcdWriteString((char *)"Set CO2 in air  ");
  6936  0ACD  30DD               	movlw	low (STR_14| (0+32768))
  6937  0ACE  00F7               	movwf	LcdWriteString@a
  6938  0ACF  3098               	movlw	high (STR_14| (0+32768))
  6939  0AD0  00F8               	movwf	LcdWriteString@a+1
  6940  0AD1  26AE  120A  158A   	fcall	_LcdWriteString
  6941  0AD4  3002               	movlw	2
  6942                           
  6943                           ;main.c: 302: LcdSetCursor(2,1);
  6944  0AD5  01F6               	clrf	LcdSetCursor@b
  6945  0AD6  0AF6               	incf	LcdSetCursor@b,f
  6946  0AD7  2685  120A  158A   	fcall	_LcdSetCursor
  6947                           
  6948                           ;main.c: 303: LcdWriteString((char *)"          ");
  6949  0ADA  3020               	movlw	low ((STR_7+2)| (0+32768))
  6950  0ADB  00F7               	movwf	LcdWriteString@a
  6951  0ADC  3099               	movlw	high ((STR_7+2)| (0+32768))
  6952  0ADD  00F8               	movwf	LcdWriteString@a+1
  6953  0ADE  26AE  120A  158A   	fcall	_LcdWriteString
  6954  0AE1  3002               	movlw	2
  6955                           
  6956                           ;main.c: 304: LcdSetCursor(2,1);
  6957  0AE2  01F6               	clrf	LcdSetCursor@b
  6958  0AE3  0AF6               	incf	LcdSetCursor@b,f
  6959  0AE4  2685  120A  158A   	fcall	_LcdSetCursor
  6960                           
  6961                           ;main.c: 305: LcdWriteInt(zeljena_co2,2,1);
  6962  0AE7  3006               	movlw	(low _zeljena_co2)& (0+255)
  6963  0AE8  265B  120A  158A   	fcall	___eetoi
  6964  0AEB  0877               	movf	?___eetoi+1,w
  6965  0AEC  00A5               	movwf	LcdWriteInt@i+1
  6966  0AED  0876               	movf	?___eetoi,w
  6967  0AEE  00A4               	movwf	LcdWriteInt@i
  6968  0AEF  3002               	movlw	2
  6969  0AF0  00A6               	movwf	LcdWriteInt@row
  6970  0AF1  01A7               	clrf	LcdWriteInt@column
  6971  0AF2  0AA7               	incf	LcdWriteInt@column,f
  6972  0AF3  23A0  120A  158A   	fcall	_LcdWriteInt
  6973                           
  6974                           ;main.c: 306: LcdSetCursor(2,6);
  6975  0AF6  3006               	movlw	6
  6976  0AF7  00F6               	movwf	LcdSetCursor@b
  6977  0AF8  3002               	movlw	2
  6978  0AF9  2685  120A  158A   	fcall	_LcdSetCursor
  6979                           
  6980                           ;main.c: 307: LcdWriteString((char *)"        ");
  6981  0AFC  3022               	movlw	low ((STR_7+4)| (0+32768))
  6982  0AFD  00F7               	movwf	LcdWriteString@a
  6983  0AFE  3099               	movlw	high ((STR_7+4)| (0+32768))
  6984  0AFF  00F8               	movwf	LcdWriteString@a+1
  6985  0B00  26AE  120A  158A   	fcall	_LcdWriteString
  6986  0B03                     l5646:	
  6987                           ;main.c: 308: while(!ok_flag)
  6988                           
  6989  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  6990  0B04  086E               	movf	_ok_flag,w
  6991  0B05  1D03               	btfss	3,2
  6992  0B06  0008               	return
  6993                           
  6994                           ;main.c: 309: {
  6995                           ;main.c: 310: manage_buttons();
  6996  0B07  226B  120A  158A   	fcall	_manage_buttons
  6997                           
  6998                           ;main.c: 312: if(plus_flag)
  6999  0B0A  087B               	movf	_plus_flag,w
  7000  0B0B  1903               	btfsc	3,2
  7001  0B0C  2B4C               	goto	l5628
  7002                           
  7003                           ;main.c: 313: {
  7004                           ;main.c: 314: zeljena_co2 += 100;
  7005  0B0D  3006               	movlw	(low _zeljena_co2)& (0+255)
  7006  0B0E  265B  120A  158A   	fcall	___eetoi
  7007  0B11  0876               	movf	?___eetoi,w
  7008  0B12  3E64               	addlw	100
  7009  0B13  00A3               	movwf	___itoee@data
  7010  0B14  0877               	movf	?___eetoi+1,w
  7011  0B15  1803               	skipnc
  7012  0B16  3E01               	addlw	1
  7013  0B17  3E00               	addlw	0
  7014  0B18  00A4               	movwf	___itoee@data+1
  7015  0B19  3006               	movlw	(low _zeljena_co2)& (0+255)
  7016  0B1A  2399  120A  158A   	fcall	___itoee
  7017                           
  7018                           ;main.c: 315: if(zeljena_co2 > 5000) zeljena_co2 = 5000;
  7019  0B1D  3006               	movlw	(low _zeljena_co2)& (0+255)
  7020  0B1E  265B  120A  158A   	fcall	___eetoi
  7021  0B21  0877               	movf	?___eetoi+1,w
  7022  0B22  3A80               	xorlw	128
  7023  0B23  00FF               	movwf	127
  7024  0B24  3093               	movlw	147
  7025  0B25  027F               	subwf	127,w
  7026  0B26  1D03               	skipz
  7027  0B27  2B2A               	goto	u6425
  7028  0B28  3089               	movlw	137
  7029  0B29  0276               	subwf	?___eetoi,w
  7030  0B2A                     u6425:	
  7031  0B2A  1C03               	skipc
  7032  0B2B  2B36               	goto	l5622
  7033  0B2C  3088               	movlw	136
  7034  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  7035  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  7036  0B2F  00A3               	movwf	___itoee@data
  7037  0B30  3013               	movlw	19
  7038  0B31  00A4               	movwf	___itoee@data+1
  7039  0B32  3006               	movlw	(low _zeljena_co2)& (0+255)
  7040  0B33  2399  120A  158A   	fcall	___itoee
  7041  0B36                     l5622:	
  7042  0B36  3002               	movlw	2
  7043                           
  7044                           ;main.c: 316: plus_flag = 0;
  7045  0B37  01FB               	clrf	_plus_flag
  7046  0B38  01F6               	clrf	LcdSetCursor@b
  7047  0B39  0AF6               	incf	LcdSetCursor@b,f
  7048  0B3A  2685  120A  158A   	fcall	_LcdSetCursor
  7049                           
  7050                           ;main.c: 319: LcdWriteInt(zeljena_co2,2,1);
  7051  0B3D  3006               	movlw	(low _zeljena_co2)& (0+255)
  7052  0B3E  265B  120A  158A   	fcall	___eetoi
  7053  0B41  0877               	movf	?___eetoi+1,w
  7054  0B42  00A5               	movwf	LcdWriteInt@i+1
  7055  0B43  0876               	movf	?___eetoi,w
  7056  0B44  00A4               	movwf	LcdWriteInt@i
  7057  0B45  3002               	movlw	2
  7058  0B46  00A6               	movwf	LcdWriteInt@row
  7059  0B47  01A7               	clrf	LcdWriteInt@column
  7060  0B48  0AA7               	incf	LcdWriteInt@column,f
  7061  0B49  23A0  120A  158A   	fcall	_LcdWriteInt
  7062  0B4C                     l5628:	
  7063                           
  7064                           ;main.c: 320: }
  7065                           ;main.c: 322: if(minus_flag)
  7066  0B4C  087A               	movf	_minus_flag,w
  7067  0B4D  1903               	btfsc	3,2
  7068  0B4E  2B8E               	goto	l5642
  7069                           
  7070                           ;main.c: 323: {
  7071                           ;main.c: 324: zeljena_co2 -= 100;
  7072  0B4F  3006               	movlw	(low _zeljena_co2)& (0+255)
  7073  0B50  265B  120A  158A   	fcall	___eetoi
  7074  0B53  0876               	movf	?___eetoi,w
  7075  0B54  3E9C               	addlw	156
  7076  0B55  00A3               	movwf	___itoee@data
  7077  0B56  0877               	movf	?___eetoi+1,w
  7078  0B57  1803               	skipnc
  7079  0B58  3E01               	addlw	1
  7080  0B59  3EFF               	addlw	255
  7081  0B5A  00A4               	movwf	___itoee@data+1
  7082  0B5B  3006               	movlw	(low _zeljena_co2)& (0+255)
  7083  0B5C  2399  120A  158A   	fcall	___itoee
  7084                           
  7085                           ;main.c: 325: if(zeljena_co2 < 300) zeljena_co2 = 300;
  7086  0B5F  3006               	movlw	(low _zeljena_co2)& (0+255)
  7087  0B60  265B  120A  158A   	fcall	___eetoi
  7088  0B63  0877               	movf	?___eetoi+1,w
  7089  0B64  3A80               	xorlw	128
  7090  0B65  00FF               	movwf	127
  7091  0B66  3081               	movlw	129
  7092  0B67  027F               	subwf	127,w
  7093  0B68  1D03               	skipz
  7094  0B69  2B6C               	goto	u6445
  7095  0B6A  302C               	movlw	44
  7096  0B6B  0276               	subwf	?___eetoi,w
  7097  0B6C                     u6445:	
  7098  0B6C  1803               	skipnc
  7099  0B6D  2B78               	goto	l5636
  7100  0B6E  302C               	movlw	44
  7101  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  7102  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  7103  0B71  00A3               	movwf	___itoee@data
  7104  0B72  3001               	movlw	1
  7105  0B73  00A4               	movwf	___itoee@data+1
  7106  0B74  3006               	movlw	(low _zeljena_co2)& (0+255)
  7107  0B75  2399  120A  158A   	fcall	___itoee
  7108  0B78                     l5636:	
  7109  0B78  3002               	movlw	2
  7110                           
  7111                           ;main.c: 326: minus_flag = 0;
  7112  0B79  01FA               	clrf	_minus_flag
  7113  0B7A  01F6               	clrf	LcdSetCursor@b
  7114  0B7B  0AF6               	incf	LcdSetCursor@b,f
  7115  0B7C  2685  120A  158A   	fcall	_LcdSetCursor
  7116                           
  7117                           ;main.c: 329: LcdWriteInt(zeljena_co2,2,1);
  7118  0B7F  3006               	movlw	(low _zeljena_co2)& (0+255)
  7119  0B80  265B  120A  158A   	fcall	___eetoi
  7120  0B83  0877               	movf	?___eetoi+1,w
  7121  0B84  00A5               	movwf	LcdWriteInt@i+1
  7122  0B85  0876               	movf	?___eetoi,w
  7123  0B86  00A4               	movwf	LcdWriteInt@i
  7124  0B87  3002               	movlw	2
  7125  0B88  00A6               	movwf	LcdWriteInt@row
  7126  0B89  01A7               	clrf	LcdWriteInt@column
  7127  0B8A  0AA7               	incf	LcdWriteInt@column,f
  7128  0B8B  23A0  120A  158A   	fcall	_LcdWriteInt
  7129  0B8E                     l5642:	
  7130                           
  7131                           ;main.c: 331: }
  7132                           ;main.c: 333: if(ok_flag)
  7133  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  7134  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  7135  0B90  086E               	movf	_ok_flag,w
  7136  0B91  1903               	btfsc	3,2
  7137  0B92  2B03               	goto	l5646
  7138                           
  7139                           ;main.c: 334: {
  7140                           ;main.c: 335: ok_flag = 1;
  7141  0B93  01EE               	clrf	_ok_flag
  7142  0B94  0AEE               	incf	_ok_flag,f
  7143                           
  7144                           ;main.c: 336: ok_flag_co2 = 1;
  7145  0B95  1683               	bsf	3,5	;RP0=1, select bank1
  7146  0B96  01B0               	clrf	_ok_flag_co2^(0+128)
  7147  0B97  0AB0               	incf	_ok_flag_co2^(0+128),f
  7148  0B98  2B03               	goto	l5646
  7149  0B99                     __end_of_menuCO2:	
  7150  0B99                     __ptext7:	
  7151 ;; *************** function ___itoee *****************
  7152 ;; Defined at:
  7153 ;;		line 87 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  addr            1    wreg     PTR eeprom void 
  7156 ;;		 -> zeljena_co2(2), 
  7157 ;;  data            2    3[BANK0 ] unsigned int 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  addr            1    9[COMMON] PTR eeprom void 
  7160 ;;		 -> zeljena_co2(2), 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  2    3[BANK0 ] unsigned int 
  7163 ;; Registers used:
  7164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 300/0
  7167 ;;		On exit  : 300/300
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7170 ;;      Params:         0       2       0       0       0
  7171 ;;      Locals:         1       0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0
  7173 ;;      Totals:         1       2       0       0       0
  7174 ;;Total ram usage:        3 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    2
  7177 ;; This function calls:
  7178 ;;		_memcpyee
  7179 ;; This function is called by:
  7180 ;;		_menuCO2
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function ___itoee
  7186  0B99                     ___itoee:	
  7187                           
  7188                           ;incstack = 0
  7189                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7190                           ;___itoee@addr stored from wreg
  7191  0B99  00F9               	movwf	___itoee@addr
  7192  0B9A  3023               	movlw	(low (___itoee@data| 0))& (0+255)
  7193  0B9B  00F2               	movwf	memcpyee@from
  7194  0B9C  3002               	movlw	2
  7195  0B9D  00F3               	movwf	memcpyee@size
  7196  0B9E  0879               	movf	___itoee@addr,w
  7197  0B9F  2F95               	ljmp	_memcpyee
  7198  0BA0                     __end_of___itoee:	
  7199  0BA0                     __ptext34:	
  7200 ;; *************** function _LcdWriteInt *****************
  7201 ;; Defined at:
  7202 ;;		line 125 in file "lcd.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  i               2    4[BANK0 ] unsigned int 
  7205 ;;  row             1    6[BANK0 ] unsigned char 
  7206 ;;  column          1    7[BANK0 ] unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  ch              1   10[BANK0 ] unsigned char 
  7209 ;;  ch_manje_100    1    9[BANK0 ] unsigned char 
  7210 ;;  ch_manje_100    1    8[BANK0 ] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;		None               void
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0, pclath, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 300/0
  7217 ;;		On exit  : 300/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7220 ;;      Params:         0       4       0       0       0
  7221 ;;      Locals:         0       3       0       0       0
  7222 ;;      Temps:          0       0       0       0       0
  7223 ;;      Totals:         0       7       0       0       0
  7224 ;;Total ram usage:        7 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    4
  7227 ;; This function calls:
  7228 ;;		_LcdSetCursor
  7229 ;;		_LcdWriteChar
  7230 ;;		___lwdiv
  7231 ;;		___wmul
  7232 ;; This function is called by:
  7233 ;;		_displayCO2
  7234 ;;		_menuCO2
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _LcdWriteInt
  7240  0BA0                     _LcdWriteInt:	
  7241  0BA0  30E8               	movlw	232
  7242                           
  7243                           ;lcd.c: 126: unsigned char ch, ch_manje_1000=0, ch_manje_100=0;
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in _LcdWriteInt: [wreg+status,2+status,0+pclath+cstack]
  7247  0BA1  01A9               	clrf	LcdWriteInt@ch_manje_1000
  7248  0BA2  01A8               	clrf	LcdWriteInt@ch_manje_100
  7249                           
  7250                           ;lcd.c: 128: ch = i/1000;
  7251  0BA3  00F2               	movwf	___lwdiv@divisor
  7252  0BA4  3003               	movlw	3
  7253  0BA5  00F3               	movwf	___lwdiv@divisor+1
  7254  0BA6  0825               	movf	LcdWriteInt@i+1,w
  7255  0BA7  00F5               	movwf	___lwdiv@dividend+1
  7256  0BA8  0824               	movf	LcdWriteInt@i,w
  7257  0BA9  00F4               	movwf	___lwdiv@dividend
  7258  0BAA  26F2  120A  158A   	fcall	___lwdiv
  7259  0BAD  0872               	movf	?___lwdiv,w
  7260  0BAE  00AA               	movwf	LcdWriteInt@ch
  7261                           
  7262                           ;lcd.c: 129: if(ch == 0)
  7263  0BAF  082A               	movf	LcdWriteInt@ch,w
  7264  0BB0  1D03               	btfss	3,2
  7265  0BB1  2BBC               	goto	l5200
  7266                           
  7267                           ;lcd.c: 130: {
  7268                           ;lcd.c: 131: ch_manje_1000 = 1;
  7269  0BB2  01A9               	clrf	LcdWriteInt@ch_manje_1000
  7270  0BB3  0AA9               	incf	LcdWriteInt@ch_manje_1000,f
  7271                           
  7272                           ;lcd.c: 132: LcdSetCursor(row,column);
  7273  0BB4  0827               	movf	LcdWriteInt@column,w
  7274  0BB5  00F6               	movwf	LcdSetCursor@b
  7275  0BB6  0826               	movf	LcdWriteInt@row,w
  7276  0BB7  2685  120A  158A   	fcall	_LcdSetCursor
  7277                           
  7278                           ;lcd.c: 133: LcdWriteChar(' ');
  7279  0BBA  3020               	movlw	32
  7280  0BBB  2BC4               	goto	L4
  7281  0BBC                     l5200:	
  7282                           ;lcd.c: 134: }
  7283                           
  7284  0BBC  3002               	movlw	2
  7285                           
  7286                           ;lcd.c: 135: else
  7287                           ;lcd.c: 136: {
  7288                           ;lcd.c: 137: LcdSetCursor(2,1);
  7289  0BBD  01F6               	clrf	LcdSetCursor@b
  7290  0BBE  0AF6               	incf	LcdSetCursor@b,f
  7291  0BBF  2685  120A  158A   	fcall	_LcdSetCursor
  7292                           
  7293                           ;lcd.c: 138: LcdWriteChar(ch+'0');
  7294  0BC2  082A               	movf	LcdWriteInt@ch,w
  7295  0BC3  3E30               	addlw	48
  7296  0BC4                     L4:	
  7297  0BC4  26CD               	fcall	_LcdWriteChar
  7298                           
  7299                           ;lcd.c: 139: }
  7300                           ;lcd.c: 142: i = (i - ch*1000);
  7301  0BC5  082A               	movf	LcdWriteInt@ch,w
  7302  0BC6  00F2               	movwf	___wmul@multiplier
  7303  0BC7  30E8               	movlw	232
  7304  0BC8  01F3               	clrf	___wmul@multiplier+1
  7305  0BC9  00F4               	movwf	___wmul@multiplicand
  7306  0BCA  3003               	movlw	3
  7307  0BCB  00F5               	movwf	___wmul@multiplicand+1
  7308  0BCC  120A  118A  259B  120A  158A  	fcall	___wmul
  7309  0BD1  0872               	movf	?___wmul,w
  7310  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  7311  0BD3  02A4               	subwf	LcdWriteInt@i,f
  7312  0BD4  0873               	movf	?___wmul+1,w
  7313  0BD5  1C03               	skipc
  7314  0BD6  03A5               	decf	LcdWriteInt@i+1,f
  7315  0BD7  02A5               	subwf	LcdWriteInt@i+1,f
  7316                           
  7317                           ;lcd.c: 143: ch = i/100;
  7318  0BD8  3064               	movlw	100
  7319  0BD9  00F2               	movwf	___lwdiv@divisor
  7320  0BDA  01F3               	clrf	___lwdiv@divisor+1
  7321  0BDB  0825               	movf	LcdWriteInt@i+1,w
  7322  0BDC  00F5               	movwf	___lwdiv@dividend+1
  7323  0BDD  0824               	movf	LcdWriteInt@i,w
  7324  0BDE  00F4               	movwf	___lwdiv@dividend
  7325  0BDF  26F2  120A  158A   	fcall	___lwdiv
  7326  0BE2  0872               	movf	?___lwdiv,w
  7327  0BE3  00AA               	movwf	LcdWriteInt@ch
  7328                           
  7329                           ;lcd.c: 144: if((ch == 0) && (ch_manje_1000))
  7330  0BE4  082A               	movf	LcdWriteInt@ch,w
  7331  0BE5  1D03               	btfss	3,2
  7332  0BE6  2BF5               	goto	l5210
  7333  0BE7  0829               	movf	LcdWriteInt@ch_manje_1000,w
  7334  0BE8  1903               	btfsc	3,2
  7335  0BE9  2BF5               	goto	l5210
  7336                           
  7337                           ;lcd.c: 145: {
  7338                           ;lcd.c: 146: ch_manje_100 = 1;
  7339  0BEA  01A8               	clrf	LcdWriteInt@ch_manje_100
  7340  0BEB  0AA8               	incf	LcdWriteInt@ch_manje_100,f
  7341                           
  7342                           ;lcd.c: 147: LcdSetCursor(row,column+1);
  7343  0BEC  0827               	movf	LcdWriteInt@column,w
  7344  0BED  3E01               	addlw	1
  7345  0BEE  00F6               	movwf	LcdSetCursor@b
  7346  0BEF  0826               	movf	LcdWriteInt@row,w
  7347  0BF0  2685  120A  158A   	fcall	_LcdSetCursor
  7348                           
  7349                           ;lcd.c: 148: LcdWriteChar(' ');
  7350  0BF3  3020               	movlw	32
  7351  0BF4  2BFC               	goto	L5
  7352  0BF5                     l5210:	
  7353                           ;lcd.c: 149: }
  7354                           
  7355                           
  7356                           ;lcd.c: 150: else
  7357                           ;lcd.c: 151: {
  7358                           ;lcd.c: 152: LcdSetCursor(2,2);
  7359  0BF5  3002               	movlw	2
  7360  0BF6  00F6               	movwf	LcdSetCursor@b
  7361  0BF7  2685  120A  158A   	fcall	_LcdSetCursor
  7362                           
  7363                           ;lcd.c: 153: LcdWriteChar(ch+'0');
  7364  0BFA  082A               	movf	LcdWriteInt@ch,w
  7365  0BFB  3E30               	addlw	48
  7366  0BFC                     L5:	
  7367  0BFC  26CD               	fcall	_LcdWriteChar
  7368                           
  7369                           ;lcd.c: 154: }
  7370                           ;lcd.c: 157: i = (i - ch*100);
  7371  0BFD  082A               	movf	LcdWriteInt@ch,w
  7372  0BFE  00F2               	movwf	___wmul@multiplier
  7373  0BFF  3064               	movlw	100
  7374  0C00  01F3               	clrf	___wmul@multiplier+1
  7375  0C01  00F4               	movwf	___wmul@multiplicand
  7376  0C02  01F5               	clrf	___wmul@multiplicand+1
  7377  0C03  120A  118A  259B  120A  158A  	fcall	___wmul
  7378  0C08  0872               	movf	?___wmul,w
  7379  0C09  1283               	bcf	3,5	;RP0=0, select bank0
  7380  0C0A  02A4               	subwf	LcdWriteInt@i,f
  7381  0C0B  0873               	movf	?___wmul+1,w
  7382  0C0C  1C03               	skipc
  7383  0C0D  03A5               	decf	LcdWriteInt@i+1,f
  7384  0C0E  02A5               	subwf	LcdWriteInt@i+1,f
  7385                           
  7386                           ;lcd.c: 158: ch = i/10;
  7387  0C0F  300A               	movlw	10
  7388  0C10  00F2               	movwf	___lwdiv@divisor
  7389  0C11  01F3               	clrf	___lwdiv@divisor+1
  7390  0C12  0825               	movf	LcdWriteInt@i+1,w
  7391  0C13  00F5               	movwf	___lwdiv@dividend+1
  7392  0C14  0824               	movf	LcdWriteInt@i,w
  7393  0C15  00F4               	movwf	___lwdiv@dividend
  7394  0C16  26F2  120A  158A   	fcall	___lwdiv
  7395  0C19  0872               	movf	?___lwdiv,w
  7396  0C1A  00AA               	movwf	LcdWriteInt@ch
  7397                           
  7398                           ;lcd.c: 159: if((ch == 0) && (ch_manje_1000) && (ch_manje_100))
  7399  0C1B  082A               	movf	LcdWriteInt@ch,w
  7400  0C1C  1D03               	btfss	3,2
  7401  0C1D  2C2D               	goto	l5220
  7402  0C1E  0829               	movf	LcdWriteInt@ch_manje_1000,w
  7403  0C1F  1903               	btfsc	3,2
  7404  0C20  2C2D               	goto	l5220
  7405  0C21  0828               	movf	LcdWriteInt@ch_manje_100,w
  7406  0C22  1903               	btfsc	3,2
  7407  0C23  2C2D               	goto	l5220
  7408                           
  7409                           ;lcd.c: 160: {
  7410                           ;lcd.c: 161: LcdSetCursor(row,column+2);
  7411  0C24  0827               	movf	LcdWriteInt@column,w
  7412  0C25  3E02               	addlw	2
  7413  0C26  00F6               	movwf	LcdSetCursor@b
  7414  0C27  0826               	movf	LcdWriteInt@row,w
  7415  0C28  2685  120A  158A   	fcall	_LcdSetCursor
  7416                           
  7417                           ;lcd.c: 162: LcdWriteChar(' ');
  7418  0C2B  3020               	movlw	32
  7419  0C2C  2C35               	goto	L6
  7420  0C2D                     l5220:	
  7421                           ;lcd.c: 163: }
  7422                           
  7423                           
  7424                           ;lcd.c: 164: else
  7425                           ;lcd.c: 165: {
  7426                           ;lcd.c: 166: LcdSetCursor(2,3);
  7427  0C2D  3003               	movlw	3
  7428  0C2E  00F6               	movwf	LcdSetCursor@b
  7429  0C2F  3002               	movlw	2
  7430  0C30  2685  120A  158A   	fcall	_LcdSetCursor
  7431                           
  7432                           ;lcd.c: 167: LcdWriteChar(ch+'0');
  7433  0C33  082A               	movf	LcdWriteInt@ch,w
  7434  0C34  3E30               	addlw	48
  7435  0C35                     L6:	
  7436  0C35  26CD               	fcall	_LcdWriteChar
  7437                           
  7438                           ;lcd.c: 168: }
  7439                           ;lcd.c: 171: i = (i - ch*10);
  7440  0C36  082A               	movf	LcdWriteInt@ch,w
  7441  0C37  00F2               	movwf	___wmul@multiplier
  7442  0C38  300A               	movlw	10
  7443  0C39  01F3               	clrf	___wmul@multiplier+1
  7444  0C3A  00F4               	movwf	___wmul@multiplicand
  7445  0C3B  01F5               	clrf	___wmul@multiplicand+1
  7446  0C3C  120A  118A  259B  120A  158A  	fcall	___wmul
  7447  0C41  0872               	movf	?___wmul,w
  7448  0C42  1283               	bcf	3,5	;RP0=0, select bank0
  7449  0C43  02A4               	subwf	LcdWriteInt@i,f
  7450  0C44  0873               	movf	?___wmul+1,w
  7451  0C45  1C03               	skipc
  7452  0C46  03A5               	decf	LcdWriteInt@i+1,f
  7453  0C47  02A5               	subwf	LcdWriteInt@i+1,f
  7454                           
  7455                           ;lcd.c: 172: ch = i;
  7456  0C48  0824               	movf	LcdWriteInt@i,w
  7457  0C49  00AA               	movwf	LcdWriteInt@ch
  7458                           
  7459                           ;lcd.c: 173: LcdSetCursor(row,column+3);
  7460  0C4A  0827               	movf	LcdWriteInt@column,w
  7461  0C4B  3E03               	addlw	3
  7462  0C4C  00F6               	movwf	LcdSetCursor@b
  7463  0C4D  0826               	movf	LcdWriteInt@row,w
  7464  0C4E  2685  120A  158A   	fcall	_LcdSetCursor
  7465                           
  7466                           ;lcd.c: 174: LcdWriteChar(ch+'0');
  7467  0C51  082A               	movf	LcdWriteInt@ch,w
  7468  0C52  3E30               	addlw	48
  7469  0C53  2ECD               	ljmp	_LcdWriteChar
  7470  0C54                     __end_of_LcdWriteInt:	
  7471  0C54                     __ptext3:	
  7472 ;; *************** function _menu *****************
  7473 ;; Defined at:
  7474 ;;		line 386 in file "main.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;		None
  7479 ;; Return value:  Size  Location     Type
  7480 ;;		None               void
  7481 ;; Registers used:
  7482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 300/100
  7485 ;;		On exit  : 300/100
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7488 ;;      Params:         0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0
  7491 ;;      Totals:         0       0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    7
  7495 ;; This function calls:
  7496 ;;		_LcdSetCursor
  7497 ;;		_LcdWriteString
  7498 ;;		___eetoft
  7499 ;;		___ftadd
  7500 ;;		___ftge
  7501 ;;		___fttoee
  7502 ;;		_manage_buttons
  7503 ;;		_menuHumi
  7504 ;;		_sprintf
  7505 ;; This function is called by:
  7506 ;;		_main
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _menu
  7512  0C54                     _menu:	
  7513                           
  7514                           ;main.c: 388: sprintf(temperature, " %.1f", zeljena_temperatura);
  7515                           
  7516                           ;incstack = 0
  7517                           ; Regs used in _menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7518  0C54  3062               	movlw	low (STR_2| (0+32768))
  7519  0C55  1283               	bcf	3,5	;RP0=0, select bank0
  7520  0C56  00D4               	movwf	sprintf@f
  7521  0C57  3099               	movlw	high (STR_2| (0+32768))
  7522  0C58  00D5               	movwf	sprintf@f+1
  7523  0C59  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7524  0C5A  264B               	fcall	___eetoft
  7525  0C5B  0876               	movf	?___eetoft,w
  7526  0C5C  00D6               	movwf	?_sprintf+2
  7527  0C5D  0877               	movf	?___eetoft+1,w
  7528  0C5E  00D7               	movwf	?_sprintf+3
  7529  0C5F  0878               	movf	?___eetoft+2,w
  7530  0C60  00D8               	movwf	?_sprintf+4
  7531  0C61  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7532  0C62  120A  118A  20A7  120A  158A  	fcall	_sprintf
  7533  0C67  3001               	movlw	1
  7534                           
  7535                           ;main.c: 389: LcdSetCursor(1,1);
  7536  0C68  01F6               	clrf	LcdSetCursor@b
  7537  0C69  0AF6               	incf	LcdSetCursor@b,f
  7538  0C6A  2685  120A  158A   	fcall	_LcdSetCursor
  7539                           
  7540                           ;main.c: 390: LcdWriteString((char *)"Set air temp.   ");
  7541  0C6D  30BB               	movlw	low (STR_23| (0+32768))
  7542  0C6E  00F7               	movwf	LcdWriteString@a
  7543  0C6F  3098               	movlw	high (STR_23| (0+32768))
  7544  0C70  00F8               	movwf	LcdWriteString@a+1
  7545  0C71  26AE  120A  158A   	fcall	_LcdWriteString
  7546  0C74  3002               	movlw	2
  7547                           
  7548                           ;main.c: 391: LcdSetCursor(2,1);
  7549  0C75  01F6               	clrf	LcdSetCursor@b
  7550  0C76  0AF6               	incf	LcdSetCursor@b,f
  7551  0C77  2685  120A  158A   	fcall	_LcdSetCursor
  7552                           
  7553                           ;main.c: 392: LcdWriteString(temperature);
  7554  0C7A  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7555  0C7B  00F7               	movwf	LcdWriteString@a
  7556  0C7C  01F8               	clrf	LcdWriteString@a+1
  7557  0C7D  26AE  120A  158A   	fcall	_LcdWriteString
  7558                           
  7559                           ;main.c: 393: LcdSetCursor(2,6);
  7560  0C80  3006               	movlw	6
  7561  0C81  00F6               	movwf	LcdSetCursor@b
  7562  0C82  3002               	movlw	2
  7563  0C83  2685  120A  158A   	fcall	_LcdSetCursor
  7564                           
  7565                           ;main.c: 394: LcdWriteString((char *)"         ");
  7566  0C86  3021               	movlw	low ((STR_7+3)| (0+32768))
  7567  0C87  00F7               	movwf	LcdWriteString@a
  7568  0C88  3099               	movlw	high ((STR_7+3)| (0+32768))
  7569  0C89  00F8               	movwf	LcdWriteString@a+1
  7570  0C8A  26AE  120A  158A   	fcall	_LcdWriteString
  7571  0C8D                     l5994:	
  7572                           ;main.c: 396: while(!ok_flag_humi)
  7573                           
  7574  0C8D  1683               	bsf	3,5	;RP0=1, select bank1
  7575  0C8E  0831               	movf	_ok_flag_humi^(0+128),w
  7576  0C8F  1D03               	btfss	3,2
  7577  0C90  2D60               	goto	l5996
  7578                           
  7579                           ;main.c: 397: {
  7580                           ;main.c: 398: manage_buttons();
  7581  0C91  226B  120A  158A   	fcall	_manage_buttons
  7582                           
  7583                           ;main.c: 400: if(plus_flag)
  7584  0C94  087B               	movf	_plus_flag,w
  7585  0C95  1903               	btfsc	3,2
  7586  0C96  2CF6               	goto	l5974
  7587                           
  7588                           ;main.c: 401: {
  7589                           ;main.c: 402: zeljena_temperatura += 0.1;
  7590  0C97  30CD               	movlw	205
  7591  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  7592  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  7593  0C9A  00C2               	movwf	___ftadd@f1
  7594  0C9B  30CC               	movlw	204
  7595  0C9C  00C3               	movwf	___ftadd@f1+1
  7596  0C9D  303D               	movlw	61
  7597  0C9E  00C4               	movwf	___ftadd@f1+2
  7598  0C9F  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7599  0CA0  264B               	fcall	___eetoft
  7600  0CA1  0876               	movf	?___eetoft,w
  7601  0CA2  00C5               	movwf	___ftadd@f2
  7602  0CA3  0877               	movf	?___eetoft+1,w
  7603  0CA4  00C6               	movwf	___ftadd@f2+1
  7604  0CA5  0878               	movf	?___eetoft+2,w
  7605  0CA6  00C7               	movwf	___ftadd@f2+2
  7606  0CA7  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7607  0CAC  0842               	movf	?___ftadd,w
  7608  0CAD  00CE               	movwf	___fttoee@data
  7609  0CAE  0843               	movf	?___ftadd+1,w
  7610  0CAF  00CF               	movwf	___fttoee@data+1
  7611  0CB0  0844               	movf	?___ftadd+2,w
  7612  0CB1  00D0               	movwf	___fttoee@data+2
  7613  0CB2  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7614  0CB3  26C6  120A  158A   	fcall	___fttoee
  7615                           
  7616                           ;main.c: 403: if(zeljena_temperatura > 40) zeljena_temperatura = 40;
  7617  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  7618  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  7619  0CB8  3020               	movlw	32
  7620  0CB9  01CE               	clrf	___ftge@ff1
  7621  0CBA  00CF               	movwf	___ftge@ff1+1
  7622  0CBB  3042               	movlw	66
  7623  0CBC  00D0               	movwf	___ftge@ff1+2
  7624  0CBD  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7625  0CBE  264B               	fcall	___eetoft
  7626  0CBF  0876               	movf	?___eetoft,w
  7627  0CC0  00D1               	movwf	___ftge@ff2
  7628  0CC1  0877               	movf	?___eetoft+1,w
  7629  0CC2  00D2               	movwf	___ftge@ff2+1
  7630  0CC3  0878               	movf	?___eetoft+2,w
  7631  0CC4  00D3               	movwf	___ftge@ff2+2
  7632  0CC5  120A  118A  248C  120A  158A  	fcall	___ftge
  7633  0CCA  1803               	btfsc	3,0
  7634  0CCB  2CD5               	goto	l5966
  7635  0CCC  3020               	movlw	32
  7636  0CCD  01CE               	clrf	___fttoee@data
  7637  0CCE  00CF               	movwf	___fttoee@data+1
  7638  0CCF  3042               	movlw	66
  7639  0CD0  00D0               	movwf	___fttoee@data+2
  7640  0CD1  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7641  0CD2  26C6  120A  158A   	fcall	___fttoee
  7642  0CD5                     l5966:	
  7643  0CD5  3062               	movlw	low (STR_2| (0+32768))
  7644                           
  7645                           ;main.c: 404: plus_flag = 0;
  7646  0CD6  01FB               	clrf	_plus_flag
  7647                           
  7648                           ;main.c: 406: sprintf(temperature, " %.1f", zeljena_temperatura);
  7649  0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  7650  0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  7651  0CD9  00D4               	movwf	sprintf@f
  7652  0CDA  3099               	movlw	high (STR_2| (0+32768))
  7653  0CDB  00D5               	movwf	sprintf@f+1
  7654  0CDC  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7655  0CDD  264B               	fcall	___eetoft
  7656  0CDE  0876               	movf	?___eetoft,w
  7657  0CDF  00D6               	movwf	?_sprintf+2
  7658  0CE0  0877               	movf	?___eetoft+1,w
  7659  0CE1  00D7               	movwf	?_sprintf+3
  7660  0CE2  0878               	movf	?___eetoft+2,w
  7661  0CE3  00D8               	movwf	?_sprintf+4
  7662  0CE4  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7663  0CE5  120A  118A  20A7  120A  158A  	fcall	_sprintf
  7664  0CEA  3002               	movlw	2
  7665                           
  7666                           ;main.c: 407: LcdSetCursor(2,1);
  7667  0CEB  01F6               	clrf	LcdSetCursor@b
  7668  0CEC  0AF6               	incf	LcdSetCursor@b,f
  7669  0CED  2685  120A  158A   	fcall	_LcdSetCursor
  7670                           
  7671                           ;main.c: 408: LcdWriteString(temperature);
  7672  0CF0  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7673  0CF1  00F7               	movwf	LcdWriteString@a
  7674  0CF2  01F8               	clrf	LcdWriteString@a+1
  7675  0CF3  26AE  120A  158A   	fcall	_LcdWriteString
  7676  0CF6                     l5974:	
  7677                           
  7678                           ;main.c: 409: }
  7679                           ;main.c: 411: if(minus_flag)
  7680  0CF6  087A               	movf	_minus_flag,w
  7681  0CF7  1903               	btfsc	3,2
  7682  0CF8  2D56               	goto	l5988
  7683                           
  7684                           ;main.c: 412: {
  7685                           ;main.c: 413: zeljena_temperatura -= 0.1;
  7686  0CF9  30CD               	movlw	205
  7687  0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  7688  0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  7689  0CFC  00C2               	movwf	___ftadd@f1
  7690  0CFD  30CC               	movlw	204
  7691  0CFE  00C3               	movwf	___ftadd@f1+1
  7692  0CFF  30BD               	movlw	189
  7693  0D00  00C4               	movwf	___ftadd@f1+2
  7694  0D01  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7695  0D02  264B               	fcall	___eetoft
  7696  0D03  0876               	movf	?___eetoft,w
  7697  0D04  00C5               	movwf	___ftadd@f2
  7698  0D05  0877               	movf	?___eetoft+1,w
  7699  0D06  00C6               	movwf	___ftadd@f2+1
  7700  0D07  0878               	movf	?___eetoft+2,w
  7701  0D08  00C7               	movwf	___ftadd@f2+2
  7702  0D09  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7703  0D0E  0842               	movf	?___ftadd,w
  7704  0D0F  00CE               	movwf	___fttoee@data
  7705  0D10  0843               	movf	?___ftadd+1,w
  7706  0D11  00CF               	movwf	___fttoee@data+1
  7707  0D12  0844               	movf	?___ftadd+2,w
  7708  0D13  00D0               	movwf	___fttoee@data+2
  7709  0D14  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7710  0D15  26C6  120A  158A   	fcall	___fttoee
  7711                           
  7712                           ;main.c: 414: if(zeljena_temperatura < 15) zeljena_temperatura = 15;
  7713  0D18  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7714  0D19  264B               	fcall	___eetoft
  7715  0D1A  0876               	movf	?___eetoft,w
  7716  0D1B  00CE               	movwf	___ftge@ff1
  7717  0D1C  0877               	movf	?___eetoft+1,w
  7718  0D1D  00CF               	movwf	___ftge@ff1+1
  7719  0D1E  0878               	movf	?___eetoft+2,w
  7720  0D1F  00D0               	movwf	___ftge@ff1+2
  7721  0D20  3070               	movlw	112
  7722  0D21  01D1               	clrf	___ftge@ff2
  7723  0D22  00D2               	movwf	___ftge@ff2+1
  7724  0D23  3041               	movlw	65
  7725  0D24  00D3               	movwf	___ftge@ff2+2
  7726  0D25  120A  118A  248C  120A  158A  	fcall	___ftge
  7727  0D2A  1803               	btfsc	3,0
  7728  0D2B  2D35               	goto	l5980
  7729  0D2C  3070               	movlw	112
  7730  0D2D  01CE               	clrf	___fttoee@data
  7731  0D2E  00CF               	movwf	___fttoee@data+1
  7732  0D2F  3041               	movlw	65
  7733  0D30  00D0               	movwf	___fttoee@data+2
  7734  0D31  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7735  0D32  26C6  120A  158A   	fcall	___fttoee
  7736  0D35                     l5980:	
  7737  0D35  3062               	movlw	low (STR_2| (0+32768))
  7738                           
  7739                           ;main.c: 415: minus_flag = 0;
  7740  0D36  01FA               	clrf	_minus_flag
  7741                           
  7742                           ;main.c: 417: sprintf(temperature, " %.1f", zeljena_temperatura);
  7743  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  7744  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  7745  0D39  00D4               	movwf	sprintf@f
  7746  0D3A  3099               	movlw	high (STR_2| (0+32768))
  7747  0D3B  00D5               	movwf	sprintf@f+1
  7748  0D3C  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7749  0D3D  264B               	fcall	___eetoft
  7750  0D3E  0876               	movf	?___eetoft,w
  7751  0D3F  00D6               	movwf	?_sprintf+2
  7752  0D40  0877               	movf	?___eetoft+1,w
  7753  0D41  00D7               	movwf	?_sprintf+3
  7754  0D42  0878               	movf	?___eetoft+2,w
  7755  0D43  00D8               	movwf	?_sprintf+4
  7756  0D44  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7757  0D45  120A  118A  20A7  120A  158A  	fcall	_sprintf
  7758  0D4A  3002               	movlw	2
  7759                           
  7760                           ;main.c: 418: LcdSetCursor(2,1);
  7761  0D4B  01F6               	clrf	LcdSetCursor@b
  7762  0D4C  0AF6               	incf	LcdSetCursor@b,f
  7763  0D4D  2685  120A  158A   	fcall	_LcdSetCursor
  7764                           
  7765                           ;main.c: 419: LcdWriteString(temperature);
  7766  0D50  30B7               	movlw	(low (_temperature| 0))& (0+255)
  7767  0D51  00F7               	movwf	LcdWriteString@a
  7768  0D52  01F8               	clrf	LcdWriteString@a+1
  7769  0D53  26AE  120A  158A   	fcall	_LcdWriteString
  7770  0D56                     l5988:	
  7771                           
  7772                           ;main.c: 420: }
  7773                           ;main.c: 422: if(ok_flag)
  7774  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  7775  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  7776  0D58  086E               	movf	_ok_flag,w
  7777  0D59  1903               	btfsc	3,2
  7778  0D5A  2C8D               	goto	l5994
  7779                           
  7780                           ;main.c: 423: {
  7781                           ;main.c: 424: ok_flag = 0;
  7782  0D5B  01EE               	clrf	_ok_flag
  7783                           
  7784                           ;main.c: 425: menuHumi();
  7785  0D5C  215F  120A  158A   	fcall	_menuHumi
  7786  0D5F  2C8D               	goto	l5994
  7787  0D60                     l5996:	
  7788                           
  7789                           ;main.c: 426: }
  7790                           ;main.c: 427: }
  7791                           ;main.c: 429: ok_flag = 0;
  7792  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0D61  01EE               	clrf	_ok_flag
  7794                           
  7795                           ;main.c: 430: ok_flag_humi = 0;
  7796  0D62  1683               	bsf	3,5	;RP0=1, select bank1
  7797  0D63  01B1               	clrf	_ok_flag_humi^(0+128)
  7798                           
  7799                           ;main.c: 431: ok_flag_co2 = 0;
  7800  0D64  01B0               	clrf	_ok_flag_co2^(0+128)
  7801  0D65  0008               	return
  7802  0D66                     __end_of_menu:	
  7803  0D66                     __ptext2:	
  7804 ;; *************** function _regulacija *****************
  7805 ;; Defined at:
  7806 ;;		line 213 in file "main.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;		None               void
  7813 ;; Registers used:
  7814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 300/100
  7817 ;;		On exit  : 200/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7820 ;;      Params:         0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0
  7822 ;;      Temps:          0       2       0       0       0
  7823 ;;      Totals:         0       2       0       0       0
  7824 ;;Total ram usage:        2 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    3
  7827 ;; This function calls:
  7828 ;;		___eetoft
  7829 ;;		___eetoi
  7830 ;;		___ftadd
  7831 ;;		___ftge
  7832 ;; This function is called by:
  7833 ;;		_main
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           
  7838                           ;psect for function _regulacija
  7839  0D66                     _regulacija:	
  7840                           
  7841                           ;main.c: 215: if(RC4)
  7842                           
  7843                           ;incstack = 0
  7844                           ; Regs used in _regulacija: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7845  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  7846  0D67  1E07               	btfss	7,4	;volatile
  7847  0D68  2D7C               	goto	l5916
  7848                           
  7849                           ;main.c: 216: {
  7850                           ;main.c: 217: if(temp > zeljena_temperatura)
  7851  0D69  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7852  0D6A  264B  120A  158A   	fcall	___eetoft
  7853  0D6D  0876               	movf	?___eetoft,w
  7854  0D6E  00CE               	movwf	___ftge@ff1
  7855  0D6F  0877               	movf	?___eetoft+1,w
  7856  0D70  00CF               	movwf	___ftge@ff1+1
  7857  0D71  0878               	movf	?___eetoft+2,w
  7858  0D72  27D1               	fcall	PL20	;call to abstracted procedure
  7859  0D73  120A  118A  248C  120A  158A  	fcall	___ftge
  7860  0D78  1803               	btfsc	3,0
  7861  0D79  2D97               	goto	l373
  7862                           
  7863                           ;main.c: 218: {
  7864                           ;main.c: 219: RC4 = 0;
  7865  0D7A  1207               	bcf	7,4	;volatile
  7866  0D7B  2D97               	goto	l373
  7867  0D7C                     l5916:	
  7868                           
  7869                           ;main.c: 222: else if(temp < (zeljena_temperatura - 0.4))
  7870  0D7C  27DF  120A  158A   	fcall	PL24	;call to abstracted procedure
  7871  0D7F  30CD               	movlw	205
  7872  0D80  00C2               	movwf	___ftadd@f1
  7873  0D81  30CC               	movlw	204
  7874  0D82  00C3               	movwf	___ftadd@f1+1
  7875  0D83  30BE               	movlw	190
  7876  0D84  00C4               	movwf	___ftadd@f1+2
  7877  0D85  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7878  0D86  264B  120A  158A   	fcall	___eetoft
  7879  0D89  27EC               	fcall	PL62	;call to abstracted procedure
  7880  0D8A  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7881  0D8F  27F9               	fcall	PL90	;call to abstracted procedure
  7882  0D90  120A  118A  248C  120A  158A  	fcall	___ftge
  7883  0D95  1C03               	btfss	3,0
  7884                           
  7885                           ;main.c: 223: {
  7886                           ;main.c: 224: RC4 = 1;
  7887  0D96  1607               	bsf	7,4	;volatile
  7888  0D97                     l373:	
  7889                           
  7890                           ;main.c: 225: }
  7891                           ;main.c: 227: if(RC3)
  7892  0D97  1D87               	btfss	7,3	;volatile
  7893  0D98  2DAD               	goto	l5924
  7894                           
  7895                           ;main.c: 228: {
  7896                           ;main.c: 229: if(temp < zeljena_temperatura)
  7897  0D99  27DF  120A  158A   	fcall	PL24	;call to abstracted procedure
  7898  0D9C  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7899  0D9D  264B               	fcall	___eetoft
  7900  0D9E  0876               	movf	?___eetoft,w
  7901  0D9F  00D1               	movwf	___ftge@ff2
  7902  0DA0  0877               	movf	?___eetoft+1,w
  7903  0DA1  00D2               	movwf	___ftge@ff2+1
  7904  0DA2  0878               	movf	?___eetoft+2,w
  7905  0DA3  00D3               	movwf	___ftge@ff2+2
  7906  0DA4  120A  118A  248C  120A  158A  	fcall	___ftge
  7907  0DA9  1803               	btfsc	3,0
  7908  0DAA  2DC8               	goto	l377
  7909                           
  7910                           ;main.c: 230: {
  7911                           ;main.c: 231: RC3 = 0;
  7912  0DAB  1187               	bcf	7,3	;volatile
  7913  0DAC  2DC8               	goto	l377
  7914  0DAD                     l5924:	
  7915                           
  7916                           ;main.c: 234: else if(temp > (zeljena_temperatura + 0.4))
  7917  0DAD  30CD               	movlw	205
  7918  0DAE  00C2               	movwf	___ftadd@f1
  7919  0DAF  30CC               	movlw	204
  7920  0DB0  00C3               	movwf	___ftadd@f1+1
  7921  0DB1  303E               	movlw	62
  7922  0DB2  00C4               	movwf	___ftadd@f1+2
  7923  0DB3  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7924  0DB4  264B  120A  158A   	fcall	___eetoft
  7925  0DB7  27EC               	fcall	PL62	;call to abstracted procedure
  7926  0DB8  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7927  0DBD  27F3  120A  158A   	fcall	PL76	;call to abstracted procedure
  7928  0DC0  27D1               	fcall	PL20	;call to abstracted procedure
  7929  0DC1  120A  118A  248C  120A  158A  	fcall	___ftge
  7930  0DC6  1C03               	btfss	3,0
  7931                           
  7932                           ;main.c: 235: {
  7933                           ;main.c: 236: RC3 = 1;
  7934  0DC7  1587               	bsf	7,3	;volatile
  7935  0DC8                     l377:	
  7936                           
  7937                           ;main.c: 237: }
  7938                           ;main.c: 242: if(RC1)
  7939  0DC8  1C87               	btfss	7,1	;volatile
  7940  0DC9  2DF0               	goto	l5932
  7941                           
  7942                           ;main.c: 243: {
  7943                           ;main.c: 244: if(humi > (zeljena_vlaznost + 2.5))
  7944  0DCA  3020               	movlw	32
  7945  0DCB  01C2               	clrf	___ftadd@f1
  7946  0DCC  00C3               	movwf	___ftadd@f1+1
  7947  0DCD  3040               	movlw	64
  7948  0DCE  00C4               	movwf	___ftadd@f1+2
  7949  0DCF  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  7950  0DD0  264B  120A  158A   	fcall	___eetoft
  7951  0DD3  27EC               	fcall	PL62	;call to abstracted procedure
  7952  0DD4  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7953  0DD9  27F3               	fcall	PL76	;call to abstracted procedure
  7954  0DDA  00D0               	movwf	___ftge@ff1+2
  7955  0DDB  1683               	bsf	3,5	;RP0=1, select bank1
  7956  0DDC  083C               	movf	_humi^(0+128),w
  7957  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  7958  0DDE  00D1               	movwf	___ftge@ff2
  7959  0DDF  1683               	bsf	3,5	;RP0=1, select bank1
  7960  0DE0  083D               	movf	(_humi+1)^(0+128),w
  7961  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  7962  0DE2  00D2               	movwf	___ftge@ff2+1
  7963  0DE3  1683               	bsf	3,5	;RP0=1, select bank1
  7964  0DE4  083E               	movf	(_humi+2)^(0+128),w
  7965  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  7966  0DE6  00D3               	movwf	___ftge@ff2+2
  7967  0DE7  120A  118A  248C  120A  158A  	fcall	___ftge
  7968  0DEC  1803               	btfsc	3,0
  7969  0DED  2E13               	goto	l5936
  7970                           
  7971                           ;main.c: 245: {
  7972                           ;main.c: 246: RC1 = 0;
  7973  0DEE  1087               	bcf	7,1	;volatile
  7974  0DEF  2E13               	goto	l5936
  7975  0DF0                     l5932:	
  7976                           
  7977                           ;main.c: 250: else if(humi < (zeljena_vlaznost - 2.5))
  7978  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  7979  0DF1  083C               	movf	_humi^(0+128),w
  7980  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  7981  0DF3  00CE               	movwf	___ftge@ff1
  7982  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  7983  0DF5  083D               	movf	(_humi+1)^(0+128),w
  7984  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  7985  0DF7  00CF               	movwf	___ftge@ff1+1
  7986  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  7987  0DF9  083E               	movf	(_humi+2)^(0+128),w
  7988  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  7989  0DFB  00D0               	movwf	___ftge@ff1+2
  7990  0DFC  3020               	movlw	32
  7991  0DFD  01C2               	clrf	___ftadd@f1
  7992  0DFE  00C3               	movwf	___ftadd@f1+1
  7993  0DFF  30C0               	movlw	192
  7994  0E00  00C4               	movwf	___ftadd@f1+2
  7995  0E01  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  7996  0E02  264B  120A  158A   	fcall	___eetoft
  7997  0E05  27EC               	fcall	PL62	;call to abstracted procedure
  7998  0E06  120A  118A  25BC  120A  158A  	fcall	___ftadd
  7999  0E0B  27F9               	fcall	PL90	;call to abstracted procedure
  8000  0E0C  120A  118A  248C  120A  158A  	fcall	___ftge
  8001  0E11  1C03               	btfss	3,0
  8002                           
  8003                           ;main.c: 251: {
  8004                           ;main.c: 252: RC1 = 1;
  8005  0E12  1487               	bsf	7,1	;volatile
  8006  0E13                     l5936:	
  8007                           
  8008                           ;main.c: 253: }
  8009                           ;main.c: 257: if(measure_co2)
  8010  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  8011  0E14  082E               	movf	_measure_co2^(0+128),w
  8012  0E15  1903               	btfsc	3,2
  8013  0E16  0008               	return
  8014                           
  8015                           ;main.c: 258: {
  8016                           ;main.c: 259: if (RC0)
  8017  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  8018  0E18  1C07               	btfss	7,0	;volatile
  8019  0E19  2E33               	goto	l5944
  8020                           
  8021                           ;main.c: 260: {
  8022                           ;main.c: 261: if(co2 < (zeljena_co2 - 250))
  8023  0E1A  3006               	movlw	(low _zeljena_co2)& (0+255)
  8024  0E1B  265B  120A  158A   	fcall	___eetoi
  8025  0E1E  0876               	movf	?___eetoi,w
  8026  0E1F  3E06               	addlw	6
  8027  0E20  00D4               	movwf	??_regulacija
  8028  0E21  0877               	movf	?___eetoi+1,w
  8029  0E22  1803               	skipnc
  8030  0E23  3E01               	addlw	1
  8031  0E24  3EFF               	addlw	255
  8032  0E25  00D5               	movwf	??_regulacija+1
  8033  0E26  1683               	bsf	3,5	;RP0=1, select bank1
  8034  0E27  0228               	subwf	(_co2+1)^(0+128),w
  8035  0E28  1D03               	skipz
  8036  0E29  2E2E               	goto	u6735
  8037  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  8038  0E2B  0854               	movf	??_regulacija,w
  8039  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  8040  0E2D  0227               	subwf	_co2^(0+128),w
  8041  0E2E                     u6735:	
  8042  0E2E  1803               	skipnc
  8043  0E2F  0008               	return
  8044                           
  8045                           ;main.c: 262: {
  8046                           ;main.c: 263: RC0 = 0;
  8047  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  8048  0E31  1007               	bcf	7,0	;volatile
  8049  0E32  0008               	return
  8050  0E33                     l5944:	
  8051                           
  8052                           ;main.c: 267: else if(co2 > (zeljena_co2 + 250))
  8053  0E33  3006               	movlw	(low _zeljena_co2)& (0+255)
  8054  0E34  265B  120A  158A   	fcall	___eetoi
  8055  0E37  0876               	movf	?___eetoi,w
  8056  0E38  3EFA               	addlw	250
  8057  0E39  00D4               	movwf	??_regulacija
  8058  0E3A  0877               	movf	?___eetoi+1,w
  8059  0E3B  1803               	skipnc
  8060  0E3C  3E01               	addlw	1
  8061  0E3D  00D5               	movwf	??_regulacija+1
  8062  0E3E  1683               	bsf	3,5	;RP0=1, select bank1
  8063  0E3F  0828               	movf	(_co2+1)^(0+128),w
  8064  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  8065  0E41  0255               	subwf	??_regulacija+1,w
  8066  0E42  1D03               	skipz
  8067  0E43  2E48               	goto	u6745
  8068  0E44  1683               	bsf	3,5	;RP0=1, select bank1
  8069  0E45  0827               	movf	_co2^(0+128),w
  8070  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  8071  0E47  0254               	subwf	??_regulacija,w
  8072  0E48                     u6745:	
  8073  0E48  1C03               	btfss	3,0
  8074                           
  8075                           ;main.c: 268: {
  8076                           ;main.c: 269: RC0 = 1;
  8077  0E49  1407               	bsf	7,0	;volatile
  8078  0E4A  0008               	return
  8079  0E4B                     __end_of_regulacija:	
  8080  0E4B                     __ptext11:	
  8081 ;; *************** function ___eetoft *****************
  8082 ;; Defined at:
  8083 ;;		line 108 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  addr            1    wreg     PTR eeprom void 
  8086 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  addr            1    3[BANK0 ] PTR eeprom void 
  8089 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8090 ;;  data            3    0[BANK0 ] float 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  3    6[COMMON] float 
  8093 ;; Registers used:
  8094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 300/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8100 ;;      Params:         4       0       0       0       0
  8101 ;;      Locals:         0       4       0       0       0
  8102 ;;      Temps:          0       0       0       0       0
  8103 ;;      Totals:         4       4       0       0       0
  8104 ;;Total ram usage:        8 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    2
  8107 ;; This function calls:
  8108 ;;		_eecpymem
  8109 ;; This function is called by:
  8110 ;;		_regulacija
  8111 ;;		_menuHumi
  8112 ;;		_menu
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function ___eetoft
  8118  0E4B                     ___eetoft:	
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in ___eetoft: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8122                           ;___eetoft@addr stored from wreg
  8123  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  8124  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  8125  0E4D  00A3               	movwf	___eetoft@addr
  8126  0E4E  00F2               	movwf	eecpymem@from
  8127  0E4F  3003               	movlw	3
  8128  0E50  00F3               	movwf	eecpymem@size
  8129  0E51  3020               	movlw	(low (___eetoft@data| 0))& (0+255)
  8130  0E52  2669               	fcall	_eecpymem
  8131  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  8132  0E54  0820               	movf	___eetoft@data,w
  8133  0E55  00F6               	movwf	?___eetoft
  8134  0E56  0821               	movf	___eetoft@data+1,w
  8135  0E57  00F7               	movwf	?___eetoft+1
  8136  0E58  0822               	movf	___eetoft@data+2,w
  8137  0E59  00F8               	movwf	?___eetoft+2
  8138  0E5A  0008               	return
  8139  0E5B                     __end_of___eetoft:	
  8140  0E5B                     __ptext8:	
  8141 ;; *************** function ___eetoi *****************
  8142 ;; Defined at:
  8143 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  addr            1    wreg     PTR eeprom void 
  8146 ;;		 -> zeljena_co2(2), 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  addr            1    2[BANK0 ] PTR eeprom void 
  8149 ;;		 -> zeljena_co2(2), 
  8150 ;;  data            2    0[BANK0 ] unsigned int 
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  2    6[COMMON] unsigned int 
  8153 ;; Registers used:
  8154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 300/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8160 ;;      Params:         3       0       0       0       0
  8161 ;;      Locals:         0       3       0       0       0
  8162 ;;      Temps:          0       0       0       0       0
  8163 ;;      Totals:         3       3       0       0       0
  8164 ;;Total ram usage:        6 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    2
  8167 ;; This function calls:
  8168 ;;		_eecpymem
  8169 ;; This function is called by:
  8170 ;;		_regulacija
  8171 ;;		_menuCO2
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function ___eetoi
  8177  0E5B                     ___eetoi:	
  8178                           
  8179                           ;incstack = 0
  8180                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8181                           ;___eetoi@addr stored from wreg
  8182  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  8183  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  8184  0E5D  00A2               	movwf	___eetoi@addr
  8185  0E5E  00F2               	movwf	eecpymem@from
  8186  0E5F  3002               	movlw	2
  8187  0E60  00F3               	movwf	eecpymem@size
  8188  0E61  3020               	movlw	(low (___eetoi@data| 0))& (0+255)
  8189  0E62  2669               	fcall	_eecpymem
  8190  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  8191  0E64  0821               	movf	___eetoi@data+1,w
  8192  0E65  00F7               	movwf	?___eetoi+1
  8193  0E66  0820               	movf	___eetoi@data,w
  8194  0E67  00F6               	movwf	?___eetoi
  8195  0E68  0008               	return
  8196  0E69                     __end_of___eetoi:	
  8197  0E69                     __ptext12:	
  8198 ;; *************** function _eecpymem *****************
  8199 ;; Defined at:
  8200 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;  to              1    wreg     PTR volatile unsigned ch
  8203 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8204 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8205 ;;  from            1    2[COMMON] PTR eeprom unsigned char
  8206 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  8207 ;;  size            1    3[COMMON] unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  to              1    5[COMMON] PTR volatile unsigned ch
  8210 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8211 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8212 ;;  cp              1    4[COMMON] PTR volatile unsigned ch
  8213 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8214 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;		None               void
  8217 ;; Registers used:
  8218 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8219 ;; Tracked objects:
  8220 ;;		On entry : 300/0
  8221 ;;		On exit  : 300/200
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8224 ;;      Params:         2       0       0       0       0
  8225 ;;      Locals:         2       0       0       0       0
  8226 ;;      Temps:          0       0       0       0       0
  8227 ;;      Totals:         4       0       0       0       0
  8228 ;;Total ram usage:        4 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    1
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		___eetoi
  8235 ;;		___eetoft
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _eecpymem
  8241  0E69                     _eecpymem:	
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _eecpymem: [wreg-fsr0h+status,2+status,0]
  8245                           ;eecpymem@to stored from wreg
  8246  0E69  00F5               	movwf	eecpymem@to
  8247  0E6A  0875               	movf	eecpymem@to,w
  8248  0E6B  00F4               	movwf	eecpymem@cp
  8249  0E6C                     l618:	
  8250  0E6C  1683               	bsf	3,5	;RP0=1, select bank3
  8251  0E6D  1703               	bsf	3,6	;RP1=1, select bank3
  8252  0E6E  188C               	btfsc	12,1	;volsfr
  8253  0E6F  2E6C               	goto	l618
  8254  0E70  0872               	movf	eecpymem@from,w
  8255  0E71  1283               	bcf	3,5	;RP0=0, select bank2
  8256  0E72  008D               	movwf	13	;volatile
  8257  0E73                     l4954:	
  8258  0E73  03F3               	decf	eecpymem@size,f
  8259  0E74  0F73               	incfsz	eecpymem@size,w
  8260  0E75  2E77               	goto	l623
  8261  0E76  0008               	return
  8262  0E77                     l623:	
  8263  0E77  1683               	bsf	3,5	;RP0=1, select bank3
  8264  0E78  188C               	btfsc	12,1	;volsfr
  8265  0E79  2E77               	goto	l623
  8266  0E7A  138C               	bcf	12,7	;volsfr
  8267  0E7B  140C               	bsf	12,0	;volsfr
  8268  0E7C  0874               	movf	eecpymem@cp,w
  8269  0E7D  0084               	movwf	4
  8270  0E7E  1283               	bcf	3,5	;RP0=0, select bank2
  8271  0E7F  080C               	movf	12,w	;volatile
  8272  0E80  1383               	bcf	3,7	;select IRP bank0
  8273  0E81  0080               	movwf	0
  8274  0E82  0AF4               	incf	eecpymem@cp,f
  8275  0E83  0A8D               	incf	13,f	;volatile
  8276  0E84  2E73               	goto	l4954
  8277  0E85                     __end_of_eecpymem:	
  8278  0E85                     __ptext61:	
  8279 ;; *************** function _LcdSetCursor *****************
  8280 ;; Defined at:
  8281 ;;		line 45 in file "lcd.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  a               1    wreg     unsigned char 
  8284 ;;  b               1    6[COMMON] unsigned char 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  a               1    0[BANK0 ] unsigned char 
  8287 ;;  temp            1    3[BANK0 ] unsigned char 
  8288 ;;  y               1    2[BANK0 ] unsigned char 
  8289 ;;  z               1    1[BANK0 ] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;		None               void
  8292 ;; Registers used:
  8293 ;;		wreg, status,2, status,0, pclath, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/100
  8296 ;;		On exit  : 300/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8299 ;;      Params:         1       0       0       0       0
  8300 ;;      Locals:         0       4       0       0       0
  8301 ;;      Temps:          0       0       0       0       0
  8302 ;;      Totals:         1       4       0       0       0
  8303 ;;Total ram usage:        5 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    3
  8306 ;; This function calls:
  8307 ;;		_LcdCmd
  8308 ;; This function is called by:
  8309 ;;		_LcdWriteInt
  8310 ;;		_getResSHT71
  8311 ;;		_displayAirTemp
  8312 ;;		_displayAirMoist
  8313 ;;		_displayCO2
  8314 ;;		_displaySoilTemp
  8315 ;;		_menuCO2
  8316 ;;		_menuHumi
  8317 ;;		_menu
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           
  8322                           ;psect for function _LcdSetCursor
  8323  0E85                     _LcdSetCursor:	
  8324                           
  8325                           ;incstack = 0
  8326                           ; Regs used in _LcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  8327                           ;LcdSetCursor@a stored from wreg
  8328  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  8329  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  8330  0E87  00A0               	movwf	LcdSetCursor@a
  8331                           
  8332                           ;lcd.c: 47: char temp,z,y;
  8333                           ;lcd.c: 48: if(a == 1)
  8334  0E88  0B20               	decfsz	LcdSetCursor@a,w
  8335  0E89  2E9A               	goto	l4908
  8336                           
  8337                           ;lcd.c: 49: {
  8338                           ;lcd.c: 50: temp = 0x80 + b - 1;
  8339  0E8A  0876               	movf	LcdSetCursor@b,w
  8340  0E8B  3E7F               	addlw	127
  8341  0E8C  00A3               	movwf	LcdSetCursor@temp
  8342                           
  8343                           ;lcd.c: 51: z = temp>>4;
  8344  0E8D  0E23               	swapf	LcdSetCursor@temp,w
  8345  0E8E  390F               	andlw	15
  8346  0E8F  00A1               	movwf	LcdSetCursor@z
  8347                           
  8348                           ;lcd.c: 52: y = temp & 0x0F;
  8349  0E90  0823               	movf	LcdSetCursor@temp,w
  8350  0E91  00A2               	movwf	LcdSetCursor@y
  8351  0E92  300F               	movlw	15
  8352  0E93  05A2               	andwf	LcdSetCursor@y,f
  8353                           
  8354                           ;lcd.c: 53: LcdCmd(z);
  8355  0E94  0821               	movf	LcdSetCursor@z,w
  8356  0E95  2767  120A  158A   	fcall	_LcdCmd
  8357                           
  8358                           ;lcd.c: 54: LcdCmd(y);
  8359  0E98  0822               	movf	LcdSetCursor@y,w
  8360  0E99  2F67               	ljmp	_LcdCmd
  8361  0E9A                     l4908:	
  8362                           ;lcd.c: 55: }
  8363                           
  8364                           
  8365                           ;lcd.c: 56: else if(a == 2)
  8366  0E9A  3002               	movlw	2
  8367  0E9B  0620               	xorwf	LcdSetCursor@a,w
  8368  0E9C  1D03               	btfss	3,2
  8369  0E9D  0008               	return
  8370                           
  8371                           ;lcd.c: 57: {
  8372                           ;lcd.c: 58: temp = 0xC0 + b - 1;
  8373  0E9E  0876               	movf	LcdSetCursor@b,w
  8374  0E9F  3EBF               	addlw	191
  8375  0EA0  00A3               	movwf	LcdSetCursor@temp
  8376                           
  8377                           ;lcd.c: 59: z = temp>>4;
  8378  0EA1  0E23               	swapf	LcdSetCursor@temp,w
  8379  0EA2  390F               	andlw	15
  8380  0EA3  00A1               	movwf	LcdSetCursor@z
  8381                           
  8382                           ;lcd.c: 60: y = temp & 0x0F;
  8383  0EA4  0823               	movf	LcdSetCursor@temp,w
  8384  0EA5  00A2               	movwf	LcdSetCursor@y
  8385  0EA6  300F               	movlw	15
  8386  0EA7  05A2               	andwf	LcdSetCursor@y,f
  8387                           
  8388                           ;lcd.c: 61: LcdCmd(z);
  8389  0EA8  0821               	movf	LcdSetCursor@z,w
  8390  0EA9  2767  120A  158A   	fcall	_LcdCmd
  8391                           
  8392                           ;lcd.c: 62: LcdCmd(y);
  8393  0EAC  0822               	movf	LcdSetCursor@y,w
  8394  0EAD  2F67               	ljmp	_LcdCmd
  8395  0EAE                     __end_of_LcdSetCursor:	
  8396  0EAE                     __ptext59:	
  8397 ;; *************** function _LcdWriteString *****************
  8398 ;; Defined at:
  8399 ;;		line 106 in file "lcd.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  a               2    7[COMMON] PTR unsigned char 
  8402 ;;		 -> STR_24(10), STR_23(17), STR_19(9), STR_18(17), 
  8403 ;;		 -> STR_16(9), STR_15(11), STR_14(17), STR_13(13), 
  8404 ;;		 -> STR_12(17), STR_10(17), STR_9(13), STR_8(17), 
  8405 ;;		 -> STR_7(13), STR_6(17), humidity(5), STR_4(13), 
  8406 ;;		 -> STR_3(17), temperature(5), STR_1(14), 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  i               2    3[BANK0 ] int 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;		None               void
  8411 ;; Registers used:
  8412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 300/0
  8415 ;;		On exit  : 300/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8418 ;;      Params:         2       0       0       0       0
  8419 ;;      Locals:         0       2       0       0       0
  8420 ;;      Temps:          0       3       0       0       0
  8421 ;;      Totals:         2       5       0       0       0
  8422 ;;Total ram usage:        7 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    3
  8425 ;; This function calls:
  8426 ;;		_LcdWriteChar
  8427 ;; This function is called by:
  8428 ;;		_getResSHT71
  8429 ;;		_displayAirTemp
  8430 ;;		_displayAirMoist
  8431 ;;		_displayCO2
  8432 ;;		_displaySoilTemp
  8433 ;;		_menuCO2
  8434 ;;		_menuHumi
  8435 ;;		_menu
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _LcdWriteString
  8441  0EAE                     _LcdWriteString:	
  8442  0EAE                     l5182:	
  8443                           ;incstack = 0
  8444                           ; Regs used in _LcdWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8445                           
  8446                           
  8447                           ;lcd.c: 108: int i;
  8448                           ;lcd.c: 109: for(i=0;a[i]!='\0';i++)
  8449  0EAE  01A3               	clrf	LcdWriteString@i
  8450  0EAF  01A4               	clrf	LcdWriteString@i+1
  8451  0EB0                     l5188:	
  8452  0EB0  27C0               	fcall	PL12	;call to abstracted procedure
  8453  0EB1  160A  158A  2000  120A  158A  	fcall	stringtab
  8454  0EB6  3A00               	xorlw	0
  8455  0EB7  1903               	btfsc	3,2
  8456  0EB8  0008               	return
  8457                           
  8458                           ;lcd.c: 110: LcdWriteChar(a[i]);
  8459  0EB9  27C0               	fcall	PL12	;call to abstracted procedure
  8460  0EBA  160A  158A  2000  120A  158A  	fcall	stringtab
  8461  0EBF  26CD  120A  158A   	fcall	_LcdWriteChar
  8462  0EC2  0AA3               	incf	LcdWriteString@i,f
  8463  0EC3  1903               	skipnz
  8464  0EC4  0AA4               	incf	LcdWriteString@i+1,f
  8465  0EC5  2EB0               	goto	l5188
  8466  0EC6                     __end_of_LcdWriteString:	
  8467  0EC6                     __ptext9:	
  8468 ;; *************** function ___fttoee *****************
  8469 ;; Defined at:
  8470 ;;		line 124 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  addr            1    wreg     PTR eeprom void 
  8473 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8474 ;;  data            3   46[BANK0 ] float 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  addr            1   49[BANK0 ] PTR eeprom void 
  8477 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  3   46[BANK0 ] float 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 300/0
  8484 ;;		On exit  : 300/300
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8487 ;;      Params:         0       3       0       0       0
  8488 ;;      Locals:         0       1       0       0       0
  8489 ;;      Temps:          0       0       0       0       0
  8490 ;;      Totals:         0       4       0       0       0
  8491 ;;Total ram usage:        4 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    2
  8494 ;; This function calls:
  8495 ;;		_memcpyee
  8496 ;; This function is called by:
  8497 ;;		_menuHumi
  8498 ;;		_menu
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function ___fttoee
  8504  0EC6                     ___fttoee:	
  8505                           
  8506                           ;incstack = 0
  8507                           ; Regs used in ___fttoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8508                           ;___fttoee@addr stored from wreg
  8509  0EC6  00D1               	movwf	___fttoee@addr
  8510  0EC7  304E               	movlw	(low (___fttoee@data| 0))& (0+255)
  8511  0EC8  00F2               	movwf	memcpyee@from
  8512  0EC9  3003               	movlw	3
  8513  0ECA  00F3               	movwf	memcpyee@size
  8514  0ECB  0851               	movf	___fttoee@addr,w
  8515  0ECC  2F95               	ljmp	_memcpyee
  8516  0ECD                     __end_of___fttoee:	
  8517  0ECD                     __ptext60:	
  8518 ;; *************** function _LcdWriteChar *****************
  8519 ;; Defined at:
  8520 ;;		line 90 in file "lcd.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;  a               1    wreg     unsigned char 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;  a               1    6[COMMON] unsigned char 
  8525 ;;  y               1    5[COMMON] unsigned char 
  8526 ;;  temp            1    4[COMMON] unsigned char 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;		None               void
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, status,0, pclath, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 300/0
  8533 ;;		On exit  : 300/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8536 ;;      Params:         0       0       0       0       0
  8537 ;;      Locals:         3       0       0       0       0
  8538 ;;      Temps:          1       0       0       0       0
  8539 ;;      Totals:         4       0       0       0       0
  8540 ;;Total ram usage:        4 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    2
  8543 ;; This function calls:
  8544 ;;		_LcdPort
  8545 ;; This function is called by:
  8546 ;;		_LcdWriteString
  8547 ;;		_LcdWriteInt
  8548 ;; This function uses a non-reentrant model
  8549 ;;
  8550                           
  8551                           
  8552                           ;psect for function _LcdWriteChar
  8553  0ECD                     _LcdWriteChar:	
  8554                           
  8555                           ;incstack = 0
  8556                           ; Regs used in _LcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  8557                           ;LcdWriteChar@a stored from wreg
  8558  0ECD  00F6               	movwf	LcdWriteChar@a
  8559                           
  8560                           ;lcd.c: 92: char temp,y;
  8561                           ;lcd.c: 93: temp = a&0x0F;
  8562  0ECE  00F4               	movwf	LcdWriteChar@temp
  8563  0ECF  300F               	movlw	15
  8564  0ED0  05F4               	andwf	LcdWriteChar@temp,f
  8565                           
  8566                           ;lcd.c: 94: y = a&0xF0;
  8567  0ED1  0876               	movf	LcdWriteChar@a,w
  8568  0ED2  00F5               	movwf	LcdWriteChar@y
  8569  0ED3  30F0               	movlw	240
  8570  0ED4  05F5               	andwf	LcdWriteChar@y,f
  8571                           
  8572                           ;lcd.c: 95: RB5 = 1;
  8573  0ED5  1686               	bsf	6,5	;volatile
  8574                           
  8575                           ;lcd.c: 96: LcdPort(y>>4);
  8576  0ED6  0E75               	swapf	LcdWriteChar@y,w
  8577  0ED7  390F               	andlw	15
  8578  0ED8  277D  120A  158A   	fcall	_LcdPort
  8579                           
  8580                           ;lcd.c: 97: RB4 = 1;
  8581  0EDB  1606               	bsf	6,4	;volatile
  8582                           
  8583                           ;lcd.c: 98: _delay((unsigned long)((40)*(8000000/4000000.0)));
  8584  0EDC  301A               	movlw	26
  8585  0EDD  00F3               	movwf	??_LcdWriteChar
  8586  0EDE                     u7117:	
  8587  0EDE  0BF3               	decfsz	??_LcdWriteChar,f
  8588  0EDF  2EDE               	goto	u7117
  8589  0EE0  0000               	nop
  8590                           
  8591                           ;lcd.c: 99: RB4 = 0;
  8592  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  8593  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  8594  0EE3  1206               	bcf	6,4	;volatile
  8595                           
  8596                           ;lcd.c: 100: LcdPort(temp);
  8597  0EE4  0874               	movf	LcdWriteChar@temp,w
  8598  0EE5  277D  120A  158A   	fcall	_LcdPort
  8599                           
  8600                           ;lcd.c: 101: RB4 = 1;
  8601  0EE8  1606               	bsf	6,4	;volatile
  8602                           
  8603                           ;lcd.c: 102: _delay((unsigned long)((40)*(8000000/4000000.0)));
  8604  0EE9  301A               	movlw	26
  8605  0EEA  00F3               	movwf	??_LcdWriteChar
  8606  0EEB                     u7127:	
  8607  0EEB  0BF3               	decfsz	??_LcdWriteChar,f
  8608  0EEC  2EEB               	goto	u7127
  8609  0EED  0000               	nop
  8610                           
  8611                           ;lcd.c: 103: RB4 = 0;
  8612  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  8613  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  8614  0EF0  1206               	bcf	6,4	;volatile
  8615  0EF1  0008               	return
  8616  0EF2                     __end_of_LcdWriteChar:	
  8617  0EF2                     __ptext35:	
  8618 ;; *************** function ___lwdiv *****************
  8619 ;; Defined at:
  8620 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;  divisor         2    2[COMMON] unsigned int 
  8623 ;;  dividend        2    4[COMMON] unsigned int 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  quotient        2    6[COMMON] unsigned int 
  8626 ;;  counter         1    8[COMMON] unsigned char 
  8627 ;; Return value:  Size  Location     Type
  8628 ;;                  2    2[COMMON] unsigned int 
  8629 ;; Registers used:
  8630 ;;		wreg, status,2, status,0
  8631 ;; Tracked objects:
  8632 ;;		On entry : 300/0
  8633 ;;		On exit  : 300/0
  8634 ;;		Unchanged: 300/0
  8635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8636 ;;      Params:         4       0       0       0       0
  8637 ;;      Locals:         3       0       0       0       0
  8638 ;;      Temps:          0       0       0       0       0
  8639 ;;      Totals:         7       0       0       0       0
  8640 ;;Total ram usage:        7 bytes
  8641 ;; Hardware stack levels used:    1
  8642 ;; Hardware stack levels required when called:    1
  8643 ;; This function calls:
  8644 ;;		Nothing
  8645 ;; This function is called by:
  8646 ;;		_LcdWriteInt
  8647 ;;		_measureTGS4161
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           
  8652                           ;psect for function ___lwdiv
  8653  0EF2                     ___lwdiv:	
  8654                           
  8655                           ;incstack = 0
  8656                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8657  0EF2  01F6               	clrf	___lwdiv@quotient
  8658  0EF3  01F7               	clrf	___lwdiv@quotient+1
  8659  0EF4  0872               	movf	___lwdiv@divisor,w
  8660  0EF5  0473               	iorwf	___lwdiv@divisor+1,w
  8661  0EF6  1903               	btfsc	3,2
  8662  0EF7  2F17               	goto	l3420
  8663  0EF8  01F8               	clrf	___lwdiv@counter
  8664  0EF9                     L7:	
  8665  0EF9  0AF8               	incf	___lwdiv@counter,f
  8666  0EFA  1BF3               	btfsc	___lwdiv@divisor+1,7
  8667  0EFB  2F00               	goto	l3408
  8668  0EFC  1003               	clrc
  8669  0EFD  0DF2               	rlf	___lwdiv@divisor,f
  8670  0EFE  0DF3               	rlf	___lwdiv@divisor+1,f
  8671  0EFF  2EF9               	goto	L7
  8672  0F00                     l3408:	
  8673  0F00  1003               	clrc
  8674  0F01  0DF6               	rlf	___lwdiv@quotient,f
  8675  0F02  0DF7               	rlf	___lwdiv@quotient+1,f
  8676  0F03  0873               	movf	___lwdiv@divisor+1,w
  8677  0F04  0275               	subwf	___lwdiv@dividend+1,w
  8678  0F05  1D03               	skipz
  8679  0F06  2F09               	goto	u3345
  8680  0F07  0872               	movf	___lwdiv@divisor,w
  8681  0F08  0274               	subwf	___lwdiv@dividend,w
  8682  0F09                     u3345:	
  8683  0F09  1C03               	skipc
  8684  0F0A  2F13               	goto	L8
  8685  0F0B  0872               	movf	___lwdiv@divisor,w
  8686  0F0C  02F4               	subwf	___lwdiv@dividend,f
  8687  0F0D  0873               	movf	___lwdiv@divisor+1,w
  8688  0F0E  1C03               	skipc
  8689  0F0F  03F5               	decf	___lwdiv@dividend+1,f
  8690  0F10  02F5               	subwf	___lwdiv@dividend+1,f
  8691  0F11  1476               	bsf	___lwdiv@quotient,0
  8692  0F12  1003               	clrc
  8693  0F13                     L8:	
  8694  0F13  0CF3               	rrf	___lwdiv@divisor+1,f
  8695  0F14  0CF2               	rrf	___lwdiv@divisor,f
  8696  0F15  0BF8               	decfsz	___lwdiv@counter,f
  8697  0F16  2F00               	goto	l3408
  8698  0F17                     l3420:	
  8699  0F17  0877               	movf	___lwdiv@quotient+1,w
  8700  0F18  00F3               	movwf	?___lwdiv+1
  8701  0F19  0876               	movf	___lwdiv@quotient,w
  8702  0F1A  00F2               	movwf	?___lwdiv
  8703  0F1B  0008               	return
  8704  0F1C                     __end_of___lwdiv:	
  8705  0F1C                     __ptext67:	
  8706 ;; *************** function _LcdInit *****************
  8707 ;; Defined at:
  8708 ;;		line 66 in file "lcd.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : B00/0
  8719 ;;		On exit  : 300/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8722 ;;      Params:         0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0
  8724 ;;      Temps:          2       0       0       0       0
  8725 ;;      Totals:         2       0       0       0       0
  8726 ;;Total ram usage:        2 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    3
  8729 ;; This function calls:
  8730 ;;		_LcdCmd
  8731 ;;		_LcdPort
  8732 ;; This function is called by:
  8733 ;;		_main
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           
  8738                           ;psect for function _LcdInit
  8739  0F1C                     _LcdInit:	
  8740                           
  8741                           ;lcd.c: 69: OPTION_REG |= 0b10000000;
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in _LcdInit: [wreg+status,2+status,0+pclath+cstack]
  8745  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  8746  0F1D  1781               	bsf	1,7	;volatile
  8747                           
  8748                           ;lcd.c: 70: ANSELH &= 0b11000000;
  8749  0F1E  30C0               	movlw	192
  8750  0F1F  1703               	bsf	3,6	;RP1=1, select bank3
  8751  0F20  0589               	andwf	9,f	;volatile
  8752                           
  8753                           ;lcd.c: 71: TRISB = 0b00000000;
  8754  0F21  1303               	bcf	3,6	;RP1=0, select bank1
  8755  0F22  0186               	clrf	6	;volatile
  8756                           
  8757                           ;lcd.c: 73: LcdPort(0x00);
  8758  0F23  3000               	movlw	0
  8759  0F24  277D  120A  158A   	fcall	_LcdPort
  8760                           
  8761                           ;lcd.c: 74: _delay((unsigned long)((20)*(8000000/4000.0)));
  8762  0F27  3034               	movlw	52
  8763  0F28  00F7               	movwf	??_LcdInit+1
  8764  0F29  30F1               	movlw	241
  8765  0F2A  00F6               	movwf	??_LcdInit
  8766  0F2B                     u7137:	
  8767  0F2B  0BF6               	decfsz	??_LcdInit,f
  8768  0F2C  2F2B               	goto	u7137
  8769  0F2D  0BF7               	decfsz	??_LcdInit+1,f
  8770  0F2E  2F2B               	goto	u7137
  8771  0F2F  2F30               	nop2
  8772                           
  8773                           ;lcd.c: 75: LcdCmd(0x03);
  8774  0F30  3003               	movlw	3
  8775  0F31  2767  120A  158A   	fcall	_LcdCmd
  8776                           
  8777                           ;lcd.c: 76: _delay((unsigned long)((5)*(8000000/4000.0)));
  8778  0F34  300D               	movlw	13
  8779  0F35  00F7               	movwf	??_LcdInit+1
  8780  0F36  30FB               	movlw	251
  8781  0F37  00F6               	movwf	??_LcdInit
  8782  0F38                     u7147:	
  8783  0F38  0BF6               	decfsz	??_LcdInit,f
  8784  0F39  2F38               	goto	u7147
  8785  0F3A  0BF7               	decfsz	??_LcdInit+1,f
  8786  0F3B  2F38               	goto	u7147
  8787  0F3C  2F3D               	nop2
  8788                           
  8789                           ;lcd.c: 77: LcdCmd(0x03);
  8790  0F3D  3003               	movlw	3
  8791  0F3E  2767  120A  158A   	fcall	_LcdCmd
  8792                           
  8793                           ;lcd.c: 78: _delay((unsigned long)((11)*(8000000/4000.0)));
  8794  0F41  301D               	movlw	29
  8795  0F42  00F7               	movwf	??_LcdInit+1
  8796  0F43  3091               	movlw	145
  8797  0F44  00F6               	movwf	??_LcdInit
  8798  0F45                     u7157:	
  8799  0F45  0BF6               	decfsz	??_LcdInit,f
  8800  0F46  2F45               	goto	u7157
  8801  0F47  0BF7               	decfsz	??_LcdInit+1,f
  8802  0F48  2F45               	goto	u7157
  8803                           
  8804                           ;lcd.c: 79: LcdCmd(0x03);
  8805  0F49  3003               	movlw	3
  8806  0F4A  2767  120A  158A   	fcall	_LcdCmd
  8807                           
  8808                           ;lcd.c: 81: LcdCmd(0x02);
  8809  0F4D  3002               	movlw	2
  8810  0F4E  2767  120A  158A   	fcall	_LcdCmd
  8811                           
  8812                           ;lcd.c: 82: LcdCmd(0x02);
  8813  0F51  3002               	movlw	2
  8814  0F52  2767  120A  158A   	fcall	_LcdCmd
  8815                           
  8816                           ;lcd.c: 83: LcdCmd(0x08);
  8817  0F55  3008               	movlw	8
  8818  0F56  2767  120A  158A   	fcall	_LcdCmd
  8819                           
  8820                           ;lcd.c: 84: LcdCmd(0x00);
  8821  0F59  3000               	movlw	0
  8822  0F5A  2767  120A  158A   	fcall	_LcdCmd
  8823                           
  8824                           ;lcd.c: 85: LcdCmd(0x0C);
  8825  0F5D  300C               	movlw	12
  8826  0F5E  2767  120A  158A   	fcall	_LcdCmd
  8827                           
  8828                           ;lcd.c: 86: LcdCmd(0x00);
  8829  0F61  3000               	movlw	0
  8830  0F62  2767  120A  158A   	fcall	_LcdCmd
  8831                           
  8832                           ;lcd.c: 87: LcdCmd(0x06);
  8833  0F65  3006               	movlw	6
  8834  0F66  2F67               	ljmp	_LcdCmd
  8835  0F67                     __end_of_LcdInit:	
  8836  0F67                     __ptext68:	
  8837 ;; *************** function _LcdCmd *****************
  8838 ;; Defined at:
  8839 ;;		line 30 in file "lcd.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;  a               1    wreg     unsigned char 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  a               1    5[COMMON] unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;		None               void
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 0/0
  8850 ;;		On exit  : 300/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8853 ;;      Params:         0       0       0       0       0
  8854 ;;      Locals:         1       0       0       0       0
  8855 ;;      Temps:          2       0       0       0       0
  8856 ;;      Totals:         3       0       0       0       0
  8857 ;;Total ram usage:        3 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    2
  8860 ;; This function calls:
  8861 ;;		_LcdPort
  8862 ;; This function is called by:
  8863 ;;		_LcdSetCursor
  8864 ;;		_LcdInit
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           
  8869                           ;psect for function _LcdCmd
  8870  0F67                     _LcdCmd:	
  8871                           
  8872                           ;incstack = 0
  8873                           ; Regs used in _LcdCmd: [wreg+status,2+status,0+pclath+cstack]
  8874                           ;LcdCmd@a stored from wreg
  8875  0F67  00F5               	movwf	LcdCmd@a
  8876                           
  8877                           ;lcd.c: 32: RB5 = 0;
  8878  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  8879  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  8880  0F6A  1286               	bcf	6,5	;volatile
  8881                           
  8882                           ;lcd.c: 33: LcdPort(a);
  8883  0F6B  0875               	movf	LcdCmd@a,w
  8884  0F6C  277D  120A  158A   	fcall	_LcdPort
  8885                           
  8886                           ;lcd.c: 34: RB4 = 1;
  8887  0F6F  1606               	bsf	6,4	;volatile
  8888                           
  8889                           ;lcd.c: 35: _delay((unsigned long)((4)*(8000000/4000.0)));
  8890  0F70  300B               	movlw	11
  8891  0F71  00F4               	movwf	??_LcdCmd+1
  8892  0F72  3062               	movlw	98
  8893  0F73  00F3               	movwf	??_LcdCmd
  8894  0F74                     u7167:	
  8895  0F74  0BF3               	decfsz	??_LcdCmd,f
  8896  0F75  2F74               	goto	u7167
  8897  0F76  0BF4               	decfsz	??_LcdCmd+1,f
  8898  0F77  2F74               	goto	u7167
  8899  0F78  0000               	nop
  8900                           
  8901                           ;lcd.c: 36: RB4 = 0;
  8902  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  8903  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  8904  0F7B  1206               	bcf	6,4	;volatile
  8905  0F7C  0008               	return
  8906  0F7D                     __end_of_LcdCmd:	
  8907  0F7D                     __ptext69:	
  8908 ;; *************** function _LcdPort *****************
  8909 ;; Defined at:
  8910 ;;		line 8 in file "lcd.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  a               1    wreg     unsigned char 
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;  a               1    2[COMMON] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;		None               void
  8917 ;; Registers used:
  8918 ;;		wreg
  8919 ;; Tracked objects:
  8920 ;;		On entry : 200/0
  8921 ;;		On exit  : 300/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8924 ;;      Params:         0       0       0       0       0
  8925 ;;      Locals:         1       0       0       0       0
  8926 ;;      Temps:          0       0       0       0       0
  8927 ;;      Totals:         1       0       0       0       0
  8928 ;;Total ram usage:        1 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    1
  8931 ;; This function calls:
  8932 ;;		Nothing
  8933 ;; This function is called by:
  8934 ;;		_LcdCmd
  8935 ;;		_LcdInit
  8936 ;;		_LcdWriteChar
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           
  8941                           ;psect for function _LcdPort
  8942  0F7D                     _LcdPort:	
  8943                           
  8944                           ;incstack = 0
  8945                           ; Regs used in _LcdPort: [wreg]
  8946                           ;LcdPort@a stored from wreg
  8947  0F7D  00F2               	movwf	LcdPort@a
  8948                           
  8949                           ;lcd.c: 10: if(a & 1)
  8950  0F7E  1C72               	btfss	LcdPort@a,0
  8951  0F7F  2F83               	goto	l51
  8952                           
  8953                           ;lcd.c: 11: RB0 = 1;
  8954  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  8955  0F81  1406               	bsf	6,0	;volatile
  8956  0F82  2F85               	goto	l52
  8957  0F83                     l51:	
  8958                           
  8959                           ;lcd.c: 12: else
  8960                           ;lcd.c: 13: RB0 = 0;
  8961  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  8962  0F84  1006               	bcf	6,0	;volatile
  8963  0F85                     l52:	
  8964                           
  8965                           ;lcd.c: 15: if(a & 2)
  8966  0F85  1CF2               	btfss	LcdPort@a,1
  8967  0F86  2F89               	goto	l53
  8968                           
  8969                           ;lcd.c: 16: RB1 = 1;
  8970  0F87  1486               	bsf	6,1	;volatile
  8971  0F88  2F8A               	goto	l54
  8972  0F89                     l53:	
  8973                           
  8974                           ;lcd.c: 17: else
  8975                           ;lcd.c: 18: RB1 = 0;
  8976  0F89  1086               	bcf	6,1	;volatile
  8977  0F8A                     l54:	
  8978                           
  8979                           ;lcd.c: 20: if(a & 4)
  8980  0F8A  1D72               	btfss	LcdPort@a,2
  8981  0F8B  2F8E               	goto	l55
  8982                           
  8983                           ;lcd.c: 21: RB2 = 1;
  8984  0F8C  1506               	bsf	6,2	;volatile
  8985  0F8D  2F8F               	goto	l56
  8986  0F8E                     l55:	
  8987                           
  8988                           ;lcd.c: 22: else
  8989                           ;lcd.c: 23: RB2 = 0;
  8990  0F8E  1106               	bcf	6,2	;volatile
  8991  0F8F                     l56:	
  8992                           
  8993                           ;lcd.c: 25: if(a & 8)
  8994  0F8F  1DF2               	btfss	LcdPort@a,3
  8995  0F90  2F93               	goto	l57
  8996                           
  8997                           ;lcd.c: 26: RB3 = 1;
  8998  0F91  1586               	bsf	6,3	;volatile
  8999  0F92  0008               	return
  9000  0F93                     l57:	
  9001                           
  9002                           ;lcd.c: 27: else
  9003                           ;lcd.c: 28: RB3 = 0;
  9004  0F93  1186               	bcf	6,3	;volatile
  9005  0F94  0008               	return
  9006  0F95                     __end_of_LcdPort:	
  9007  0F95                     __ptext10:	
  9008 ;; *************** function _memcpyee *****************
  9009 ;; Defined at:
  9010 ;;		line 24 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  to              1    wreg     PTR eeprom unsigned char
  9013 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  9014 ;;  from            1    2[COMMON] PTR const unsigned char 
  9015 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
  9016 ;;		 -> __itoee@data(2), __ctoee@data(1), 
  9017 ;;  size            1    3[COMMON] unsigned char 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  to              1    5[COMMON] PTR eeprom unsigned char
  9020 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  9021 ;;  ptr             1    4[COMMON] PTR const unsigned char 
  9022 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
  9023 ;;		 -> __itoee@data(2), __ctoee@data(1), 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;		None               void
  9026 ;; Registers used:
  9027 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9028 ;; Tracked objects:
  9029 ;;		On entry : 300/0
  9030 ;;		On exit  : 300/300
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9033 ;;      Params:         2       0       0       0       0
  9034 ;;      Locals:         2       0       0       0       0
  9035 ;;      Temps:          0       0       0       0       0
  9036 ;;      Totals:         4       0       0       0       0
  9037 ;;Total ram usage:        4 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    1
  9040 ;; This function calls:
  9041 ;;		Nothing
  9042 ;; This function is called by:
  9043 ;;		___itoee
  9044 ;;		___fttoee
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _memcpyee
  9050  0F95                     _memcpyee:	
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _memcpyee: [wreg-fsr0h+status,2+status,0]
  9054                           ;memcpyee@to stored from wreg
  9055  0F95  00F5               	movwf	memcpyee@to
  9056  0F96  0872               	movf	memcpyee@from,w
  9057  0F97  00F4               	movwf	memcpyee@ptr
  9058  0F98                     l630:	
  9059  0F98  1683               	bsf	3,5	;RP0=1, select bank3
  9060  0F99  1703               	bsf	3,6	;RP1=1, select bank3
  9061  0F9A  188C               	btfsc	12,1	;volsfr
  9062  0F9B  2F98               	goto	l630
  9063  0F9C  0875               	movf	memcpyee@to,w
  9064  0F9D  3EFF               	addlw	255
  9065  0F9E  1283               	bcf	3,5	;RP0=0, select bank2
  9066  0F9F  008D               	movwf	13	;volatile
  9067  0FA0  1683               	bsf	3,5	;RP0=1, select bank3
  9068  0FA1  138C               	bcf	12,7	;volsfr
  9069  0FA2                     l4984:	
  9070  0FA2  03F3               	decf	memcpyee@size,f
  9071  0FA3  0F73               	incfsz	memcpyee@size,w
  9072  0FA4  2FA6               	goto	l635
  9073  0FA5  0008               	return
  9074  0FA6                     l635:	
  9075  0FA6  188C               	btfsc	12,1	;volsfr
  9076  0FA7  2FA6               	goto	l635
  9077  0FA8  0874               	movf	memcpyee@ptr,w
  9078  0FA9  0084               	movwf	4
  9079  0FAA  1383               	bcf	3,7	;select IRP bank0
  9080  0FAB  0800               	movf	0,w
  9081  0FAC  1283               	bcf	3,5	;RP0=0, select bank2
  9082  0FAD  008C               	movwf	12	;volatile
  9083  0FAE  0AF4               	incf	memcpyee@ptr,f
  9084  0FAF  0A8D               	incf	13,f	;volatile
  9085  0FB0  1003               	bcf	3,0	;volatile
  9086  0FB1  1B8B               	btfsc	11,7	;volatile
  9087  0FB2  1403               	bsf	3,0	;volatile
  9088  0FB3  138B               	bcf	11,7	;volatile
  9089  0FB4  1683               	bsf	3,5	;RP0=1, select bank3
  9090  0FB5  150C               	bsf	12,2	;volsfr
  9091  0FB6  3055               	movlw	85
  9092  0FB7  008D               	movwf	13	;volsfr
  9093  0FB8  30AA               	movlw	170
  9094  0FB9  008D               	movwf	13	;volsfr
  9095  0FBA  148C               	bsf	12,1	;volsfr
  9096  0FBB  110C               	bcf	12,2	;volsfr
  9097  0FBC  1C03               	btfss	3,0	;volatile
  9098  0FBD  2FA2               	goto	l4984
  9099  0FBE  178B               	bsf	11,7	;volatile
  9100  0FBF  2FA2               	goto	l4984
  9101  0FC0                     __end_of_memcpyee:	
  9102  0FC0                     PL12:	
  9103  0FC0  0823               	movf	LcdWriteString@i,w
  9104  0FC1  0777               	addwf	LcdWriteString@a,w
  9105  0FC2  00A1               	movwf	??_LcdWriteString+1
  9106  0FC3  0878               	movf	LcdWriteString@a+1,w
  9107  0FC4  00A0               	movwf	??_LcdWriteString
  9108  0FC5  1803               	skipnc
  9109  0FC6  0AA0               	incf	??_LcdWriteString,f
  9110  0FC7  1BA3               	btfsc	LcdWriteString@i,7
  9111  0FC8  03A0               	decf	??_LcdWriteString,f
  9112  0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  9113  0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  9114  0FCB  0820               	movf	??_LcdWriteString,w
  9115  0FCC  00A2               	movwf	??_LcdWriteString+2
  9116  0FCD  00FF               	movwf	127
  9117  0FCE  0821               	movf	??_LcdWriteString+1,w
  9118  0FCF  0084               	movwf	4
  9119  0FD0  0008               	return
  9120  0FD1                     __end_ofPL12:	
  9121  0FD1                     PL20:	
  9122  0FD1  00D0               	movwf	___ftge@ff1+2
  9123  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  9124  0FD3  083F               	movf	_temp^(0+128),w
  9125  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  9126  0FD5  00D1               	movwf	___ftge@ff2
  9127  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  9128  0FD7  0840               	movf	(_temp+1)^(0+128),w
  9129  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  9130  0FD9  00D2               	movwf	___ftge@ff2+1
  9131  0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  9132  0FDB  0841               	movf	(_temp+2)^(0+128),w
  9133  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  9134  0FDD  00D3               	movwf	___ftge@ff2+2
  9135  0FDE  0008               	return
  9136  0FDF                     __end_ofPL20:	
  9137  0FDF                     PL24:	
  9138  0FDF  1683               	bsf	3,5	;RP0=1, select bank1
  9139  0FE0  083F               	movf	_temp^(0+128),w
  9140  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  9141  0FE2  00CE               	movwf	___ftge@ff1
  9142  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  9143  0FE4  0840               	movf	(_temp+1)^(0+128),w
  9144  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  9145  0FE6  00CF               	movwf	___ftge@ff1+1
  9146  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  9147  0FE8  0841               	movf	(_temp+2)^(0+128),w
  9148  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  9149  0FEA  00D0               	movwf	___ftge@ff1+2
  9150  0FEB  0008               	return
  9151  0FEC                     __end_ofPL24:	
  9152  0FEC                     PL62:	
  9153  0FEC  0876               	movf	?___eetoft,w
  9154  0FED  00C5               	movwf	___ftadd@f2
  9155  0FEE  0877               	movf	?___eetoft+1,w
  9156  0FEF  00C6               	movwf	___ftadd@f2+1
  9157  0FF0  0878               	movf	?___eetoft+2,w
  9158  0FF1  00C7               	movwf	___ftadd@f2+2
  9159  0FF2  0008               	return
  9160  0FF3                     __end_ofPL62:	
  9161  0FF3                     PL76:	
  9162  0FF3  0842               	movf	?___ftadd,w
  9163  0FF4  00CE               	movwf	___ftge@ff1
  9164  0FF5  0843               	movf	?___ftadd+1,w
  9165  0FF6  00CF               	movwf	___ftge@ff1+1
  9166  0FF7  0844               	movf	?___ftadd+2,w
  9167  0FF8  0008               	return
  9168  0FF9                     __end_ofPL76:	
  9169  0FF9                     PL90:	
  9170  0FF9  0842               	movf	?___ftadd,w
  9171  0FFA  00D1               	movwf	___ftge@ff2
  9172  0FFB  0843               	movf	?___ftadd+1,w
  9173  0FFC  00D2               	movwf	___ftge@ff2+1
  9174  0FFD  0844               	movf	?___ftadd+2,w
  9175  0FFE  00D3               	movwf	___ftge@ff2+2
  9176  0FFF  0008               	return
  9177  1000                     __end_ofPL90:	
  9178                           
  9179                           	psect	text43
  9180  1E9D                     __ptext43:	
  9181 ;; *************** function _fround *****************
  9182 ;; Defined at:
  9183 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;  prec            1    wreg     unsigned char 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  prec            1   33[BANK0 ] unsigned char 
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  3   23[BANK0 ] unsigned char 
  9190 ;; Registers used:
  9191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 300/100
  9194 ;;		On exit  : 300/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9197 ;;      Params:         0       4       0       0       0
  9198 ;;      Locals:         0       7       0       0       0
  9199 ;;      Temps:          0       0       0       0       0
  9200 ;;      Totals:         0      11       0       0       0
  9201 ;;Total ram usage:       11 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    3
  9204 ;; This function calls:
  9205 ;;		___bmul
  9206 ;;		___ftmul
  9207 ;;		___lbdiv
  9208 ;;		___lbmod
  9209 ;; This function is called by:
  9210 ;;		_sprintf
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _fround
  9216  1E9D                     _fround:	
  9217                           
  9218                           ;incstack = 0
  9219                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9220                           ;fround@prec stored from wreg
  9221  1E9D  1283               	bcf	3,5	;RP0=0, select bank0
  9222  1E9E  00C1               	movwf	fround@prec
  9223                           
  9224                           ;doprnt.c: 413: if(prec>=110)
  9225  1E9F  306E               	movlw	110
  9226  1EA0  0241               	subwf	fround@prec,w
  9227  1EA1  1C03               	skipc
  9228  1EA2  2F23               	goto	l5238
  9229                           
  9230                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9231  1EA3  3003               	movlw	3
  9232  1EA4  00F8               	movwf	___bmul@multiplicand
  9233  1EA5  300A               	movlw	10
  9234  1EA6  00F7               	movwf	___lbdiv@divisor
  9235  1EA7  3064               	movlw	100
  9236  1EA8  00F2               	movwf	___lbmod@divisor
  9237  1EA9  0841               	movf	fround@prec,w
  9238  1EAA  27B3  160A  158A   	fcall	___lbmod
  9239  1EAD  2798               	fcall	___lbdiv
  9240  1EAE  160A  118A  2717  160A  158A  	fcall	___bmul
  9241  1EB3  27DD               	fcall	PL56	;call to abstracted procedure
  9242  1EB4  160A  158A  2000  160A  158A  	fcall	stringtab
  9243  1EB9  00A8               	movwf	___ftmul@f1
  9244  1EBA  160A  158A  2000  160A  158A  	fcall	stringtab
  9245  1EBF  00A9               	movwf	___ftmul@f1+1
  9246  1EC0  160A  158A  2000  160A  158A  	fcall	stringtab
  9247  1EC5  00AA               	movwf	___ftmul@f1+2
  9248  1EC6  3003               	movlw	3
  9249  1EC7  00F8               	movwf	___bmul@multiplicand
  9250  1EC8  3064               	movlw	100
  9251  1EC9  00F7               	movwf	___lbdiv@divisor
  9252  1ECA  0841               	movf	fround@prec,w
  9253  1ECB  2798               	fcall	___lbdiv
  9254  1ECC  160A  118A  2717  160A  158A  	fcall	___bmul
  9255  1ED1  27EC               	fcall	PL82	;call to abstracted procedure
  9256  1ED2  160A  158A  2000  160A  158A  	fcall	stringtab
  9257  1ED7  00AB               	movwf	___ftmul@f2
  9258  1ED8  160A  158A  2000  160A  158A  	fcall	stringtab
  9259  1EDD  00AC               	movwf	___ftmul@f2+1
  9260  1EDE  160A  158A  2000  160A  158A  	fcall	stringtab
  9261  1EE3  00AD               	movwf	___ftmul@f2+2
  9262  1EE4  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9263  1EE9  27F3  160A  158A   	fcall	PL84	;call to abstracted procedure
  9264                           
  9265                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9266  1EEC  27FA  160A  158A   	fcall	PL98	;call to abstracted procedure
  9267  1EEF  27B3               	fcall	___lbmod
  9268  1EF0  160A  118A  2717  160A  158A  	fcall	___bmul
  9269  1EF5  27CF               	fcall	PL30	;call to abstracted procedure
  9270  1EF6  160A  158A  2000  160A  158A  	fcall	stringtab
  9271  1EFB  00A8               	movwf	___ftmul@f1
  9272  1EFC  160A  158A  2000  160A  158A  	fcall	stringtab
  9273  1F01  00A9               	movwf	___ftmul@f1+1
  9274  1F02  160A  158A  2000  160A  158A  	fcall	stringtab
  9275  1F07  27E4               	fcall	PL72	;call to abstracted procedure
  9276  1F08  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9277  1F0D  0828               	movf	?___ftmul,w
  9278  1F0E  00BB               	movwf	_fround$1255
  9279  1F0F  0829               	movf	?___ftmul+1,w
  9280  1F10  00BC               	movwf	_fround$1255+1
  9281  1F11  082A               	movf	?___ftmul+2,w
  9282  1F12  00BD               	movwf	_fround$1255+2
  9283                           
  9284                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9285  1F13  303F               	movlw	63
  9286  1F14  01A8               	clrf	___ftmul@f1
  9287  1F15  01A9               	clrf	___ftmul@f1+1
  9288  1F16  00AA               	movwf	___ftmul@f1+2
  9289  1F17  083B               	movf	_fround$1255,w
  9290  1F18  00AB               	movwf	___ftmul@f2
  9291  1F19  083C               	movf	_fround$1255+1,w
  9292  1F1A  00AC               	movwf	___ftmul@f2+1
  9293  1F1B  083D               	movf	_fround$1255+2,w
  9294  1F1C  00AD               	movwf	___ftmul@f2+2
  9295  1F1D  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9296  1F22  2FD6               	ljmp	PL52	;call to abstracted procedure
  9297  1F23                     l5238:	
  9298                           
  9299                           ;doprnt.c: 415: else if(prec > 10)
  9300  1F23  300B               	movlw	11
  9301  1F24  0241               	subwf	fround@prec,w
  9302  1F25  1C03               	skipc
  9303  1F26  2F73               	goto	l5246
  9304                           
  9305                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9306  1F27  27FA  160A  158A   	fcall	PL98	;call to abstracted procedure
  9307  1F2A  27B3               	fcall	___lbmod
  9308  1F2B  160A  118A  2717  160A  158A  	fcall	___bmul
  9309  1F30  27CF               	fcall	PL30	;call to abstracted procedure
  9310  1F31  160A  158A  2000  160A  158A  	fcall	stringtab
  9311  1F36  00A8               	movwf	___ftmul@f1
  9312  1F37  160A  158A  2000  160A  158A  	fcall	stringtab
  9313  1F3C  00A9               	movwf	___ftmul@f1+1
  9314  1F3D  160A  158A  2000  160A  158A  	fcall	stringtab
  9315  1F42  00AA               	movwf	___ftmul@f1+2
  9316  1F43  3003               	movlw	3
  9317  1F44  00F8               	movwf	___bmul@multiplicand
  9318  1F45  300A               	movlw	10
  9319  1F46  00F7               	movwf	___lbdiv@divisor
  9320  1F47  0841               	movf	fround@prec,w
  9321  1F48  2798               	fcall	___lbdiv
  9322  1F49  160A  118A  2717  160A  158A  	fcall	___bmul
  9323  1F4E  27DD               	fcall	PL56	;call to abstracted procedure
  9324  1F4F  160A  158A  2000  160A  158A  	fcall	stringtab
  9325  1F54  00AB               	movwf	___ftmul@f2
  9326  1F55  160A  158A  2000  160A  158A  	fcall	stringtab
  9327  1F5A  00AC               	movwf	___ftmul@f2+1
  9328  1F5B  160A  158A  2000  160A  158A  	fcall	stringtab
  9329  1F60  00AD               	movwf	___ftmul@f2+2
  9330  1F61  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9331  1F66  27F3  160A  158A   	fcall	PL84	;call to abstracted procedure
  9332                           
  9333                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9334  1F69  303F               	movlw	63
  9335  1F6A  01A8               	clrf	___ftmul@f1
  9336  1F6B  01A9               	clrf	___ftmul@f1+1
  9337  1F6C  27E4               	fcall	PL72	;call to abstracted procedure
  9338  1F6D  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9339  1F72  2FD6               	ljmp	PL52	;call to abstracted procedure
  9340  1F73                     l5246:	
  9341                           
  9342                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9343  1F73  303F               	movlw	63
  9344  1F74  01A8               	clrf	___ftmul@f1
  9345  1F75  01A9               	clrf	___ftmul@f1+1
  9346  1F76  00AA               	movwf	___ftmul@f1+2
  9347  1F77  3003               	movlw	3
  9348  1F78  00F8               	movwf	___bmul@multiplicand
  9349  1F79  0841               	movf	fround@prec,w
  9350  1F7A  160A  118A  2717  160A  158A  	fcall	___bmul
  9351  1F7F  27CF               	fcall	PL30	;call to abstracted procedure
  9352  1F80  160A  158A  2000  160A  158A  	fcall	stringtab
  9353  1F85  00AB               	movwf	___ftmul@f2
  9354  1F86  160A  158A  2000  160A  158A  	fcall	stringtab
  9355  1F8B  00AC               	movwf	___ftmul@f2+1
  9356  1F8C  160A  158A  2000  160A  158A  	fcall	stringtab
  9357  1F91  00AD               	movwf	___ftmul@f2+2
  9358  1F92  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9359  1F97  2FD6               	ljmp	PL52	;call to abstracted procedure
  9360  1F98                     __end_of_fround:	
  9361  1F98                     __ptext45:	
  9362 ;; *************** function ___lbdiv *****************
  9363 ;; Defined at:
  9364 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbdiv.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  dividend        1    wreg     unsigned char 
  9367 ;;  divisor         1    7[COMMON] unsigned char 
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  dividend        1    0[BANK0 ] unsigned char 
  9370 ;;  quotient        1    2[BANK0 ] unsigned char 
  9371 ;;  counter         1    1[BANK0 ] unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;                  1    wreg      unsigned char 
  9374 ;; Registers used:
  9375 ;;		wreg, status,2, status,0
  9376 ;; Tracked objects:
  9377 ;;		On entry : 300/0
  9378 ;;		On exit  : 300/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9381 ;;      Params:         1       0       0       0       0
  9382 ;;      Locals:         0       3       0       0       0
  9383 ;;      Temps:          0       0       0       0       0
  9384 ;;      Totals:         1       3       0       0       0
  9385 ;;Total ram usage:        4 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    1
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_fround
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function ___lbdiv
  9397  1F98                     ___lbdiv:	
  9398                           
  9399                           ;incstack = 0
  9400                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9401                           ;___lbdiv@dividend stored from wreg
  9402  1F98  00A0               	movwf	___lbdiv@dividend
  9403  1F99  01A2               	clrf	___lbdiv@quotient
  9404  1F9A  0877               	movf	___lbdiv@divisor,w
  9405  1F9B  1903               	btfsc	3,2
  9406  1F9C  2FB1               	goto	l5178
  9407  1F9D  01A1               	clrf	___lbdiv@counter
  9408  1F9E                     l5164:	
  9409  1F9E  0AA1               	incf	___lbdiv@counter,f
  9410  1F9F  1BF7               	btfsc	___lbdiv@divisor,7
  9411  1FA0  2FA4               	goto	l982
  9412  1FA1  1003               	clrc
  9413  1FA2  0DF7               	rlf	___lbdiv@divisor,f
  9414  1FA3  2F9E               	goto	l5164
  9415  1FA4                     l982:	
  9416  1FA4  1003               	clrc
  9417  1FA5  0DA2               	rlf	___lbdiv@quotient,f
  9418  1FA6  0877               	movf	___lbdiv@divisor,w
  9419  1FA7  0220               	subwf	___lbdiv@dividend,w
  9420  1FA8  1C03               	skipc
  9421  1FA9  2FAE               	goto	L23
  9422  1FAA  0877               	movf	___lbdiv@divisor,w
  9423  1FAB  02A0               	subwf	___lbdiv@dividend,f
  9424  1FAC  1422               	bsf	___lbdiv@quotient,0
  9425  1FAD  1003               	clrc
  9426  1FAE                     L23:	
  9427  1FAE  0CF7               	rrf	___lbdiv@divisor,f
  9428  1FAF  0BA1               	decfsz	___lbdiv@counter,f
  9429  1FB0  2FA4               	goto	l982
  9430  1FB1                     l5178:	
  9431  1FB1  0822               	movf	___lbdiv@quotient,w
  9432  1FB2  0008               	return
  9433  1FB3                     __end_of___lbdiv:	
  9434  1FB3                     __ptext44:	
  9435 ;; *************** function ___lbmod *****************
  9436 ;; Defined at:
  9437 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbmod.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  dividend        1    wreg     unsigned char 
  9440 ;;  divisor         1    2[COMMON] unsigned char 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  dividend        1    4[COMMON] unsigned char 
  9443 ;;  rem             1    6[COMMON] unsigned char 
  9444 ;;  counter         1    5[COMMON] unsigned char 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  1    wreg      unsigned char 
  9447 ;; Registers used:
  9448 ;;		wreg, status,2, status,0
  9449 ;; Tracked objects:
  9450 ;;		On entry : 300/0
  9451 ;;		On exit  : 300/0
  9452 ;;		Unchanged: 300/0
  9453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9454 ;;      Params:         1       0       0       0       0
  9455 ;;      Locals:         3       0       0       0       0
  9456 ;;      Temps:          1       0       0       0       0
  9457 ;;      Totals:         5       0       0       0       0
  9458 ;;Total ram usage:        5 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    1
  9461 ;; This function calls:
  9462 ;;		Nothing
  9463 ;; This function is called by:
  9464 ;;		_fround
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           
  9469                           ;psect for function ___lbmod
  9470  1FB3                     ___lbmod:	
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  9474                           ;___lbmod@dividend stored from wreg
  9475  1FB3  00F4               	movwf	___lbmod@dividend
  9476  1FB4  3008               	movlw	8
  9477  1FB5  00F5               	movwf	___lbmod@counter
  9478  1FB6  01F6               	clrf	___lbmod@rem
  9479  1FB7                     l3384:	
  9480  1FB7  0874               	movf	___lbmod@dividend,w
  9481  1FB8  00F3               	movwf	??___lbmod
  9482  1FB9  3007               	movlw	7
  9483  1FBA  1003               	clrc
  9484  1FBB                     L22:	
  9485  1FBB  0CF3               	rrf	??___lbmod,f
  9486  1FBC  3EFF               	addlw	-1
  9487  1FBD  1003               	clrc
  9488  1FBE  1D03               	skipz
  9489  1FBF  2FBB               	goto	L22
  9490  1FC0  0D76               	rlf	___lbmod@rem,w
  9491  1FC1  0473               	iorwf	??___lbmod,w
  9492  1FC2  00F6               	movwf	___lbmod@rem
  9493  1FC3  1003               	clrc
  9494  1FC4  0DF4               	rlf	___lbmod@dividend,f
  9495  1FC5  0872               	movf	___lbmod@divisor,w
  9496  1FC6  0276               	subwf	___lbmod@rem,w
  9497  1FC7  1C03               	skipc
  9498  1FC8  2FCB               	goto	l3392
  9499  1FC9  0872               	movf	___lbmod@divisor,w
  9500  1FCA  02F6               	subwf	___lbmod@rem,f
  9501  1FCB                     l3392:	
  9502  1FCB  0BF5               	decfsz	___lbmod@counter,f
  9503  1FCC  2FB7               	goto	l3384
  9504  1FCD  0876               	movf	___lbmod@rem,w
  9505  1FCE  0008               	return
  9506  1FCF                     __end_of___lbmod:	
  9507  1FCF                     PL30:	
  9508  1FCF  3E12               	addlw	low (__npowers_| (0+32768))
  9509  1FD0  0084               	movwf	4
  9510  1FD1  3098               	movlw	high (__npowers_| (0+32768))
  9511  1FD2  1803               	skipnc
  9512  1FD3  3E01               	addlw	1
  9513  1FD4  00FF               	movwf	127
  9514  1FD5  0008               	return
  9515  1FD6                     __end_ofPL30:	
  9516  1FD6                     PL52:	
  9517  1FD6  0828               	movf	?___ftmul,w
  9518  1FD7  00B7               	movwf	?_fround
  9519  1FD8  0829               	movf	?___ftmul+1,w
  9520  1FD9  00B8               	movwf	?_fround+1
  9521  1FDA  082A               	movf	?___ftmul+2,w
  9522  1FDB  00B9               	movwf	?_fround+2
  9523  1FDC  0008               	return
  9524  1FDD                     __end_ofPL52:	
  9525  1FDD                     PL56:	
  9526  1FDD  3E2D               	addlw	low ((__npowers_| (0+32768)+27))
  9527  1FDE  0084               	movwf	4
  9528  1FDF  3098               	movlw	high ((__npowers_| (0+32768)+27))
  9529  1FE0  1803               	skipnc
  9530  1FE1  3E01               	addlw	1
  9531  1FE2  00FF               	movwf	127
  9532  1FE3  0008               	return
  9533  1FE4                     __end_ofPL56:	
  9534  1FE4                     PL72:	
  9535  1FE4  00AA               	movwf	___ftmul@f1+2
  9536  1FE5  083E               	movf	_fround$1254,w
  9537  1FE6  00AB               	movwf	___ftmul@f2
  9538  1FE7  083F               	movf	_fround$1254+1,w
  9539  1FE8  00AC               	movwf	___ftmul@f2+1
  9540  1FE9  0840               	movf	_fround$1254+2,w
  9541  1FEA  00AD               	movwf	___ftmul@f2+2
  9542  1FEB  0008               	return
  9543  1FEC                     __end_ofPL72:	
  9544  1FEC                     PL82:	
  9545  1FEC  3E48               	addlw	low ((__npowers_| (0+32768)+54))
  9546  1FED  0084               	movwf	4
  9547  1FEE  3098               	movlw	high ((__npowers_| (0+32768)+54))
  9548  1FEF  1803               	skipnc
  9549  1FF0  3E01               	addlw	1
  9550  1FF1  00FF               	movwf	127
  9551  1FF2  0008               	return
  9552  1FF3                     __end_ofPL82:	
  9553  1FF3                     PL84:	
  9554  1FF3  0828               	movf	?___ftmul,w
  9555  1FF4  00BE               	movwf	_fround$1254
  9556  1FF5  0829               	movf	?___ftmul+1,w
  9557  1FF6  00BF               	movwf	_fround$1254+1
  9558  1FF7  082A               	movf	?___ftmul+2,w
  9559  1FF8  00C0               	movwf	_fround$1254+2
  9560  1FF9  0008               	return
  9561  1FFA                     __end_ofPL84:	
  9562  1FFA                     PL98:	
  9563  1FFA  3003               	movlw	3
  9564  1FFB  00F8               	movwf	___bmul@multiplicand
  9565  1FFC  300A               	movlw	10
  9566  1FFD  00F2               	movwf	___lbmod@divisor
  9567  1FFE  0841               	movf	fround@prec,w
  9568  1FFF  0008               	return
  9569  2000                     __end_ofPL98:	
  9570                           
  9571                           	psect	text49
  9572  1BD8                     __ptext49:	
  9573 ;; *************** function __div_to_l_ *****************
  9574 ;; Defined at:
  9575 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fldivl.c"
  9576 ;; Parameters:    Size  Location     Type
  9577 ;;  f1              3    2[COMMON] unsigned long 
  9578 ;;  f2              3    5[COMMON] unsigned long 
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  quot            4    8[BANK0 ] unsigned long 
  9581 ;;  exp1            1   13[BANK0 ] unsigned char 
  9582 ;;  cntr            1   12[BANK0 ] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  4    2[COMMON] unsigned long 
  9585 ;; Registers used:
  9586 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 300/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9592 ;;      Params:         6       0       0       0       0
  9593 ;;      Locals:         0       6       0       0       0
  9594 ;;      Temps:          0       8       0       0       0
  9595 ;;      Totals:         6      14       0       0       0
  9596 ;;Total ram usage:       20 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    1
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_sprintf
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function __div_to_l_
  9608  1BD8                     __div_to_l_:	
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  9612  1BD8  3072               	movlw	low (__div_to_l_@f1| 0)
  9613  1BD9  0084               	movwf	4
  9614  1BDA  0800               	movf	0,w
  9615  1BDB  1283               	bcf	3,5	;RP0=0, select bank0
  9616  1BDC  1303               	bcf	3,6	;RP1=0, select bank0
  9617  1BDD  00A0               	movwf	??__div_to_l_
  9618  1BDE  0A84               	incf	4,f
  9619  1BDF  0800               	movf	0,w
  9620  1BE0  00A1               	movwf	??__div_to_l_+1
  9621  1BE1  0A84               	incf	4,f
  9622  1BE2  0800               	movf	0,w
  9623  1BE3  00A2               	movwf	??__div_to_l_+2
  9624  1BE4  0A84               	incf	4,f
  9625  1BE5  0800               	movf	0,w
  9626  1BE6  00A3               	movwf	??__div_to_l_+3
  9627  1BE7  1003               	clrc
  9628  1BE8  0D22               	rlf	??__div_to_l_+2,w
  9629  1BE9  0D23               	rlf	??__div_to_l_+3,w
  9630  1BEA  00AD               	movwf	__div_to_l_@exp1
  9631  1BEB  082D               	movf	__div_to_l_@exp1,w
  9632  1BEC  1D03               	btfss	3,2
  9633  1BED  2BF3               	goto	l3628
  9634  1BEE                     l3626:	
  9635  1BEE  01F2               	clrf	?__div_to_l_
  9636  1BEF  01F3               	clrf	?__div_to_l_+1
  9637  1BF0  01F4               	clrf	?__div_to_l_+2
  9638  1BF1  01F5               	clrf	?__div_to_l_+3
  9639  1BF2  0008               	return
  9640  1BF3                     l3628:	
  9641  1BF3  3075               	movlw	low (__div_to_l_@f2| 0)
  9642  1BF4  2496  160A  158A   	fcall	PL6	;call to abstracted procedure
  9643  1BF7  1003               	clrc
  9644  1BF8  0D22               	rlf	??__div_to_l_+2,w
  9645  1BF9  0D23               	rlf	??__div_to_l_+3,w
  9646  1BFA  00AC               	movwf	__div_to_l_@cntr
  9647  1BFB  082C               	movf	__div_to_l_@cntr,w
  9648  1BFC  1903               	btfsc	3,2
  9649  1BFD  2BEE               	goto	l3626
  9650  1BFE  3072               	movlw	low (__div_to_l_@f1| 0)
  9651  1BFF  0084               	movwf	4
  9652  1C00  3080               	movlw	128
  9653  1C01  0A84               	incf	4,f
  9654  1C02  0A84               	incf	4,f
  9655  1C03  0480               	iorwf	0,f
  9656  1C04  3072               	movlw	low (__div_to_l_@f1| 0)
  9657  1C05  0A84               	incf	4,f
  9658  1C06  0084               	movwf	4
  9659  1C07  3075               	movlw	low (__div_to_l_@f2| 0)
  9660  1C08  0A84               	incf	4,f
  9661  1C09  0A84               	incf	4,f
  9662  1C0A  0A84               	incf	4,f
  9663  1C0B  0180               	clrf	0
  9664  1C0C  0084               	movwf	4
  9665  1C0D  3080               	movlw	128
  9666  1C0E  0A84               	incf	4,f
  9667  1C0F  0A84               	incf	4,f
  9668  1C10  0480               	iorwf	0,f
  9669  1C11  3075               	movlw	low (__div_to_l_@f2| 0)
  9670  1C12  0A84               	incf	4,f
  9671  1C13  0084               	movwf	4
  9672  1C14  307F               	movlw	127
  9673  1C15  0A84               	incf	4,f
  9674  1C16  0A84               	incf	4,f
  9675  1C17  0A84               	incf	4,f
  9676  1C18  0180               	clrf	0
  9677  1C19  01A8               	clrf	__div_to_l_@quot
  9678  1C1A  01A9               	clrf	__div_to_l_@quot+1
  9679  1C1B  01AA               	clrf	__div_to_l_@quot+2
  9680  1C1C  01AB               	clrf	__div_to_l_@quot+3
  9681  1C1D  02AD               	subwf	__div_to_l_@exp1,f
  9682  1C1E  30A0               	movlw	160
  9683  1C1F  072C               	addwf	__div_to_l_@cntr,w
  9684  1C20  00A0               	movwf	??__div_to_l_
  9685  1C21  02AD               	subwf	__div_to_l_@exp1,f
  9686  1C22  3020               	movlw	32
  9687  1C23  00AC               	movwf	__div_to_l_@cntr
  9688  1C24                     l3642:	
  9689  1C24  3075               	movlw	low (__div_to_l_@f2| 0)
  9690  1C25  1003               	clrc
  9691  1C26  0DA8               	rlf	__div_to_l_@quot,f
  9692  1C27  0DA9               	rlf	__div_to_l_@quot+1,f
  9693  1C28  0DAA               	rlf	__div_to_l_@quot+2,f
  9694  1C29  0DAB               	rlf	__div_to_l_@quot+3,f
  9695  1C2A  2496  160A  158A   	fcall	PL6	;call to abstracted procedure
  9696  1C2D  3072               	movlw	low (__div_to_l_@f1| 0)
  9697  1C2E  0084               	movwf	4
  9698  1C2F  0800               	movf	0,w
  9699  1C30  00A4               	movwf	??__div_to_l_+4
  9700  1C31  0A84               	incf	4,f
  9701  1C32  0800               	movf	0,w
  9702  1C33  00A5               	movwf	??__div_to_l_+5
  9703  1C34  0A84               	incf	4,f
  9704  1C35  0800               	movf	0,w
  9705  1C36  00A6               	movwf	??__div_to_l_+6
  9706  1C37  0A84               	incf	4,f
  9707  1C38  0800               	movf	0,w
  9708  1C39  00A7               	movwf	??__div_to_l_+7
  9709  1C3A  0823               	movf	??__div_to_l_+3,w
  9710  1C3B  0227               	subwf	??__div_to_l_+7,w
  9711  1C3C  1D03               	skipz
  9712  1C3D  2C48               	goto	u3725
  9713  1C3E  0822               	movf	??__div_to_l_+2,w
  9714  1C3F  0226               	subwf	??__div_to_l_+6,w
  9715  1C40  1D03               	skipz
  9716  1C41  2C48               	goto	u3725
  9717  1C42  0821               	movf	??__div_to_l_+1,w
  9718  1C43  0225               	subwf	??__div_to_l_+5,w
  9719  1C44  1D03               	skipz
  9720  1C45  2C48               	goto	u3725
  9721  1C46  0820               	movf	??__div_to_l_,w
  9722  1C47  0224               	subwf	??__div_to_l_+4,w
  9723  1C48                     u3725:	
  9724  1C48  1C03               	skipc
  9725  1C49  2C64               	goto	l839
  9726  1C4A  3075               	movlw	low (__div_to_l_@f2| 0)
  9727  1C4B  2496  160A  158A   	fcall	PL6	;call to abstracted procedure
  9728  1C4E  3072               	movlw	low (__div_to_l_@f1| 0)
  9729  1C4F  0084               	movwf	4
  9730  1C50  0820               	movf	??__div_to_l_,w
  9731  1C51  0280               	subwf	0,f
  9732  1C52  0A84               	incf	4,f
  9733  1C53  0821               	movf	??__div_to_l_+1,w
  9734  1C54  1C03               	skipc
  9735  1C55  0F21               	incfsz	??__div_to_l_+1,w
  9736  1C56  0280               	subwf	0,f
  9737  1C57  0A84               	incf	4,f
  9738  1C58  0822               	movf	??__div_to_l_+2,w
  9739  1C59  1C03               	skipc
  9740  1C5A  0F22               	incfsz	??__div_to_l_+2,w
  9741  1C5B  0280               	subwf	0,f
  9742  1C5C  0A84               	incf	4,f
  9743  1C5D  0823               	movf	??__div_to_l_+3,w
  9744  1C5E  1C03               	skipc
  9745  1C5F  0A23               	incf	??__div_to_l_+3,w
  9746  1C60  0280               	subwf	0,f
  9747  1C61  3003               	movlw	3
  9748  1C62  0284               	subwf	4,f
  9749  1C63  1428               	bsf	__div_to_l_@quot,0
  9750  1C64                     l839:	
  9751  1C64  3072               	movlw	low (__div_to_l_@f1| 0)
  9752  1C65  0084               	movwf	4
  9753  1C66  1003               	clrc
  9754  1C67  0D80               	rlf	0,f
  9755  1C68  0A84               	incf	4,f
  9756  1C69  0D80               	rlf	0,f
  9757  1C6A  0A84               	incf	4,f
  9758  1C6B  0D80               	rlf	0,f
  9759  1C6C  0A84               	incf	4,f
  9760  1C6D  0D80               	rlf	0,f
  9761  1C6E  0BAC               	decfsz	__div_to_l_@cntr,f
  9762  1C6F  2C24               	goto	l3642
  9763  1C70  1FAD               	btfss	__div_to_l_@exp1,7
  9764  1C71  2C7F               	goto	l3660
  9765  1C72  082D               	movf	__div_to_l_@exp1,w
  9766  1C73  3A80               	xorlw	128
  9767  1C74  3E9F               	addlw	159
  9768  1C75  1C03               	btfss	3,0
  9769  1C76  2BEE               	goto	l3626
  9770  1C77                     l3656:	
  9771  1C77  1003               	clrc
  9772  1C78  0CAB               	rrf	__div_to_l_@quot+3,f
  9773  1C79  0CAA               	rrf	__div_to_l_@quot+2,f
  9774  1C7A  0CA9               	rrf	__div_to_l_@quot+1,f
  9775  1C7B  0CA8               	rrf	__div_to_l_@quot,f
  9776  1C7C  0FAD               	incfsz	__div_to_l_@exp1,f
  9777  1C7D  2C77               	goto	l3656
  9778  1C7E  2C8D               	goto	l3668
  9779  1C7F                     l3660:	
  9780  1C7F  3020               	movlw	32
  9781  1C80  022D               	subwf	__div_to_l_@exp1,w
  9782  1C81  1803               	btfsc	3,0
  9783  1C82  2BEE               	goto	l3626
  9784  1C83                     l3666:	
  9785  1C83  082D               	movf	__div_to_l_@exp1,w
  9786  1C84  1903               	btfsc	3,2
  9787  1C85  2C8D               	goto	l3668
  9788  1C86  1003               	clrc
  9789  1C87  0DA8               	rlf	__div_to_l_@quot,f
  9790  1C88  0DA9               	rlf	__div_to_l_@quot+1,f
  9791  1C89  0DAA               	rlf	__div_to_l_@quot+2,f
  9792  1C8A  0DAB               	rlf	__div_to_l_@quot+3,f
  9793  1C8B  03AD               	decf	__div_to_l_@exp1,f
  9794  1C8C  2C83               	goto	l3666
  9795  1C8D                     l3668:	
  9796  1C8D  082B               	movf	__div_to_l_@quot+3,w
  9797  1C8E  00F5               	movwf	?__div_to_l_+3
  9798  1C8F  082A               	movf	__div_to_l_@quot+2,w
  9799  1C90  00F4               	movwf	?__div_to_l_+2
  9800  1C91  0829               	movf	__div_to_l_@quot+1,w
  9801  1C92  00F3               	movwf	?__div_to_l_+1
  9802  1C93  0828               	movf	__div_to_l_@quot,w
  9803  1C94  00F2               	movwf	?__div_to_l_
  9804  1C95  0008               	return
  9805  1C96                     __end_of__div_to_l_:	
  9806  1C96                     PL6:	
  9807  1C96  0084               	movwf	4
  9808  1C97  0800               	movf	0,w
  9809  1C98  00A0               	movwf	??__div_to_l_
  9810  1C99  0A84               	incf	4,f
  9811  1C9A  0800               	movf	0,w
  9812  1C9B  00A1               	movwf	??__div_to_l_+1
  9813  1C9C  0A84               	incf	4,f
  9814  1C9D  0800               	movf	0,w
  9815  1C9E  00A2               	movwf	??__div_to_l_+2
  9816  1C9F  0A84               	incf	4,f
  9817  1CA0  0800               	movf	0,w
  9818  1CA1  00A3               	movwf	??__div_to_l_+3
  9819  1CA2  0008               	return
  9820  1CA3                     __end_ofPL6:	
  9821                           
  9822                           	psect	text62
  9823  0826                     __ptext62:	
  9824 ;; *************** function _adcInit *****************
  9825 ;; Defined at:
  9826 ;;		line 4 in file "tgs4161.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;		None
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;		None               void
  9833 ;; Registers used:
  9834 ;;		status,2
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/100
  9837 ;;		On exit  : 300/100
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9840 ;;      Params:         0       0       0       0       0
  9841 ;;      Locals:         0       0       0       0       0
  9842 ;;      Temps:          0       0       0       0       0
  9843 ;;      Totals:         0       0       0       0       0
  9844 ;;Total ram usage:        0 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    1
  9847 ;; This function calls:
  9848 ;;		Nothing
  9849 ;; This function is called by:
  9850 ;;		_main
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function _adcInit
  9856  0826                     _adcInit:	
  9857                           
  9858                           ;tgs4161.c: 5: TRISA |= 0b00000001;
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _adcInit: [status,2]
  9862  0826  1683               	bsf	3,5	;RP0=1, select bank1
  9863  0827  1303               	bcf	3,6	;RP1=0, select bank1
  9864  0828  1405               	bsf	5,0	;volatile
  9865                           
  9866                           ;tgs4161.c: 6: ANSEL |= 0b00000001;
  9867  0829  1703               	bsf	3,6	;RP1=1, select bank3
  9868  082A  1408               	bsf	8,0	;volatile
  9869                           
  9870                           ;tgs4161.c: 7: ADCON0 = 0b00000000;
  9871  082B  1283               	bcf	3,5	;RP0=0, select bank0
  9872  082C  1303               	bcf	3,6	;RP1=0, select bank0
  9873  082D  019F               	clrf	31	;volatile
  9874                           
  9875                           ;tgs4161.c: 8: ADCON1 |= 0b10000000;
  9876  082E  1683               	bsf	3,5	;RP0=1, select bank1
  9877  082F  179F               	bsf	31,7	;volatile
  9878                           
  9879                           ;tgs4161.c: 9: PIE1bits.ADIE = 0;
  9880  0830  130C               	bcf	12,6	;volatile
  9881  0831  0008               	return
  9882  0832                     __end_of_adcInit:	
  9883                           
  9884                           	psect	text63
  9885  085F                     __ptext63:	
  9886 ;; *************** function _UARTWriteString *****************
  9887 ;; Defined at:
  9888 ;;		line 46 in file "uart.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;  str             2    3[COMMON] PTR unsigned char 
  9891 ;;		 -> STR_29(9), STR_28(10), STR_27(10), 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  i               2    8[COMMON] int 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;		None               void
  9896 ;; Registers used:
  9897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/100
  9900 ;;		On exit  : 300/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9903 ;;      Params:         2       0       0       0       0
  9904 ;;      Locals:         2       0       0       0       0
  9905 ;;      Temps:          3       0       0       0       0
  9906 ;;      Totals:         7       0       0       0       0
  9907 ;;Total ram usage:        7 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    2
  9910 ;; This function calls:
  9911 ;;		_UARTWrite
  9912 ;; This function is called by:
  9913 ;;		_main
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function _UARTWriteString
  9919  085F                     _UARTWriteString:	
  9920                           
  9921                           ;uart.c: 48: int i;
  9922                           ;uart.c: 49: for(i=0;str[i]!='\0';i++)
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in _UARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9926  085F  01F8               	clrf	UARTWriteString@i
  9927  0860  01F9               	clrf	UARTWriteString@i+1
  9928  0861                     l4746:	
  9929  0861  207F               	fcall	PL10	;call to abstracted procedure
  9930  0862  160A  158A  2000  120A  158A  	fcall	stringtab
  9931  0867  3A00               	xorlw	0
  9932  0868  1903               	btfsc	3,2
  9933  0869  0008               	return
  9934                           
  9935                           ;uart.c: 50: UARTWrite(str[i]);
  9936  086A  207F               	fcall	PL10	;call to abstracted procedure
  9937  086B  160A  158A  2000  120A  158A  	fcall	stringtab
  9938  0870  2077  120A  158A   	fcall	_UARTWrite
  9939  0873  0AF8               	incf	UARTWriteString@i,f
  9940  0874  1903               	skipnz
  9941  0875  0AF9               	incf	UARTWriteString@i+1,f
  9942  0876  2861               	goto	l4746
  9943  0877                     __end_of_UARTWriteString:	
  9944  0877                     __ptext64:	
  9945 ;; *************** function _UARTWrite *****************
  9946 ;; Defined at:
  9947 ;;		line 35 in file "uart.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;  data            1    wreg     unsigned char 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;  data            1    2[COMMON] unsigned char 
  9952 ;; Return value:  Size  Location     Type
  9953 ;;		None               void
  9954 ;; Registers used:
  9955 ;;		wreg
  9956 ;; Tracked objects:
  9957 ;;		On entry : 300/0
  9958 ;;		On exit  : 300/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9961 ;;      Params:         0       0       0       0       0
  9962 ;;      Locals:         1       0       0       0       0
  9963 ;;      Temps:          0       0       0       0       0
  9964 ;;      Totals:         1       0       0       0       0
  9965 ;;Total ram usage:        1 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    1
  9968 ;; This function calls:
  9969 ;;		Nothing
  9970 ;; This function is called by:
  9971 ;;		_UARTWriteString
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           
  9976                           ;psect for function _UARTWrite
  9977  0877                     _UARTWrite:	
  9978                           
  9979                           ;incstack = 0
  9980                           ; Regs used in _UARTWrite: [wreg]
  9981                           ;UARTWrite@data stored from wreg
  9982  0877  00F2               	movwf	UARTWrite@data
  9983  0878                     l492:	
  9984                           ;uart.c: 37: while(!TRMT);
  9985                           
  9986  0878  1683               	bsf	3,5	;RP0=1, select bank1
  9987  0879  1C98               	btfss	24,1	;volatile
  9988  087A  2878               	goto	l492
  9989                           
  9990                           ;uart.c: 38: TXREG = data;
  9991  087B  0872               	movf	UARTWrite@data,w
  9992  087C  1283               	bcf	3,5	;RP0=0, select bank0
  9993  087D  0099               	movwf	25	;volatile
  9994  087E  0008               	return
  9995  087F                     __end_of_UARTWrite:	
  9996  087F                     PL10:	
  9997  087F  0878               	movf	UARTWriteString@i,w
  9998  0880  0773               	addwf	UARTWriteString@str,w
  9999  0881  00F6               	movwf	??_UARTWriteString+1
 10000  0882  0874               	movf	UARTWriteString@str+1,w
 10001  0883  00F5               	movwf	??_UARTWriteString
 10002  0884  1803               	skipnc
 10003  0885  0AF5               	incf	??_UARTWriteString,f
 10004  0886  1BF8               	btfsc	UARTWriteString@i,7
 10005  0887  03F5               	decf	??_UARTWriteString,f
 10006  0888  0875               	movf	??_UARTWriteString,w
 10007  0889  00F7               	movwf	??_UARTWriteString+2
 10008  088A  1283               	bcf	3,5	;RP0=0, select bank0
 10009  088B  1303               	bcf	3,6	;RP1=0, select bank0
 10010  088C  00FF               	movwf	127
 10011  088D  0876               	movf	??_UARTWriteString+1,w
 10012  088E  0084               	movwf	4
 10013  088F  0008               	return
 10014  0890                     __end_ofPL10:	
 10015                           
 10016                           	psect	text65
 10017  001D                     __ptext65:	
 10018 ;; *************** function _UARTInit *****************
 10019 ;; Defined at:
 10020 ;;		line 4 in file "uart.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;  baud_rate       4    5[BANK0 ] const unsigned long 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  x               2   14[BANK0 ] unsigned int 
 10025 ;;  k               1    0        unsigned char 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  1    wreg      unsigned char 
 10028 ;; Registers used:
 10029 ;;		wreg, status,2, status,0, pclath, cstack
 10030 ;; Tracked objects:
 10031 ;;		On entry : 300/0
 10032 ;;		On exit  : 200/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10035 ;;      Params:         0       4       0       0       0
 10036 ;;      Locals:         0       7       0       0       0
 10037 ;;      Temps:          0       0       0       0       0
 10038 ;;      Totals:         0      11       0       0       0
 10039 ;;Total ram usage:       11 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; Hardware stack levels required when called:    2
 10042 ;; This function calls:
 10043 ;;		___lldiv
 10044 ;; This function is called by:
 10045 ;;		_main
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           
 10050                           ;psect for function _UARTInit
 10051  001D                     _UARTInit:	
 10052                           
 10053                           ;uart.c: 6: unsigned int x;
 10054                           ;uart.c: 7: unsigned char k;
 10055                           ;uart.c: 9: TRISCbits.TRISC6 = 0;
 10056                           
 10057                           ;incstack = 0
 10058                           ; Regs used in _UARTInit: [wreg+status,2+status,0+pclath+cstack]
 10059  001D  1683               	bsf	3,5	;RP0=1, select bank1
 10060  001E  1307               	bcf	7,6	;volatile
 10061                           
 10062                           ;uart.c: 10: TRISCbits.TRISC7 = 0;
 10063  001F  1387               	bcf	7,7	;volatile
 10064                           
 10065                           ;uart.c: 11: INTCON |= 0b11000000;
 10066  0020  30C0               	movlw	192
 10067  0021  048B               	iorwf	11,f	;volatile
 10068                           
 10069                           ;uart.c: 12: PIE1bits.RCIE = 1;
 10070  0022  168C               	bsf	12,5	;volatile
 10071                           
 10072                           ;uart.c: 14: if((baud_rate > 115200) || (baud_rate < 300)) return 0;
 10073  0023  1283               	bcf	3,5	;RP0=0, select bank0
 10074  0024  0828               	movf	UARTInit@baud_rate+3,w
 10075  0025  1D03               	btfss	3,2
 10076  0026  0008               	return
 10077  0027  3001               	movlw	1
 10078  0028  0227               	subwf	UARTInit@baud_rate+2,w
 10079  0029  1D03               	skipz
 10080  002A  2831               	goto	u4973
 10081  002B  30C2               	movlw	194
 10082  002C  0226               	subwf	UARTInit@baud_rate+1,w
 10083  002D  1D03               	skipz
 10084  002E  2831               	goto	u4973
 10085  002F  3001               	movlw	1
 10086  0030  0225               	subwf	UARTInit@baud_rate,w
 10087  0031                     u4973:	
 10088  0031  1803               	btfsc	3,0
 10089  0032  0008               	return
 10090  0033  0828               	movf	UARTInit@baud_rate+3,w
 10091  0034  1D03               	btfss	3,2
 10092  0035  2841               	goto	l4714
 10093  0036  0827               	movf	UARTInit@baud_rate+2,w
 10094  0037  1D03               	btfss	3,2
 10095  0038  2841               	goto	l4714
 10096  0039  3001               	movlw	1
 10097  003A  0226               	subwf	UARTInit@baud_rate+1,w
 10098  003B  1D03               	skipz
 10099  003C  283F               	goto	u4983
 10100  003D  302C               	movlw	44
 10101  003E  0225               	subwf	UARTInit@baud_rate,w
 10102  003F                     u4983:	
 10103  003F  1C03               	btfss	3,0
 10104  0040  0008               	return
 10105  0041                     l4714:	
 10106                           
 10107                           ;uart.c: 18: }
 10108                           ;uart.c: 20: if(baud_rate == 9600) x = (8000000 / baud_rate)/k - 1;
 10109  0041  3080               	movlw	128
 10110  0042  0625               	xorwf	UARTInit@baud_rate,w
 10111  0043  3025               	movlw	37
 10112  0044  1903               	skipnz
 10113  0045  0626               	xorwf	UARTInit@baud_rate+1,w
 10114  0046  0427               	iorwf	UARTInit@baud_rate+2,w
 10115  0047  0428               	iorwf	UARTInit@baud_rate+3,w
 10116  0048  1D03               	btfss	3,2
 10117  0049  2860               	goto	l4720
 10118  004A  2098  120A  118A   	fcall	PL16	;call to abstracted procedure
 10119  004D  2552  120A  118A   	fcall	___lldiv
 10120  0050  2082  120A  118A   	fcall	PL4	;call to abstracted procedure
 10121  0053  2552  120A  118A   	fcall	___lldiv
 10122  0056  0873               	movf	?___lldiv+1,w
 10123  0057  00AF               	movwf	UARTInit@x+1
 10124  0058  0872               	movf	?___lldiv,w
 10125  0059  00AE               	movwf	UARTInit@x
 10126  005A  30FF               	movlw	255
 10127  005B  07AE               	addwf	UARTInit@x,f
 10128  005C  1803               	skipnc
 10129  005D  0AAF               	incf	UARTInit@x+1,f
 10130  005E  07AF               	addwf	UARTInit@x+1,f
 10131  005F  286E               	goto	l4722
 10132  0060                     l4720:	
 10133                           
 10134                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 10135  0060  2098  120A  118A   	fcall	PL16	;call to abstracted procedure
 10136  0063  2552  120A  118A   	fcall	___lldiv
 10137                           
 10138                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 10139  0066  2082  120A  118A   	fcall	PL4	;call to abstracted procedure
 10140  0069  2552               	fcall	___lldiv
 10141  006A  0873               	movf	?___lldiv+1,w
 10142  006B  00AF               	movwf	UARTInit@x+1
 10143  006C  0872               	movf	?___lldiv,w
 10144  006D  00AE               	movwf	UARTInit@x
 10145  006E                     l4722:	
 10146                           
 10147                           ;uart.c: 23: BRGH = 1;
 10148  006E  1683               	bsf	3,5	;RP0=1, select bank1
 10149  006F  1518               	bsf	24,2	;volatile
 10150                           
 10151                           ;uart.c: 24: BRG16 = 1;
 10152  0070  1703               	bsf	3,6	;RP1=1, select bank3
 10153  0071  1587               	bsf	7,3	;volatile
 10154                           
 10155                           ;uart.c: 25: SPBRG = x & 0xFF;
 10156  0072  1283               	bcf	3,5	;RP0=0, select bank0
 10157  0073  1303               	bcf	3,6	;RP1=0, select bank0
 10158  0074  082E               	movf	UARTInit@x,w
 10159  0075  1683               	bsf	3,5	;RP0=1, select bank1
 10160  0076  0099               	movwf	25	;volatile
 10161                           
 10162                           ;uart.c: 26: SPBRGH = (x>>8) & 0xFF;
 10163  0077  1283               	bcf	3,5	;RP0=0, select bank0
 10164  0078  082F               	movf	UARTInit@x+1,w
 10165  0079  1683               	bsf	3,5	;RP0=1, select bank1
 10166  007A  009A               	movwf	26	;volatile
 10167                           
 10168                           ;uart.c: 27: SYNC = 0;
 10169  007B  1218               	bcf	24,4	;volatile
 10170                           
 10171                           ;uart.c: 28: SPEN = 1;
 10172  007C  1283               	bcf	3,5	;RP0=0, select bank0
 10173  007D  1798               	bsf	24,7	;volatile
 10174                           
 10175                           ;uart.c: 29: CREN = 1;
 10176  007E  1618               	bsf	24,4	;volatile
 10177                           
 10178                           ;uart.c: 30: TXEN = 1;
 10179  007F  1683               	bsf	3,5	;RP0=1, select bank1
 10180  0080  1698               	bsf	24,5	;volatile
 10181  0081  0008               	return
 10182  0082                     __end_of_UARTInit:	
 10183  0082                     PL4:	
 10184  0082  0875               	movf	?___lldiv+3,w
 10185  0083  00AC               	movwf	_UARTInit$1253+3
 10186  0084  0874               	movf	?___lldiv+2,w
 10187  0085  00AB               	movwf	_UARTInit$1253+2
 10188  0086  0873               	movf	?___lldiv+1,w
 10189  0087  00AA               	movwf	_UARTInit$1253+1
 10190  0088  0872               	movf	?___lldiv,w
 10191  0089  00A9               	movwf	_UARTInit$1253
 10192  008A  3004               	movlw	4
 10193  008B  00F2               	movwf	___lldiv@divisor
 10194  008C  01F3               	clrf	___lldiv@divisor+1
 10195  008D  01F4               	clrf	___lldiv@divisor+2
 10196  008E  01F5               	clrf	___lldiv@divisor+3
 10197  008F  082C               	movf	_UARTInit$1253+3,w
 10198  0090  00F9               	movwf	___lldiv@dividend+3
 10199  0091  082B               	movf	_UARTInit$1253+2,w
 10200  0092  00F8               	movwf	___lldiv@dividend+2
 10201  0093  082A               	movf	_UARTInit$1253+1,w
 10202  0094  00F7               	movwf	___lldiv@dividend+1
 10203  0095  0829               	movf	_UARTInit$1253,w
 10204  0096  00F6               	movwf	___lldiv@dividend
 10205  0097  0008               	return
 10206  0098                     __end_ofPL4:	
 10207  0098                     PL16:	
 10208  0098  0828               	movf	UARTInit@baud_rate+3,w
 10209  0099  00F5               	movwf	___lldiv@divisor+3
 10210  009A  0827               	movf	UARTInit@baud_rate+2,w
 10211  009B  00F4               	movwf	___lldiv@divisor+2
 10212  009C  0826               	movf	UARTInit@baud_rate+1,w
 10213  009D  00F3               	movwf	___lldiv@divisor+1
 10214  009E  0825               	movf	UARTInit@baud_rate,w
 10215  009F  00F2               	movwf	___lldiv@divisor
 10216  00A0  307A               	movlw	122
 10217  00A1  01F9               	clrf	___lldiv@dividend+3
 10218  00A2  00F8               	movwf	___lldiv@dividend+2
 10219  00A3  3012               	movlw	18
 10220  00A4  00F7               	movwf	___lldiv@dividend+1
 10221  00A5  01F6               	clrf	___lldiv@dividend
 10222  00A6  0008               	return
 10223  00A7                     __end_ofPL16:	
 10224  00A7                     __ptext38:	
 10225 ;; *************** function _sprintf *****************
 10226 ;; Defined at:
 10227 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;  sp              1    wreg     PTR unsigned char 
 10230 ;;		 -> humidity(5), temperature(5), 
 10231 ;;  f               2   52[BANK0 ] PTR const unsigned char 
 10232 ;;		 -> STR_26(6), STR_25(6), STR_22(6), STR_21(6), 
 10233 ;;		 -> STR_20(6), STR_17(6), STR_11(6), STR_5(6), 
 10234 ;;		 -> STR_2(6), 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  sp              1   18[BANK1 ] PTR unsigned char 
 10237 ;;		 -> humidity(5), temperature(5), 
 10238 ;;  tmpval          4   10[BANK1 ] struct .
 10239 ;;  val             4    6[BANK1 ] unsigned long 
 10240 ;;  fval            3   19[BANK1 ] unsigned long 
 10241 ;;  prec            2   16[BANK1 ] int 
 10242 ;;  exp             2   14[BANK1 ] int 
 10243 ;;  flag            2    4[BANK1 ] unsigned short 
 10244 ;;  cp              2    0        PTR const unsigned char 
 10245 ;;  len             2    0        unsigned int 
 10246 ;;  width           2    0        int 
 10247 ;;  c               1   22[BANK1 ] char 
 10248 ;;  ap              1    3[BANK1 ] PTR void [1]
 10249 ;;		 -> ?_sprintf(2), 
 10250 ;;  d               1    0        unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  2   52[BANK0 ] int 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 300/0
 10257 ;;		On exit  : B00/100
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10260 ;;      Params:         0       5       0       0       0
 10261 ;;      Locals:         0       0      23       0       0
 10262 ;;      Temps:          0       5       0       0       0
 10263 ;;      Totals:         0      10      23       0       0
 10264 ;;Total ram usage:       33 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    4
 10267 ;; This function calls:
 10268 ;;		___awdiv
 10269 ;;		___ftadd
 10270 ;;		___ftge
 10271 ;;		___ftmul
 10272 ;;		___ftneg
 10273 ;;		___ftsub
 10274 ;;		___fttol
 10275 ;;		___lldiv
 10276 ;;		___llmod
 10277 ;;		___lltoft
 10278 ;;		___wmul
 10279 ;;		__div_to_l_
 10280 ;;		__tdiv_to_l_
 10281 ;;		_fround
 10282 ;;		_isdigit
 10283 ;;		_scale
 10284 ;; This function is called by:
 10285 ;;		_displayAirTemp
 10286 ;;		_displayAirMoist
 10287 ;;		_displaySoilTemp
 10288 ;;		_menuHumi
 10289 ;;		_menu
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _sprintf
 10295  00A7                     _sprintf:	
 10296                           
 10297                           ;incstack = 0
 10298                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10299                           ;sprintf@sp stored from wreg
 10300  00A7  1683               	bsf	3,5	;RP0=1, select bank1
 10301  00A8  00D4               	movwf	sprintf@sp^(0+128)
 10302                           
 10303                           ;doprnt.c: 494: va_list ap;
 10304                           ;doprnt.c: 499: signed char c;
 10305                           ;doprnt.c: 501: int width;
 10306                           ;doprnt.c: 504: int prec;
 10307                           ;doprnt.c: 508: unsigned short flag;
 10308                           ;doprnt.c: 515: char d;
 10309                           ;doprnt.c: 516: double fval;
 10310                           ;doprnt.c: 517: int exp;
 10311                           ;doprnt.c: 523: union {
 10312                           ;doprnt.c: 524: unsigned long vd;
 10313                           ;doprnt.c: 525: double integ;
 10314                           ;doprnt.c: 526: } tmpval;
 10315                           ;doprnt.c: 528: unsigned long val;
 10316                           ;doprnt.c: 529: unsigned len;
 10317                           ;doprnt.c: 530: const char * cp;
 10318                           ;doprnt.c: 533: *ap = __va_start();
 10319  00A9  3056               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 10320  00AA  00C5               	movwf	sprintf@ap^(0+128)
 10321  00AB                     l5592:	
 10322                           ;doprnt.c: 536: while(c = *f++) {
 10323                           
 10324  00AB  2794               	fcall	PL38	;call to abstracted procedure
 10325  00AC  160A  158A  2000  120A  118A  	fcall	stringtab
 10326  00B1  1683               	bsf	3,5	;RP0=1, select bank1
 10327  00B2  00D8               	movwf	sprintf@c^(0+128)
 10328  00B3  0858               	movf	sprintf@c^(0+128),w
 10329  00B4  1903               	btfsc	3,2
 10330  00B5  2C87               	goto	l5594
 10331                           
 10332                           ;doprnt.c: 538: if(c != '%')
 10333  00B6  3025               	movlw	37
 10334  00B7  0658               	xorwf	sprintf@c^(0+128),w
 10335  00B8  1903               	btfsc	3,2
 10336  00B9  28BE               	goto	l5396
 10337                           
 10338                           ;doprnt.c: 540: {
 10339                           ;doprnt.c: 541: ((*sp++ = (c)));
 10340  00BA  0854               	movf	sprintf@sp^(0+128),w
 10341  00BB  0084               	movwf	4
 10342  00BC  0858               	movf	sprintf@c^(0+128),w
 10343  00BD  2C83               	goto	L16
 10344  00BE                     l5396:	
 10345                           ;doprnt.c: 542: continue;
 10346                           
 10347                           
 10348                           ;doprnt.c: 543: }
 10349                           ;doprnt.c: 548: flag = 0;
 10350  00BE  01C6               	clrf	sprintf@flag^(0+128)
 10351  00BF  01C7               	clrf	(sprintf@flag+1)^(0+128)
 10352                           
 10353                           ;doprnt.c: 611: if(*f == '.') {
 10354  00C0  27D9               	fcall	PL94	;call to abstracted procedure
 10355  00C1  160A  158A  2000  120A  118A  	fcall	stringtab
 10356  00C6  3A2E               	xorlw	46
 10357  00C7  1D03               	skipz
 10358  00C8  2905               	goto	l5412
 10359                           
 10360                           ;doprnt.c: 612: flag |= 0x4000;
 10361  00C9  1683               	bsf	3,5	;RP0=1, select bank1
 10362  00CA  1747               	bsf	(sprintf@flag^(0+128)+1),6
 10363                           
 10364                           ;doprnt.c: 613: f++;
 10365  00CB  1283               	bcf	3,5	;RP0=0, select bank0
 10366  00CC  0AD4               	incf	sprintf@f,f
 10367  00CD  1903               	skipnz
 10368  00CE  0AD5               	incf	sprintf@f+1,f
 10369                           
 10370                           ;doprnt.c: 620: {
 10371                           ;doprnt.c: 621: prec = 0;
 10372  00CF  1683               	bsf	3,5	;RP0=1, select bank1
 10373  00D0  01D2               	clrf	sprintf@prec^(0+128)
 10374  00D1  01D3               	clrf	(sprintf@prec+1)^(0+128)
 10375  00D2                     l5410:	
 10376                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 10377                           
 10378  00D2  27D9               	fcall	PL94	;call to abstracted procedure
 10379  00D3  160A  158A  2000  120A  118A  	fcall	stringtab
 10380  00D8  2731  120A  118A   	fcall	_isdigit
 10381  00DB  1C03               	btfss	3,0
 10382  00DC  290C               	goto	l5418
 10383                           
 10384                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 10385  00DD  1683               	bsf	3,5	;RP0=1, select bank1
 10386  00DE  0853               	movf	(sprintf@prec+1)^(0+128),w
 10387  00DF  00F3               	movwf	___wmul@multiplier+1
 10388  00E0  0852               	movf	sprintf@prec^(0+128),w
 10389  00E1  00F2               	movwf	___wmul@multiplier
 10390  00E2  300A               	movlw	10
 10391  00E3  00F4               	movwf	___wmul@multiplicand
 10392  00E4  01F5               	clrf	___wmul@multiplicand+1
 10393  00E5  259B  120A  118A   	fcall	___wmul
 10394  00E8  27D9               	fcall	PL94	;call to abstracted procedure
 10395  00E9  160A  158A  2000  120A  118A  	fcall	stringtab
 10396  00EE  0772               	addwf	?___wmul,w
 10397  00EF  00D9               	movwf	??_sprintf
 10398  00F0  3000               	movlw	0
 10399  00F1  1803               	skipnc
 10400  00F2  3001               	movlw	1
 10401  00F3  0773               	addwf	?___wmul+1,w
 10402  00F4  00DA               	movwf	??_sprintf+1
 10403  00F5  0859               	movf	??_sprintf,w
 10404  00F6  3ED0               	addlw	208
 10405  00F7  1683               	bsf	3,5	;RP0=1, select bank1
 10406  00F8  00D2               	movwf	sprintf@prec^(0+128)
 10407  00F9  1283               	bcf	3,5	;RP0=0, select bank0
 10408  00FA  085A               	movf	??_sprintf+1,w
 10409  00FB  1803               	skipnc
 10410  00FC  3E01               	addlw	1
 10411  00FD  3EFF               	addlw	255
 10412  00FE  1683               	bsf	3,5	;RP0=1, select bank1
 10413  00FF  00D3               	movwf	(sprintf@prec+1)^(0+128)
 10414  0100  1283               	bcf	3,5	;RP0=0, select bank0
 10415  0101  0AD4               	incf	sprintf@f,f
 10416  0102  1903               	skipnz
 10417  0103  0AD5               	incf	sprintf@f+1,f
 10418  0104  28D2               	goto	l5410
 10419  0105                     l5412:	
 10420                           
 10421                           ;doprnt.c: 626: prec = 0;
 10422  0105  1683               	bsf	3,5	;RP0=1, select bank1
 10423  0106  01D2               	clrf	sprintf@prec^(0+128)
 10424  0107  01D3               	clrf	(sprintf@prec+1)^(0+128)
 10425                           
 10426                           ;doprnt.c: 628: flag |= 0x1000;
 10427  0108  1647               	bsf	(sprintf@flag^(0+128)+1),4
 10428  0109  290C               	goto	l5418
 10429  010A                     l550:	
 10430                           ;doprnt.c: 662: case 'f':
 10431                           
 10432                           
 10433                           ;doprnt.c: 663: flag |= 0x400;
 10434  010A  1547               	bsf	(sprintf@flag^(0+128)+1),2
 10435                           
 10436                           ;doprnt.c: 664: break;
 10437  010B  291B               	goto	l5420
 10438  010C                     l5418:	
 10439  010C  2794               	fcall	PL38	;call to abstracted procedure
 10440  010D  160A  158A  2000  120A  118A  	fcall	stringtab
 10441  0112  1683               	bsf	3,5	;RP0=1, select bank1
 10442  0113  00D8               	movwf	sprintf@c^(0+128)
 10443                           
 10444                           ; Switch size 1, requested type "space"
 10445                           ; Number of cases is 2, Range of values is 0 to 102
 10446                           ; switch strategies available:
 10447                           ; Name         Instructions Cycles
 10448                           ; simple_byte            7     4 (average)
 10449                           ; jumptable            260     6 (fixed)
 10450                           ;	Chosen strategy is simple_byte
 10451  0114  3A00               	xorlw	0	; case 0
 10452  0115  1903               	skipnz
 10453  0116  2C87               	goto	l5594
 10454  0117  3A66               	xorlw	102	; case 102
 10455  0118  1903               	skipnz
 10456  0119  290A               	goto	l550
 10457  011A  28AB               	goto	l5592
 10458  011B                     l5420:	
 10459                           
 10460                           ;doprnt.c: 825: if(flag & (0x700)) {
 10461  011B  1283               	bcf	3,5	;RP0=0, select bank0
 10462  011C  3007               	movlw	7
 10463  011D  01D9               	clrf	??_sprintf
 10464  011E  1683               	bsf	3,5	;RP0=1, select bank1
 10465  011F  0547               	andwf	(sprintf@flag+1)^(0+128),w
 10466  0120  1283               	bcf	3,5	;RP0=0, select bank0
 10467  0121  00DA               	movwf	??_sprintf+1
 10468  0122  0459               	iorwf	??_sprintf,w
 10469  0123  1903               	btfsc	3,2
 10470  0124  2C45               	goto	l5572
 10471                           
 10472                           ;doprnt.c: 827: if(flag & 0x1000)
 10473  0125  1683               	bsf	3,5	;RP0=1, select bank1
 10474  0126  1E47               	btfss	(sprintf@flag+1)^(0+128),4
 10475  0127  292B               	goto	l5426
 10476                           
 10477                           ;doprnt.c: 829: prec = 6;
 10478  0128  3006               	movlw	6
 10479  0129  00D2               	movwf	sprintf@prec^(0+128)
 10480  012A  01D3               	clrf	(sprintf@prec+1)^(0+128)
 10481  012B                     l5426:	
 10482                           
 10483                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10484  012B  0845               	movf	sprintf@ap^(0+128),w
 10485  012C  0084               	movwf	4
 10486  012D  1383               	bcf	3,7	;select IRP bank0
 10487  012E  0800               	movf	0,w
 10488  012F  00D5               	movwf	sprintf@fval^(0+128)
 10489  0130  0A84               	incf	4,f
 10490  0131  0800               	movf	0,w
 10491  0132  00D6               	movwf	(sprintf@fval+1)^(0+128)
 10492  0133  0A84               	incf	4,f
 10493  0134  0800               	movf	0,w
 10494  0135  00D7               	movwf	(sprintf@fval+2)^(0+128)
 10495  0136  3003               	movlw	3
 10496  0137  07C5               	addwf	sprintf@ap^(0+128),f
 10497                           
 10498                           ;doprnt.c: 831: if(fval < 0.0) {
 10499  0138  0855               	movf	sprintf@fval^(0+128),w
 10500  0139  1283               	bcf	3,5	;RP0=0, select bank0
 10501  013A  00CE               	movwf	___ftge@ff1
 10502  013B  1683               	bsf	3,5	;RP0=1, select bank1
 10503  013C  0856               	movf	(sprintf@fval+1)^(0+128),w
 10504  013D  1283               	bcf	3,5	;RP0=0, select bank0
 10505  013E  00CF               	movwf	___ftge@ff1+1
 10506  013F  1683               	bsf	3,5	;RP0=1, select bank1
 10507  0140  0857               	movf	(sprintf@fval+2)^(0+128),w
 10508  0141  1283               	bcf	3,5	;RP0=0, select bank0
 10509  0142  00D0               	movwf	___ftge@ff1+2
 10510  0143  01D1               	clrf	___ftge@ff2
 10511  0144  01D2               	clrf	___ftge@ff2+1
 10512  0145  01D3               	clrf	___ftge@ff2+2
 10513  0146  248C  120A  118A   	fcall	___ftge
 10514  0149  1803               	btfsc	3,0
 10515  014A  295D               	goto	l5436
 10516                           
 10517                           ;doprnt.c: 832: fval = -fval;
 10518  014B  1683               	bsf	3,5	;RP0=1, select bank1
 10519  014C  0855               	movf	sprintf@fval^(0+128),w
 10520  014D  00F2               	movwf	___ftneg@f1
 10521  014E  0856               	movf	(sprintf@fval+1)^(0+128),w
 10522  014F  00F3               	movwf	___ftneg@f1+1
 10523  0150  0857               	movf	(sprintf@fval+2)^(0+128),w
 10524  0151  00F4               	movwf	___ftneg@f1+2
 10525  0152  25B4  120A  118A   	fcall	___ftneg
 10526  0155  0872               	movf	?___ftneg,w
 10527  0156  00D5               	movwf	sprintf@fval^(0+128)
 10528  0157  0873               	movf	?___ftneg+1,w
 10529  0158  00D6               	movwf	(sprintf@fval+1)^(0+128)
 10530  0159  0874               	movf	?___ftneg+2,w
 10531  015A  00D7               	movwf	(sprintf@fval+2)^(0+128)
 10532                           
 10533                           ;doprnt.c: 833: flag |= 0x03;
 10534  015B  3003               	movlw	3
 10535  015C  04C6               	iorwf	sprintf@flag^(0+128),f
 10536  015D                     l5436:	
 10537                           
 10538                           ;doprnt.c: 834: }
 10539                           ;doprnt.c: 835: exp = 0;
 10540  015D  1683               	bsf	3,5	;RP0=1, select bank1
 10541  015E  01D0               	clrf	sprintf@exp^(0+128)
 10542  015F  01D1               	clrf	(sprintf@exp+1)^(0+128)
 10543                           
 10544                           ;doprnt.c: 836: if( fval!=0) {
 10545  0160  0857               	movf	(sprintf@fval+2)^(0+128),w
 10546  0161  0456               	iorwf	(sprintf@fval+1)^(0+128),w
 10547  0162  0455               	iorwf	sprintf@fval^(0+128),w
 10548  0163  1903               	skipnz
 10549  0164  2A04               	goto	l5468
 10550                           
 10551                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10552  0165  30D5               	movlw	low (sprintf@fval| 0)
 10553  0166  0084               	movwf	4
 10554  0167  1383               	bcf	3,7	;select IRP bank1
 10555  0168  0800               	movf	0,w
 10556  0169  1283               	bcf	3,5	;RP0=0, select bank0
 10557  016A  00D9               	movwf	??_sprintf
 10558  016B  0A84               	incf	4,f
 10559  016C  0800               	movf	0,w
 10560  016D  00DA               	movwf	??_sprintf+1
 10561  016E  0A84               	incf	4,f
 10562  016F  0800               	movf	0,w
 10563  0170  00DB               	movwf	??_sprintf+2
 10564  0171  0A84               	incf	4,f
 10565  0172  0800               	movf	0,w
 10566  0173  00DC               	movwf	??_sprintf+3
 10567  0174  300F               	movlw	15
 10568  0175                     u6125:	
 10569  0175  1003               	clrc
 10570  0176  0CDC               	rrf	??_sprintf+3,f
 10571  0177  0CDB               	rrf	??_sprintf+2,f
 10572  0178  0CDA               	rrf	??_sprintf+1,f
 10573  0179  0CD9               	rrf	??_sprintf,f
 10574  017A  3EFF               	addlw	-1
 10575  017B  1D03               	skipz
 10576  017C  2975               	goto	u6125
 10577  017D  085A               	movf	??_sprintf+1,w
 10578  017E  1683               	bsf	3,5	;RP0=1, select bank1
 10579  017F  00D1               	movwf	(sprintf@exp+1)^(0+128)
 10580  0180  1283               	bcf	3,5	;RP0=0, select bank0
 10581  0181  0859               	movf	??_sprintf,w
 10582  0182  1683               	bsf	3,5	;RP0=1, select bank1
 10583  0183  00D0               	movwf	sprintf@exp^(0+128)
 10584  0184  3082               	movlw	-126
 10585  0185  01D1               	clrf	(sprintf@exp+1)^(0+128)
 10586  0186  07D0               	addwf	sprintf@exp^(0+128),f
 10587  0187  1C03               	skipc
 10588  0188  03D1               	decf	(sprintf@exp+1)^(0+128),f
 10589                           
 10590                           ;doprnt.c: 838: exp--;
 10591  0189  30FF               	movlw	-1
 10592  018A  07D0               	addwf	sprintf@exp^(0+128),f
 10593  018B  1C03               	skipc
 10594  018C  03D1               	decf	(sprintf@exp+1)^(0+128),f
 10595                           
 10596                           ;doprnt.c: 839: exp *= 3;
 10597  018D  3003               	movlw	3
 10598  018E  00F2               	movwf	___wmul@multiplier
 10599  018F  01F3               	clrf	___wmul@multiplier+1
 10600  0190  0851               	movf	(sprintf@exp+1)^(0+128),w
 10601  0191  00F5               	movwf	___wmul@multiplicand+1
 10602  0192  0850               	movf	sprintf@exp^(0+128),w
 10603  0193  00F4               	movwf	___wmul@multiplicand
 10604  0194  259B               	fcall	___wmul
 10605  0195  0873               	movf	?___wmul+1,w
 10606  0196  1683               	bsf	3,5	;RP0=1, select bank1
 10607  0197  00D1               	movwf	(sprintf@exp+1)^(0+128)
 10608  0198  0872               	movf	?___wmul,w
 10609  0199  00D0               	movwf	sprintf@exp^(0+128)
 10610                           
 10611                           ;doprnt.c: 840: exp /= 10;
 10612  019A  300A               	movlw	10
 10613  019B  1283               	bcf	3,5	;RP0=0, select bank0
 10614  019C  00A0               	movwf	___awdiv@divisor
 10615  019D  01A1               	clrf	___awdiv@divisor+1
 10616  019E  1683               	bsf	3,5	;RP0=1, select bank1
 10617  019F  0851               	movf	(sprintf@exp+1)^(0+128),w
 10618  01A0  1283               	bcf	3,5	;RP0=0, select bank0
 10619  01A1  00A3               	movwf	___awdiv@dividend+1
 10620  01A2  1683               	bsf	3,5	;RP0=1, select bank1
 10621  01A3  0850               	movf	sprintf@exp^(0+128),w
 10622  01A4  1283               	bcf	3,5	;RP0=0, select bank0
 10623  01A5  00A2               	movwf	___awdiv@dividend
 10624  01A6  160A  118A  2628  120A  118A  	fcall	___awdiv
 10625  01AB  0821               	movf	?___awdiv+1,w
 10626  01AC  1683               	bsf	3,5	;RP0=1, select bank1
 10627  01AD  00D1               	movwf	(sprintf@exp+1)^(0+128)
 10628  01AE  1283               	bcf	3,5	;RP0=0, select bank0
 10629  01AF  0820               	movf	?___awdiv,w
 10630  01B0  1683               	bsf	3,5	;RP0=1, select bank1
 10631  01B1  00D0               	movwf	sprintf@exp^(0+128)
 10632                           
 10633                           ;doprnt.c: 841: if(exp < 0)
 10634  01B2  1FD1               	btfss	(sprintf@exp+1)^(0+128),7
 10635  01B3  29B8               	goto	l5456
 10636                           
 10637                           ;doprnt.c: 842: exp--;
 10638  01B4  30FF               	movlw	-1
 10639  01B5  07D0               	addwf	sprintf@exp^(0+128),f
 10640  01B6  1C03               	skipc
 10641  01B7  03D1               	decf	(sprintf@exp+1)^(0+128),f
 10642  01B8                     l5456:	
 10643                           
 10644                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10645  01B8  0350               	decf	sprintf@exp^(0+128),w
 10646  01B9  3AFF               	xorlw	255
 10647  01BA  160A  118A  248E  120A  118A  	fcall	_scale
 10648                           
 10649                           ;doprnt.c: 847: tmpval.integ *= fval;
 10650  01BF  277F  120A  118A   	fcall	PL26	;call to abstracted procedure
 10651  01C2  27B8               	fcall	PL50	;call to abstracted procedure
 10652  01C3  1683               	bsf	3,5	;RP0=1, select bank1
 10653  01C4  084C               	movf	sprintf@tmpval^(0+128),w
 10654  01C5  1283               	bcf	3,5	;RP0=0, select bank0
 10655  01C6  00AB               	movwf	___ftmul@f2
 10656  01C7  1683               	bsf	3,5	;RP0=1, select bank1
 10657  01C8  084D               	movf	(sprintf@tmpval+1)^(0+128),w
 10658  01C9  1283               	bcf	3,5	;RP0=0, select bank0
 10659  01CA  00AC               	movwf	___ftmul@f2+1
 10660  01CB  1683               	bsf	3,5	;RP0=1, select bank1
 10661  01CC  084E               	movf	(sprintf@tmpval+2)^(0+128),w
 10662  01CD  1283               	bcf	3,5	;RP0=0, select bank0
 10663  01CE  00AD               	movwf	___ftmul@f2+2
 10664  01CF  160A  118A  26AA  120A  118A  	fcall	___ftmul
 10665  01D4  0828               	movf	?___ftmul,w
 10666  01D5  1683               	bsf	3,5	;RP0=1, select bank1
 10667  01D6  00CC               	movwf	sprintf@tmpval^(0+128)
 10668  01D7  1283               	bcf	3,5	;RP0=0, select bank0
 10669  01D8  0829               	movf	?___ftmul+1,w
 10670  01D9  1683               	bsf	3,5	;RP0=1, select bank1
 10671  01DA  00CD               	movwf	(sprintf@tmpval+1)^(0+128)
 10672  01DB  1283               	bcf	3,5	;RP0=0, select bank0
 10673  01DC  082A               	movf	?___ftmul+2,w
 10674  01DD  1683               	bsf	3,5	;RP0=1, select bank1
 10675  01DE  00CE               	movwf	(sprintf@tmpval+2)^(0+128)
 10676                           
 10677                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10678  01DF  2756  120A  118A   	fcall	PL8	;call to abstracted procedure
 10679  01E2  3080               	movlw	128
 10680  01E3  01D1               	clrf	___ftge@ff2
 10681  01E4  00D2               	movwf	___ftge@ff2+1
 10682  01E5  303F               	movlw	63
 10683  01E6  00D3               	movwf	___ftge@ff2+2
 10684  01E7  248C  120A  118A   	fcall	___ftge
 10685  01EA  1803               	btfsc	3,0
 10686  01EB  29F2               	goto	l5464
 10687                           
 10688                           ;doprnt.c: 849: exp--;
 10689  01EC  30FF               	movlw	-1
 10690  01ED  1683               	bsf	3,5	;RP0=1, select bank1
 10691  01EE  07D0               	addwf	sprintf@exp^(0+128),f
 10692  01EF  1C03               	skipc
 10693  01F0  03D1               	decf	(sprintf@exp+1)^(0+128),f
 10694  01F1  2A04               	goto	l5468
 10695  01F2                     l5464:	
 10696                           
 10697                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10698  01F2  1683               	bsf	3,5	;RP0=1, select bank1
 10699  01F3  2756  120A  118A   	fcall	PL8	;call to abstracted procedure
 10700  01F6  3020               	movlw	32
 10701  01F7  01D1               	clrf	___ftge@ff2
 10702  01F8  00D2               	movwf	___ftge@ff2+1
 10703  01F9  3041               	movlw	65
 10704  01FA  00D3               	movwf	___ftge@ff2+2
 10705  01FB  248C  120A  118A   	fcall	___ftge
 10706  01FE  1C03               	btfss	3,0
 10707  01FF  2A04               	goto	l5468
 10708                           
 10709                           ;doprnt.c: 851: exp++;
 10710  0200  1683               	bsf	3,5	;RP0=1, select bank1
 10711  0201  0AD0               	incf	sprintf@exp^(0+128),f
 10712  0202  1903               	skipnz
 10713  0203  0AD1               	incf	(sprintf@exp+1)^(0+128),f
 10714  0204                     l5468:	
 10715                           
 10716                           ;doprnt.c: 852: }
 10717                           ;doprnt.c: 1112: if(prec <= 12)
 10718  0204  1683               	bsf	3,5	;RP0=1, select bank1
 10719  0205  0853               	movf	(sprintf@prec+1)^(0+128),w
 10720  0206  3A80               	xorlw	128
 10721  0207  00FF               	movwf	127
 10722  0208  3080               	movlw	128
 10723  0209  027F               	subwf	127,w
 10724  020A  1D03               	skipz
 10725  020B  2A0E               	goto	u6165
 10726  020C  300D               	movlw	13
 10727  020D  0252               	subwf	sprintf@prec^(0+128),w
 10728  020E                     u6165:	
 10729  020E  1803               	skipnc
 10730  020F  2A38               	goto	l5472
 10731                           
 10732                           ;doprnt.c: 1113: fval += fround(prec);
 10733  0210  1683               	bsf	3,5	;RP0=1, select bank1
 10734  0211  1303               	bcf	3,6	;RP1=0, select bank1
 10735  0212  0852               	movf	sprintf@prec^(0+128),w
 10736  0213  160A  158A  269D  120A  118A  	fcall	_fround
 10737  0218  0837               	movf	?_fround,w
 10738  0219  00C2               	movwf	___ftadd@f1
 10739  021A  0838               	movf	?_fround+1,w
 10740  021B  00C3               	movwf	___ftadd@f1+1
 10741  021C  0839               	movf	?_fround+2,w
 10742  021D  00C4               	movwf	___ftadd@f1+2
 10743  021E  1683               	bsf	3,5	;RP0=1, select bank1
 10744  021F  0855               	movf	sprintf@fval^(0+128),w
 10745  0220  1283               	bcf	3,5	;RP0=0, select bank0
 10746  0221  00C5               	movwf	___ftadd@f2
 10747  0222  1683               	bsf	3,5	;RP0=1, select bank1
 10748  0223  0856               	movf	(sprintf@fval+1)^(0+128),w
 10749  0224  1283               	bcf	3,5	;RP0=0, select bank0
 10750  0225  00C6               	movwf	___ftadd@f2+1
 10751  0226  1683               	bsf	3,5	;RP0=1, select bank1
 10752  0227  0857               	movf	(sprintf@fval+2)^(0+128),w
 10753  0228  1283               	bcf	3,5	;RP0=0, select bank0
 10754  0229  00C7               	movwf	___ftadd@f2+2
 10755  022A  25BC  120A  118A   	fcall	___ftadd
 10756  022D  0842               	movf	?___ftadd,w
 10757  022E  1683               	bsf	3,5	;RP0=1, select bank1
 10758  022F  00D5               	movwf	sprintf@fval^(0+128)
 10759  0230  1283               	bcf	3,5	;RP0=0, select bank0
 10760  0231  0843               	movf	?___ftadd+1,w
 10761  0232  1683               	bsf	3,5	;RP0=1, select bank1
 10762  0233  00D6               	movwf	(sprintf@fval+1)^(0+128)
 10763  0234  1283               	bcf	3,5	;RP0=0, select bank0
 10764  0235  0844               	movf	?___ftadd+2,w
 10765  0236  1683               	bsf	3,5	;RP0=1, select bank1
 10766  0237  00D7               	movwf	(sprintf@fval+2)^(0+128)
 10767  0238                     l5472:	
 10768                           
 10769                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 10770  0238  1683               	bsf	3,5	;RP0=1, select bank1
 10771  0239  1303               	bcf	3,6	;RP1=0, select bank1
 10772  023A  0851               	movf	(sprintf@exp+1)^(0+128),w
 10773  023B  3A80               	xorlw	128
 10774  023C  00FF               	movwf	127
 10775  023D  3080               	movlw	128
 10776  023E  027F               	subwf	127,w
 10777  023F  1D03               	skipz
 10778  0240  2A43               	goto	u6175
 10779  0241  300A               	movlw	10
 10780  0242  0250               	subwf	sprintf@exp^(0+128),w
 10781  0243                     u6175:	
 10782  0243  1803               	skipnc
 10783  0244  2A64               	goto	l5480
 10784  0245  1683               	bsf	3,5	;RP0=1, select bank1
 10785  0246  1303               	bcf	3,6	;RP1=0, select bank1
 10786  0247  0857               	movf	(sprintf@fval+2)^(0+128),w
 10787  0248  0456               	iorwf	(sprintf@fval+1)^(0+128),w
 10788  0249  0455               	iorwf	sprintf@fval^(0+128),w
 10789  024A  1903               	skipnz
 10790  024B  2A9F               	goto	l5494
 10791  024C  27A1  120A  118A   	fcall	PL42	;call to abstracted procedure
 10792  024F  24B8  120A  118A   	fcall	___fttol
 10793  0252  0845               	movf	?___fttol+3,w
 10794  0253  0444               	iorwf	?___fttol+2,w
 10795  0254  0443               	iorwf	?___fttol+1,w
 10796  0255  0442               	iorwf	?___fttol,w
 10797  0256  1D03               	skipz
 10798  0257  2A9F               	goto	l5494
 10799  0258  1683               	bsf	3,5	;RP0=1, select bank1
 10800  0259  0851               	movf	(sprintf@exp+1)^(0+128),w
 10801  025A  3A80               	xorlw	128
 10802  025B  00FF               	movwf	127
 10803  025C  3080               	movlw	128
 10804  025D  027F               	subwf	127,w
 10805  025E  1D03               	skipz
 10806  025F  2A62               	goto	u6205
 10807  0260  3002               	movlw	2
 10808  0261  0250               	subwf	sprintf@exp^(0+128),w
 10809  0262                     u6205:	
 10810  0262  1C03               	skipc
 10811  0263  2A9F               	goto	l5494
 10812  0264                     l5480:	
 10813                           
 10814                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 10815  0264  1683               	bsf	3,5	;RP0=1, select bank1
 10816  0265  1303               	bcf	3,6	;RP1=0, select bank1
 10817  0266  2756  120A  118A   	fcall	PL8	;call to abstracted procedure
 10818  0269  3070               	movlw	112
 10819  026A  00D1               	movwf	___ftge@ff2
 10820  026B  3089               	movlw	137
 10821  026C  00D2               	movwf	___ftge@ff2+1
 10822  026D  3040               	movlw	64
 10823  026E  00D3               	movwf	___ftge@ff2+2
 10824  026F  248C  120A  118A   	fcall	___ftge
 10825  0272  1803               	btfsc	3,0
 10826  0273  2A76               	goto	l5484
 10827                           
 10828                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 10829  0274  30F7               	movlw	-9
 10830  0275  2A77               	goto	L13
 10831  0276                     l5484:	
 10832                           ;doprnt.c: 1122: }else{
 10833                           
 10834                           
 10835                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 10836  0276  30F8               	movlw	-8
 10837  0277                     L13:	
 10838  0277  1683               	bsf	3,5	;RP0=1, select bank1
 10839  0278  07D0               	addwf	sprintf@exp^(0+128),f
 10840  0279  1C03               	skipc
 10841  027A  03D1               	decf	(sprintf@exp+1)^(0+128),f
 10842                           
 10843                           ;doprnt.c: 1124: }
 10844                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 10845  027B  0850               	movf	sprintf@exp^(0+128),w
 10846  027C  160A  118A  248E  120A  118A  	fcall	_scale
 10847                           
 10848                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 10849  0281  277F  120A  118A   	fcall	PL26	;call to abstracted procedure
 10850  0284  00F2               	movwf	__tdiv_to_l_@f1
 10851  0285  0856               	movf	(sprintf@fval+1)^(0+128),w
 10852  0286  00F3               	movwf	__tdiv_to_l_@f1+1
 10853  0287  0857               	movf	(sprintf@fval+2)^(0+128),w
 10854  0288  00F4               	movwf	__tdiv_to_l_@f1+2
 10855  0289  084C               	movf	sprintf@tmpval^(0+128),w
 10856  028A  00F5               	movwf	__tdiv_to_l_@f2
 10857  028B  084D               	movf	(sprintf@tmpval+1)^(0+128),w
 10858  028C  00F6               	movwf	__tdiv_to_l_@f2+1
 10859  028D  084E               	movf	(sprintf@tmpval+2)^(0+128),w
 10860  028E  00F7               	movwf	__tdiv_to_l_@f2+2
 10861  028F  26B9  120A  118A   	fcall	__tdiv_to_l_
 10862  0292  0875               	movf	?__tdiv_to_l_+3,w
 10863  0293  1683               	bsf	3,5	;RP0=1, select bank1
 10864  0294  00CB               	movwf	(sprintf@val+3)^(0+128)
 10865  0295  0874               	movf	?__tdiv_to_l_+2,w
 10866  0296  00CA               	movwf	(sprintf@val+2)^(0+128)
 10867  0297  0873               	movf	?__tdiv_to_l_+1,w
 10868  0298  00C9               	movwf	(sprintf@val+1)^(0+128)
 10869  0299  0872               	movf	?__tdiv_to_l_,w
 10870  029A  00C8               	movwf	sprintf@val^(0+128)
 10871                           
 10872                           ;doprnt.c: 1129: fval = 0.0;
 10873  029B  01D5               	clrf	sprintf@fval^(0+128)
 10874  029C  01D6               	clrf	(sprintf@fval+1)^(0+128)
 10875  029D  01D7               	clrf	(sprintf@fval+2)^(0+128)
 10876                           
 10877                           ;doprnt.c: 1130: } else {
 10878  029E  2ADF               	goto	l5498
 10879  029F                     l5494:	
 10880                           
 10881                           ;doprnt.c: 1131: val = (unsigned long)fval;
 10882  029F  1683               	bsf	3,5	;RP0=1, select bank1
 10883  02A0  1303               	bcf	3,6	;RP1=0, select bank1
 10884  02A1  27A1  120A  118A   	fcall	PL42	;call to abstracted procedure
 10885  02A4  24B8  120A  118A   	fcall	___fttol
 10886  02A7  2762  120A  118A   	fcall	PL14	;call to abstracted procedure
 10887  02AA  00C8               	movwf	sprintf@val^(0+128)
 10888                           
 10889                           ;doprnt.c: 1132: fval -= (double)val;
 10890  02AB  084B               	movf	(sprintf@val+3)^(0+128),w
 10891  02AC  1283               	bcf	3,5	;RP0=0, select bank0
 10892  02AD  00A3               	movwf	___lltoft@c+3
 10893  02AE  1683               	bsf	3,5	;RP0=1, select bank1
 10894  02AF  084A               	movf	(sprintf@val+2)^(0+128),w
 10895  02B0  1283               	bcf	3,5	;RP0=0, select bank0
 10896  02B1  00A2               	movwf	___lltoft@c+2
 10897  02B2  1683               	bsf	3,5	;RP0=1, select bank1
 10898  02B3  0849               	movf	(sprintf@val+1)^(0+128),w
 10899  02B4  1283               	bcf	3,5	;RP0=0, select bank0
 10900  02B5  00A1               	movwf	___lltoft@c+1
 10901  02B6  1683               	bsf	3,5	;RP0=1, select bank1
 10902  02B7  0848               	movf	sprintf@val^(0+128),w
 10903  02B8  1283               	bcf	3,5	;RP0=0, select bank0
 10904  02B9  00A0               	movwf	___lltoft@c
 10905  02BA  2699  120A  118A   	fcall	___lltoft
 10906  02BD  0820               	movf	?___lltoft,w
 10907  02BE  00CE               	movwf	___ftsub@f2
 10908  02BF  0821               	movf	?___lltoft+1,w
 10909  02C0  00CF               	movwf	___ftsub@f2+1
 10910  02C1  0822               	movf	?___lltoft+2,w
 10911  02C2  00D0               	movwf	___ftsub@f2+2
 10912  02C3  1683               	bsf	3,5	;RP0=1, select bank1
 10913  02C4  0855               	movf	sprintf@fval^(0+128),w
 10914  02C5  1283               	bcf	3,5	;RP0=0, select bank0
 10915  02C6  00D1               	movwf	___ftsub@f1
 10916  02C7  1683               	bsf	3,5	;RP0=1, select bank1
 10917  02C8  0856               	movf	(sprintf@fval+1)^(0+128),w
 10918  02C9  1283               	bcf	3,5	;RP0=0, select bank0
 10919  02CA  00D2               	movwf	___ftsub@f1+1
 10920  02CB  1683               	bsf	3,5	;RP0=1, select bank1
 10921  02CC  0857               	movf	(sprintf@fval+2)^(0+128),w
 10922  02CD  1283               	bcf	3,5	;RP0=0, select bank0
 10923  02CE  00D3               	movwf	___ftsub@f1+2
 10924  02CF  267E  120A  118A   	fcall	___ftsub
 10925  02D2  084E               	movf	?___ftsub,w
 10926  02D3  1683               	bsf	3,5	;RP0=1, select bank1
 10927  02D4  00D5               	movwf	sprintf@fval^(0+128)
 10928  02D5  1283               	bcf	3,5	;RP0=0, select bank0
 10929  02D6  084F               	movf	?___ftsub+1,w
 10930  02D7  1683               	bsf	3,5	;RP0=1, select bank1
 10931  02D8  00D6               	movwf	(sprintf@fval+1)^(0+128)
 10932  02D9  1283               	bcf	3,5	;RP0=0, select bank0
 10933  02DA  0850               	movf	?___ftsub+2,w
 10934  02DB  1683               	bsf	3,5	;RP0=1, select bank1
 10935  02DC  00D7               	movwf	(sprintf@fval+2)^(0+128)
 10936                           
 10937                           ;doprnt.c: 1133: exp = 0;
 10938  02DD  01D0               	clrf	sprintf@exp^(0+128)
 10939  02DE  01D1               	clrf	(sprintf@exp+1)^(0+128)
 10940  02DF                     l5498:	
 10941                           
 10942                           ;doprnt.c: 1134: }
 10943                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 10944  02DF  01D8               	clrf	sprintf@c^(0+128)
 10945  02E0  0AD8               	incf	sprintf@c^(0+128),f
 10946  02E1                     l5504:	
 10947                           
 10948                           ;doprnt.c: 1137: if(val < dpowers[c])
 10949  02E1  0858               	movf	sprintf@c^(0+128),w
 10950  02E2  1283               	bcf	3,5	;RP0=0, select bank0
 10951  02E3  00D9               	movwf	??_sprintf
 10952  02E4  3001               	movlw	1
 10953  02E5  1003               	clrc
 10954  02E6                     L9:	
 10955  02E6  0DD9               	rlf	??_sprintf,f
 10956  02E7  3EFF               	addlw	-1
 10957  02E8  1003               	clrc
 10958  02E9  1D03               	skipz
 10959  02EA  2AE6               	goto	L9
 10960  02EB  278C               	fcall	PL36	;call to abstracted procedure
 10961  02EC  160A  158A  2000  120A  118A  	fcall	stringtab
 10962  02F1  00DA               	movwf	??_sprintf+1
 10963  02F2  160A  158A  2000  120A  118A  	fcall	stringtab
 10964  02F7  00DB               	movwf	??_sprintf+2
 10965  02F8  160A  158A  2000  120A  118A  	fcall	stringtab
 10966  02FD  00DC               	movwf	??_sprintf+3
 10967  02FE  160A  158A  2000  120A  118A  	fcall	stringtab
 10968  0303  00DD               	movwf	??_sprintf+4
 10969  0304  1683               	bsf	3,5	;RP0=1, select bank1
 10970  0305  024B               	subwf	(sprintf@val+3)^(0+128),w
 10971  0306  1D03               	skipz
 10972  0307  2B18               	goto	u6235
 10973  0308  1283               	bcf	3,5	;RP0=0, select bank0
 10974  0309  085C               	movf	??_sprintf+3,w
 10975  030A  1683               	bsf	3,5	;RP0=1, select bank1
 10976  030B  024A               	subwf	(sprintf@val+2)^(0+128),w
 10977  030C  1D03               	skipz
 10978  030D  2B18               	goto	u6235
 10979  030E  1283               	bcf	3,5	;RP0=0, select bank0
 10980  030F  085B               	movf	??_sprintf+2,w
 10981  0310  1683               	bsf	3,5	;RP0=1, select bank1
 10982  0311  0249               	subwf	(sprintf@val+1)^(0+128),w
 10983  0312  1D03               	skipz
 10984  0313  2B18               	goto	u6235
 10985  0314  1283               	bcf	3,5	;RP0=0, select bank0
 10986  0315  085A               	movf	??_sprintf+1,w
 10987  0316  1683               	bsf	3,5	;RP0=1, select bank1
 10988  0317  0248               	subwf	sprintf@val^(0+128),w
 10989  0318                     u6235:	
 10990  0318  1C03               	btfss	3,0
 10991  0319  2B1F               	goto	l5512
 10992  031A  300A               	movlw	10
 10993  031B  0AD8               	incf	sprintf@c^(0+128),f
 10994  031C  0658               	xorwf	sprintf@c^(0+128),w
 10995  031D  1D03               	btfss	3,2
 10996  031E  2AE1               	goto	l5504
 10997  031F                     l5512:	
 10998                           
 10999                           ;doprnt.c: 1175: {
 11000                           ;doprnt.c: 1188: if(flag & 0x03)
 11001  031F  0846               	movf	sprintf@flag^(0+128),w
 11002  0320  3903               	andlw	3
 11003  0321  1903               	btfsc	3,2
 11004  0322  2B5B               	goto	l5526
 11005                           
 11006                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 11007  0323  0854               	movf	sprintf@sp^(0+128),w
 11008  0324  0084               	movwf	4
 11009  0325  302D               	movlw	45
 11010  0326  2B58               	goto	L17
 11011  0327                     l5518:	
 11012                           
 11013                           ;doprnt.c: 1200: {
 11014                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 11015  0327  0858               	movf	sprintf@c^(0+128),w
 11016  0328  1283               	bcf	3,5	;RP0=0, select bank0
 11017  0329  00D9               	movwf	??_sprintf
 11018  032A  3001               	movlw	1
 11019  032B  1003               	clrc
 11020  032C                     L10:	
 11021  032C  0DD9               	rlf	??_sprintf,f
 11022  032D  3EFF               	addlw	-1
 11023  032E  1003               	clrc
 11024  032F  1D03               	skipz
 11025  0330  2B2C               	goto	L10
 11026  0331  278C               	fcall	PL36	;call to abstracted procedure
 11027  0332  160A  158A  2000  120A  118A  	fcall	stringtab
 11028  0337  00F2               	movwf	___lldiv@divisor
 11029  0338  160A  158A  2000  120A  118A  	fcall	stringtab
 11030  033D  00F3               	movwf	___lldiv@divisor+1
 11031  033E  160A  158A  2000  120A  118A  	fcall	stringtab
 11032  0343  00F4               	movwf	___lldiv@divisor+2
 11033  0344  160A  158A  2000  120A  118A  	fcall	stringtab
 11034  0349  27AD  120A  118A   	fcall	PL46	;call to abstracted procedure
 11035  034C  2552  120A  118A   	fcall	___lldiv
 11036                           
 11037                           ;doprnt.c: 1202: tmpval.vd %= 10;
 11038  034F  273F  120A  118A   	fcall	PL2	;call to abstracted procedure
 11039  0352  2513  120A  118A   	fcall	___llmod
 11040                           
 11041                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 11042  0355  2771  120A  118A   	fcall	PL22	;call to abstracted procedure
 11043  0358                     L17:	
 11044  0358  1383               	bcf	3,7	;select IRP bank0
 11045  0359  0080               	movwf	0
 11046  035A  0AD4               	incf	sprintf@sp^(0+128),f
 11047  035B                     l5526:	
 11048  035B  03D8               	decf	sprintf@c^(0+128),f
 11049  035C  0F58               	incfsz	sprintf@c^(0+128),w
 11050  035D  2B27               	goto	l5518
 11051  035E                     l5534:	
 11052  035E  0851               	movf	(sprintf@exp+1)^(0+128),w
 11053  035F  3A80               	xorlw	128
 11054  0360  00FF               	movwf	127
 11055  0361  3080               	movlw	128
 11056  0362  027F               	subwf	127,w
 11057  0363  1D03               	skipz
 11058  0364  2B67               	goto	u6285
 11059  0365  3001               	movlw	1
 11060  0366  0250               	subwf	sprintf@exp^(0+128),w
 11061  0367                     u6285:	
 11062  0367  1C03               	btfss	3,0
 11063  0368  2B72               	goto	l5536
 11064                           
 11065                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 11066  0369  1683               	bsf	3,5	;RP0=1, select bank1
 11067  036A  1303               	bcf	3,6	;RP1=0, select bank1
 11068  036B  27C3  120A  118A   	fcall	PL68	;call to abstracted procedure
 11069                           
 11070                           ;doprnt.c: 1209: exp--;
 11071  036E  07D0               	addwf	sprintf@exp^(0+128),f
 11072  036F  1C03               	skipc
 11073  0370  03D1               	decf	(sprintf@exp+1)^(0+128),f
 11074  0371  2B5E               	goto	l5534
 11075  0372                     l5536:	
 11076                           
 11077                           ;doprnt.c: 1210: }
 11078                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 11079  0372  1683               	bsf	3,5	;RP0=1, select bank1
 11080  0373  1303               	bcf	3,6	;RP1=0, select bank1
 11081  0374  0853               	movf	(sprintf@prec+1)^(0+128),w
 11082  0375  3A80               	xorlw	128
 11083  0376  00FF               	movwf	127
 11084  0377  3080               	movlw	128
 11085  0378  027F               	subwf	127,w
 11086  0379  1D03               	skipz
 11087  037A  2B7D               	goto	u6295
 11088  037B  3009               	movlw	9
 11089  037C  0252               	subwf	sprintf@prec^(0+128),w
 11090  037D                     u6295:	
 11091  037D  1C03               	skipc
 11092  037E  2B83               	goto	l5540
 11093                           
 11094                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 11095  037F  3008               	movlw	8
 11096  0380  1683               	bsf	3,5	;RP0=1, select bank1
 11097  0381  1303               	bcf	3,6	;RP1=0, select bank1
 11098  0382  2B86               	goto	L14
 11099  0383                     l5540:	
 11100                           
 11101                           ;doprnt.c: 1213: else
 11102                           ;doprnt.c: 1214: c = prec;
 11103  0383  1683               	bsf	3,5	;RP0=1, select bank1
 11104  0384  1303               	bcf	3,6	;RP1=0, select bank1
 11105  0385  0852               	movf	sprintf@prec^(0+128),w
 11106  0386                     L14:	
 11107  0386  00D8               	movwf	sprintf@c^(0+128)
 11108                           
 11109                           ;doprnt.c: 1215: prec -= c;
 11110  0387  27D2  120A  118A   	fcall	PL92	;call to abstracted procedure
 11111  038A  02D2               	subwf	sprintf@prec^(0+128),f
 11112  038B  1283               	bcf	3,5	;RP0=0, select bank0
 11113  038C  085A               	movf	??_sprintf+1,w
 11114  038D  1683               	bsf	3,5	;RP0=1, select bank1
 11115  038E  1C03               	skipc
 11116  038F  03D3               	decf	(sprintf@prec+1)^(0+128),f
 11117  0390  02D3               	subwf	(sprintf@prec+1)^(0+128),f
 11118                           
 11119                           ;doprnt.c: 1219: if(c)
 11120  0391  0858               	movf	sprintf@c^(0+128),w
 11121  0392  1903               	btfsc	3,2
 11122  0393  2B9A               	goto	l5548
 11123                           
 11124                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 11125  0394  0854               	movf	sprintf@sp^(0+128),w
 11126  0395  0084               	movwf	4
 11127  0396  302E               	movlw	46
 11128  0397  1383               	bcf	3,7	;select IRP bank0
 11129  0398  0080               	movwf	0
 11130  0399  0AD4               	incf	sprintf@sp^(0+128),f
 11131  039A                     l5548:	
 11132                           
 11133                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11134  039A  0858               	movf	sprintf@c^(0+128),w
 11135  039B  160A  118A  248E  120A  118A  	fcall	_scale
 11136  03A0  0837               	movf	?_scale,w
 11137  03A1  1683               	bsf	3,5	;RP0=1, select bank1
 11138  03A2  00C2               	movwf	_sprintf$1257^(0+128)
 11139  03A3  1283               	bcf	3,5	;RP0=0, select bank0
 11140  03A4  0838               	movf	?_scale+1,w
 11141  03A5  1683               	bsf	3,5	;RP0=1, select bank1
 11142  03A6  00C3               	movwf	(_sprintf$1257+1)^(0+128)
 11143  03A7  1283               	bcf	3,5	;RP0=0, select bank0
 11144  03A8  0839               	movf	?_scale+2,w
 11145  03A9  1683               	bsf	3,5	;RP0=1, select bank1
 11146  03AA  00C4               	movwf	(_sprintf$1257+2)^(0+128)
 11147                           
 11148                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11149  03AB  0842               	movf	_sprintf$1257^(0+128),w
 11150  03AC  1283               	bcf	3,5	;RP0=0, select bank0
 11151  03AD  00AB               	movwf	___ftmul@f2
 11152  03AE  1683               	bsf	3,5	;RP0=1, select bank1
 11153  03AF  0843               	movf	(_sprintf$1257+1)^(0+128),w
 11154  03B0  1283               	bcf	3,5	;RP0=0, select bank0
 11155  03B1  00AC               	movwf	___ftmul@f2+1
 11156  03B2  1683               	bsf	3,5	;RP0=1, select bank1
 11157  03B3  0844               	movf	(_sprintf$1257+2)^(0+128),w
 11158  03B4  1283               	bcf	3,5	;RP0=0, select bank0
 11159  03B5  00AD               	movwf	___ftmul@f2+2
 11160  03B6  1683               	bsf	3,5	;RP0=1, select bank1
 11161  03B7  0855               	movf	sprintf@fval^(0+128),w
 11162  03B8  27B8               	fcall	PL50	;call to abstracted procedure
 11163  03B9  160A  118A  26AA  120A  118A  	fcall	___ftmul
 11164  03BE  0828               	movf	?___ftmul,w
 11165  03BF  00C2               	movwf	___fttol@f1
 11166  03C0  0829               	movf	?___ftmul+1,w
 11167  03C1  00C3               	movwf	___fttol@f1+1
 11168  03C2  082A               	movf	?___ftmul+2,w
 11169  03C3  00C4               	movwf	___fttol@f1+2
 11170  03C4  24B8  120A  118A   	fcall	___fttol
 11171  03C7  2762  120A  118A   	fcall	PL14	;call to abstracted procedure
 11172  03CA  2C36               	goto	L15
 11173  03CB                     l5552:	
 11174                           ;doprnt.c: 1228: while(c--) {
 11175                           
 11176                           
 11177                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 11178  03CB  0858               	movf	sprintf@c^(0+128),w
 11179  03CC  1283               	bcf	3,5	;RP0=0, select bank0
 11180  03CD  00D9               	movwf	??_sprintf
 11181  03CE  3001               	movlw	1
 11182  03CF  1003               	clrc
 11183  03D0                     L11:	
 11184  03D0  0DD9               	rlf	??_sprintf,f
 11185  03D1  3EFF               	addlw	-1
 11186  03D2  1003               	clrc
 11187  03D3  1D03               	skipz
 11188  03D4  2BD0               	goto	L11
 11189  03D5  278C               	fcall	PL36	;call to abstracted procedure
 11190  03D6  160A  158A  2000  120A  118A  	fcall	stringtab
 11191  03DB  00F2               	movwf	___lldiv@divisor
 11192  03DC  160A  158A  2000  120A  118A  	fcall	stringtab
 11193  03E1  00F3               	movwf	___lldiv@divisor+1
 11194  03E2  160A  158A  2000  120A  118A  	fcall	stringtab
 11195  03E7  00F4               	movwf	___lldiv@divisor+2
 11196  03E8  160A  158A  2000  120A  118A  	fcall	stringtab
 11197  03ED  27AD  120A  118A   	fcall	PL46	;call to abstracted procedure
 11198  03F0  2552  120A  118A   	fcall	___lldiv
 11199                           
 11200                           ;doprnt.c: 1230: tmpval.vd %= 10;
 11201  03F3  273F  120A  118A   	fcall	PL2	;call to abstracted procedure
 11202  03F6  2513  120A  118A   	fcall	___llmod
 11203                           
 11204                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 11205  03F9  2771  120A  118A   	fcall	PL22	;call to abstracted procedure
 11206  03FC  1383               	bcf	3,7	;select IRP bank0
 11207  03FD  0080               	movwf	0
 11208  03FE  0AD4               	incf	sprintf@sp^(0+128),f
 11209                           
 11210                           ;doprnt.c: 1232: val %= dpowers[c];
 11211  03FF  0858               	movf	sprintf@c^(0+128),w
 11212  0400  1283               	bcf	3,5	;RP0=0, select bank0
 11213  0401  00D9               	movwf	??_sprintf
 11214  0402  3001               	movlw	1
 11215  0403  1003               	clrc
 11216  0404                     L12:	
 11217  0404  0DD9               	rlf	??_sprintf,f
 11218  0405  3EFF               	addlw	-1
 11219  0406  1003               	clrc
 11220  0407  1D03               	skipz
 11221  0408  2C04               	goto	L12
 11222  0409  278C               	fcall	PL36	;call to abstracted procedure
 11223  040A  160A  158A  2000  120A  118A  	fcall	stringtab
 11224  040F  00F2               	movwf	___llmod@divisor
 11225  0410  160A  158A  2000  120A  118A  	fcall	stringtab
 11226  0415  00F3               	movwf	___llmod@divisor+1
 11227  0416  160A  158A  2000  120A  118A  	fcall	stringtab
 11228  041B  00F4               	movwf	___llmod@divisor+2
 11229  041C  160A  158A  2000  120A  118A  	fcall	stringtab
 11230  0421  00F5               	movwf	___llmod@divisor+3
 11231  0422  1683               	bsf	3,5	;RP0=1, select bank1
 11232  0423  084B               	movf	(sprintf@val+3)^(0+128),w
 11233  0424  00F9               	movwf	___llmod@dividend+3
 11234  0425  084A               	movf	(sprintf@val+2)^(0+128),w
 11235  0426  00F8               	movwf	___llmod@dividend+2
 11236  0427  0849               	movf	(sprintf@val+1)^(0+128),w
 11237  0428  00F7               	movwf	___llmod@dividend+1
 11238  0429  0848               	movf	sprintf@val^(0+128),w
 11239  042A  00F6               	movwf	___llmod@dividend
 11240  042B  2513  120A  118A   	fcall	___llmod
 11241  042E  0875               	movf	?___llmod+3,w
 11242  042F  1683               	bsf	3,5	;RP0=1, select bank1
 11243  0430  00CB               	movwf	(sprintf@val+3)^(0+128)
 11244  0431  0874               	movf	?___llmod+2,w
 11245  0432  00CA               	movwf	(sprintf@val+2)^(0+128)
 11246  0433  0873               	movf	?___llmod+1,w
 11247  0434  00C9               	movwf	(sprintf@val+1)^(0+128)
 11248  0435  0872               	movf	?___llmod,w
 11249  0436                     L15:	
 11250  0436  00C8               	movwf	sprintf@val^(0+128)
 11251  0437  03D8               	decf	sprintf@c^(0+128),f
 11252  0438  0F58               	incfsz	sprintf@c^(0+128),w
 11253  0439  2BCB               	goto	l5552
 11254  043A                     l5570:	
 11255  043A  0852               	movf	sprintf@prec^(0+128),w
 11256  043B  0453               	iorwf	(sprintf@prec+1)^(0+128),w
 11257  043C  1903               	btfsc	3,2
 11258  043D  28AB               	goto	l5592
 11259                           
 11260                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 11261  043E  27C3  120A  118A   	fcall	PL68	;call to abstracted procedure
 11262                           
 11263                           ;doprnt.c: 1237: prec--;
 11264  0441  07D2               	addwf	sprintf@prec^(0+128),f
 11265  0442  1C03               	skipc
 11266  0443  03D3               	decf	(sprintf@prec+1)^(0+128),f
 11267  0444  2C3A               	goto	l5570
 11268  0445                     l5572:	
 11269                           
 11270                           ;doprnt.c: 1246: }
 11271                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 11272  0445  1683               	bsf	3,5	;RP0=1, select bank1
 11273  0446  0852               	movf	sprintf@prec^(0+128),w
 11274  0447  0453               	iorwf	(sprintf@prec+1)^(0+128),w
 11275  0448  1D03               	btfss	3,2
 11276  0449  2C52               	goto	l5578
 11277  044A  084B               	movf	(sprintf@val+3)^(0+128),w
 11278  044B  044A               	iorwf	(sprintf@val+2)^(0+128),w
 11279  044C  0449               	iorwf	(sprintf@val+1)^(0+128),w
 11280  044D  0448               	iorwf	sprintf@val^(0+128),w
 11281  044E  1903               	btfsc	3,2
 11282                           
 11283                           ;doprnt.c: 1291: prec++;
 11284  044F  0AD2               	incf	sprintf@prec^(0+128),f
 11285  0450  1903               	skipnz
 11286  0451  0AD3               	incf	(sprintf@prec+1)^(0+128),f
 11287  0452                     l5578:	
 11288                           
 11289                           ;doprnt.c: 1339: if(c < prec)
 11290  0452  0858               	movf	sprintf@c^(0+128),w
 11291  0453  1283               	bcf	3,5	;RP0=0, select bank0
 11292  0454  00D9               	movwf	??_sprintf
 11293  0455  01DA               	clrf	??_sprintf+1
 11294  0456  1BD9               	btfsc	??_sprintf,7
 11295  0457  03DA               	decf	??_sprintf+1,f
 11296  0458  085A               	movf	??_sprintf+1,w
 11297  0459  3A80               	xorlw	128
 11298  045A  00DB               	movwf	??_sprintf+2
 11299  045B  1683               	bsf	3,5	;RP0=1, select bank1
 11300  045C  0853               	movf	(sprintf@prec+1)^(0+128),w
 11301  045D  3A80               	xorlw	128
 11302  045E  1283               	bcf	3,5	;RP0=0, select bank0
 11303  045F  025B               	subwf	??_sprintf+2,w
 11304  0460  1D03               	skipz
 11305  0461  2C66               	goto	u6375
 11306  0462  1683               	bsf	3,5	;RP0=1, select bank1
 11307  0463  0852               	movf	sprintf@prec^(0+128),w
 11308  0464  1283               	bcf	3,5	;RP0=0, select bank0
 11309  0465  0259               	subwf	??_sprintf,w
 11310  0466                     u6375:	
 11311  0466  1C03               	btfss	3,0
 11312  0467  2C7A               	goto	l5586
 11313                           
 11314                           ;doprnt.c: 1341: else if(prec < c)
 11315  0468  1683               	bsf	3,5	;RP0=1, select bank1
 11316  0469  1303               	bcf	3,6	;RP1=0, select bank1
 11317  046A  0858               	movf	sprintf@c^(0+128),w
 11318  046B  27D2  120A  118A   	fcall	PL92	;call to abstracted procedure
 11319  046E  0853               	movf	(sprintf@prec+1)^(0+128),w
 11320  046F  3A80               	xorlw	128
 11321  0470  1283               	bcf	3,5	;RP0=0, select bank0
 11322  0471  00DB               	movwf	??_sprintf+2
 11323  0472  085A               	movf	??_sprintf+1,w
 11324  0473  3A80               	xorlw	128
 11325  0474  025B               	subwf	??_sprintf+2,w
 11326  0475  1D03               	skipz
 11327  0476  2C7A               	goto	l5586
 11328  0477  0859               	movf	??_sprintf,w
 11329  0478  1683               	bsf	3,5	;RP0=1, select bank1
 11330  0479  0252               	subwf	sprintf@prec^(0+128),w
 11331  047A                     l5586:	
 11332                           
 11333                           ;doprnt.c: 1422: {
 11334                           ;doprnt.c: 1438: if(flag & 0x03)
 11335  047A  1683               	bsf	3,5	;RP0=1, select bank1
 11336  047B  1303               	bcf	3,6	;RP1=0, select bank1
 11337  047C  0846               	movf	sprintf@flag^(0+128),w
 11338  047D  3903               	andlw	3
 11339  047E  1903               	btfsc	3,2
 11340  047F  28AB               	goto	l5592
 11341                           
 11342                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11343  0480  0854               	movf	sprintf@sp^(0+128),w
 11344  0481  0084               	movwf	4
 11345  0482  302D               	movlw	45
 11346  0483                     L16:	
 11347  0483  1383               	bcf	3,7	;select IRP bank0
 11348  0484  0080               	movwf	0
 11349  0485  0AD4               	incf	sprintf@sp^(0+128),f
 11350  0486  28AB               	goto	l5592
 11351  0487                     l5594:	
 11352                           
 11353                           ;doprnt.c: 1538: *sp = 0;
 11354  0487  0854               	movf	sprintf@sp^(0+128),w
 11355  0488  0084               	movwf	4
 11356  0489  1383               	bcf	3,7	;select IRP bank0
 11357  048A  0180               	clrf	0
 11358  048B  0008               	return
 11359  048C                     __end_of_sprintf:	
 11360  048C                     __ptext58:	
 11361 ;; *************** function ___ftge *****************
 11362 ;; Defined at:
 11363 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftge.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;  ff1             3   46[BANK0 ] float 
 11366 ;;  ff2             3   49[BANK0 ] float 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;		None
 11369 ;; Return value:  Size  Location     Type
 11370 ;;		None               void
 11371 ;; Registers used:
 11372 ;;		wreg, status,2, status,0
 11373 ;; Tracked objects:
 11374 ;;		On entry : 300/0
 11375 ;;		On exit  : 300/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11378 ;;      Params:         0       6       0       0       0
 11379 ;;      Locals:         0       0       0       0       0
 11380 ;;      Temps:          0       0       0       0       0
 11381 ;;      Totals:         0       6       0       0       0
 11382 ;;Total ram usage:        6 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; Hardware stack levels required when called:    1
 11385 ;; This function calls:
 11386 ;;		Nothing
 11387 ;; This function is called by:
 11388 ;;		_calcSHT71
 11389 ;;		_regulacija
 11390 ;;		_menuHumi
 11391 ;;		_menu
 11392 ;;		_sprintf
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function ___ftge
 11398  048C                     ___ftge:	
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11402  048C  1FD0               	btfss	___ftge@ff1+2,7
 11403  048D  2C9B               	goto	l3686
 11404  048E  084E               	movf	___ftge@ff1,w
 11405  048F  3C00               	sublw	0
 11406  0490  00CE               	movwf	___ftge@ff1
 11407  0491  084F               	movf	___ftge@ff1+1,w
 11408  0492  1C03               	skipc
 11409  0493  0F4F               	incfsz	___ftge@ff1+1,w
 11410  0494  3C00               	sublw	0
 11411  0495  00CF               	movwf	___ftge@ff1+1
 11412  0496  0850               	movf	___ftge@ff1+2,w
 11413  0497  1C03               	skipc
 11414  0498  0F50               	incfsz	___ftge@ff1+2,w
 11415  0499  3C80               	sublw	128
 11416  049A  00D0               	movwf	___ftge@ff1+2
 11417  049B                     l3686:	
 11418  049B  1FD3               	btfss	___ftge@ff2+2,7
 11419  049C  2CAA               	goto	l3690
 11420  049D  0851               	movf	___ftge@ff2,w
 11421  049E  3C00               	sublw	0
 11422  049F  00D1               	movwf	___ftge@ff2
 11423  04A0  0852               	movf	___ftge@ff2+1,w
 11424  04A1  1C03               	skipc
 11425  04A2  0F52               	incfsz	___ftge@ff2+1,w
 11426  04A3  3C00               	sublw	0
 11427  04A4  00D2               	movwf	___ftge@ff2+1
 11428  04A5  0853               	movf	___ftge@ff2+2,w
 11429  04A6  1C03               	skipc
 11430  04A7  0F53               	incfsz	___ftge@ff2+2,w
 11431  04A8  3C80               	sublw	128
 11432  04A9  00D3               	movwf	___ftge@ff2+2
 11433  04AA                     l3690:	
 11434  04AA  3080               	movlw	128
 11435  04AB  06D0               	xorwf	___ftge@ff1+2,f
 11436  04AC  06D3               	xorwf	___ftge@ff2+2,f
 11437  04AD  0853               	movf	___ftge@ff2+2,w
 11438  04AE  0250               	subwf	___ftge@ff1+2,w
 11439  04AF  1D03               	skipz
 11440  04B0  0008               	return
 11441  04B1  0852               	movf	___ftge@ff2+1,w
 11442  04B2  024F               	subwf	___ftge@ff1+1,w
 11443  04B3  1D03               	skipz
 11444  04B4  0008               	return
 11445  04B5  0851               	movf	___ftge@ff2,w
 11446  04B6  024E               	subwf	___ftge@ff1,w
 11447  04B7  0008               	return
 11448  04B8                     __end_of___ftge:	
 11449  04B8                     __ptext53:	
 11450 ;; *************** function ___fttol *****************
 11451 ;; Defined at:
 11452 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fttol.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;  f1              3   34[BANK0 ] float 
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;  lval            4   42[BANK0 ] unsigned long 
 11457 ;;  exp1            1   46[BANK0 ] unsigned char 
 11458 ;;  sign1           1   41[BANK0 ] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  4   34[BANK0 ] long 
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0
 11463 ;; Tracked objects:
 11464 ;;		On entry : 300/0
 11465 ;;		On exit  : 300/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11468 ;;      Params:         0       4       0       0       0
 11469 ;;      Locals:         0       6       0       0       0
 11470 ;;      Temps:          0       3       0       0       0
 11471 ;;      Totals:         0      13       0       0       0
 11472 ;;Total ram usage:       13 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    1
 11475 ;; This function calls:
 11476 ;;		Nothing
 11477 ;; This function is called by:
 11478 ;;		_sprintf
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function ___fttol
 11484  04B8                     ___fttol:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11488  04B8  27CB  120A  118A   	fcall	PL80	;call to abstracted procedure
 11489  04BB  1003               	clrc
 11490  04BC  0D47               	rlf	??___fttol+1,w
 11491  04BD  0D48               	rlf	??___fttol+2,w
 11492  04BE  00CE               	movwf	___fttol@exp1
 11493  04BF  084E               	movf	___fttol@exp1,w
 11494  04C0  1D03               	btfss	3,2
 11495  04C1  2CC7               	goto	l3722
 11496  04C2                     l3720:	
 11497  04C2  01C2               	clrf	?___fttol
 11498  04C3  01C3               	clrf	?___fttol+1
 11499  04C4  01C4               	clrf	?___fttol+2
 11500  04C5  01C5               	clrf	?___fttol+3
 11501  04C6  0008               	return
 11502  04C7                     l3722:	
 11503  04C7  27CB  120A  118A   	fcall	PL80	;call to abstracted procedure
 11504  04CA  3017               	movlw	23
 11505  04CB                     u3855:	
 11506  04CB  1003               	clrc
 11507  04CC  0CC8               	rrf	??___fttol+2,f
 11508  04CD  0CC7               	rrf	??___fttol+1,f
 11509  04CE  0CC6               	rrf	??___fttol,f
 11510  04CF  3EFF               	addlw	-1
 11511  04D0  1D03               	skipz
 11512  04D1  2CCB               	goto	u3855
 11513  04D2  0846               	movf	??___fttol,w
 11514  04D3  00C9               	movwf	___fttol@sign1
 11515  04D4  17C3               	bsf	___fttol@f1+1,7
 11516  04D5  01C4               	clrf	___fttol@f1+2
 11517  04D6  0842               	movf	___fttol@f1,w
 11518  04D7  00CA               	movwf	___fttol@lval
 11519  04D8  0843               	movf	___fttol@f1+1,w
 11520  04D9  00CB               	movwf	___fttol@lval+1
 11521  04DA  0844               	movf	___fttol@f1+2,w
 11522  04DB  00CC               	movwf	___fttol@lval+2
 11523  04DC  308E               	movlw	142
 11524  04DD  01CD               	clrf	___fttol@lval+3
 11525  04DE  02CE               	subwf	___fttol@exp1,f
 11526  04DF  1FCE               	btfss	___fttol@exp1,7
 11527  04E0  2CEE               	goto	l3742
 11528  04E1  084E               	movf	___fttol@exp1,w
 11529  04E2  3A80               	xorlw	128
 11530  04E3  3E8F               	addlw	143
 11531  04E4  1C03               	btfss	3,0
 11532  04E5  2CC2               	goto	l3720
 11533  04E6                     l3738:	
 11534  04E6  1003               	clrc
 11535  04E7  0CCD               	rrf	___fttol@lval+3,f
 11536  04E8  0CCC               	rrf	___fttol@lval+2,f
 11537  04E9  0CCB               	rrf	___fttol@lval+1,f
 11538  04EA  0CCA               	rrf	___fttol@lval,f
 11539  04EB  0FCE               	incfsz	___fttol@exp1,f
 11540  04EC  2CE6               	goto	l3738
 11541  04ED  2CFC               	goto	l3750
 11542  04EE                     l3742:	
 11543  04EE  3018               	movlw	24
 11544  04EF  024E               	subwf	___fttol@exp1,w
 11545  04F0  1803               	btfsc	3,0
 11546  04F1  2CC2               	goto	l3720
 11547  04F2                     l3748:	
 11548  04F2  084E               	movf	___fttol@exp1,w
 11549  04F3  1903               	btfsc	3,2
 11550  04F4  2CFC               	goto	l3750
 11551  04F5  1003               	clrc
 11552  04F6  0DCA               	rlf	___fttol@lval,f
 11553  04F7  0DCB               	rlf	___fttol@lval+1,f
 11554  04F8  0DCC               	rlf	___fttol@lval+2,f
 11555  04F9  0DCD               	rlf	___fttol@lval+3,f
 11556  04FA  03CE               	decf	___fttol@exp1,f
 11557  04FB  2CF2               	goto	l3748
 11558  04FC                     l3750:	
 11559  04FC  0849               	movf	___fttol@sign1,w
 11560  04FD  1903               	btfsc	3,2
 11561  04FE  2D0A               	goto	l3754
 11562  04FF  09CA               	comf	___fttol@lval,f
 11563  0500  09CB               	comf	___fttol@lval+1,f
 11564  0501  09CC               	comf	___fttol@lval+2,f
 11565  0502  09CD               	comf	___fttol@lval+3,f
 11566  0503  0ACA               	incf	___fttol@lval,f
 11567  0504  1903               	skipnz
 11568  0505  0ACB               	incf	___fttol@lval+1,f
 11569  0506  1903               	skipnz
 11570  0507  0ACC               	incf	___fttol@lval+2,f
 11571  0508  1903               	skipnz
 11572  0509  0ACD               	incf	___fttol@lval+3,f
 11573  050A                     l3754:	
 11574  050A  084D               	movf	___fttol@lval+3,w
 11575  050B  00C5               	movwf	?___fttol+3
 11576  050C  084C               	movf	___fttol@lval+2,w
 11577  050D  00C4               	movwf	?___fttol+2
 11578  050E  084B               	movf	___fttol@lval+1,w
 11579  050F  00C3               	movwf	?___fttol+1
 11580  0510  084A               	movf	___fttol@lval,w
 11581  0511  00C2               	movwf	?___fttol
 11582  0512  0008               	return
 11583  0513                     __end_of___fttol:	
 11584  0513                     __ptext52:	
 11585 ;; *************** function ___llmod *****************
 11586 ;; Defined at:
 11587 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\llmod.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;  divisor         4    2[COMMON] unsigned long 
 11590 ;;  dividend        4    6[COMMON] unsigned long 
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  counter         1    0[BANK0 ] unsigned char 
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  4    2[COMMON] unsigned long 
 11595 ;; Registers used:
 11596 ;;		wreg, status,2, status,0
 11597 ;; Tracked objects:
 11598 ;;		On entry : 300/100
 11599 ;;		On exit  : 200/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11602 ;;      Params:         8       0       0       0       0
 11603 ;;      Locals:         0       1       0       0       0
 11604 ;;      Temps:          0       0       0       0       0
 11605 ;;      Totals:         8       1       0       0       0
 11606 ;;Total ram usage:        9 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    1
 11609 ;; This function calls:
 11610 ;;		Nothing
 11611 ;; This function is called by:
 11612 ;;		_sprintf
 11613 ;; This function uses a non-reentrant model
 11614 ;;
 11615                           
 11616                           
 11617                           ;psect for function ___llmod
 11618  0513                     ___llmod:	
 11619                           
 11620                           ;incstack = 0
 11621                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 11622  0513  0875               	movf	___llmod@divisor+3,w
 11623  0514  0474               	iorwf	___llmod@divisor+2,w
 11624  0515  0473               	iorwf	___llmod@divisor+1,w
 11625  0516  0472               	iorwf	___llmod@divisor,w
 11626  0517  1903               	skipnz
 11627  0518  2D49               	goto	l5374
 11628  0519  1283               	bcf	3,5	;RP0=0, select bank0
 11629  051A  01A0               	clrf	___llmod@counter
 11630  051B                     L25:	
 11631  051B  0AA0               	incf	___llmod@counter,f
 11632  051C  1BF5               	btfsc	___llmod@divisor+3,7
 11633  051D  2D24               	goto	l5366
 11634  051E  1003               	clrc
 11635  051F  0DF2               	rlf	___llmod@divisor,f
 11636  0520  0DF3               	rlf	___llmod@divisor+1,f
 11637  0521  0DF4               	rlf	___llmod@divisor+2,f
 11638  0522  0DF5               	rlf	___llmod@divisor+3,f
 11639  0523  2D1B               	goto	L25
 11640  0524                     l5366:	
 11641  0524  0875               	movf	___llmod@divisor+3,w
 11642  0525  0279               	subwf	___llmod@dividend+3,w
 11643  0526  1D03               	skipz
 11644  0527  2D32               	goto	u6025
 11645  0528  0874               	movf	___llmod@divisor+2,w
 11646  0529  0278               	subwf	___llmod@dividend+2,w
 11647  052A  1D03               	skipz
 11648  052B  2D32               	goto	u6025
 11649  052C  0873               	movf	___llmod@divisor+1,w
 11650  052D  0277               	subwf	___llmod@dividend+1,w
 11651  052E  1D03               	skipz
 11652  052F  2D32               	goto	u6025
 11653  0530  0872               	movf	___llmod@divisor,w
 11654  0531  0276               	subwf	___llmod@dividend,w
 11655  0532                     u6025:	
 11656  0532  1C03               	skipc
 11657  0533  2D43               	goto	L26
 11658  0534  0872               	movf	___llmod@divisor,w
 11659  0535  02F6               	subwf	___llmod@dividend,f
 11660  0536  0873               	movf	___llmod@divisor+1,w
 11661  0537  1C03               	skipc
 11662  0538  0F73               	incfsz	___llmod@divisor+1,w
 11663  0539  02F7               	subwf	___llmod@dividend+1,f
 11664  053A  0874               	movf	___llmod@divisor+2,w
 11665  053B  1C03               	skipc
 11666  053C  0F74               	incfsz	___llmod@divisor+2,w
 11667  053D  02F8               	subwf	___llmod@dividend+2,f
 11668  053E  0875               	movf	___llmod@divisor+3,w
 11669  053F  1C03               	skipc
 11670  0540  0F75               	incfsz	___llmod@divisor+3,w
 11671  0541  02F9               	subwf	___llmod@dividend+3,f
 11672  0542  1003               	clrc
 11673  0543                     L26:	
 11674  0543  0CF5               	rrf	___llmod@divisor+3,f
 11675  0544  0CF4               	rrf	___llmod@divisor+2,f
 11676  0545  0CF3               	rrf	___llmod@divisor+1,f
 11677  0546  0CF2               	rrf	___llmod@divisor,f
 11678  0547  0BA0               	decfsz	___llmod@counter,f
 11679  0548  2D24               	goto	l5366
 11680  0549                     l5374:	
 11681  0549  0879               	movf	___llmod@dividend+3,w
 11682  054A  00F5               	movwf	?___llmod+3
 11683  054B  0878               	movf	___llmod@dividend+2,w
 11684  054C  00F4               	movwf	?___llmod+2
 11685  054D  0877               	movf	___llmod@dividend+1,w
 11686  054E  00F3               	movwf	?___llmod+1
 11687  054F  0876               	movf	___llmod@dividend,w
 11688  0550  00F2               	movwf	?___llmod
 11689  0551  0008               	return
 11690  0552                     __end_of___llmod:	
 11691  0552                     __ptext66:	
 11692 ;; *************** function ___lldiv *****************
 11693 ;; Defined at:
 11694 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lldiv.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;  divisor         4    2[COMMON] unsigned long 
 11697 ;;  dividend        4    6[COMMON] unsigned long 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  quotient        4    0[BANK0 ] unsigned long 
 11700 ;;  counter         1    4[BANK0 ] unsigned char 
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  4    2[COMMON] unsigned long 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0
 11705 ;; Tracked objects:
 11706 ;;		On entry : 200/100
 11707 ;;		On exit  : 300/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11710 ;;      Params:         8       0       0       0       0
 11711 ;;      Locals:         0       5       0       0       0
 11712 ;;      Temps:          0       0       0       0       0
 11713 ;;      Totals:         8       5       0       0       0
 11714 ;;Total ram usage:       13 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    1
 11717 ;; This function calls:
 11718 ;;		Nothing
 11719 ;; This function is called by:
 11720 ;;		_UARTInit
 11721 ;;		_sprintf
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           
 11726                           ;psect for function ___lldiv
 11727  0552                     ___lldiv:	
 11728                           
 11729                           ;incstack = 0
 11730                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11731  0552  1283               	bcf	3,5	;RP0=0, select bank0
 11732  0553  01A0               	clrf	___lldiv@quotient
 11733  0554  01A1               	clrf	___lldiv@quotient+1
 11734  0555  01A2               	clrf	___lldiv@quotient+2
 11735  0556  01A3               	clrf	___lldiv@quotient+3
 11736  0557  0875               	movf	___lldiv@divisor+3,w
 11737  0558  0474               	iorwf	___lldiv@divisor+2,w
 11738  0559  0473               	iorwf	___lldiv@divisor+1,w
 11739  055A  0472               	iorwf	___lldiv@divisor,w
 11740  055B  1903               	skipnz
 11741  055C  2D92               	goto	l3780
 11742  055D  01A4               	clrf	___lldiv@counter
 11743  055E                     L29:	
 11744  055E  0AA4               	incf	___lldiv@counter,f
 11745  055F  1BF5               	btfsc	___lldiv@divisor+3,7
 11746  0560  2D67               	goto	l3768
 11747  0561  1003               	clrc
 11748  0562  0DF2               	rlf	___lldiv@divisor,f
 11749  0563  0DF3               	rlf	___lldiv@divisor+1,f
 11750  0564  0DF4               	rlf	___lldiv@divisor+2,f
 11751  0565  0DF5               	rlf	___lldiv@divisor+3,f
 11752  0566  2D5E               	goto	L29
 11753  0567                     l3768:	
 11754  0567  1003               	clrc
 11755  0568  0DA0               	rlf	___lldiv@quotient,f
 11756  0569  0DA1               	rlf	___lldiv@quotient+1,f
 11757  056A  0DA2               	rlf	___lldiv@quotient+2,f
 11758  056B  0DA3               	rlf	___lldiv@quotient+3,f
 11759  056C  0875               	movf	___lldiv@divisor+3,w
 11760  056D  0279               	subwf	___lldiv@dividend+3,w
 11761  056E  1D03               	skipz
 11762  056F  2D7A               	goto	u3945
 11763  0570  0874               	movf	___lldiv@divisor+2,w
 11764  0571  0278               	subwf	___lldiv@dividend+2,w
 11765  0572  1D03               	skipz
 11766  0573  2D7A               	goto	u3945
 11767  0574  0873               	movf	___lldiv@divisor+1,w
 11768  0575  0277               	subwf	___lldiv@dividend+1,w
 11769  0576  1D03               	skipz
 11770  0577  2D7A               	goto	u3945
 11771  0578  0872               	movf	___lldiv@divisor,w
 11772  0579  0276               	subwf	___lldiv@dividend,w
 11773  057A                     u3945:	
 11774  057A  1C03               	skipc
 11775  057B  2D8C               	goto	L30
 11776  057C  0872               	movf	___lldiv@divisor,w
 11777  057D  02F6               	subwf	___lldiv@dividend,f
 11778  057E  0873               	movf	___lldiv@divisor+1,w
 11779  057F  1C03               	skipc
 11780  0580  0F73               	incfsz	___lldiv@divisor+1,w
 11781  0581  02F7               	subwf	___lldiv@dividend+1,f
 11782  0582  0874               	movf	___lldiv@divisor+2,w
 11783  0583  1C03               	skipc
 11784  0584  0F74               	incfsz	___lldiv@divisor+2,w
 11785  0585  02F8               	subwf	___lldiv@dividend+2,f
 11786  0586  0875               	movf	___lldiv@divisor+3,w
 11787  0587  1C03               	skipc
 11788  0588  0F75               	incfsz	___lldiv@divisor+3,w
 11789  0589  02F9               	subwf	___lldiv@dividend+3,f
 11790  058A  1420               	bsf	___lldiv@quotient,0
 11791  058B  1003               	clrc
 11792  058C                     L30:	
 11793  058C  0CF5               	rrf	___lldiv@divisor+3,f
 11794  058D  0CF4               	rrf	___lldiv@divisor+2,f
 11795  058E  0CF3               	rrf	___lldiv@divisor+1,f
 11796  058F  0CF2               	rrf	___lldiv@divisor,f
 11797  0590  0BA4               	decfsz	___lldiv@counter,f
 11798  0591  2D67               	goto	l3768
 11799  0592                     l3780:	
 11800  0592  0823               	movf	___lldiv@quotient+3,w
 11801  0593  00F5               	movwf	?___lldiv+3
 11802  0594  0822               	movf	___lldiv@quotient+2,w
 11803  0595  00F4               	movwf	?___lldiv+2
 11804  0596  0821               	movf	___lldiv@quotient+1,w
 11805  0597  00F3               	movwf	?___lldiv+1
 11806  0598  0820               	movf	___lldiv@quotient,w
 11807  0599  00F2               	movwf	?___lldiv
 11808  059A  0008               	return
 11809  059B                     __end_of___lldiv:	
 11810  059B                     __ptext50:	
 11811 ;; *************** function ___wmul *****************
 11812 ;; Defined at:
 11813 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;  multiplier      2    2[COMMON] unsigned int 
 11816 ;;  multiplicand    2    4[COMMON] unsigned int 
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;  product         2    6[COMMON] unsigned int 
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  2    2[COMMON] unsigned int 
 11821 ;; Registers used:
 11822 ;;		wreg, status,2, status,0
 11823 ;; Tracked objects:
 11824 ;;		On entry : 200/0
 11825 ;;		On exit  : 200/0
 11826 ;;		Unchanged: 200/0
 11827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11828 ;;      Params:         4       0       0       0       0
 11829 ;;      Locals:         2       0       0       0       0
 11830 ;;      Temps:          0       0       0       0       0
 11831 ;;      Totals:         6       0       0       0       0
 11832 ;;Total ram usage:        6 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    1
 11835 ;; This function calls:
 11836 ;;		Nothing
 11837 ;; This function is called by:
 11838 ;;		_LcdWriteInt
 11839 ;;		_measureTGS4161
 11840 ;;		_sprintf
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           
 11845                           ;psect for function ___wmul
 11846  059B                     ___wmul:	
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11850  059B  01F6               	clrf	___wmul@product
 11851  059C  01F7               	clrf	___wmul@product+1
 11852  059D                     l3120:	
 11853  059D  1C72               	btfss	___wmul@multiplier,0
 11854  059E  2DA5               	goto	l3124
 11855  059F  0874               	movf	___wmul@multiplicand,w
 11856  05A0  07F6               	addwf	___wmul@product,f
 11857  05A1  1803               	skipnc
 11858  05A2  0AF7               	incf	___wmul@product+1,f
 11859  05A3  0875               	movf	___wmul@multiplicand+1,w
 11860  05A4  07F7               	addwf	___wmul@product+1,f
 11861  05A5                     l3124:	
 11862  05A5  1003               	clrc
 11863  05A6  0DF4               	rlf	___wmul@multiplicand,f
 11864  05A7  0DF5               	rlf	___wmul@multiplicand+1,f
 11865  05A8  1003               	clrc
 11866  05A9  0CF3               	rrf	___wmul@multiplier+1,f
 11867  05AA  0CF2               	rrf	___wmul@multiplier,f
 11868  05AB  0872               	movf	___wmul@multiplier,w
 11869  05AC  0473               	iorwf	___wmul@multiplier+1,w
 11870  05AD  1D03               	btfss	3,2
 11871  05AE  2D9D               	goto	l3120
 11872  05AF  0877               	movf	___wmul@product+1,w
 11873  05B0  00F3               	movwf	?___wmul+1
 11874  05B1  0876               	movf	___wmul@product,w
 11875  05B2  00F2               	movwf	?___wmul
 11876  05B3  0008               	return
 11877  05B4                     __end_of___wmul:	
 11878  05B4                     __ptext57:	
 11879 ;; *************** function ___ftneg *****************
 11880 ;; Defined at:
 11881 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftneg.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  f1              3    2[COMMON] float 
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;		None
 11886 ;; Return value:  Size  Location     Type
 11887 ;;                  3    2[COMMON] float 
 11888 ;; Registers used:
 11889 ;;		wreg
 11890 ;; Tracked objects:
 11891 ;;		On entry : 300/100
 11892 ;;		On exit  : 300/100
 11893 ;;		Unchanged: 300/0
 11894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11895 ;;      Params:         3       0       0       0       0
 11896 ;;      Locals:         0       0       0       0       0
 11897 ;;      Temps:          0       0       0       0       0
 11898 ;;      Totals:         3       0       0       0       0
 11899 ;;Total ram usage:        3 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    1
 11902 ;; This function calls:
 11903 ;;		Nothing
 11904 ;; This function is called by:
 11905 ;;		_sprintf
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           
 11910                           ;psect for function ___ftneg
 11911  05B4                     ___ftneg:	
 11912                           
 11913                           ;incstack = 0
 11914                           ; Regs used in ___ftneg: [wreg]
 11915  05B4  0874               	movf	___ftneg@f1+2,w
 11916  05B5  0473               	iorwf	___ftneg@f1+1,w
 11917  05B6  0472               	iorwf	___ftneg@f1,w
 11918  05B7  1903               	skipnz
 11919  05B8  0008               	return
 11920  05B9  3080               	movlw	128
 11921  05BA  06F4               	xorwf	___ftneg@f1+2,f
 11922  05BB  0008               	return
 11923  05BC                     __end_of___ftneg:	
 11924  05BC                     __ptext55:	
 11925 ;; *************** function ___ftadd *****************
 11926 ;; Defined at:
 11927 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftadd.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  f1              3   34[BANK0 ] float 
 11930 ;;  f2              3   37[BANK0 ] float 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  exp1            1   45[BANK0 ] unsigned char 
 11933 ;;  exp2            1   44[BANK0 ] unsigned char 
 11934 ;;  sign            1   43[BANK0 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  3   34[BANK0 ] float 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0, pclath, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 300/0
 11941 ;;		On exit  : 300/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11944 ;;      Params:         0       6       0       0       0
 11945 ;;      Locals:         0       3       0       0       0
 11946 ;;      Temps:          0       3       0       0       0
 11947 ;;      Totals:         0      12       0       0       0
 11948 ;;Total ram usage:       12 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    2
 11951 ;; This function calls:
 11952 ;;		___ftpack
 11953 ;; This function is called by:
 11954 ;;		_getTempDS18B20
 11955 ;;		_calcSHT71
 11956 ;;		_regulacija
 11957 ;;		_menuHumi
 11958 ;;		_menu
 11959 ;;		_sprintf
 11960 ;;		___ftsub
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           
 11965                           ;psect for function ___ftadd
 11966  05BC                     ___ftadd:	
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 11970  05BC  0842               	movf	___ftadd@f1,w
 11971  05BD  00C8               	movwf	??___ftadd
 11972  05BE  0843               	movf	___ftadd@f1+1,w
 11973  05BF  00C9               	movwf	??___ftadd+1
 11974  05C0  0844               	movf	___ftadd@f1+2,w
 11975  05C1  00CA               	movwf	??___ftadd+2
 11976  05C2  1003               	clrc
 11977  05C3  0D49               	rlf	??___ftadd+1,w
 11978  05C4  0D4A               	rlf	??___ftadd+2,w
 11979  05C5  00CD               	movwf	___ftadd@exp1
 11980  05C6  0845               	movf	___ftadd@f2,w
 11981  05C7  00C8               	movwf	??___ftadd
 11982  05C8  0846               	movf	___ftadd@f2+1,w
 11983  05C9  00C9               	movwf	??___ftadd+1
 11984  05CA  0847               	movf	___ftadd@f2+2,w
 11985  05CB  00CA               	movwf	??___ftadd+2
 11986  05CC  1003               	clrc
 11987  05CD  0D49               	rlf	??___ftadd+1,w
 11988  05CE  0D4A               	rlf	??___ftadd+2,w
 11989  05CF  00CC               	movwf	___ftadd@exp2
 11990  05D0  084D               	movf	___ftadd@exp1,w
 11991  05D1  1903               	btfsc	3,2
 11992  05D2  2DDF               	goto	l5036
 11993  05D3  084C               	movf	___ftadd@exp2,w
 11994  05D4  024D               	subwf	___ftadd@exp1,w
 11995  05D5  084C               	movf	___ftadd@exp2,w
 11996  05D6  1803               	skipnc
 11997  05D7  2DE7               	goto	L27
 11998  05D8  00C8               	movwf	??___ftadd
 11999  05D9  084D               	movf	___ftadd@exp1,w
 12000  05DA  02C8               	subwf	??___ftadd,f
 12001  05DB  3019               	movlw	25
 12002  05DC  0248               	subwf	??___ftadd,w
 12003  05DD  1C03               	skipc
 12004  05DE  2DE6               	goto	l5040
 12005  05DF                     l5036:	
 12006  05DF  0845               	movf	___ftadd@f2,w
 12007  05E0  00C2               	movwf	?___ftadd
 12008  05E1  0846               	movf	___ftadd@f2+1,w
 12009  05E2  00C3               	movwf	?___ftadd+1
 12010  05E3  0847               	movf	___ftadd@f2+2,w
 12011  05E4  00C4               	movwf	?___ftadd+2
 12012  05E5  0008               	return
 12013  05E6                     l5040:	
 12014  05E6  084C               	movf	___ftadd@exp2,w
 12015  05E7                     L27:	
 12016  05E7  1903               	btfsc	3,2
 12017  05E8  0008               	return
 12018  05E9  084D               	movf	___ftadd@exp1,w
 12019  05EA  024C               	subwf	___ftadd@exp2,w
 12020  05EB  1803               	skipnc
 12021  05EC  2DF5               	goto	l5046
 12022  05ED  084D               	movf	___ftadd@exp1,w
 12023  05EE  00C8               	movwf	??___ftadd
 12024  05EF  084C               	movf	___ftadd@exp2,w
 12025  05F0  02C8               	subwf	??___ftadd,f
 12026  05F1  3019               	movlw	25
 12027  05F2  0248               	subwf	??___ftadd,w
 12028  05F3  1803               	btfsc	3,0
 12029  05F4  0008               	return
 12030  05F5                     l5046:	
 12031  05F5  3006               	movlw	6
 12032  05F6  00CB               	movwf	___ftadd@sign
 12033  05F7  1BC4               	btfsc	___ftadd@f1+2,7
 12034  05F8  17CB               	bsf	___ftadd@sign,7
 12035  05F9  1BC7               	btfsc	___ftadd@f2+2,7
 12036  05FA  174B               	bsf	___ftadd@sign,6
 12037  05FB  17C3               	bsf	___ftadd@f1+1,7
 12038  05FC  01C4               	clrf	___ftadd@f1+2
 12039  05FD  17C6               	bsf	___ftadd@f2+1,7
 12040  05FE  01C7               	clrf	___ftadd@f2+2
 12041  05FF  084C               	movf	___ftadd@exp2,w
 12042  0600  024D               	subwf	___ftadd@exp1,w
 12043  0601  1803               	skipnc
 12044  0602  2E1C               	goto	l5068
 12045  0603                     l5058:	
 12046  0603  1003               	clrc
 12047  0604  0DC5               	rlf	___ftadd@f2,f
 12048  0605  0DC6               	rlf	___ftadd@f2+1,f
 12049  0606  0DC7               	rlf	___ftadd@f2+2,f
 12050  0607  03CC               	decf	___ftadd@exp2,f
 12051  0608  084C               	movf	___ftadd@exp2,w
 12052  0609  064D               	xorwf	___ftadd@exp1,w
 12053  060A  1903               	skipnz
 12054  060B  2E17               	goto	l5066
 12055  060C  03CB               	decf	___ftadd@sign,f
 12056  060D  084B               	movf	___ftadd@sign,w
 12057  060E  3907               	andlw	7
 12058  060F  1903               	btfsc	3,2
 12059  0610  2E17               	goto	l5066
 12060  0611  2E03               	goto	l5058
 12061  0612                     l5064:	
 12062  0612  1003               	clrc
 12063  0613  0CC4               	rrf	___ftadd@f1+2,f
 12064  0614  0CC3               	rrf	___ftadd@f1+1,f
 12065  0615  0CC2               	rrf	___ftadd@f1,f
 12066  0616  0ACD               	incf	___ftadd@exp1,f
 12067  0617                     l5066:	
 12068  0617  084D               	movf	___ftadd@exp1,w
 12069  0618  064C               	xorwf	___ftadd@exp2,w
 12070  0619  1903               	btfsc	3,2
 12071  061A  2E38               	goto	l890
 12072  061B  2E12               	goto	l5064
 12073  061C                     l5068:	
 12074  061C  084D               	movf	___ftadd@exp1,w
 12075  061D  024C               	subwf	___ftadd@exp2,w
 12076  061E  1803               	skipnc
 12077  061F  2E38               	goto	l890
 12078  0620                     l5070:	
 12079  0620  1003               	clrc
 12080  0621  0DC2               	rlf	___ftadd@f1,f
 12081  0622  0DC3               	rlf	___ftadd@f1+1,f
 12082  0623  0DC4               	rlf	___ftadd@f1+2,f
 12083  0624  03CD               	decf	___ftadd@exp1,f
 12084  0625  084C               	movf	___ftadd@exp2,w
 12085  0626  064D               	xorwf	___ftadd@exp1,w
 12086  0627  1903               	skipnz
 12087  0628  2E34               	goto	l5078
 12088  0629  03CB               	decf	___ftadd@sign,f
 12089  062A  084B               	movf	___ftadd@sign,w
 12090  062B  3907               	andlw	7
 12091  062C  1903               	btfsc	3,2
 12092  062D  2E34               	goto	l5078
 12093  062E  2E20               	goto	l5070
 12094  062F                     l5076:	
 12095  062F  1003               	clrc
 12096  0630  0CC7               	rrf	___ftadd@f2+2,f
 12097  0631  0CC6               	rrf	___ftadd@f2+1,f
 12098  0632  0CC5               	rrf	___ftadd@f2,f
 12099  0633  0ACC               	incf	___ftadd@exp2,f
 12100  0634                     l5078:	
 12101  0634  084D               	movf	___ftadd@exp1,w
 12102  0635  064C               	xorwf	___ftadd@exp2,w
 12103  0636  1D03               	skipz
 12104  0637  2E2F               	goto	l5076
 12105  0638                     l890:	
 12106  0638  1FCB               	btfss	___ftadd@sign,7
 12107  0639  2E43               	goto	l5084
 12108  063A  30FF               	movlw	255
 12109  063B  06C2               	xorwf	___ftadd@f1,f
 12110  063C  06C3               	xorwf	___ftadd@f1+1,f
 12111  063D  06C4               	xorwf	___ftadd@f1+2,f
 12112  063E  0AC2               	incf	___ftadd@f1,f
 12113  063F  1903               	skipnz
 12114  0640  0AC3               	incf	___ftadd@f1+1,f
 12115  0641  1903               	skipnz
 12116  0642  0AC4               	incf	___ftadd@f1+2,f
 12117  0643                     l5084:	
 12118  0643  1F4B               	btfss	___ftadd@sign,6
 12119  0644  2E4E               	goto	l5090
 12120  0645  30FF               	movlw	255
 12121  0646  06C5               	xorwf	___ftadd@f2,f
 12122  0647  06C6               	xorwf	___ftadd@f2+1,f
 12123  0648  06C7               	xorwf	___ftadd@f2+2,f
 12124  0649  0AC5               	incf	___ftadd@f2,f
 12125  064A  1903               	skipnz
 12126  064B  0AC6               	incf	___ftadd@f2+1,f
 12127  064C  1903               	skipnz
 12128  064D  0AC7               	incf	___ftadd@f2+2,f
 12129  064E                     l5090:	
 12130  064E  01CB               	clrf	___ftadd@sign
 12131  064F  0842               	movf	___ftadd@f1,w
 12132  0650  07C5               	addwf	___ftadd@f2,f
 12133  0651  0843               	movf	___ftadd@f1+1,w
 12134  0652  1103               	clrz
 12135  0653  1803               	skipnc
 12136  0654  0A43               	incf	___ftadd@f1+1,w
 12137  0655  1D03               	btfss	3,2
 12138  0656  07C6               	addwf	___ftadd@f2+1,f
 12139  0657  0844               	movf	___ftadd@f1+2,w
 12140  0658  1103               	clrz
 12141  0659  1803               	skipnc
 12142  065A  0A44               	incf	___ftadd@f1+2,w
 12143  065B  1D03               	btfss	3,2
 12144  065C  07C7               	addwf	___ftadd@f2+2,f
 12145  065D  1FC7               	btfss	___ftadd@f2+2,7
 12146  065E  2E6A               	goto	l5102
 12147  065F  30FF               	movlw	255
 12148  0660  06C5               	xorwf	___ftadd@f2,f
 12149  0661  06C6               	xorwf	___ftadd@f2+1,f
 12150  0662  06C7               	xorwf	___ftadd@f2+2,f
 12151  0663  0AC5               	incf	___ftadd@f2,f
 12152  0664  1903               	skipnz
 12153  0665  0AC6               	incf	___ftadd@f2+1,f
 12154  0666  1903               	skipnz
 12155  0667  0AC7               	incf	___ftadd@f2+2,f
 12156  0668  01CB               	clrf	___ftadd@sign
 12157  0669  0ACB               	incf	___ftadd@sign,f
 12158  066A                     l5102:	
 12159  066A  0845               	movf	___ftadd@f2,w
 12160  066B  00F2               	movwf	___ftpack@arg
 12161  066C  0846               	movf	___ftadd@f2+1,w
 12162  066D  00F3               	movwf	___ftpack@arg+1
 12163  066E  0847               	movf	___ftadd@f2+2,w
 12164  066F  00F4               	movwf	___ftpack@arg+2
 12165  0670  084D               	movf	___ftadd@exp1,w
 12166  0671  00F5               	movwf	___ftpack@exp
 12167  0672  084B               	movf	___ftadd@sign,w
 12168  0673  00F6               	movwf	___ftpack@sign
 12169  0674  160A  118A  2725   	fcall	___ftpack
 12170  0677  0872               	movf	?___ftpack,w
 12171  0678  00C2               	movwf	?___ftadd
 12172  0679  0873               	movf	?___ftpack+1,w
 12173  067A  00C3               	movwf	?___ftadd+1
 12174  067B  0874               	movf	?___ftpack+2,w
 12175  067C  00C4               	movwf	?___ftadd+2
 12176  067D  0008               	return
 12177  067E                     __end_of___ftadd:	
 12178  067E                     __ptext54:	
 12179 ;; *************** function ___ftsub *****************
 12180 ;; Defined at:
 12181 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftsub.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  f2              3   46[BANK0 ] float 
 12184 ;;  f1              3   49[BANK0 ] float 
 12185 ;; Auto vars:     Size  Location     Type
 12186 ;;		None
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  3   46[BANK0 ] float 
 12189 ;; Registers used:
 12190 ;;		wreg, status,2, status,0, pclath, cstack
 12191 ;; Tracked objects:
 12192 ;;		On entry : 300/0
 12193 ;;		On exit  : 300/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12196 ;;      Params:         0       6       0       0       0
 12197 ;;      Locals:         0       0       0       0       0
 12198 ;;      Temps:          0       0       0       0       0
 12199 ;;      Totals:         0       6       0       0       0
 12200 ;;Total ram usage:        6 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:    3
 12203 ;; This function calls:
 12204 ;;		___ftadd
 12205 ;; This function is called by:
 12206 ;;		_sprintf
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           
 12211                           ;psect for function ___ftsub
 12212  067E                     ___ftsub:	
 12213                           
 12214                           ;incstack = 0
 12215                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12216  067E  0850               	movf	___ftsub@f2+2,w
 12217  067F  044F               	iorwf	___ftsub@f2+1,w
 12218  0680  044E               	iorwf	___ftsub@f2,w
 12219  0681  1903               	skipnz
 12220  0682  2E85               	goto	l5354
 12221  0683  3080               	movlw	128
 12222  0684  06D0               	xorwf	___ftsub@f2+2,f
 12223  0685                     l5354:	
 12224  0685  0851               	movf	___ftsub@f1,w
 12225  0686  00C2               	movwf	___ftadd@f1
 12226  0687  0852               	movf	___ftsub@f1+1,w
 12227  0688  00C3               	movwf	___ftadd@f1+1
 12228  0689  0853               	movf	___ftsub@f1+2,w
 12229  068A  00C4               	movwf	___ftadd@f1+2
 12230  068B  084E               	movf	___ftsub@f2,w
 12231  068C  00C5               	movwf	___ftadd@f2
 12232  068D  084F               	movf	___ftsub@f2+1,w
 12233  068E  00C6               	movwf	___ftadd@f2+1
 12234  068F  0850               	movf	___ftsub@f2+2,w
 12235  0690  00C7               	movwf	___ftadd@f2+2
 12236  0691  25BC               	fcall	___ftadd
 12237  0692  0842               	movf	?___ftadd,w
 12238  0693  00CE               	movwf	?___ftsub
 12239  0694  0843               	movf	?___ftadd+1,w
 12240  0695  00CF               	movwf	?___ftsub+1
 12241  0696  0844               	movf	?___ftadd+2,w
 12242  0697  00D0               	movwf	?___ftsub+2
 12243  0698  0008               	return
 12244  0699                     __end_of___ftsub:	
 12245  0699                     __ptext51:	
 12246 ;; *************** function ___lltoft *****************
 12247 ;; Defined at:
 12248 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lltoft.c"
 12249 ;; Parameters:    Size  Location     Type
 12250 ;;  c               4    0[BANK0 ] unsigned long 
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;  exp             1    4[BANK0 ] unsigned char 
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  3    0[BANK0 ] float 
 12255 ;; Registers used:
 12256 ;;		wreg, status,2, status,0, pclath, cstack
 12257 ;; Tracked objects:
 12258 ;;		On entry : 300/0
 12259 ;;		On exit  : 300/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12262 ;;      Params:         0       4       0       0       0
 12263 ;;      Locals:         0       1       0       0       0
 12264 ;;      Temps:          0       0       0       0       0
 12265 ;;      Totals:         0       5       0       0       0
 12266 ;;Total ram usage:        5 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; Hardware stack levels required when called:    2
 12269 ;; This function calls:
 12270 ;;		___ftpack
 12271 ;; This function is called by:
 12272 ;;		_sprintf
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           
 12277                           ;psect for function ___lltoft
 12278  0699                     ___lltoft:	
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12282  0699  308E               	movlw	142
 12283  069A  00A4               	movwf	___lltoft@exp
 12284  069B                     l5382:	
 12285  069B  30FF               	movlw	255
 12286  069C  0523               	andwf	___lltoft@c+3,w
 12287  069D  1903               	btfsc	3,2
 12288  069E  2EA6               	goto	l5384
 12289  069F  1003               	clrc
 12290  06A0  0CA3               	rrf	___lltoft@c+3,f
 12291  06A1  0CA2               	rrf	___lltoft@c+2,f
 12292  06A2  0CA1               	rrf	___lltoft@c+1,f
 12293  06A3  0CA0               	rrf	___lltoft@c,f
 12294  06A4  0AA4               	incf	___lltoft@exp,f
 12295  06A5  2E9B               	goto	l5382
 12296  06A6                     l5384:	
 12297  06A6  0820               	movf	___lltoft@c,w
 12298  06A7  00F2               	movwf	___ftpack@arg
 12299  06A8  0821               	movf	___lltoft@c+1,w
 12300  06A9  00F3               	movwf	___ftpack@arg+1
 12301  06AA  0822               	movf	___lltoft@c+2,w
 12302  06AB  00F4               	movwf	___ftpack@arg+2
 12303  06AC  0824               	movf	___lltoft@exp,w
 12304  06AD  00F5               	movwf	___ftpack@exp
 12305  06AE  01F6               	clrf	___ftpack@sign
 12306  06AF  160A  118A  2725   	fcall	___ftpack
 12307  06B2  0872               	movf	?___ftpack,w
 12308  06B3  00A0               	movwf	?___lltoft
 12309  06B4  0873               	movf	?___ftpack+1,w
 12310  06B5  00A1               	movwf	?___lltoft+1
 12311  06B6  0874               	movf	?___ftpack+2,w
 12312  06B7  00A2               	movwf	?___lltoft+2
 12313  06B8  0008               	return
 12314  06B9                     __end_of___lltoft:	
 12315  06B9                     __ptext48:	
 12316 ;; *************** function __tdiv_to_l_ *****************
 12317 ;; Defined at:
 12318 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftdivl.c"
 12319 ;; Parameters:    Size  Location     Type
 12320 ;;  f1              3    2[COMMON] float 
 12321 ;;  f2              3    5[COMMON] float 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  quot            4    3[BANK0 ] unsigned long 
 12324 ;;  exp1            1    8[BANK0 ] unsigned char 
 12325 ;;  cntr            1    7[BANK0 ] unsigned char 
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  4    2[COMMON] unsigned long 
 12328 ;; Registers used:
 12329 ;;		wreg, status,2, status,0
 12330 ;; Tracked objects:
 12331 ;;		On entry : 300/100
 12332 ;;		On exit  : 300/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12335 ;;      Params:         6       0       0       0       0
 12336 ;;      Locals:         0       6       0       0       0
 12337 ;;      Temps:          0       3       0       0       0
 12338 ;;      Totals:         6       9       0       0       0
 12339 ;;Total ram usage:       15 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    1
 12342 ;; This function calls:
 12343 ;;		Nothing
 12344 ;; This function is called by:
 12345 ;;		_sprintf
 12346 ;; This function uses a non-reentrant model
 12347 ;;
 12348                           
 12349                           
 12350                           ;psect for function __tdiv_to_l_
 12351  06B9                     __tdiv_to_l_:	
 12352                           
 12353                           ;incstack = 0
 12354                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
 12355  06B9  0872               	movf	__tdiv_to_l_@f1,w
 12356  06BA  1283               	bcf	3,5	;RP0=0, select bank0
 12357  06BB  00A0               	movwf	??__tdiv_to_l_
 12358  06BC  0873               	movf	__tdiv_to_l_@f1+1,w
 12359  06BD  00A1               	movwf	??__tdiv_to_l_+1
 12360  06BE  0874               	movf	__tdiv_to_l_@f1+2,w
 12361  06BF  00A2               	movwf	??__tdiv_to_l_+2
 12362  06C0  1003               	clrc
 12363  06C1  0D21               	rlf	??__tdiv_to_l_+1,w
 12364  06C2  0D22               	rlf	??__tdiv_to_l_+2,w
 12365  06C3  00A8               	movwf	__tdiv_to_l_@exp1
 12366  06C4  0828               	movf	__tdiv_to_l_@exp1,w
 12367  06C5  1D03               	btfss	3,2
 12368  06C6  2ECC               	goto	l5294
 12369  06C7                     l5292:	
 12370  06C7  01F2               	clrf	?__tdiv_to_l_
 12371  06C8  01F3               	clrf	?__tdiv_to_l_+1
 12372  06C9  01F4               	clrf	?__tdiv_to_l_+2
 12373  06CA  01F5               	clrf	?__tdiv_to_l_+3
 12374  06CB  0008               	return
 12375  06CC                     l5294:	
 12376  06CC  0875               	movf	__tdiv_to_l_@f2,w
 12377  06CD  00A0               	movwf	??__tdiv_to_l_
 12378  06CE  0876               	movf	__tdiv_to_l_@f2+1,w
 12379  06CF  00A1               	movwf	??__tdiv_to_l_+1
 12380  06D0  0877               	movf	__tdiv_to_l_@f2+2,w
 12381  06D1  00A2               	movwf	??__tdiv_to_l_+2
 12382  06D2  1003               	clrc
 12383  06D3  0D21               	rlf	??__tdiv_to_l_+1,w
 12384  06D4  0D22               	rlf	??__tdiv_to_l_+2,w
 12385  06D5  00A7               	movwf	__tdiv_to_l_@cntr
 12386  06D6  0827               	movf	__tdiv_to_l_@cntr,w
 12387  06D7  1903               	btfsc	3,2
 12388  06D8  2EC7               	goto	l5292
 12389  06D9  307F               	movlw	127
 12390  06DA  17F3               	bsf	__tdiv_to_l_@f1+1,7
 12391  06DB  01F4               	clrf	__tdiv_to_l_@f1+2
 12392  06DC  17F6               	bsf	__tdiv_to_l_@f2+1,7
 12393  06DD  01F7               	clrf	__tdiv_to_l_@f2+2
 12394  06DE  01A3               	clrf	__tdiv_to_l_@quot
 12395  06DF  01A4               	clrf	__tdiv_to_l_@quot+1
 12396  06E0  01A5               	clrf	__tdiv_to_l_@quot+2
 12397  06E1  01A6               	clrf	__tdiv_to_l_@quot+3
 12398  06E2  02A8               	subwf	__tdiv_to_l_@exp1,f
 12399  06E3  3098               	movlw	152
 12400  06E4  0727               	addwf	__tdiv_to_l_@cntr,w
 12401  06E5  00A0               	movwf	??__tdiv_to_l_
 12402  06E6  02A8               	subwf	__tdiv_to_l_@exp1,f
 12403  06E7  3018               	movlw	24
 12404  06E8  00A7               	movwf	__tdiv_to_l_@cntr
 12405  06E9                     l5308:	
 12406  06E9  1003               	clrc
 12407  06EA  0DA3               	rlf	__tdiv_to_l_@quot,f
 12408  06EB  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12409  06EC  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12410  06ED  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12411  06EE  0877               	movf	__tdiv_to_l_@f2+2,w
 12412  06EF  0274               	subwf	__tdiv_to_l_@f1+2,w
 12413  06F0  1D03               	skipz
 12414  06F1  2EF8               	goto	u5925
 12415  06F2  0876               	movf	__tdiv_to_l_@f2+1,w
 12416  06F3  0273               	subwf	__tdiv_to_l_@f1+1,w
 12417  06F4  1D03               	skipz
 12418  06F5  2EF8               	goto	u5925
 12419  06F6  0875               	movf	__tdiv_to_l_@f2,w
 12420  06F7  0272               	subwf	__tdiv_to_l_@f1,w
 12421  06F8                     u5925:	
 12422  06F8  1C03               	skipc
 12423  06F9  2F06               	goto	L24
 12424  06FA  0875               	movf	__tdiv_to_l_@f2,w
 12425  06FB  02F2               	subwf	__tdiv_to_l_@f1,f
 12426  06FC  0876               	movf	__tdiv_to_l_@f2+1,w
 12427  06FD  1C03               	skipc
 12428  06FE  0F76               	incfsz	__tdiv_to_l_@f2+1,w
 12429  06FF  02F3               	subwf	__tdiv_to_l_@f1+1,f
 12430  0700  0877               	movf	__tdiv_to_l_@f2+2,w
 12431  0701  1C03               	skipc
 12432  0702  0A77               	incf	__tdiv_to_l_@f2+2,w
 12433  0703  02F4               	subwf	__tdiv_to_l_@f1+2,f
 12434  0704  1423               	bsf	__tdiv_to_l_@quot,0
 12435  0705  1003               	clrc
 12436  0706                     L24:	
 12437  0706  0DF2               	rlf	__tdiv_to_l_@f1,f
 12438  0707  0DF3               	rlf	__tdiv_to_l_@f1+1,f
 12439  0708  0DF4               	rlf	__tdiv_to_l_@f1+2,f
 12440  0709  0BA7               	decfsz	__tdiv_to_l_@cntr,f
 12441  070A  2EE9               	goto	l5308
 12442  070B  1FA8               	btfss	__tdiv_to_l_@exp1,7
 12443  070C  2F1A               	goto	l5328
 12444  070D  0828               	movf	__tdiv_to_l_@exp1,w
 12445  070E  3A80               	xorlw	128
 12446  070F  3E97               	addlw	151
 12447  0710  1C03               	btfss	3,0
 12448  0711  2EC7               	goto	l5292
 12449  0712                     l5324:	
 12450  0712  1003               	clrc
 12451  0713  0CA6               	rrf	__tdiv_to_l_@quot+3,f
 12452  0714  0CA5               	rrf	__tdiv_to_l_@quot+2,f
 12453  0715  0CA4               	rrf	__tdiv_to_l_@quot+1,f
 12454  0716  0CA3               	rrf	__tdiv_to_l_@quot,f
 12455  0717  0FA8               	incfsz	__tdiv_to_l_@exp1,f
 12456  0718  2F12               	goto	l5324
 12457  0719  2F28               	goto	l5336
 12458  071A                     l5328:	
 12459  071A  3018               	movlw	24
 12460  071B  0228               	subwf	__tdiv_to_l_@exp1,w
 12461  071C  1803               	btfsc	3,0
 12462  071D  2EC7               	goto	l5292
 12463  071E                     l5334:	
 12464  071E  0828               	movf	__tdiv_to_l_@exp1,w
 12465  071F  1903               	btfsc	3,2
 12466  0720  2F28               	goto	l5336
 12467  0721  1003               	clrc
 12468  0722  0DA3               	rlf	__tdiv_to_l_@quot,f
 12469  0723  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12470  0724  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12471  0725  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12472  0726  03A8               	decf	__tdiv_to_l_@exp1,f
 12473  0727  2F1E               	goto	l5334
 12474  0728                     l5336:	
 12475  0728  0826               	movf	__tdiv_to_l_@quot+3,w
 12476  0729  00F5               	movwf	?__tdiv_to_l_+3
 12477  072A  0825               	movf	__tdiv_to_l_@quot+2,w
 12478  072B  00F4               	movwf	?__tdiv_to_l_+2
 12479  072C  0824               	movf	__tdiv_to_l_@quot+1,w
 12480  072D  00F3               	movwf	?__tdiv_to_l_+1
 12481  072E  0823               	movf	__tdiv_to_l_@quot,w
 12482  072F  00F2               	movwf	?__tdiv_to_l_
 12483  0730  0008               	return
 12484  0731                     __end_of__tdiv_to_l_:	
 12485  0731                     __ptext42:	
 12486 ;; *************** function _isdigit *****************
 12487 ;; Defined at:
 12488 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  c               1    wreg     unsigned char 
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;  c               1    3[COMMON] unsigned char 
 12493 ;; Return value:  Size  Location     Type
 12494 ;;		None               void
 12495 ;; Registers used:
 12496 ;;		wreg, status,2, status,0
 12497 ;; Tracked objects:
 12498 ;;		On entry : 300/0
 12499 ;;		On exit  : 300/0
 12500 ;;		Unchanged: 300/0
 12501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12502 ;;      Params:         0       0       0       0       0
 12503 ;;      Locals:         2       0       0       0       0
 12504 ;;      Temps:          0       0       0       0       0
 12505 ;;      Totals:         2       0       0       0       0
 12506 ;;Total ram usage:        2 bytes
 12507 ;; Hardware stack levels used:    1
 12508 ;; Hardware stack levels required when called:    1
 12509 ;; This function calls:
 12510 ;;		Nothing
 12511 ;; This function is called by:
 12512 ;;		_sprintf
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           
 12517                           ;psect for function _isdigit
 12518  0731                     _isdigit:	
 12519                           
 12520                           ;incstack = 0
 12521                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 12522                           ;isdigit@c stored from wreg
 12523  0731  00F3               	movwf	isdigit@c
 12524  0732  303A               	movlw	58
 12525  0733  01F2               	clrf	_isdigit$955
 12526  0734  0273               	subwf	isdigit@c,w
 12527  0735  1803               	skipnc
 12528  0736  2F3D               	goto	l3570
 12529  0737  3030               	movlw	48
 12530  0738  0273               	subwf	isdigit@c,w
 12531  0739  1C03               	skipc
 12532  073A  2F3D               	goto	l3570
 12533  073B  01F2               	clrf	_isdigit$955
 12534  073C  0AF2               	incf	_isdigit$955,f
 12535  073D                     l3570:	
 12536  073D  0C72               	rrf	_isdigit$955,w
 12537  073E  0008               	return
 12538  073F                     __end_of_isdigit:	
 12539  073F                     PL2:	
 12540  073F  0875               	movf	?___lldiv+3,w
 12541  0740  1683               	bsf	3,5	;RP0=1, select bank1
 12542  0741  00CF               	movwf	(sprintf@tmpval+3)^(0+128)
 12543  0742  0874               	movf	?___lldiv+2,w
 12544  0743  00CE               	movwf	(sprintf@tmpval+2)^(0+128)
 12545  0744  0873               	movf	?___lldiv+1,w
 12546  0745  00CD               	movwf	(sprintf@tmpval+1)^(0+128)
 12547  0746  0872               	movf	?___lldiv,w
 12548  0747  00CC               	movwf	sprintf@tmpval^(0+128)
 12549  0748  300A               	movlw	10
 12550  0749  00F2               	movwf	___llmod@divisor
 12551  074A  01F3               	clrf	___llmod@divisor+1
 12552  074B  01F4               	clrf	___llmod@divisor+2
 12553  074C  01F5               	clrf	___llmod@divisor+3
 12554  074D  084F               	movf	(sprintf@tmpval+3)^(0+128),w
 12555  074E  00F9               	movwf	___llmod@dividend+3
 12556  074F  084E               	movf	(sprintf@tmpval+2)^(0+128),w
 12557  0750  00F8               	movwf	___llmod@dividend+2
 12558  0751  084D               	movf	(sprintf@tmpval+1)^(0+128),w
 12559  0752  00F7               	movwf	___llmod@dividend+1
 12560  0753  084C               	movf	sprintf@tmpval^(0+128),w
 12561  0754  00F6               	movwf	___llmod@dividend
 12562  0755  0008               	return
 12563  0756                     __end_ofPL2:	
 12564  0756                     PL8:	
 12565  0756  084C               	movf	sprintf@tmpval^(0+128),w
 12566  0757  1283               	bcf	3,5	;RP0=0, select bank0
 12567  0758  00CE               	movwf	___ftge@ff1
 12568  0759  1683               	bsf	3,5	;RP0=1, select bank1
 12569  075A  084D               	movf	(sprintf@tmpval+1)^(0+128),w
 12570  075B  1283               	bcf	3,5	;RP0=0, select bank0
 12571  075C  00CF               	movwf	___ftge@ff1+1
 12572  075D  1683               	bsf	3,5	;RP0=1, select bank1
 12573  075E  084E               	movf	(sprintf@tmpval+2)^(0+128),w
 12574  075F  1283               	bcf	3,5	;RP0=0, select bank0
 12575  0760  00D0               	movwf	___ftge@ff1+2
 12576  0761  0008               	return
 12577  0762                     __end_ofPL8:	
 12578  0762                     PL14:	
 12579  0762  0845               	movf	?___fttol+3,w
 12580  0763  1683               	bsf	3,5	;RP0=1, select bank1
 12581  0764  00CB               	movwf	(sprintf@val+3)^(0+128)
 12582  0765  1283               	bcf	3,5	;RP0=0, select bank0
 12583  0766  0844               	movf	?___fttol+2,w
 12584  0767  1683               	bsf	3,5	;RP0=1, select bank1
 12585  0768  00CA               	movwf	(sprintf@val+2)^(0+128)
 12586  0769  1283               	bcf	3,5	;RP0=0, select bank0
 12587  076A  0843               	movf	?___fttol+1,w
 12588  076B  1683               	bsf	3,5	;RP0=1, select bank1
 12589  076C  00C9               	movwf	(sprintf@val+1)^(0+128)
 12590  076D  1283               	bcf	3,5	;RP0=0, select bank0
 12591  076E  0842               	movf	?___fttol,w
 12592  076F  1683               	bsf	3,5	;RP0=1, select bank1
 12593  0770  0008               	return
 12594  0771                     __end_ofPL14:	
 12595  0771                     PL22:	
 12596  0771  0875               	movf	?___llmod+3,w
 12597  0772  1683               	bsf	3,5	;RP0=1, select bank1
 12598  0773  00CF               	movwf	(sprintf@tmpval+3)^(0+128)
 12599  0774  0874               	movf	?___llmod+2,w
 12600  0775  00CE               	movwf	(sprintf@tmpval+2)^(0+128)
 12601  0776  0873               	movf	?___llmod+1,w
 12602  0777  00CD               	movwf	(sprintf@tmpval+1)^(0+128)
 12603  0778  0872               	movf	?___llmod,w
 12604  0779  00CC               	movwf	sprintf@tmpval^(0+128)
 12605  077A  0854               	movf	sprintf@sp^(0+128),w
 12606  077B  0084               	movwf	4
 12607  077C  084C               	movf	sprintf@tmpval^(0+128),w
 12608  077D  3E30               	addlw	48
 12609  077E  0008               	return
 12610  077F                     __end_ofPL22:	
 12611  077F                     PL26:	
 12612  077F  0837               	movf	?_scale,w
 12613  0780  1683               	bsf	3,5	;RP0=1, select bank1
 12614  0781  00CC               	movwf	sprintf@tmpval^(0+128)
 12615  0782  1283               	bcf	3,5	;RP0=0, select bank0
 12616  0783  0838               	movf	?_scale+1,w
 12617  0784  1683               	bsf	3,5	;RP0=1, select bank1
 12618  0785  00CD               	movwf	(sprintf@tmpval+1)^(0+128)
 12619  0786  1283               	bcf	3,5	;RP0=0, select bank0
 12620  0787  0839               	movf	?_scale+2,w
 12621  0788  1683               	bsf	3,5	;RP0=1, select bank1
 12622  0789  00CE               	movwf	(sprintf@tmpval+2)^(0+128)
 12623  078A  0855               	movf	sprintf@fval^(0+128),w
 12624  078B  0008               	return
 12625  078C                     __end_ofPL26:	
 12626  078C                     PL36:	
 12627  078C  0D59               	rlf	??_sprintf,w
 12628  078D  3E60               	addlw	low (_dpowers| (0+32768))
 12629  078E  0084               	movwf	4
 12630  078F  3098               	movlw	high (_dpowers| (0+32768))
 12631  0790  1803               	skipnc
 12632  0791  3E01               	addlw	1
 12633  0792  00FF               	movwf	127
 12634  0793  0008               	return
 12635  0794                     __end_ofPL36:	
 12636  0794                     PL38:	
 12637  0794  1283               	bcf	3,5	;RP0=0, select bank0
 12638  0795  0855               	movf	sprintf@f+1,w
 12639  0796  00DA               	movwf	??_sprintf+1
 12640  0797  0854               	movf	sprintf@f,w
 12641  0798  00D9               	movwf	??_sprintf
 12642  0799  0AD4               	incf	sprintf@f,f
 12643  079A  1903               	skipnz
 12644  079B  0AD5               	incf	sprintf@f+1,f
 12645  079C  085A               	movf	??_sprintf+1,w
 12646  079D  00FF               	movwf	127
 12647  079E  0859               	movf	??_sprintf,w
 12648  079F  0084               	movwf	4
 12649  07A0  0008               	return
 12650  07A1                     __end_ofPL38:	
 12651  07A1                     PL42:	
 12652  07A1  0855               	movf	sprintf@fval^(0+128),w
 12653  07A2  1283               	bcf	3,5	;RP0=0, select bank0
 12654  07A3  00C2               	movwf	___fttol@f1
 12655  07A4  1683               	bsf	3,5	;RP0=1, select bank1
 12656  07A5  0856               	movf	(sprintf@fval+1)^(0+128),w
 12657  07A6  1283               	bcf	3,5	;RP0=0, select bank0
 12658  07A7  00C3               	movwf	___fttol@f1+1
 12659  07A8  1683               	bsf	3,5	;RP0=1, select bank1
 12660  07A9  0857               	movf	(sprintf@fval+2)^(0+128),w
 12661  07AA  1283               	bcf	3,5	;RP0=0, select bank0
 12662  07AB  00C4               	movwf	___fttol@f1+2
 12663  07AC  0008               	return
 12664  07AD                     __end_ofPL42:	
 12665  07AD                     PL46:	
 12666  07AD  00F5               	movwf	___lldiv@divisor+3
 12667  07AE  1683               	bsf	3,5	;RP0=1, select bank1
 12668  07AF  084B               	movf	(sprintf@val+3)^(0+128),w
 12669  07B0  00F9               	movwf	___lldiv@dividend+3
 12670  07B1  084A               	movf	(sprintf@val+2)^(0+128),w
 12671  07B2  00F8               	movwf	___lldiv@dividend+2
 12672  07B3  0849               	movf	(sprintf@val+1)^(0+128),w
 12673  07B4  00F7               	movwf	___lldiv@dividend+1
 12674  07B5  0848               	movf	sprintf@val^(0+128),w
 12675  07B6  00F6               	movwf	___lldiv@dividend
 12676  07B7  0008               	return
 12677  07B8                     __end_ofPL46:	
 12678  07B8                     PL50:	
 12679  07B8  1283               	bcf	3,5	;RP0=0, select bank0
 12680  07B9  00A8               	movwf	___ftmul@f1
 12681  07BA  1683               	bsf	3,5	;RP0=1, select bank1
 12682  07BB  0856               	movf	(sprintf@fval+1)^(0+128),w
 12683  07BC  1283               	bcf	3,5	;RP0=0, select bank0
 12684  07BD  00A9               	movwf	___ftmul@f1+1
 12685  07BE  1683               	bsf	3,5	;RP0=1, select bank1
 12686  07BF  0857               	movf	(sprintf@fval+2)^(0+128),w
 12687  07C0  1283               	bcf	3,5	;RP0=0, select bank0
 12688  07C1  00AA               	movwf	___ftmul@f1+2
 12689  07C2  0008               	return
 12690  07C3                     __end_ofPL50:	
 12691  07C3                     PL68:	
 12692  07C3  0854               	movf	sprintf@sp^(0+128),w
 12693  07C4  0084               	movwf	4
 12694  07C5  3030               	movlw	48
 12695  07C6  1383               	bcf	3,7	;select IRP bank0
 12696  07C7  0080               	movwf	0
 12697  07C8  30FF               	movlw	-1
 12698  07C9  0AD4               	incf	sprintf@sp^(0+128),f
 12699  07CA  0008               	return
 12700  07CB                     __end_ofPL68:	
 12701  07CB                     PL80:	
 12702  07CB  0842               	movf	___fttol@f1,w
 12703  07CC  00C6               	movwf	??___fttol
 12704  07CD  0843               	movf	___fttol@f1+1,w
 12705  07CE  00C7               	movwf	??___fttol+1
 12706  07CF  0844               	movf	___fttol@f1+2,w
 12707  07D0  00C8               	movwf	??___fttol+2
 12708  07D1  0008               	return
 12709  07D2                     __end_ofPL80:	
 12710  07D2                     PL92:	
 12711  07D2  1283               	bcf	3,5	;RP0=0, select bank0
 12712  07D3  00D9               	movwf	??_sprintf
 12713  07D4  01DA               	clrf	??_sprintf+1
 12714  07D5  1BD9               	btfsc	??_sprintf,7
 12715  07D6  03DA               	decf	??_sprintf+1,f
 12716  07D7  1683               	bsf	3,5	;RP0=1, select bank1
 12717  07D8  0008               	return
 12718  07D9                     __end_ofPL92:	
 12719  07D9                     PL94:	
 12720  07D9  1283               	bcf	3,5	;RP0=0, select bank0
 12721  07DA  0855               	movf	sprintf@f+1,w
 12722  07DB  00FF               	movwf	127
 12723  07DC  0854               	movf	sprintf@f,w
 12724  07DD  0084               	movwf	4
 12725  07DE  0008               	return
 12726  07DF                     __end_ofPL94:	
 12727                           
 12728                           	psect	text70
 12729  0801                     __ptext70:	
 12730 ;; *************** function _IOPinsInit *****************
 12731 ;; Defined at:
 12732 ;;		line 121 in file "main.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;		None
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;		None
 12737 ;; Return value:  Size  Location     Type
 12738 ;;		None               void
 12739 ;; Registers used:
 12740 ;;		None
 12741 ;; Tracked objects:
 12742 ;;		On entry : 300/100
 12743 ;;		On exit  : 300/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12746 ;;      Params:         0       0       0       0       0
 12747 ;;      Locals:         0       0       0       0       0
 12748 ;;      Temps:          0       0       0       0       0
 12749 ;;      Totals:         0       0       0       0       0
 12750 ;;Total ram usage:        0 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    1
 12753 ;; This function calls:
 12754 ;;		Nothing
 12755 ;; This function is called by:
 12756 ;;		_main
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           
 12761                           ;psect for function _IOPinsInit
 12762  0801                     _IOPinsInit:	
 12763                           
 12764                           ;main.c: 122: RC4 = 0;
 12765                           
 12766                           ;incstack = 0
 12767                           ; Regs used in _IOPinsInit: []
 12768  0801  1283               	bcf	3,5	;RP0=0, select bank0
 12769  0802  1207               	bcf	7,4	;volatile
 12770                           
 12771                           ;main.c: 123: RC1 = 0;
 12772  0803  1087               	bcf	7,1	;volatile
 12773                           
 12774                           ;main.c: 124: RC0 = 0;
 12775  0804  1007               	bcf	7,0	;volatile
 12776                           
 12777                           ;main.c: 125: RC3 = 0;
 12778  0805  1187               	bcf	7,3	;volatile
 12779                           
 12780                           ;main.c: 126: RA5 = 0;
 12781  0806  1285               	bcf	5,5	;volatile
 12782  0807  0008               	return
 12783  0808                     __end_of_IOPinsInit:	
 12784                           
 12785                           	psect	text71
 12786  081A                     __ptext71:	
 12787 ;; *************** function _IOPinsConfig *****************
 12788 ;; Defined at:
 12789 ;;		line 113 in file "main.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;		None
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;		None
 12794 ;; Return value:  Size  Location     Type
 12795 ;;		None               void
 12796 ;; Registers used:
 12797 ;;		wreg, status,2, status,0
 12798 ;; Tracked objects:
 12799 ;;		On entry : 200/100
 12800 ;;		On exit  : 300/100
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12803 ;;      Params:         0       0       0       0       0
 12804 ;;      Locals:         0       0       0       0       0
 12805 ;;      Temps:          0       0       0       0       0
 12806 ;;      Totals:         0       0       0       0       0
 12807 ;;Total ram usage:        0 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    1
 12810 ;; This function calls:
 12811 ;;		Nothing
 12812 ;; This function is called by:
 12813 ;;		_main
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           
 12818                           ;psect for function _IOPinsConfig
 12819  081A                     _IOPinsConfig:	
 12820                           
 12821                           ;main.c: 114: TRISA |= 0b00011110;
 12822                           
 12823                           ;incstack = 0
 12824                           ; Regs used in _IOPinsConfig: [wreg+status,2+status,0]
 12825  081A  301E               	movlw	30
 12826  081B  1683               	bsf	3,5	;RP0=1, select bank1
 12827  081C  0485               	iorwf	5,f	;volatile
 12828                           
 12829                           ;main.c: 115: TRISA &= 0b11011111;
 12830  081D  1285               	bcf	5,5	;volatile
 12831                           
 12832                           ;main.c: 116: ANSEL &= 0b00000001;
 12833  081E  3001               	movlw	1
 12834  081F  1703               	bsf	3,6	;RP1=1, select bank3
 12835  0820  0588               	andwf	8,f	;volatile
 12836                           
 12837                           ;main.c: 117: TRISC &= 0b10000000;
 12838  0821  3080               	movlw	128
 12839  0822  1303               	bcf	3,6	;RP1=0, select bank1
 12840  0823  0587               	andwf	7,f	;volatile
 12841                           
 12842                           ;main.c: 118: TRISC |= 0b10000000;
 12843  0824  1787               	bsf	7,7	;volatile
 12844  0825  0008               	return
 12845  0826                     __end_of_IOPinsConfig:	
 12846                           
 12847                           	psect	text72
 12848  0832                     __ptext72:	
 12849 ;; *************** function _isr *****************
 12850 ;; Defined at:
 12851 ;;		line 70 in file "main.c"
 12852 ;; Parameters:    Size  Location     Type
 12853 ;;		None
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;		None
 12856 ;; Return value:  Size  Location     Type
 12857 ;;		None               void
 12858 ;; Registers used:
 12859 ;;		wreg, status,2, status,0
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 300/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12865 ;;      Params:         0       0       0       0       0
 12866 ;;      Locals:         0       0       0       0       0
 12867 ;;      Temps:          2       0       0       0       0
 12868 ;;      Totals:         2       0       0       0       0
 12869 ;;Total ram usage:        2 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; This function calls:
 12872 ;;		Nothing
 12873 ;; This function is called by:
 12874 ;;		Interrupt level 1
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           
 12879                           ;psect for function _isr
 12880  0832                     _isr:	
 12881                           
 12882                           ;main.c: 71: if(INTCONbits.T0IF)
 12883  0832  1D0B               	btfss	11,2	;volatile
 12884  0833  2839               	goto	i1l332
 12885                           
 12886                           ;main.c: 72: {
 12887                           ;main.c: 73: INTCONbits.T0IF = 0;
 12888  0834  110B               	bcf	11,2	;volatile
 12889                           
 12890                           ;main.c: 74: TMR0 = 0;
 12891  0835  1283               	bcf	3,5	;RP0=0, select bank0
 12892  0836  1303               	bcf	3,6	;RP1=0, select bank0
 12893  0837  0181               	clrf	1	;volatile
 12894  0838  2858               	goto	i1l333
 12895  0839                     i1l332:	
 12896                           
 12897                           ;main.c: 76: }
 12898                           ;main.c: 79: PIR1bits.TMR1IF = 0;
 12899  0839  1283               	bcf	3,5	;RP0=0, select bank0
 12900  083A  1303               	bcf	3,6	;RP1=0, select bank0
 12901  083B  100C               	bcf	12,0	;volatile
 12902                           
 12903                           ;main.c: 92: if(tmr_count == 500)
 12904  083C  30F4               	movlw	244
 12905  083D  1683               	bsf	3,5	;RP0=1, select bank1
 12906  083E  0629               	xorwf	_tmr_count^(0+128),w
 12907  083F  1D03               	skipz
 12908  0840  2849               	goto	i1l4762
 12909  0841  032A               	decf	(_tmr_count+1)^(0+128),w
 12910  0842  1D03               	btfss	3,2
 12911  0843  2849               	goto	i1l4762
 12912                           
 12913                           ;main.c: 93: {
 12914                           ;main.c: 94: tmr_count = 0;
 12915  0844  01A9               	clrf	_tmr_count^(0+128)
 12916  0845  01AA               	clrf	(_tmr_count+1)^(0+128)
 12917                           
 12918                           ;main.c: 95: measure = 1;
 12919  0846  01AD               	clrf	_measure^(0+128)
 12920  0847  0AAD               	incf	_measure^(0+128),f
 12921                           
 12922                           ;main.c: 96: }
 12923  0848  2850               	goto	i1l4766
 12924  0849                     i1l4762:	
 12925                           
 12926                           ;main.c: 97: else if(tmr_count == 200)
 12927  0849  30C8               	movlw	200
 12928  084A  0629               	xorwf	_tmr_count^(0+128),w
 12929  084B  042A               	iorwf	(_tmr_count+1)^(0+128),w
 12930  084C  1D03               	btfss	3,2
 12931  084D  2850               	goto	i1l4766
 12932                           
 12933                           ;main.c: 98: {
 12934                           ;main.c: 99: disp = 1;
 12935  084E  01AB               	clrf	_disp^(0+128)
 12936  084F  0AAB               	incf	_disp^(0+128),f
 12937  0850                     i1l4766:	
 12938                           
 12939                           ;main.c: 102: tmr_co2++;
 12940  0850  0AA9               	incf	_tmr_count^(0+128),f
 12941  0851  1903               	skipnz
 12942  0852  0AAA               	incf	(_tmr_count+1)^(0+128),f
 12943                           
 12944                           ;main.c: 104: TMR1H = 0xD8;
 12945  0853  30D8               	movlw	216
 12946  0854  1283               	bcf	3,5	;RP0=0, select bank0
 12947  0855  008F               	movwf	15	;volatile
 12948                           
 12949                           ;main.c: 105: TMR1L = 0xEF;
 12950  0856  30EF               	movlw	239
 12951  0857  008E               	movwf	14	;volatile
 12952  0858                     i1l333:	
 12953  0858  0871               	movf	??_isr+1,w
 12954  0859  008A               	movwf	10
 12955  085A  0E70               	swapf	??_isr^(0+-128),w
 12956  085B  0083               	movwf	3
 12957  085C  0EFE               	swapf	126,f
 12958  085D  0E7E               	swapf	126,w
 12959  085E  0009               	retfie
 12960  085F                     __end_of_isr:	
 12961  007E                     btemp	set	126	;btemp
 12962  007E                     wtemp	set	126
 12963  007E                     wtemp0	set	126
 12964  0080                     wtemp1	set	128
 12965  0082                     wtemp2	set	130
 12966  0084                     wtemp3	set	132
 12967  0086                     wtemp4	set	134
 12968  0088                     wtemp5	set	136
 12969  007F                     wtemp6	set	127
 12970  007E                     ttemp	set	126
 12971  007E                     ttemp0	set	126
 12972  0081                     ttemp1	set	129
 12973  0084                     ttemp2	set	132
 12974  0087                     ttemp3	set	135
 12975  007F                     ttemp4	set	127
 12976  007E                     ltemp	set	126
 12977  007E                     ltemp0	set	126
 12978  0082                     ltemp1	set	130
 12979  0086                     ltemp2	set	134
 12980  0080                     ltemp3	set	128
 12981                           
 12982                           	psect	intentry
 12983  0004                     __pintentry:	
 12984                           ;incstack = 0
 12985                           ; Regs used in _isr: [wreg+status,2+status,0]
 12986                           
 12987  0004                     interrupt_function:	
 12988  007E                     saved_w	set	btemp
 12989  0004  00FE               	movwf	btemp
 12990  0005  0E03               	swapf	3,w
 12991  0006  00F0               	movwf	??_isr
 12992  0007  080A               	movf	10,w
 12993  0008  00F1               	movwf	??_isr+1
 12994  0009  120A  158A  2832   	ljmp	_isr


Data Sizes:
    Strings     224
    Constant    118
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      79
    BANK1            80     25      59
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    measureSHT71@p_value	PTR unsigned char  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), getResSHT71@humi_val(BANK1[3]), 

    __fttoee@addr	PTR eeprom void  size(1) Largest target is 3
		 -> zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    __eetoft@addr	PTR eeprom void  size(1) Largest target is 3
		 -> zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> zeljena_co2(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> zeljena_co2(EEDATA[2]), 

    memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 3
		 -> zeljena_co2(EEDATA[2]), zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(BANK0[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(BANK0[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 3
		 -> zeljena_co2(EEDATA[2]), zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(BANK0[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(BANK0[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_26(CODE[6]), STR_25(CODE[6]), STR_22(CODE[6]), STR_21(CODE[6]), 
		 -> STR_20(CODE[6]), STR_17(CODE[6]), STR_11(CODE[6]), STR_5(CODE[6]), 
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> humidity(BANK1[5]), temperature(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UARTWriteString@str	PTR unsigned char  size(2) Largest target is 10
		 -> STR_29(CODE[9]), STR_28(CODE[10]), STR_27(CODE[10]), 

    getResSHT71@p_humi	PTR float  size(1) Largest target is 3
		 -> humi(BANK1[3]), 

    getResSHT71@p_temp	PTR float  size(1) Largest target is 3
		 -> temp(BANK1[3]), 

    readStatusRegSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    readStatusRegSHT71@p_value	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@inp(BANK1[1]), 

    calcSHT71@p_temperature	PTR float  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), 

    measureSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    LcdWriteString@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_24(CODE[10]), STR_23(CODE[17]), STR_19(CODE[9]), STR_18(CODE[17]), 
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[17]), STR_13(CODE[13]), 
		 -> STR_12(CODE[17]), STR_10(CODE[17]), STR_9(CODE[13]), STR_8(CODE[17]), 
		 -> STR_7(CODE[13]), STR_6(CODE[17]), humidity(BANK1[5]), STR_4(CODE[13]), 
		 -> STR_3(CODE[17]), temperature(BANK1[5]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->_UARTWriteString
    _regulacija->___eetoft
    _menu->___eetoft
    _menuHumi->___eetoft
    _menuCO2->___itoee
    ___itoee->___eetoi
    ___eetoi->_eecpymem
    ___fttoee->___eetoft
    ___eetoft->_eecpymem
    _measureTGS4161->___lwdiv
    _getResSHT71->_measureSHT71
    _readStatusRegSHT71->_readByteSHT71
    _readStatusRegSHT71->_writeByteSHT71
    _measureSHT71->_readByteSHT71
    _measureSHT71->_writeByteSHT71
    ___lwtoft->___ftpack
    _displayCO2->_LcdWriteString
    _LcdWriteInt->___eetoi
    _LcdWriteInt->___lwdiv
    _sprintf->___eetoft
    _sprintf->___lldiv
    _sprintf->___llmod
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    ___ftmul->___ftpack
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___ftadd->___eetoft
    ___ftadd->___ftpack
    ___ftge->___eetoft
    _LcdWriteString->_LcdWriteChar
    _LcdWriteChar->_LcdPort
    _LcdSetCursor->_LcdCmd
    _UARTWriteString->_UARTWrite
    _UARTInit->___lldiv
    _LcdInit->_LcdCmd
    _LcdCmd->_LcdPort

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getResSHT71
    _regulacija->___ftge
    _menu->_sprintf
    _menuHumi->_sprintf
    _menuCO2->_LcdWriteInt
    ___itoee->___eetoi
    ___fttoee->___ftadd
    _measureTGS4161->_adcRead
    _getTempDS18B20->___ftadd
    _getResSHT71->_calcSHT71
    _calcSHT71->___ftge
    _displaySoilTemp->_sprintf
    _displayCO2->_LcdWriteInt
    _LcdWriteInt->_LcdSetCursor
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf
    _sprintf->___ftge
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awdiv
    ___bmul->___lbdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    _UARTInit->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_sprintf
    _menuHumi->_sprintf
    _displaySoilTemp->_sprintf
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  353613
                                             23 BANK1      2     2      0
                       _IOPinsConfig
                         _IOPinsInit
                            _LcdInit
                           _UARTInit
                    _UARTWriteString
                            _adcInit
                    _displayAirMoist
                     _displayAirTemp
                         _displayCO2
                    _displaySoilTemp
                        _getResSHT71
                     _getTempDS18B20
                          _initSHT71
                         _initTimer0
                         _initTimer1
                            _initWDT
                     _measureTGS4161
                               _menu
                         _regulacija
                       _resetDS18B20
                        _resetValues
 ---------------------------------------------------------------------------------
 (1) _resetValues                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _regulacija                                           2     2      0   10263
                                             52 BANK0      2     2      0
                           ___eetoft
                            ___eetoi
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0  137873
                       _LcdSetCursor
                     _LcdWriteString
                           ___eetoft
                            ___ftadd
                             ___ftge
                           ___fttoee
                     _manage_buttons
                           _menuHumi
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _menuHumi                                             0     0      0   76328
                       _LcdSetCursor
                     _LcdWriteString
                           ___eetoft
                            ___ftadd
                             ___ftge
                           ___fttoee
                     _manage_buttons
                            _menuCO2
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _menuCO2                                              0     0      0   14783
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
                            ___eetoi
                            ___itoee
                     _manage_buttons
 ---------------------------------------------------------------------------------
 (4) _manage_buttons                                       3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___itoee                                              3     1      2    1382
                                              9 COMMON     1     1      0
                                              3 BANK0      2     0      2
                            ___eetoi (ARG)
                           _memcpyee
 ---------------------------------------------------------------------------------
 (2) ___eetoi                                              6     3      3    1299
                                              6 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           _eecpymem
 ---------------------------------------------------------------------------------
 (3) ___fttoee                                             4     1      3    1762
                                             46 BANK0      4     1      3
                           ___eetoft (ARG)
                            ___ftadd (ARG)
                           _memcpyee
 ---------------------------------------------------------------------------------
 (5) _memcpyee                                             4     2      2     930
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___eetoft                                             8     4      4    1629
                                              6 COMMON     4     0      4
                                              0 BANK0      4     4      0
                           _eecpymem
 ---------------------------------------------------------------------------------
 (3) _eecpymem                                             4     2      2     930
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _measureTGS4161                                      15    13      2    2908
                                              8 BANK0     15    13      2
                            ___lwdiv
                             ___wmul
                            _adcRead
 ---------------------------------------------------------------------------------
 (2) _adcRead                                             12    10      2      96
                                              2 COMMON     4     2      2
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _initWDT                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSHT71                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTempDS18B20                                      15    12      3   13410
                                             46 BANK0     15    12      3
                            ___ftadd
                            ___ftmul
                           ___lwtoft
                        _readDS18B20
                       _resetDS18B20
                       _writeDS18B20
 ---------------------------------------------------------------------------------
 (2) _writeDS18B20                                         3     3      0      90
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetDS18B20                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readDS18B20                                          3     3      0      92
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getResSHT71                                         14    13      1   22520
                                             77 BANK0      1     0      1
                                              0 BANK1     13    13      0
                       _LcdSetCursor
                     _LcdWriteString
                           ___lwtoft
                          _calcSHT71
               _connectionResetSHT71
                       _measureSHT71
                 _readStatusRegSHT71
 ---------------------------------------------------------------------------------
 (2) _readStatusRegSHT71                                   3     2      1     376
                                              6 COMMON     3     2      1
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (2) _measureSHT71                                        10     8      2     708
                                              6 COMMON     4     2      2
                                              0 BANK0      6     6      0
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (3) _writeByteSHT71                                       4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _readByteSHT71                                        4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _connectionResetSHT71                                 1     1      0      46
                                              2 COMMON     1     1      0
                     _tranStartSHT71
 ---------------------------------------------------------------------------------
 (3) _tranStartSHT71                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calcSHT71                                           31    27      4   13484
                                             52 BANK0     25    21      4
                            ___ftadd
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2294
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _displaySoilTemp                                      3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayCO2                                           2     0      2   12198
                                             11 BANK0      2     0      2
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (4) _LcdWriteInt                                          7     3      4    7131
                                              4 BANK0      7     3      4
                       _LcdSetCursor
                       _LcdWriteChar
                            ___eetoi (ARG)
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     586
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _displayAirTemp                                       3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayAirMoist                                      3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    35      5   45848
                                             52 BANK0     10     5      5
                                              0 BANK1     23    23      0
                            ___awdiv
                           ___eetoft (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               14    11      3    8576
                                             23 BANK0     11     8      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              14    10      4    6764
                                             23 BANK0     11     7      4
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     318
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     436
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5292
                                              8 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     300
                                              8 COMMON     1     0      1
                                              3 BANK0      2     2      0
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1806
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    2235
                                              0 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     622
                                              2 COMMON     8     0      8
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             13     9      4     411
                                             34 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5729
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5503
                                             34 BANK0     12     6      6
                           ___eetoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1832
                                             46 BANK0      6     0      6
                           ___eetoft (ARG)
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) _LcdWriteString                                       7     5      2    2080
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                       _LcdWriteChar
 ---------------------------------------------------------------------------------
 (5) _LcdWriteChar                                         4     4      0     260
                                              3 COMMON     4     4      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (5) _LcdSetCursor                                         5     4      1    2891
                                              6 COMMON     1     0      1
                                              0 BANK0      4     4      0
                             _LcdCmd
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTWriteString                                      7     5      2     271
                                              3 COMMON     7     5      2
                          _UARTWrite
 ---------------------------------------------------------------------------------
 (2) _UARTWrite                                            1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                            15    11      4    1146
                                              5 BANK0     11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     798
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              2     2      0     279
                                              6 COMMON     2     2      0
                             _LcdCmd
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdCmd                                               3     3      0     155
                                              3 COMMON     3     3      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdPort                                              1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOPinsInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IOPinsConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOPinsConfig
   _IOPinsInit
   _LcdInit
     _LcdCmd
       _LcdPort
     _LcdPort
   _UARTInit
     ___lldiv
   _UARTWriteString
     _UARTWrite
   _adcInit
   _displayAirMoist
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayAirTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayCO2
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteInt
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteChar
         _LcdPort
       ___eetoi (ARG)
         _eecpymem
       ___lwdiv (ARG)
       ___wmul (ARG)
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
   _displaySoilTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _getResSHT71
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___lwtoft
       ___ftpack
     _calcSHT71
       ___ftadd
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _connectionResetSHT71
       _tranStartSHT71
     _measureSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
     _readStatusRegSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
   _getTempDS18B20
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _readDS18B20
     _resetDS18B20
     _writeDS18B20
   _initSHT71
   _initTimer0
   _initTimer1
   _initWDT
   _measureTGS4161
     ___lwdiv
     ___wmul
     _adcRead
   _menu
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___eetoft
       _eecpymem
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
     ___fttoee
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       _memcpyee (ARG)
     _manage_buttons
     _menuHumi
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteString
         _LcdWriteChar
           _LcdPort
       ___eetoft
         _eecpymem
       ___ftadd
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___fttoee
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         _memcpyee (ARG)
       _manage_buttons
       _menuCO2
         _LcdSetCursor
           _LcdCmd
             _LcdPort
         _LcdWriteInt
           _LcdSetCursor
             _LcdCmd
               _LcdPort
           _LcdWriteChar
             _LcdPort
           ___eetoi (ARG)
             _eecpymem
           ___lwdiv (ARG)
           ___wmul (ARG)
         _LcdWriteString
           _LcdWriteChar
             _LcdPort
         ___eetoi
           _eecpymem
         ___itoee
           ___eetoi (ARG)
             _eecpymem
           _memcpyee (ARG)
         _manage_buttons
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___ftge (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftadd (ARG)
             ___eetoft (ARG)
               _eecpymem
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___eetoft (ARG)
               _eecpymem
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lldiv (ARG)
         ___llmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _isdigit (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _regulacija
     ___eetoft
       _eecpymem
     ___eetoi
       _eecpymem
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
   _resetDS18B20
   _resetValues

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       8       0        3.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      96       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     19      3B       7       73.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      96      12        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Mar 01 21:12:28 2017

            UARTInit@baud_rate 0025                              _t 00A4                              pc 0002  
               ___bmul@product 0023                    __CFG_CP$OFF 0000                             PL2 073F  
                           PL4 0082                             PL6 1C96                             PL8 0756  
                           l21 114C                             l16 1136                             l51 0F83  
                           l52 0F85                             l53 0F89                             l54 0F8A  
                           l55 0F8E                             l56 0F8F                             l57 0F93  
                           _RD 0C60                             _WR 0C61                   ___awdiv@sign 0025  
                           fsr 0004            ___wmul@multiplicand 0074                  ___eetoft@addr 0023  
                ___eetoft@data 0020                _UARTWriteString 085F                   ___ftadd@exp1 004D  
                 ___ftadd@exp2 004C                            PL10 087F                            PL20 0FD1  
                          PL12 0FC0                            PL30 1FCF                            PL22 0771  
                          PL14 0762                            PL40 1791                            PL32 177D  
                          PL24 0FDF                            PL16 0098                            PL50 07B8  
                          PL42 07A1                            PL34 1784                            PL26 077F  
                          PL18 1767                            PL60 17C4                            PL52 1FD6  
                          PL44 179E                            PL36 078C                            PL28 1775  
                          PL70 17DB                            PL62 0FEC                            PL54 17B5  
                          PL46 07AD                            PL38 0794                            PL80 07CB  
                          PL72 1FE4                            PL64 17CB                            PL56 1FDD  
                          PL48 17AA                            PL90 0FF9                            PL82 1FEC  
                          PL74 17E3                            PL66 17D3                            PL58 17BD  
                          PL92 07D2                            PL84 1FF3                            PL76 0FF3  
                          PL68 07C3                            PL94 07D9                            PL86 17F3  
                          PL78 17EB                            PL96 1D6A                            PL88 17F9  
                          PL98 1FFA                   ___ftadd@sign 004B                            l130 1283  
                          l202 1D3C                            l213 1D19                            l150 12DF  
                          l134 1287                            l214 1D24                            l127 1271  
                          l163 1368                            l158 1340                            l159 1342  
      __end_of_displaySoilTemp 08C4                            l373 0D97                            l550 010A  
                          l630 0F98                            l623 0E77                            l448 1E7C  
                          l377 0DC8                            l618 0E6C                            l635 0FA6  
                          l492 0878                            l397 0ABB                            l854 172D  
                          l839 1C64                            l866 1755                            l890 0638  
                          l982 1FA4                            _GIE 005F                            _RA1 0029  
                          _RB0 0030                            _RA2 002A                            _RB1 0031  
                          _RA3 002B                            _RC0 0038                            _RB2 0032  
                          _RA4 002C                            _RC1 0039                            _RB3 0033  
                          _RA5 002D                            _RB4 0034                            _RC3 003B  
                          _RB5 0035                            _RC4 003C                            _RB6 0036  
                          _RC5 003D                            _RB7 0037                   __CFG_CPD$OFF 0000  
                          _co2 00A7                            _isr 0832                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0077                   __CFG_IESO$ON 0000  
                 __CFG_FOSC$HS 0000                   ?_readDS18B20 0070                    _zeljena_co2 0006  
                 __CFG_LVP$OFF 0000                           l3120 059D                           l3200 1677  
                         l3124 05A5                           l3212 168A                           l3220 169D  
                         l3204 167E                           l3136 1719                           l5000 163B  
                         l3224 16A5                           l4200 1162                           l5010 1649  
                         l3420 0F17                           l4220 1275                           l4212 125F  
                         l5102 066A                           l5110 16BB                           l5022 1660  
                         l4214 1261                           l5040 05E6                           l3408 0F00  
                         l5200 0BBC                           l5114 16CC                           l5026 1668  
                         l5210 0BF5                           l4226 128D                           l4218 1269  
                         l5036 05DF                           l5132 16DD                           l5220 0C2D  
                         l4252 12C9                           l4164 118A                           l5070 0620  
                         l5046 05F5                           l4238 12AB                           l4254 12D1  
                         l5064 0612                           l3720 04C2                           l5144 16F2  
                         l5136 16E6                           l3392 1FCB                           l3384 1FB7  
                         l4176 111C                           l3480 0A89                           l6040 1E25  
                         l5090 064E                           l5066 0617                           l5058 0603  
                         l3722 04C7                           l3642 1C24                           l3626 1BEE  
                         l3570 073D                           l5410 00D2                           l4186 1141  
                         l4338 1D56                           l3490 0AA8                           l6042 1E36  
                         l6050 1E62                           l6034 1E0E                           l6018 1DC8  
                         l5084 0643                           l5076 062F                           l5068 061C  
                         l3660 1C7F                           l3628 1BF3                           l5324 0712  
                         l5308 06E9                           l5148 16FB                           l5164 1F9E  
                         l5420 011B                           l5412 0105                           l6044 1E43  
                         l5182 0EAE                           l5078 0634                           l3750 04FC  
                         l3742 04EE                           l5334 071E                           l5246 1F73  
                         l5238 1F23                           l5262 1501                           l3478 0A7D  
                         l6038 1E14                           l4720 0060                           l3656 1C77  
                         l5336 0728                           l5328 071A                           l5280 15CB  
                         l5272 155E                           l5512 031F                           l5504 02E1  
                         l3488 0A9C                           l6048 1E54                           l6056 1E68  
                         l4722 006E                           l4714 0041                           l3690 04AA  
                         l5354 0685                           l3754 050A                           l3738 04E6  
                         l3666 1C83                           l5178 1FB1                           l5426 012B  
                         l5418 010C                           l3826 1339                           l6066 1E89  
                         l3780 0592                           l5188 0EB0                           l3748 04F2  
                         l3668 1C8D                           l5292 06C7                           l5268 1544  
                         l5540 0383                           l5436 015D                           l6076 1E96  
                         l3686 049B                           l5366 0524                           l5374 0549  
                         l5382 069B                           l5294 06CC                           l5286 160D  
                         l5534 035E                           l5518 0327                           l5526 035B  
                         l5622 0B36                           l3768 0567                           l5384 06A6  
                         l5552 03CB                           l5536 0372                           l5480 0264  
                         l5472 0238                           l5464 01F2                           l5456 01B8  
                         l4746 0861                           l5570 043A                           l5642 0B8E  
                         l5722 0A3D                           l5730 0A5E                           l4908 0E9A  
                         l5548 039A                           l5484 0276                           l5468 0204  
                         l5572 0445                           l5396 00BE                           l3868 12FE  
                         l5636 0B78                           l5628 0B4C                           l5708 09DE  
                         l5716 09FF                           l5494 029F                           l5646 0B03  
                         l4880 173B                           l5592 00AB                           l5680 1463  
                         l5816 11ED                           l4882 1745                           l5586 047A  
                         l5578 0452                           l5498 02DF                           l5594 0487  
                         l5762 110E                           l4954 0E73                           l5738 0997  
                         l4876 1731                           l5684 147C                           l5844 1CD3  
                         l5836 1CB1                           l5932 0DF0                           l5924 0DAD  
                         l5916 0D7C                           ?_isr 0070                           l4886 1753  
                         l4878 1736                           l4888 174A                           l4984 0FA2  
                         l5944 0E33                           l5936 0E13                           l4994 1632  
                         l5980 0D35                           l5966 0CD5                           l5974 0CF6  
                         l5896 0954                           l5994 0C8D                           l5996 0D60  
                         l5988 0D56                           STR_1 1910                   __CFG_WDTE$ON 0000  
                         STR_2 1962                           STR_3 18EE                           STR_4 192B  
                         STR_5 1962                           STR_6 1888                           STR_7 191E  
                         STR_8 1899                           STR_9 1938                           _BRGH 04C2  
                         _CREN 00C4                           u4050 12FB                           u3345 0F09  
                         u4504 1122                           u6025 0532                           u4505 1120  
                         u3725 1C48                           u6205 0262                           u6125 0175  
                         u7007 1132                           u4544 115D                           u2945 1690  
                         u4545 115B                           u7017 113B                           u6235 0318  
                         u7107 1301                           u7027 1173                           u7117 0EDE  
                         u6165 020E                           u7037 117C                           u7127 0EEB  
                         u3855 04CB                           u6175 0243                           u7047 1185  
                         u7137 0F2B                           u3945 057A                           u7057 118C  
                         u6425 0B2A                           u7147 0F38                           u5395 1652  
                         u7067 1164                           u7157 0F45                           u6285 0367  
                         u7077 11E5                           u6445 0B6C                           u7167 0F74  
                         u6375 0466                           u6295 037D                           u7087 127E  
                         u7097 1345                           u4973 0031                           u5925 06F8  
                         u4983 003F                           u6735 0E2E                           u6745 0E48  
                         u6907 0A72                           u6917 0A83                           u6927 0A91  
                         u6937 0AA2                           u6947 0AB0                           u6957 0AC1  
                         u6967 1CF1                           u6887 1E70                           u6977 1D34  
                         u6897 1E84                           u6987 1D42                           u6997 10C1  
                         _TMR0 0001                           _SPEN 00C7                           _TRMT 04C1  
                         _WREN 0C62                           _TXEN 04C5                           _SYNC 04C4  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                ?_tranStartSHT71 0070  
                         _disp 00AB                           _main 1D70                   ___ftpack@arg 0072  
                         _menu 0C54                           _humi 00BC                   ___ftpack@exp 0075  
                         _temp 00BF                           btemp 007E                  __CFG_BOREN$ON 0000  
              ?_displayAirTemp 005E                           ltemp 007E                           start 000C  
                         ttemp 007E                           wtemp 007E            __end_of_LcdWriteInt 0C54  
                 _sprintf$1257 00C2                __end_of_LcdInit 0F67                __end_of_LcdPort 0F95  
            ___bmul@multiplier 0024                  __CFG_MCLRE$ON 0000               readByteSHT71@ack 0073  
                 ___ftmul@cntr 0035               ??_writeByteSHT71 0072               readByteSHT71@res 0074  
                 ___ftmul@sign 0036                   ___itoee@addr 0079                   ___itoee@data 0023  
                 ___fttol@exp1 004E            _zeljena_temperatura 0000           __end_of_LcdSetCursor 0EAE  
                 ___fttol@lval 004A                          ??_isr 0070          __size_of_writeDS18B20 0030  
                  ?_IOPinsInit 0070                          ?_main 0070                __end_of___eetoi 0E69  
                        ?_menu 0070                __end_of_adcInit 0832                __end_of_adcRead 1D6A  
              __end_of___awdiv 166D                __end_of___lbdiv 1FB3                          _EEADR 010D  
              __end_of___ftadd 067E                          STR_10 18AA                          STR_11 1962  
                        STR_20 1962                          STR_12 18FF                          STR_13 192B  
                        STR_21 1962                          STR_22 1962                          STR_14 18DD  
                        STR_15 1920                          STR_23 18BB                          STR_16 1922  
                        STR_24 1921                          _BRG16 0C3B                          STR_25 1962  
                        STR_17 1962                          STR_26 1962                          STR_18 18CC  
                        STR_19 1922                          STR_27 194F                          STR_28 1945  
              __end_of___awmod 16AA                          STR_29 1959                __end_of___lbmod 1FCF  
                        _CARRY 0018                __end_of___ftneg 05BC                          _ANSEL 0188  
              __end_of___lldiv 059B                __end_of___ftmul 1717                ___awdiv@divisor 0020  
              __end_of___llmod 0552                __end_of___ftsub 0699                __end_of___fttol 0513  
              __end_of___itoee 0BA0                __end_of___lwdiv 0F1C                          i1l332 0839  
                        i1l333 0858                ___awdiv@counter 0024                          _TMR1H 000F  
                        _TMR1L 000E                          _SPBRG 0099                          _TRISA 0085  
                        _TRISB 0086                          _TRISC 0087                          _TXREG 0019  
                 ___lltoft@exp 0024               __end_of_UARTInit 0082             __size_of_UARTWrite 0008  
              __end_of_menuCO2 0B99                __end_of_initWDT 10AB                __end_of_dpowers 1888  
                        _scale 148E                __end_of_isdigit 073F                  ___ftpack@sign 0076  
             ?_displayAirMoist 005E                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __end_of_sprintf 048C                ___lbdiv@divisor 0077  
         __end_of_LcdWriteChar 0EF2                ___lbdiv@counter 0021               LcdSetCursor@temp 0023  
                 _writeDS18B20 1117                __initialization 000F                  ?_measureSHT71 0076  
      __end_of_UARTWriteString 0877                writeDS18B20@Cmd 0073                   __end_of_main 1E9D  
                 __end_of_menu 0D66               _zeljena_vlaznost 0003         __size_of_readByteSHT71 0030  
               _manage_buttons 0A6B                  ___fttoee@addr 0051                  ___fttoee@data 004E  
                       ??_main 00D9                  ___fttol@sign1 0049                   adcRead@tempH 0024  
                       ??_menu 007A                   adcRead@tempL 0022               ?_displaySoilTemp 005E  
         __size_of__tdiv_to_l_ 0078           __size_of_getResSHT71 009D           measureSHT71@loop_cnt 0021  
                       _ADCON0 001F                         _ADCON1 009F               __end_of___eetoft 0E5B  
             ___llmod@dividend 0076                         ?_scale 0037                         _ADRESH 001E  
                       _ADRESL 009E                         _EEDATA 010C                         _EECON1 018C  
                       _EECON2 018D               ___awdiv@dividend 0022               __end_of___ftpack 1767  
                       _ANSELH 0189               __end_of___fttoee 0ECD               __end_of___lltoft 06B9  
             getResSHT71@error 00C7                    _LcdWriteInt 0BA0                         i1l4762 0849  
                       i1l4766 0850                         _INTCON 000B               __end_of___lwtoft 1257  
                    ??_LcdInit 0076                         _SPBRGH 009A                      ??_LcdPort 0072  
                 ?_resetValues 0070            __size_of_IOPinsInit 0007                         _LcdCmd 0F67  
               __CFG_PWRTE$OFF 0000               __end_of_eecpymem 0E85                 ??_measureSHT71 0078  
             __end_of__powers_ 1860                         ___bmul 1717                         ___ftge 048C  
                 readDS18B20@i 0074              __end_of_UARTWrite 087F                         ___wmul 059B  
                    ??___eetoi 0079                      ??_adcInit 0072                      ??_adcRead 0074  
                    ??___awdiv 0078                      ??___lbdiv 0078                      ??___ftadd 0048  
                    ??___awmod 0076                      ??___lbmod 0073                      ??___ftneg 0075  
                    ??___lldiv 007A                      ??___ftmul 002E                      ??___llmod 007A  
                    ??___ftsub 007A                      ??___fttol 0046                      ??___itoee 0079  
       __end_of_manage_buttons 0AC7                      ??___lwdiv 0076                    memcpyee@ptr 0074  
      __size_of_measureTGS4161 0086               __end_of_memcpyee 0FC0               __end_of_menuHumi 0A6B  
                       _fround 1E9D               ___awdiv@quotient 0026                ___awmod@divisor 0072  
              ___awmod@counter 0076          ___ftmul@f3_as_product 0032                      ??_menuCO2 007A  
                    ??_initWDT 0072                      ??_isdigit 0072               UARTWriteString@i 0078  
                       saved_w 007E                      ??_sprintf 0059               ___lbdiv@dividend 0020  
         __size_of_readDS18B20 0027                  _readByteSHT71 12D9                ___lbmod@divisor 0072  
      __end_of__initialization 0019        __size_of_LcdWriteString 0018                ___lbmod@counter 0075  
                   ___ftadd@f1 0042                     ___ftadd@f2 0045                     ___ftge@ff1 004E  
                   ___ftge@ff2 0051             __size_of_calcSHT71 0114                     ___ftneg@f1 0072  
        __size_of_LcdSetCursor 0029            ___bmul@multiplicand 0078                     ___ftmul@f1 0028  
                   ___ftmul@f2 002B                     ___ftsub@f1 0051                     ___ftsub@f2 004E  
                   ___fttol@f1 0042                 __pcstackCOMMON 0070               ?_UARTWriteString 0073  
                    ?_UARTInit 0025                     ___lltoft@c 0020                ?_manage_buttons 0070  
                __end_of_scale 1628                     __end_ofPL2 0756                     __end_ofPL4 0098  
                   __end_ofPL6 1CA3                     __end_ofPL8 0762               ___lbdiv@quotient 0022  
                   ___lwtoft@c 0020                     __div_to_l_ 1BD8                 _OPTION_REGbits 0081  
             ??_tranStartSHT71 0072                __div_to_l_@exp1 002D                __div_to_l_@cntr 002C  
                      ??_scale 003A                 ?_readByteSHT71 0070                __div_to_l_@quot 0028  
             ??_displayAirTemp 007A          __size_of_LcdWriteChar 0025                   calcSHT71@t_C 005E  
  __size_of_readStatusRegSHT71 0019                   _LcdSetCursor 0E85                     __pbssBANK0 006E  
                   __pbssBANK1 00A0             __size_of_initSHT71 0004                  ?_resetDS18B20 0070  
                      ?_LcdCmd 0070                  __div_to_l_@f1 0072                  __div_to_l_@f2 0075  
                   calcSHT71@t 005B                 _calcSHT71$1251 0061                 _calcSHT71$1252 0064  
__size_of_connectionResetSHT71 0017                     __pmaintext 1D70                 displayCO2@co22 002B  
                      ?___bmul 0078                        ?___ftge 004E                        ?___wmul 0072  
                   ??_UARTInit 007A          connectionResetSHT71@i 0072                  ?_IOPinsConfig 0070  
                   __pintentry 0004                      ?___eetoft 0076                        ?_fround 0037  
            LcdWriteInt@column 0027                      ?___ftpack 0072                      ?___fttoee 004E  
                 ??_IOPinsInit 0072                      UARTInit@x 002E                      ?___lltoft 0020  
                    ?___lwtoft 0020              writeByteSHT71@cmd 0073              __end_of_calcSHT71 148E  
            getResSHT71@p_humi 006D                   _LcdWriteChar 0ECD              getResSHT71@p_temp 00C6  
          getTempDS18B20@tempH 0059            getTempDS18B20@tempL 0057                        LcdCmd@a 0075  
      __size_of_getTempDS18B20 006C                     _disp_count 00AC           __end_of_measureSHT71 12D9  
    readStatusRegSHT71@p_value 0077                      ?_eecpymem 0072                     _displayCO2 092C  
                   __stringtab 1800                        _LcdInit 0F1C                        _LcdPort 0F7D  
                    ?_memcpyee 0072                      ?_menuHumi 0070                 ??_resetDS18B20 0072  
              __size_of_LcdCmd 0016             __end_of_IOPinsInit 0808              __end_of__npowers_ 1839  
                   _scale$1256 003E           __size_of_resetValues 0012                 ??_IOPinsConfig 0072  
              __size_of___bmul 000E                __size_of___ftge 002C                        ___eetoi 0E5B  
                      _adcInit 0826                     _initTimer0 0810                        _adcRead 1D29  
                   _initTimer1 07F1                        ___awdiv 1628                        ___lbdiv 1F98  
                      ___ftadd 05BC                        ___awmod 166D                        ___lbmod 1FB3  
                      ___ftneg 05B4                        ___lldiv 0552                __size_of___wmul 0019  
                      ___ftmul 16AA                        ___llmod 0513                        ___ftsub 067E  
                      ___fttol 04B8                        ___itoee 0B99            getResSHT71@checksum 00CB  
               _measureTGS4161 1CA3                        ___lwdiv 0EF2                     ??___eetoft 007A  
            __end_of_initSHT71 10A5                     ??___ftpack 0077                __size_of_fround 00FB  
                   ??___fttoee 007A                   memcpyee@from 0072                     ??___lltoft 007A  
                      __ptext1 07DF                        __ptext2 0D66                        __ptext3 0C54  
                      __ptext4 095F                        __ptext5 0AC7                        __ptext6 0A6B  
                      __ptext7 0B99                        __ptext8 0E5B                        __ptext9 0EC6  
               LcdWriteInt@row 0026                   memcpyee@size 0073                     ??___lwtoft 007A  
                    _T1CONbits 0010                        _menuCO2 0AC7                    ?__div_to_l_ 0072  
                      _initWDT 10A5                        _dpowers 1860                        _measure 00AD  
                      _isdigit 0731                   __size_of_isr 002D                        _ok_flag 006E  
          writeByteSHT71@error 0074               ___awmod@dividend 0074                ??_readByteSHT71 0072  
                   ??_eecpymem 0074            getResSHT71@humi_val 00C8                        _sprintf 00A7  
                      clrloop0 0809           end_of_initialization 0019                     _minus_flag 007A  
                 ?_LcdWriteInt 0024               measureSHT71@mode 0077            getResSHT71@temp_val 00CC  
             measureSHT71@temp 0024                 _LcdWriteString 0EAE                     _regulacija 0D66  
                   ??_memcpyee 0074                     ??_menuHumi 007A                     eecpymem@cp 0074  
                   eecpymem@to 0075                ___lldiv@divisor 0072                ___lldiv@counter 0024  
          measureTGS4161@krez1 002C            measureTGS4161@krez2 002E       __size_of_displayAirMoist 0034  
       __end_of_measureTGS4161 1D29                   __pstringtext 1800                 __tdiv_to_l_@f1 0072  
               __tdiv_to_l_@f2 0075                  ??__tdiv_to_l_ 0020                      _UARTWrite 0877  
              calcSHT71@rh_lin 0058                  ??_getResSHT71 00C2        __size_of_writeByteSHT71 0030  
             ___lbmod@dividend 0074                      _TRISBbits 0086                      _TRISCbits 0087  
                  ?_displayCO2 002B         __end_of_LcdWriteString 0EC6       __size_of_displaySoilTemp 0034  
                LcdSetCursor@a 0020                  LcdSetCursor@b 0076                  LcdSetCursor@y 0022  
                LcdSetCursor@z 0021                    ___lbmod@rem 0076                 readByteSHT71@i 0075  
          __size_of__div_to_l_ 00BE               ??_manage_buttons 0072                 __end_of_LcdCmd 0F7D  
                  ___ftmul@exp 0031                ?_measureTGS4161 0028                    ?_initTimer0 0070  
                  ?_initTimer1 0070                 __end_of___bmul 1725                 __end_of___ftge 04B8  
               getResSHT71@inp 00C5                 __end_of___wmul 05B4              readDS18B20@result 0073  
            __size_of_UARTInit 0065                     ?_UARTWrite 0070          __size_of_measureSHT71 0082  
               __end_of_fround 1F98           __end_of_resetDS18B20 1191              displaySoilTemp@t2 005E  
                  __end_ofPL10 0890                    __end_ofPL20 0FDF                    __end_ofPL12 0FD1  
                  __end_ofPL30 1FD6                    __end_ofPL22 077F                    __end_ofPL14 0771  
                  __end_ofPL40 179E                    __end_ofPL32 1784                    __end_ofPL24 0FEC  
                  __end_ofPL16 00A7                    __end_ofPL50 07C3                    __end_ofPL42 07AD  
                  __end_ofPL34 1791                    __end_ofPL26 078C                    __end_ofPL18 1775  
                  __end_ofPL60 17CB                    __end_ofPL52 1FDD                    __end_ofPL44 17AA  
                  __end_ofPL36 0794                    __end_ofPL28 177D                    __end_ofPL70 17E3  
                  __end_ofPL62 0FF3                    __end_ofPL54 17BD                    __end_ofPL46 07B8  
                  __end_ofPL38 07A1                    __end_ofPL80 07D2                    __end_ofPL72 1FEC  
                  __end_ofPL64 17D3                    __end_ofPL56 1FE4                    __end_ofPL48 17B5  
                  __end_ofPL90 1000                    __end_ofPL82 1FF3                    __end_ofPL74 17EB  
                  __end_ofPL66 17DB                    __end_ofPL58 17C4                    __end_ofPL92 07D9  
                  __end_ofPL84 1FFA                    __end_ofPL76 0FF9                    __end_ofPL68 07CB  
                  __end_ofPL94 07DF                    __end_ofPL86 17F9                    __end_ofPL78 17F3  
                  __end_ofPL96 1D70                    __end_ofPL88 1800                    __end_ofPL98 2000  
          start_initialization 000F                 _getTempDS18B20 10AB                  ??_readDS18B20 0072  
          __end_of__tdiv_to_l_ 0731                    __end_of_isr 085F            __end_of_getResSHT71 1247  
              ?_LcdWriteString 0077           __end_of_IOPinsConfig 0826                    adcRead@temp 0026  
          measureSHT71@p_value 0020                    ?_regulacija 0070                ___llmod@divisor 0072  
       measureSHT71@p_checksum 0076                ___llmod@counter 0020                       ??_LcdCmd 0073  
                 _measureSHT71 1257                       ??___bmul 0079                       ??___ftge 007A  
                   memcpyee@to 0075                       ??___wmul 0076            __size_of_displayCO2 0033  
                     ??_fround 007A              ??_displayAirMoist 007A                  sprintf@tmpval 00CC  
       __end_of_getTempDS18B20 1117              __size_of___eetoft 0010       __size_of_UARTWriteString 0018  
                   fround@prec 0041              __size_of___ftpack 0042                    __pbssEEDATA 0000  
            __size_of___fttoee 0007              __size_of___lltoft 0020   __end_of_connectionResetSHT71 137A  
                  __pbssCOMMON 007A                      ___latbits 0002              __size_of___lwtoft 0010  
                __pcstackBANK0 0020                  __pcstackBANK1 00C2               LcdWriteChar@temp 0074  
   __end_of_readStatusRegSHT71 11AA                      _calcSHT71 137A      getTempDS18B20@temperatura 0054  
            __size_of_eecpymem 001C            __size_of_initTimer0 000A            __size_of_initTimer1 000F  
          __end_of_readDS18B20 116E                       ?_LcdInit 0070                    sprintf@flag 00C6  
                     ?_LcdPort 0070                    sprintf@fval 00D5                    sprintf@prec 00D2  
                  calcSHT71@rh 006A           __size_of_LcdWriteInt 00B4                  _UARTInit$1253 0029  
                ?_writeDS18B20 0070              ??_displaySoilTemp 007A              __size_of_memcpyee 002B  
            __size_of_menuHumi 010C               ___lwdiv@dividend 0074           displayAirMoist@humi2 005E  
                     ?___eetoi 0076                       ?_adcInit 0070                       ?_adcRead 0072  
                     ?___awdiv 0020                       ?___lbdiv 0077                       ?___ftadd 0042  
                     ?___awmod 0072                       ?___lbmod 0072                       ?___ftneg 0072  
                     ?___lldiv 0072                       ?___ftmul 0028                       ?___llmod 0072  
                     ?___ftsub 004E                      __npowers_ 1812                       ?___fttol 0042  
                     ?___itoee 0023                       ?___lwdiv 0072                   _ok_flag_humi 00B1  
           getTempDS18B20@temp 005B                    ??_UARTWrite 0072                    __tdiv_to_l_ 06B9  
                  _getResSHT71 11AA            __size_of_regulacija 00E5                   ??__div_to_l_ 0020  
              ?_getTempDS18B20 004E                 _writeByteSHT71 1333                       ?_menuCO2 0070  
                     ?_initWDT 0070                       ?_isdigit 0070                      _initSHT71 10A1  
                   ?_calcSHT71 0054                  LcdWriteChar@a 0076                  LcdWriteChar@y 0075  
             ___lwdiv@quotient 0076                       ?_sprintf 0054                 __size_of_scale 019A  
                LcdWriteInt@ch 002A                      _menu_flag 00AF                measureTGS4161@i 0032  
            interrupt_function 0004                 ___wmul@product 0076                  ??_resetValues 0072  
               ??_writeDS18B20 0072                      clear_ram0 0808                       _PIE1bits 008C  
       measureTGS4161@ppm_temp 0030        __size_of_tranStartSHT71 002A                       _PIR1bits 000C  
           __end_of__div_to_l_ 1C96             measureTGS4161@temp 0033        __size_of_displayAirTemp 0034  
                     LcdPort@a 0072            calcSHT71@p_humidity 0054                       _UARTInit 001D  
        __size_of_resetDS18B20 0023                      _plus_flag 007B         __end_of_writeByteSHT71 1363  
                    _tmr_count 00A9                     _ADCON0bits 001F                    __stringbase 1812  
            ___wmul@multiplier 0072          __size_of_IOPinsConfig 000C                     ?_initSHT71 0070  
                  _readDS18B20 1147                   ??_displayCO2 0079                  UARTWrite@data 0072  
            ??_UARTWriteString 0075          __end_of_readByteSHT71 1309                  writeDS18B20@i 0074  
             ??_measureTGS4161 002A               __size_of_LcdInit 004B               __size_of_LcdPort 0018  
                 _resetDS18B20 116E           _connectionResetSHT71 1363                   ??_initTimer0 0072  
                 ??_initTimer1 0072                    _measure_co2 00AE            __end_of_resetValues 07F1  
                 _IOPinsConfig 081A             __end_of_displayCO2 095F               __size_of___eetoi 000E  
             __size_of_adcInit 000C               __size_of_adcRead 0041               __size_of___awdiv 0045  
             __size_of___lbdiv 001B               __size_of___ftadd 00C2               __size_of___awmod 003D  
             __size_of___lbmod 001C               __size_of___ftneg 0008               __size_of___lldiv 0049  
             __size_of___ftmul 006D                       ___eetoft 0E4B               __size_of___llmod 003F  
             __size_of___ftsub 001B               __size_of___fttol 005B               __size_of___itoee 0007  
             __size_of___lwdiv 002A                ?_writeByteSHT71 0070                       ___ftpack 1725  
                     ___fttoee 0EC6                    _fround$1254 003E                    _fround$1255 003B  
           __end_of__stringtab 1812                       ___lltoft 0699                    _isdigit$955 0072  
                     ___lwtoft 1247               ??_LcdWriteString 0020                     sprintf@exp 00D0  
                   sprintf@val 00C8               __size_of_menuCO2 00D2               __size_of_initWDT 0006  
             __size_of_isdigit 000E                ___lwdiv@divisor 0072                   eecpymem@from 0072  
                     _eecpymem 0E69                    ??_calcSHT71 007A                   eecpymem@size 0073  
              ___lwdiv@counter 0078                    _ok_flag_co2 00B0                       __ptext10 0F95  
                     __ptext11 0E4B                       __ptext20 1117                       __ptext12 0E69  
                     __ptext21 116E                       __ptext13 1CA3                       __ptext30 137A  
                     __ptext22 1147                       __ptext14 1D29                       __ptext31 1247  
                     __ptext23 11AA                       __ptext15 10A5                       __ptext40 166D  
                     __ptext32 0890                       __ptext24 1191                       __ptext16 07F1  
                     __ptext41 1628                       __ptext33 092C                       __ptext25 1257  
                     __ptext17 0810                       __ptext50 059B                       __ptext42 0731  
                     __ptext34 0BA0                       __ptext26 1333                       __ptext18 10A1  
                     __ptext51 0699                       __ptext43 1E9D                       __ptext35 0EF2  
                     __ptext27 12D9                       __ptext19 10AB                       __ptext60 0ECD  
                     __ptext52 0513                       __ptext44 1FB3                       __ptext36 08C4  
                     __ptext28 1363                       __ptext61 0E85                       __ptext53 04B8  
                     __ptext45 1F98                       __ptext37 08F8                       __ptext29 1309  
                     __ptext70 0801                       __ptext62 0826                       __ptext54 067E  
                     __ptext46 16AA                       __ptext38 00A7                       __ptext71 081A  
                     __ptext63 085F                       __ptext55 05BC                       __ptext47 1717  
                     __ptext39 148E                       __ptext72 0832                       __ptext64 0877  
                     __ptext56 1725                       __ptext48 06B9                       __ptext65 001D  
                     __ptext57 05B4                       __ptext49 1BD8                       __ptext66 0552  
                     __ptext58 048C                       __ptext67 0F1C                       __ptext59 0EAE  
                     __ptext68 0F67                       __ptext69 0F7D              __CFG_BOR4V$BOR40V 0000  
              writeByteSHT71@i 0075                       __powers_ 1839            displayAirTemp@temp2 005E  
                ?_LcdSetCursor 0076               __size_of_sprintf 03E5             __end_of_initTimer0 081A  
           __end_of_initTimer1 0800                   ??_regulacija 0054                       _memcpyee 0F95  
                     _menuHumi 095F                  __size_of_main 012D   readStatusRegSHT71@p_checksum 0076  
                __size_of_menu 0112                   LcdWriteInt@i 0024                       _humidity 00B2  
              _displayAirMoist 08F8          ?_connectionResetSHT71 0070              measureTGS4161@ppm 0035  
              LcdWriteString@a 0077                LcdWriteString@i 0023                  ?_LcdWriteChar 0070  
           __end_of_regulacija 0E4B           __end_of_writeDS18B20 1147                    ??_initSHT71 0072  
                   _INTCONbits 000B              measureSHT71@error 0022              adcRead@loop_count 0020  
                     isdigit@c 0073                _displaySoilTemp 0890                       scale@scl 0041  
               ??_LcdSetCursor 0077                       intlevel1 0000                      sprintf@ap 00C5  
             __tdiv_to_l_@exp1 0028               __tdiv_to_l_@cntr 0027                      sprintf@sp 00D4  
             __tdiv_to_l_@quot 0023               ___lldiv@dividend 0076             UARTWriteString@str 0073  
                  _resetValues 07DF                 _tranStartSHT71 1309             _readStatusRegSHT71 1191  
                    stringcode 180A                 _displayAirTemp 08C4       LcdWriteInt@ch_manje_1000 0029  
             ??_getTempDS18B20 0051            ?_readStatusRegSHT71 0076        readStatusRegSHT71@error 0078  
                 ?__tdiv_to_l_ 0072                 ??_LcdWriteChar 0073                     _IOPinsInit 0801  
      __size_of_manage_buttons 005C                   ?_getResSHT71 006D                     _OPTION_REG 0081  
                  _temperature 00B7                       sprintf@c 00D8                       sprintf@f 0054  
                  _tempervalue 00A0               ___lldiv@quotient 0020                       stringtab 1800  
      LcdWriteInt@ch_manje_100 0028                     _WDTCONbits 0105               calcSHT71@rh_true 0067  
         ??_readStatusRegSHT71 0077                  ??_LcdWriteInt 0079        __end_of_displayAirMoist 092C  
       __end_of_tranStartSHT71 1333         __end_of_displayAirTemp 08F8         ??_connectionResetSHT71 0072  
       calcSHT71@p_temperature 0057                   ___eetoi@addr 0022                   ___eetoi@data 0020  
