

Microchip Technology PIC PRO Macro Assembler V1.35 build -356382666 
                                                                                               Tue Jun 20 20:57:36 2017

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text13,local,class=CODE,merge=1,delta=2
    16                           	psect	text17,local,class=CODE,merge=1,delta=2
    17                           	psect	text18,local,class=CODE,merge=1,delta=2
    18                           	psect	text19,local,class=CODE,merge=1,delta=2
    19                           	psect	text20,local,class=CODE,merge=1,delta=2
    20                           	psect	text21,local,class=CODE,merge=1,delta=2
    21                           	psect	text34,local,class=CODE,merge=1,delta=2
    22                           	psect	text45,local,class=CODE,merge=1,delta=2
    23                           	psect	text51,local,class=CODE,merge=1,delta=2
    24                           	psect	text64,local,class=CODE,merge=1,delta=2
    25                           	psect	text65,local,class=CODE,merge=1,delta=2
    26                           	psect	text70,local,class=CODE,merge=1,delta=2
    27                           	psect	text71,local,class=CODE,merge=1,delta=2
    28                           	psect	text72,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	pa_nodes,global,class=CODE,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0013                     	;# 
    52  0014                     	;# 
    53  0015                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  001D                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0087                     	;# 
    70  0089                     	;# 
    71  008C                     	;# 
    72  008D                     	;# 
    73  008E                     	;# 
    74  008F                     	;# 
    75  0090                     	;# 
    76  0091                     	;# 
    77  0092                     	;# 
    78  0093                     	;# 
    79  0093                     	;# 
    80  0093                     	;# 
    81  0094                     	;# 
    82  0095                     	;# 
    83  0096                     	;# 
    84  0097                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  0105                     	;# 
    94  0107                     	;# 
    95  0108                     	;# 
    96  0109                     	;# 
    97  010C                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  0185                     	;# 
   103  0187                     	;# 
   104  0188                     	;# 
   105  0189                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  001D                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  0087                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  008F                     	;# 
   151  0090                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0093                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0095                     	;# 
   159  0096                     	;# 
   160  0097                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009A                     	;# 
   164  009B                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  0105                     	;# 
   170  0107                     	;# 
   171  0108                     	;# 
   172  0109                     	;# 
   173  010C                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  0185                     	;# 
   179  0187                     	;# 
   180  0188                     	;# 
   181  0189                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  0000                     	;# 
   185  0001                     	;# 
   186  0002                     	;# 
   187  0003                     	;# 
   188  0004                     	;# 
   189  0005                     	;# 
   190  0006                     	;# 
   191  0007                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  000E                     	;# 
   199  000F                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0013                     	;# 
   204  0014                     	;# 
   205  0015                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  001D                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  0081                     	;# 
   219  0085                     	;# 
   220  0086                     	;# 
   221  0087                     	;# 
   222  0089                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  008F                     	;# 
   227  0090                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0093                     	;# 
   232  0093                     	;# 
   233  0094                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0098                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  0105                     	;# 
   246  0107                     	;# 
   247  0108                     	;# 
   248  0109                     	;# 
   249  010C                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  010F                     	;# 
   254  0185                     	;# 
   255  0187                     	;# 
   256  0188                     	;# 
   257  0189                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  000E                     	;# 
   274  000E                     	;# 
   275  000F                     	;# 
   276  0010                     	;# 
   277  0011                     	;# 
   278  0012                     	;# 
   279  0013                     	;# 
   280  0014                     	;# 
   281  0015                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001D                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  0081                     	;# 
   295  0085                     	;# 
   296  0086                     	;# 
   297  0087                     	;# 
   298  0089                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  008F                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0093                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0094                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0098                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  0105                     	;# 
   322  0107                     	;# 
   323  0108                     	;# 
   324  0109                     	;# 
   325  010C                     	;# 
   326  010C                     	;# 
   327  010D                     	;# 
   328  010E                     	;# 
   329  010F                     	;# 
   330  0185                     	;# 
   331  0187                     	;# 
   332  0188                     	;# 
   333  0189                     	;# 
   334  018C                     	;# 
   335  018D                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0009                     	;# 
   345  000A                     	;# 
   346  000B                     	;# 
   347  000C                     	;# 
   348  000D                     	;# 
   349  000E                     	;# 
   350  000E                     	;# 
   351  000F                     	;# 
   352  0010                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0014                     	;# 
   357  0015                     	;# 
   358  0015                     	;# 
   359  0016                     	;# 
   360  0017                     	;# 
   361  0018                     	;# 
   362  0019                     	;# 
   363  001A                     	;# 
   364  001B                     	;# 
   365  001B                     	;# 
   366  001C                     	;# 
   367  001D                     	;# 
   368  001E                     	;# 
   369  001F                     	;# 
   370  0081                     	;# 
   371  0085                     	;# 
   372  0086                     	;# 
   373  0087                     	;# 
   374  0089                     	;# 
   375  008C                     	;# 
   376  008D                     	;# 
   377  008E                     	;# 
   378  008F                     	;# 
   379  0090                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0093                     	;# 
   383  0093                     	;# 
   384  0093                     	;# 
   385  0094                     	;# 
   386  0095                     	;# 
   387  0096                     	;# 
   388  0097                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009A                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  0105                     	;# 
   398  0107                     	;# 
   399  0108                     	;# 
   400  0109                     	;# 
   401  010C                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  010F                     	;# 
   406  0185                     	;# 
   407  0187                     	;# 
   408  0188                     	;# 
   409  0189                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000D                     	;# 
   425  000E                     	;# 
   426  000E                     	;# 
   427  000F                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0013                     	;# 
   432  0014                     	;# 
   433  0015                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0017                     	;# 
   437  0018                     	;# 
   438  0019                     	;# 
   439  001A                     	;# 
   440  001B                     	;# 
   441  001B                     	;# 
   442  001C                     	;# 
   443  001D                     	;# 
   444  001E                     	;# 
   445  001F                     	;# 
   446  0081                     	;# 
   447  0085                     	;# 
   448  0086                     	;# 
   449  0087                     	;# 
   450  0089                     	;# 
   451  008C                     	;# 
   452  008D                     	;# 
   453  008E                     	;# 
   454  008F                     	;# 
   455  0090                     	;# 
   456  0091                     	;# 
   457  0092                     	;# 
   458  0093                     	;# 
   459  0093                     	;# 
   460  0093                     	;# 
   461  0094                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009C                     	;# 
   470  009D                     	;# 
   471  009E                     	;# 
   472  009F                     	;# 
   473  0105                     	;# 
   474  0107                     	;# 
   475  0108                     	;# 
   476  0109                     	;# 
   477  010C                     	;# 
   478  010C                     	;# 
   479  010D                     	;# 
   480  010E                     	;# 
   481  010F                     	;# 
   482  0185                     	;# 
   483  0187                     	;# 
   484  0188                     	;# 
   485  0189                     	;# 
   486  018C                     	;# 
   487  018D                     	;# 
   488                           
   489                           	psect	stringtext
   490  1800                     __pstringtext:	
   491  1800                     stringtab:	
   492  1800                     __stringtab:	
   493                           
   494                           ;	String table - string pointers are 2 bytes each
   495  1800  1BFF               	btfsc	btemp+1,7
   496  1801  280A               	ljmp	stringcode
   497  1802  1383               	bcf	3,7
   498  1803  187F               	btfsc	btemp+1,0
   499  1804  1783               	bsf	3,7
   500  1805  0800               	movf	0,w
   501  1806  0A84               	incf	4,f
   502  1807  1903               	skipnz
   503  1808  0AFF               	incf	btemp+1,f
   504  1809  0008               	return
   505  180A                     stringcode:	
   506  180A  087F               	movf	btemp+1,w
   507  180B  397F               	andlw	127
   508  180C  008A               	movwf	10
   509  180D  0804               	movf	4,w
   510  180E  0A84               	incf	4,f
   511  180F  1903               	skipnz
   512  1810  0AFF               	incf	btemp+1,f
   513  1811  0082               	movwf	2
   514  1812                     __stringbase:	
   515  1812                     __end_of__stringtab:	
   516  1812                     __npowers_:	
   517  1812  3400               	retlw	0
   518  1813  3480               	retlw	128
   519  1814  343F               	retlw	63
   520  1815  34CD               	retlw	205
   521  1816  34CC               	retlw	204
   522  1817  343D               	retlw	61
   523  1818  34D7               	retlw	215
   524  1819  3423               	retlw	35
   525  181A  343C               	retlw	60
   526  181B  3412               	retlw	18
   527  181C  3483               	retlw	131
   528  181D  343A               	retlw	58
   529  181E  34B7               	retlw	183
   530  181F  34D1               	retlw	209
   531  1820  3438               	retlw	56
   532  1821  34C6               	retlw	198
   533  1822  3427               	retlw	39
   534  1823  3437               	retlw	55
   535  1824  3438               	retlw	56
   536  1825  3486               	retlw	134
   537  1826  3435               	retlw	53
   538  1827  34C0               	retlw	192
   539  1828  34D6               	retlw	214
   540  1829  3433               	retlw	51
   541  182A  34CC               	retlw	204
   542  182B  342B               	retlw	43
   543  182C  3432               	retlw	50
   544  182D  3470               	retlw	112
   545  182E  3489               	retlw	137
   546  182F  3430               	retlw	48
   547  1830  34E7               	retlw	231
   548  1831  34DB               	retlw	219
   549  1832  342E               	retlw	46
   550  1833  34E5               	retlw	229
   551  1834  343C               	retlw	60
   552  1835  341E               	retlw	30
   553  1836  3442               	retlw	66
   554  1837  34A2               	retlw	162
   555  1838  340D               	retlw	13
   556  1839                     __end_of__npowers_:	
   557  1839                     __powers_:	
   558  1839  3400               	retlw	0
   559  183A  3480               	retlw	128
   560  183B  343F               	retlw	63
   561  183C  3400               	retlw	0
   562  183D  3420               	retlw	32
   563  183E  3441               	retlw	65
   564  183F  3400               	retlw	0
   565  1840  34C8               	retlw	200
   566  1841  3442               	retlw	66
   567  1842  3400               	retlw	0
   568  1843  347A               	retlw	122
   569  1844  3444               	retlw	68
   570  1845  3440               	retlw	64
   571  1846  341C               	retlw	28
   572  1847  3446               	retlw	70
   573  1848  3450               	retlw	80
   574  1849  34C3               	retlw	195
   575  184A  3447               	retlw	71
   576  184B  3424               	retlw	36
   577  184C  3474               	retlw	116
   578  184D  3449               	retlw	73
   579  184E  3497               	retlw	151
   580  184F  3418               	retlw	24
   581  1850  344B               	retlw	75
   582  1851  34BC               	retlw	188
   583  1852  34BE               	retlw	190
   584  1853  344C               	retlw	76
   585  1854  346B               	retlw	107
   586  1855  346E               	retlw	110
   587  1856  344E               	retlw	78
   588  1857  3403               	retlw	3
   589  1858  3415               	retlw	21
   590  1859  3450               	retlw	80
   591  185A  3479               	retlw	121
   592  185B  34AD               	retlw	173
   593  185C  3460               	retlw	96
   594  185D  34F3               	retlw	243
   595  185E  3449               	retlw	73
   596  185F  3471               	retlw	113
   597  1860                     __end_of__powers_:	
   598  1860                     _dpowers:	
   599  1860  3401               	retlw	1
   600  1861  3400               	retlw	0
   601  1862  3400               	retlw	0
   602  1863  3400               	retlw	0
   603  1864  340A               	retlw	10
   604  1865  3400               	retlw	0
   605  1866  3400               	retlw	0
   606  1867  3400               	retlw	0
   607  1868  3464               	retlw	100
   608  1869  3400               	retlw	0
   609  186A  3400               	retlw	0
   610  186B  3400               	retlw	0
   611  186C  34E8               	retlw	232
   612  186D  3403               	retlw	3
   613  186E  3400               	retlw	0
   614  186F  3400               	retlw	0
   615  1870  3410               	retlw	16
   616  1871  3427               	retlw	39
   617  1872  3400               	retlw	0
   618  1873  3400               	retlw	0
   619  1874  34A0               	retlw	160
   620  1875  3486               	retlw	134
   621  1876  3401               	retlw	1
   622  1877  3400               	retlw	0
   623  1878  3440               	retlw	64
   624  1879  3442               	retlw	66
   625  187A  340F               	retlw	15
   626  187B  3400               	retlw	0
   627  187C  3480               	retlw	128
   628  187D  3496               	retlw	150
   629  187E  3498               	retlw	152
   630  187F  3400               	retlw	0
   631  1880  3400               	retlw	0
   632  1881  34E1               	retlw	225
   633  1882  34F5               	retlw	245
   634  1883  3405               	retlw	5
   635  1884  3400               	retlw	0
   636  1885  34CA               	retlw	202
   637  1886  349A               	retlw	154
   638  1887  343B               	retlw	59
   639  1888                     __end_of_dpowers:	
   640  001F                     _ADCON0	set	31
   641  001F                     _ADCON0bits	set	31
   642  001E                     _ADRESH	set	30
   643  000B                     _INTCON	set	11
   644  000B                     _INTCONbits	set	11
   645  000C                     _PIR1bits	set	12
   646  0010                     _T1CONbits	set	16
   647  0001                     _TMR0	set	1
   648  000F                     _TMR1H	set	15
   649  000E                     _TMR1L	set	14
   650  0019                     _TXREG	set	25
   651  0018                     _CARRY	set	24
   652  00C4                     _CREN	set	196
   653  005F                     _GIE	set	95
   654  0029                     _RA1	set	41
   655  002A                     _RA2	set	42
   656  002B                     _RA3	set	43
   657  002C                     _RA4	set	44
   658  002D                     _RA5	set	45
   659  0030                     _RB0	set	48
   660  0031                     _RB1	set	49
   661  0032                     _RB2	set	50
   662  0033                     _RB3	set	51
   663  0034                     _RB4	set	52
   664  0035                     _RB5	set	53
   665  0036                     _RB6	set	54
   666  0037                     _RB7	set	55
   667  0038                     _RC0	set	56
   668  0039                     _RC1	set	57
   669  003B                     _RC3	set	59
   670  003C                     _RC4	set	60
   671  003D                     _RC5	set	61
   672  00C7                     _SPEN	set	199
   673  009F                     _ADCON1	set	159
   674  009E                     _ADRESL	set	158
   675  0081                     _OPTION_REG	set	129
   676  0081                     _OPTION_REGbits	set	129
   677  008C                     _PIE1bits	set	140
   678  0099                     _SPBRG	set	153
   679  009A                     _SPBRGH	set	154
   680  0085                     _TRISA	set	133
   681  0086                     _TRISB	set	134
   682  0086                     _TRISBbits	set	134
   683  0087                     _TRISC	set	135
   684  0087                     _TRISCbits	set	135
   685  04C2                     _BRGH	set	1218
   686  04C4                     _SYNC	set	1220
   687  04C1                     _TRMT	set	1217
   688  04C5                     _TXEN	set	1221
   689  010D                     _EEADR	set	269
   690  010C                     _EEDATA	set	268
   691  0105                     _WDTCONbits	set	261
   692  0188                     _ANSEL	set	392
   693  0189                     _ANSELH	set	393
   694  018C                     _EECON1	set	396
   695  018D                     _EECON2	set	397
   696  0C3B                     _BRG16	set	3131
   697  0C60                     _RD	set	3168
   698  0C61                     _WR	set	3169
   699  0C62                     _WREN	set	3170
   700  1888                     STR_7:	
   701  1888  3441               	retlw	65	;'A'
   702  1889  3469               	retlw	105	;'i'
   703  188A  3472               	retlw	114	;'r'
   704  188B  3420               	retlw	32	;' '
   705  188C  346D               	retlw	109	;'m'
   706  188D  346F               	retlw	111	;'o'
   707  188E  3469               	retlw	105	;'i'
   708  188F  3473               	retlw	115	;'s'
   709  1890  3474               	retlw	116	;'t'
   710  1891  3420               	retlw	32	;' '
   711  1892  3420               	retlw	32	;' '
   712  1893  3420               	retlw	32	;' '
   713  1894  3420               	retlw	32	;' '
   714  1895  3420               	retlw	32	;' '
   715  1896  3420               	retlw	32	;' '
   716  1897  3420               	retlw	32	;' '
   717  1898  3400               	retlw	0
   718  1899                     STR_9:	
   719  1899  3443               	retlw	67	;'C'
   720  189A  344F               	retlw	79	;'O'
   721  189B  3432               	retlw	50	;'2'
   722  189C  3420               	retlw	32	;' '
   723  189D  3469               	retlw	105	;'i'
   724  189E  346E               	retlw	110	;'n'
   725  189F  3420               	retlw	32	;' '
   726  18A0  3461               	retlw	97	;'a'
   727  18A1  3469               	retlw	105	;'i'
   728  18A2  3472               	retlw	114	;'r'
   729  18A3  3420               	retlw	32	;' '
   730  18A4  3420               	retlw	32	;' '
   731  18A5  3420               	retlw	32	;' '
   732  18A6  3420               	retlw	32	;' '
   733  18A7  3420               	retlw	32	;' '
   734  18A8  3420               	retlw	32	;' '
   735  18A9  3400               	retlw	0
   736  18AA                     STR_11:	
   737  18AA  344D               	retlw	77	;'M'
   738  18AB  3465               	retlw	101	;'e'
   739  18AC  3461               	retlw	97	;'a'
   740  18AD  3473               	retlw	115	;'s'
   741  18AE  3475               	retlw	117	;'u'
   742  18AF  3472               	retlw	114	;'r'
   743  18B0  3469               	retlw	105	;'i'
   744  18B1  346E               	retlw	110	;'n'
   745  18B2  3467               	retlw	103	;'g'
   746  18B3  342E               	retlw	46	;'.'
   747  18B4  342E               	retlw	46	;'.'
   748  18B5  342E               	retlw	46	;'.'
   749  18B6  3420               	retlw	32	;' '
   750  18B7  3420               	retlw	32	;' '
   751  18B8  3420               	retlw	32	;' '
   752  18B9  3420               	retlw	32	;' '
   753  18BA  3400               	retlw	0
   754  18BB                     STR_24:	
   755  18BB  3453               	retlw	83	;'S'
   756  18BC  3465               	retlw	101	;'e'
   757  18BD  3474               	retlw	116	;'t'
   758  18BE  3420               	retlw	32	;' '
   759  18BF  3461               	retlw	97	;'a'
   760  18C0  3469               	retlw	105	;'i'
   761  18C1  3472               	retlw	114	;'r'
   762  18C2  3420               	retlw	32	;' '
   763  18C3  3474               	retlw	116	;'t'
   764  18C4  3465               	retlw	101	;'e'
   765  18C5  346D               	retlw	109	;'m'
   766  18C6  3470               	retlw	112	;'p'
   767  18C7  342E               	retlw	46	;'.'
   768  18C8  3420               	retlw	32	;' '
   769  18C9  3420               	retlw	32	;' '
   770  18CA  3420               	retlw	32	;' '
   771  18CB  3400               	retlw	0
   772  18CC                     STR_19:	
   773  18CC  3453               	retlw	83	;'S'
   774  18CD  3465               	retlw	101	;'e'
   775  18CE  3474               	retlw	116	;'t'
   776  18CF  3420               	retlw	32	;' '
   777  18D0  3461               	retlw	97	;'a'
   778  18D1  3469               	retlw	105	;'i'
   779  18D2  3472               	retlw	114	;'r'
   780  18D3  3420               	retlw	32	;' '
   781  18D4  346D               	retlw	109	;'m'
   782  18D5  346F               	retlw	111	;'o'
   783  18D6  3469               	retlw	105	;'i'
   784  18D7  3473               	retlw	115	;'s'
   785  18D8  3474               	retlw	116	;'t'
   786  18D9  3420               	retlw	32	;' '
   787  18DA  3420               	retlw	32	;' '
   788  18DB  3420               	retlw	32	;' '
   789  18DC  3400               	retlw	0
   790  18DD                     STR_15:	
   791  18DD  3453               	retlw	83	;'S'
   792  18DE  3465               	retlw	101	;'e'
   793  18DF  3474               	retlw	116	;'t'
   794  18E0  3420               	retlw	32	;' '
   795  18E1  3443               	retlw	67	;'C'
   796  18E2  344F               	retlw	79	;'O'
   797  18E3  3432               	retlw	50	;'2'
   798  18E4  3420               	retlw	32	;' '
   799  18E5  3469               	retlw	105	;'i'
   800  18E6  346E               	retlw	110	;'n'
   801  18E7  3420               	retlw	32	;' '
   802  18E8  3461               	retlw	97	;'a'
   803  18E9  3469               	retlw	105	;'i'
   804  18EA  3472               	retlw	114	;'r'
   805  18EB  3420               	retlw	32	;' '
   806  18EC  3420               	retlw	32	;' '
   807  18ED  3400               	retlw	0
   808  18EE                     STR_4:	
   809  18EE  3441               	retlw	65	;'A'
   810  18EF  3469               	retlw	105	;'i'
   811  18F0  3472               	retlw	114	;'r'
   812  18F1  3420               	retlw	32	;' '
   813  18F2  3474               	retlw	116	;'t'
   814  18F3  3465               	retlw	101	;'e'
   815  18F4  346D               	retlw	109	;'m'
   816  18F5  3470               	retlw	112	;'p'
   817  18F6  3465               	retlw	101	;'e'
   818  18F7  3472               	retlw	114	;'r'
   819  18F8  3461               	retlw	97	;'a'
   820  18F9  3474               	retlw	116	;'t'
   821  18FA  3475               	retlw	117	;'u'
   822  18FB  3472               	retlw	114	;'r'
   823  18FC  3465               	retlw	101	;'e'
   824  18FD  3420               	retlw	32	;' '
   825  18FE  3400               	retlw	0
   826  18FF                     STR_13:	
   827  18FF  3453               	retlw	83	;'S'
   828  1900  346F               	retlw	111	;'o'
   829  1901  3469               	retlw	105	;'i'
   830  1902  346C               	retlw	108	;'l'
   831  1903  3420               	retlw	32	;' '
   832  1904  3474               	retlw	116	;'t'
   833  1905  3465               	retlw	101	;'e'
   834  1906  346D               	retlw	109	;'m'
   835  1907  3470               	retlw	112	;'p'
   836  1908  3465               	retlw	101	;'e'
   837  1909  3472               	retlw	114	;'r'
   838  190A  3461               	retlw	97	;'a'
   839  190B  3474               	retlw	116	;'t'
   840  190C  3475               	retlw	117	;'u'
   841  190D  3472               	retlw	114	;'r'
   842  190E  3465               	retlw	101	;'e'
   843  190F  3400               	retlw	0
   844  1910                     STR_1:	
   845  1910  3447               	retlw	71	;'G'
   846  1911  3472               	retlw	114	;'r'
   847  1912  3465               	retlw	101	;'e'
   848  1913  3473               	retlw	115	;'s'
   849  1914  346B               	retlw	107	;'k'
   850  1915  3461               	retlw	97	;'a'
   851  1916  3420               	retlw	32	;' '
   852  1917  3453               	retlw	83	;'S'
   853  1918  3448               	retlw	72	;'H'
   854  1919  3454               	retlw	84	;'T'
   855  191A  3437               	retlw	55	;'7'
   856  191B  3431               	retlw	49	;'1'
   857  191C  3421               	retlw	33	;'!'
   858  191D  3400               	retlw	0
   859  191E                     STR_8:	
   860  191E  3420               	retlw	32	;' '
   861  191F  3425               	retlw	37	;'%'
   862  1920  3420               	retlw	32	;' '
   863  1921  3420               	retlw	32	;' '
   864  1922  3420               	retlw	32	;' '
   865  1923  3420               	retlw	32	;' '
   866  1924  3420               	retlw	32	;' '
   867  1925  3420               	retlw	32	;' '
   868  1926  3420               	retlw	32	;' '
   869  1927  3420               	retlw	32	;' '
   870  1928  3420               	retlw	32	;' '
   871  1929  3420               	retlw	32	;' '
   872  192A  3400               	retlw	0
   873  192B                     STR_5:	
   874  192B  3420               	retlw	32	;' '
   875  192C  3464               	retlw	100	;'d'
   876  192D  3465               	retlw	101	;'e'
   877  192E  3467               	retlw	103	;'g'
   878  192F  3420               	retlw	32	;' '
   879  1930  3420               	retlw	32	;' '
   880  1931  3420               	retlw	32	;' '
   881  1932  3420               	retlw	32	;' '
   882  1933  3420               	retlw	32	;' '
   883  1934  3420               	retlw	32	;' '
   884  1935  3420               	retlw	32	;' '
   885  1936  3420               	retlw	32	;' '
   886  1937  3400               	retlw	0
   887  1938                     STR_10:	
   888  1938  3420               	retlw	32	;' '
   889  1939  3470               	retlw	112	;'p'
   890  193A  3470               	retlw	112	;'p'
   891  193B  346D               	retlw	109	;'m'
   892  193C  3420               	retlw	32	;' '
   893  193D  3420               	retlw	32	;' '
   894  193E  3420               	retlw	32	;' '
   895  193F  3420               	retlw	32	;' '
   896  1940  3420               	retlw	32	;' '
   897  1941  3420               	retlw	32	;' '
   898  1942  3420               	retlw	32	;' '
   899  1943  3420               	retlw	32	;' '
   900  1944  3400               	retlw	0
   901  1945                     STR_2:	
   902  1945  340A               	retlw	10
   903  1946  3441               	retlw	65	;'A'
   904  1947  3444               	retlw	68	;'D'
   905  1948  3443               	retlw	67	;'C'
   906  1949  3420               	retlw	32	;' '
   907  194A  3445               	retlw	69	;'E'
   908  194B  3452               	retlw	82	;'R'
   909  194C  3452               	retlw	82	;'R'
   910  194D  344F               	retlw	79	;'O'
   911  194E  3452               	retlw	82	;'R'
   912  194F  342E               	retlw	46	;'.'
   913  1950  340A               	retlw	10
   914  1951  3400               	retlw	0
   915  1952                     STR_29:	
   916  1952  340A               	retlw	10
   917  1953  3454               	retlw	84	;'T'
   918  1954  3447               	retlw	71	;'G'
   919  1955  3453               	retlw	83	;'S'
   920  1956  3420               	retlw	32	;' '
   921  1957  344F               	retlw	79	;'O'
   922  1958  344B               	retlw	75	;'K'
   923  1959  342E               	retlw	46	;'.'
   924  195A  340A               	retlw	10
   925  195B  3400               	retlw	0
   926  195C                     STR_28:	
   927  195C  340A               	retlw	10
   928  195D  3453               	retlw	83	;'S'
   929  195E  3448               	retlw	72	;'H'
   930  195F  3454               	retlw	84	;'T'
   931  1960  3420               	retlw	32	;' '
   932  1961  344F               	retlw	79	;'O'
   933  1962  344B               	retlw	75	;'K'
   934  1963  342E               	retlw	46	;'.'
   935  1964  340A               	retlw	10
   936  1965  3400               	retlw	0
   937  1966                     STR_30:	
   938  1966  340A               	retlw	10
   939  1967  3444               	retlw	68	;'D'
   940  1968  3453               	retlw	83	;'S'
   941  1969  3420               	retlw	32	;' '
   942  196A  344F               	retlw	79	;'O'
   943  196B  344B               	retlw	75	;'K'
   944  196C  342E               	retlw	46	;'.'
   945  196D  340A               	retlw	10
   946  196E  3400               	retlw	0
   947  196F                     STR_3:	
   948  196F  3420               	retlw	32	;' '
   949  1970  3425               	retlw	37	;'%'
   950  1971  342E               	retlw	46	;'.'
   951  1972  3431               	retlw	49	;'1'
   952  1973  3466               	retlw	102	;'f'
   953  1974  3400               	retlw	0
   954  1922                     
   955                           ; #config settings
   956  0000                     
   957                           	psect	cinit
   958  000F                     start_initialization:	
   959  000F                     __initialization:	
   960  000F  30A0               	movlw	low __pbssBANK1
   961                           
   962                           ; Clear objects allocated to COMMON
   963  0010  01FA               	clrf	__pbssCOMMON& (0+127)
   964  0011  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   965                           
   966                           ; Clear objects allocated to BANK1
   967  0012  1383               	bcf	3,7	;select IRP bank0
   968  0013  0084               	movwf	4
   969  0014  30C4               	movlw	low (__pbssBANK1+36)
   970  0015  120A  158A  2034   	fcall	clear_ram0
   971  0018                     end_of_initialization:	
   972                           ;End of C runtime variable initialization code
   973                           
   974  0018                     __end_of__initialization:	
   975  0018  0183               	clrf	3
   976  0019  160A  158A  2D49   	ljmp	_main	;jump to C main() function
   977                           
   978                           	psect	bssEEDATA
   979  0000                     __pbssEEDATA:	
   980  0000                     _zeljena_temperatura:	
   981  0000  0000               	db	0
   982  0001  0000               	db	0
   983  0002  0000               	db	0
   984  0003                     _zeljena_vlaznost:	
   985  0003  0000               	db	0
   986  0004  0000               	db	0
   987  0005  0000               	db	0
   988  0006                     _zeljena_co2:	
   989  0006  0000               	db	0
   990  0007  0000               	db	0
   991                           
   992                           	psect	bssCOMMON
   993  007A                     __pbssCOMMON:	
   994  007A                     _ok_flag:	
   995  007A                     	ds	1
   996  007B                     _plus_flag:	
   997  007B                     	ds	1
   998                           
   999                           	psect	bssBANK1
  1000  00A0                     __pbssBANK1:	
  1001  00A0                     _tempervalue:	
  1002  00A0                     	ds	4
  1003  00A4                     _t:	
  1004  00A4                     	ds	3
  1005  00A7                     _co2:	
  1006  00A7                     	ds	2
  1007  00A9                     _tmr_count:	
  1008  00A9                     	ds	2
  1009  00AB                     _disp:	
  1010  00AB                     	ds	1
  1011  00AC                     _disp_count:	
  1012  00AC                     	ds	1
  1013  00AD                     _measure:	
  1014  00AD                     	ds	1
  1015  00AE                     _measure_co2:	
  1016  00AE                     	ds	1
  1017  00AF                     _measure_count:	
  1018  00AF                     	ds	1
  1019  00B0                     _menu_flag:	
  1020  00B0                     	ds	1
  1021  00B1                     _minus_flag:	
  1022  00B1                     	ds	1
  1023  00B2                     _ok_flag_co2:	
  1024  00B2                     	ds	1
  1025  00B3                     _ok_flag_humi:	
  1026  00B3                     	ds	1
  1027  00B4                     _humidity:	
  1028  00B4                     	ds	5
  1029  00B9                     _temperature:	
  1030  00B9                     	ds	5
  1031  00BE                     _humi:	
  1032  00BE                     	ds	3
  1033  00C1                     _temp:	
  1034  00C1                     	ds	3
  1035                           
  1036                           	psect	clrtext
  1037  0834                     clear_ram0:	
  1038                           ;	Called with FSR containing the base address, and
  1039                           ;	W with the last address+1
  1040                           
  1041  0834  0064               	clrwdt	;clear the watchdog before getting into this loop
  1042  0835                     clrloop0:	
  1043  0835  0180               	clrf	0	;clear RAM location pointed to by FSR
  1044  0836  0A84               	incf	4,f	;increment pointer
  1045  0837  0604               	xorwf	4,w	;XOR with final address
  1046  0838  1903               	btfsc	3,2	;have we reached the end yet?
  1047  0839  3400               	retlw	0	;all done for this memory range, return
  1048  083A  0604               	xorwf	4,w	;XOR again to restore value
  1049  083B  2835               	goto	clrloop0	;do the next byte
  1050                           
  1051                           	psect	cstackBANK1
  1052  00C4                     __pcstackBANK1:	
  1053  00C4                     ??_getResSHT71:	
  1054  00C4                     _sprintf$1263:	
  1055                           ; 0 bytes @ 0x0
  1056                           
  1057                           
  1058                           ; 3 bytes @ 0x0
  1059  00C4                     	ds	3
  1060  00C7                     getResSHT71@inp:	
  1061  00C7                     sprintf@ap:	
  1062                           ; 1 bytes @ 0x3
  1063                           
  1064                           
  1065                           ; 1 bytes @ 0x3
  1066  00C7                     	ds	1
  1067  00C8                     getResSHT71@p_temp:	
  1068  00C8                     sprintf@flag:	
  1069                           ; 1 bytes @ 0x4
  1070                           
  1071                           
  1072                           ; 2 bytes @ 0x4
  1073  00C8                     	ds	1
  1074  00C9                     getResSHT71@error:	
  1075                           
  1076                           ; 1 bytes @ 0x5
  1077  00C9                     	ds	1
  1078  00CA                     getResSHT71@humi_val:	
  1079  00CA                     sprintf@val:	
  1080                           ; 3 bytes @ 0x6
  1081                           
  1082                           
  1083                           ; 4 bytes @ 0x6
  1084  00CA                     	ds	3
  1085  00CD                     getResSHT71@checksum:	
  1086                           
  1087                           ; 1 bytes @ 0x9
  1088  00CD                     	ds	1
  1089  00CE                     getResSHT71@temp_val:	
  1090  00CE                     sprintf@tmpval:	
  1091                           ; 3 bytes @ 0xA
  1092                           
  1093                           
  1094                           ; 4 bytes @ 0xA
  1095  00CE                     	ds	4
  1096  00D2                     sprintf@exp:	
  1097                           
  1098                           ; 2 bytes @ 0xE
  1099  00D2                     	ds	2
  1100  00D4                     sprintf@prec:	
  1101                           
  1102                           ; 2 bytes @ 0x10
  1103  00D4                     	ds	2
  1104  00D6                     sprintf@sp:	
  1105                           
  1106                           ; 1 bytes @ 0x12
  1107  00D6                     	ds	1
  1108  00D7                     sprintf@fval:	
  1109                           
  1110                           ; 3 bytes @ 0x13
  1111  00D7                     	ds	3
  1112  00DA                     sprintf@c:	
  1113                           
  1114                           ; 1 bytes @ 0x16
  1115  00DA                     	ds	1
  1116  00DB                     ??_main:	
  1117                           
  1118                           ; 0 bytes @ 0x17
  1119  00DB                     	ds	3
  1120                           
  1121                           	psect	cstackCOMMON
  1122  0070                     __pcstackCOMMON:	
  1123  0070                     ?_isdigit:	
  1124  0070                     ?_writeDS18B20:	
  1125                           ; 1 bit 
  1126                           
  1127  0070                     ?_LcdPort:	
  1128                           ; 0 bytes @ 0x0
  1129                           
  1130  0070                     ?_LcdCmd:	
  1131                           ; 0 bytes @ 0x0
  1132                           
  1133  0070                     ?_LcdInit:	
  1134                           ; 0 bytes @ 0x0
  1135                           
  1136  0070                     ?_LcdWriteChar:	
  1137                           ; 0 bytes @ 0x0
  1138                           
  1139  0070                     ?_initSHT71:	
  1140                           ; 0 bytes @ 0x0
  1141                           
  1142  0070                     ?_tranStartSHT71:	
  1143                           ; 0 bytes @ 0x0
  1144                           
  1145  0070                     ?_connectionResetSHT71:	
  1146                           ; 0 bytes @ 0x0
  1147                           
  1148  0070                     ?_adcInit:	
  1149                           ; 0 bytes @ 0x0
  1150                           
  1151  0070                     ?_isr:	
  1152                           ; 0 bytes @ 0x0
  1153                           
  1154  0070                     ??_isr:	
  1155                           ; 0 bytes @ 0x0
  1156                           
  1157  0070                     ?_initWDT:	
  1158                           ; 0 bytes @ 0x0
  1159                           
  1160  0070                     ?_IOPinsConfig:	
  1161                           ; 0 bytes @ 0x0
  1162                           
  1163  0070                     ?_IOPinsInit:	
  1164                           ; 0 bytes @ 0x0
  1165                           
  1166  0070                     ?_resetValues:	
  1167                           ; 0 bytes @ 0x0
  1168                           
  1169  0070                     ?_initTimer0:	
  1170                           ; 0 bytes @ 0x0
  1171                           
  1172  0070                     ?_initTimer1:	
  1173                           ; 0 bytes @ 0x0
  1174                           
  1175  0070                     ?_regulacija:	
  1176                           ; 0 bytes @ 0x0
  1177                           
  1178  0070                     ?_manage_buttons:	
  1179                           ; 0 bytes @ 0x0
  1180                           
  1181  0070                     ?_menuCO2:	
  1182                           ; 0 bytes @ 0x0
  1183                           
  1184  0070                     ?_menuHumi:	
  1185                           ; 0 bytes @ 0x0
  1186                           
  1187  0070                     ?_menu:	
  1188                           ; 0 bytes @ 0x0
  1189                           
  1190  0070                     ?_main:	
  1191                           ; 0 bytes @ 0x0
  1192                           
  1193  0070                     ?_UARTWrite:	
  1194                           ; 0 bytes @ 0x0
  1195                           
  1196  0070                     ?_writeByteSHT71:	
  1197                           ; 0 bytes @ 0x0
  1198                           
  1199  0070                     ?_readByteSHT71:	
  1200                           ; 1 bytes @ 0x0
  1201                           
  1202  0070                     ?_resetDS18B20:	
  1203                           ; 1 bytes @ 0x0
  1204                           
  1205  0070                     ?_readDS18B20:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0x0
  1210  0070                     	ds	2
  1211  0072                     ??_writeByteSHT71:	
  1212  0072                     ??_readByteSHT71:	
  1213                           ; 0 bytes @ 0x2
  1214                           
  1215  0072                     ??_isdigit:	
  1216                           ; 0 bytes @ 0x2
  1217                           
  1218  0072                     ??_resetDS18B20:	
  1219                           ; 0 bytes @ 0x2
  1220                           
  1221  0072                     ??_writeDS18B20:	
  1222                           ; 0 bytes @ 0x2
  1223                           
  1224  0072                     ??_readDS18B20:	
  1225                           ; 0 bytes @ 0x2
  1226                           
  1227  0072                     ??_LcdPort:	
  1228                           ; 0 bytes @ 0x2
  1229                           
  1230  0072                     ??_initSHT71:	
  1231                           ; 0 bytes @ 0x2
  1232                           
  1233  0072                     ??_tranStartSHT71:	
  1234                           ; 0 bytes @ 0x2
  1235                           
  1236  0072                     ??_connectionResetSHT71:	
  1237                           ; 0 bytes @ 0x2
  1238                           
  1239  0072                     ??_adcInit:	
  1240                           ; 0 bytes @ 0x2
  1241                           
  1242  0072                     ??_initWDT:	
  1243                           ; 0 bytes @ 0x2
  1244                           
  1245  0072                     ??_IOPinsConfig:	
  1246                           ; 0 bytes @ 0x2
  1247                           
  1248  0072                     ??_IOPinsInit:	
  1249                           ; 0 bytes @ 0x2
  1250                           
  1251  0072                     ??_resetValues:	
  1252                           ; 0 bytes @ 0x2
  1253                           
  1254  0072                     ??_initTimer0:	
  1255                           ; 0 bytes @ 0x2
  1256                           
  1257  0072                     ??_initTimer1:	
  1258                           ; 0 bytes @ 0x2
  1259                           
  1260  0072                     ??_manage_buttons:	
  1261                           ; 0 bytes @ 0x2
  1262                           
  1263  0072                     ??_UARTWrite:	
  1264                           ; 0 bytes @ 0x2
  1265                           
  1266  0072                     ?_eecpymem:	
  1267                           ; 0 bytes @ 0x2
  1268                           
  1269  0072                     ?_memcpyee:	
  1270                           ; 0 bytes @ 0x2
  1271                           
  1272  0072                     ?___lbmod:	
  1273                           ; 0 bytes @ 0x2
  1274                           
  1275  0072                     ?___wmul:	
  1276                           ; 1 bytes @ 0x2
  1277                           
  1278  0072                     ?___awmod:	
  1279                           ; 2 bytes @ 0x2
  1280                           
  1281  0072                     ?___lwdiv:	
  1282                           ; 2 bytes @ 0x2
  1283                           
  1284  0072                     ?___ftpack:	
  1285                           ; 2 bytes @ 0x2
  1286                           
  1287  0072                     ?___ftneg:	
  1288                           ; 3 bytes @ 0x2
  1289                           
  1290  0072                     ?__tdiv_to_l_:	
  1291                           ; 3 bytes @ 0x2
  1292                           
  1293  0072                     ?__div_to_l_:	
  1294                           ; 4 bytes @ 0x2
  1295                           
  1296  0072                     ?___lldiv:	
  1297                           ; 4 bytes @ 0x2
  1298                           
  1299  0072                     ?___llmod:	
  1300                           ; 4 bytes @ 0x2
  1301                           
  1302  0072                     LcdPort@a:	
  1303                           ; 4 bytes @ 0x2
  1304                           
  1305  0072                     connectionResetSHT71@i:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308  0072                     UARTWrite@data:	
  1309                           ; 1 bytes @ 0x2
  1310                           
  1311  0072                     eecpymem@from:	
  1312                           ; 1 bytes @ 0x2
  1313                           
  1314  0072                     memcpyee@from:	
  1315                           ; 1 bytes @ 0x2
  1316                           
  1317  0072                     _isdigit$961:	
  1318                           ; 1 bytes @ 0x2
  1319                           
  1320  0072                     ___lbmod@divisor:	
  1321                           ; 1 bytes @ 0x2
  1322                           
  1323  0072                     ___wmul@multiplier:	
  1324                           ; 1 bytes @ 0x2
  1325                           
  1326  0072                     ___awmod@divisor:	
  1327                           ; 2 bytes @ 0x2
  1328                           
  1329  0072                     ___lwdiv@divisor:	
  1330                           ; 2 bytes @ 0x2
  1331                           
  1332  0072                     __div_to_l_@f1:	
  1333                           ; 2 bytes @ 0x2
  1334                           
  1335  0072                     ___ftpack@arg:	
  1336                           ; 3 bytes @ 0x2
  1337                           
  1338  0072                     __tdiv_to_l_@f1:	
  1339                           ; 3 bytes @ 0x2
  1340                           
  1341  0072                     ___ftneg@f1:	
  1342                           ; 3 bytes @ 0x2
  1343                           
  1344  0072                     ___lldiv@divisor:	
  1345                           ; 3 bytes @ 0x2
  1346                           
  1347  0072                     ___llmod@divisor:	
  1348                           ; 4 bytes @ 0x2
  1349                           
  1350                           
  1351                           ; 4 bytes @ 0x2
  1352  0072                     	ds	1
  1353  0073                     ?_UARTWriteString:	
  1354  0073                     ??_LcdCmd:	
  1355                           ; 0 bytes @ 0x3
  1356                           
  1357  0073                     ??_LcdWriteChar:	
  1358                           ; 0 bytes @ 0x3
  1359                           
  1360  0073                     ??___lbmod:	
  1361                           ; 0 bytes @ 0x3
  1362                           
  1363  0073                     writeDS18B20@Cmd:	
  1364                           ; 0 bytes @ 0x3
  1365                           
  1366  0073                     readDS18B20@result:	
  1367                           ; 1 bytes @ 0x3
  1368                           
  1369  0073                     readByteSHT71@ack:	
  1370                           ; 1 bytes @ 0x3
  1371                           
  1372  0073                     writeByteSHT71@cmd:	
  1373                           ; 1 bytes @ 0x3
  1374                           
  1375  0073                     eecpymem@size:	
  1376                           ; 1 bytes @ 0x3
  1377                           
  1378  0073                     memcpyee@size:	
  1379                           ; 1 bytes @ 0x3
  1380                           
  1381  0073                     isdigit@c:	
  1382                           ; 1 bytes @ 0x3
  1383                           
  1384  0073                     UARTWriteString@str:	
  1385                           ; 1 bytes @ 0x3
  1386                           
  1387                           
  1388                           ; 2 bytes @ 0x3
  1389  0073                     	ds	1
  1390  0074                     ??_eecpymem:	
  1391  0074                     ??_memcpyee:	
  1392                           ; 0 bytes @ 0x4
  1393                           
  1394  0074                     writeDS18B20@i:	
  1395                           ; 0 bytes @ 0x4
  1396                           
  1397  0074                     readDS18B20@i:	
  1398                           ; 1 bytes @ 0x4
  1399                           
  1400  0074                     LcdWriteChar@temp:	
  1401                           ; 1 bytes @ 0x4
  1402                           
  1403  0074                     readByteSHT71@res:	
  1404                           ; 1 bytes @ 0x4
  1405                           
  1406  0074                     writeByteSHT71@error:	
  1407                           ; 1 bytes @ 0x4
  1408                           
  1409  0074                     eecpymem@cp:	
  1410                           ; 1 bytes @ 0x4
  1411                           
  1412  0074                     memcpyee@ptr:	
  1413                           ; 1 bytes @ 0x4
  1414                           
  1415  0074                     ___lbmod@dividend:	
  1416                           ; 1 bytes @ 0x4
  1417                           
  1418  0074                     ___wmul@multiplicand:	
  1419                           ; 1 bytes @ 0x4
  1420                           
  1421  0074                     ___awmod@dividend:	
  1422                           ; 2 bytes @ 0x4
  1423                           
  1424  0074                     ___lwdiv@dividend:	
  1425                           ; 2 bytes @ 0x4
  1426                           
  1427                           
  1428                           ; 2 bytes @ 0x4
  1429  0074                     	ds	1
  1430  0075                     ??_UARTWriteString:	
  1431  0075                     ??___ftneg:	
  1432                           ; 0 bytes @ 0x5
  1433                           
  1434  0075                     LcdCmd@a:	
  1435                           ; 0 bytes @ 0x5
  1436                           
  1437  0075                     LcdWriteChar@y:	
  1438                           ; 1 bytes @ 0x5
  1439                           
  1440  0075                     readByteSHT71@i:	
  1441                           ; 1 bytes @ 0x5
  1442                           
  1443  0075                     writeByteSHT71@i:	
  1444                           ; 1 bytes @ 0x5
  1445                           
  1446  0075                     eecpymem@to:	
  1447                           ; 1 bytes @ 0x5
  1448                           
  1449  0075                     memcpyee@to:	
  1450                           ; 1 bytes @ 0x5
  1451                           
  1452  0075                     ___ftpack@exp:	
  1453                           ; 1 bytes @ 0x5
  1454                           
  1455  0075                     ___lbmod@counter:	
  1456                           ; 1 bytes @ 0x5
  1457                           
  1458  0075                     __div_to_l_@f2:	
  1459                           ; 1 bytes @ 0x5
  1460                           
  1461  0075                     __tdiv_to_l_@f2:	
  1462                           ; 3 bytes @ 0x5
  1463                           
  1464                           
  1465                           ; 3 bytes @ 0x5
  1466  0075                     	ds	1
  1467  0076                     ?_LcdSetCursor:	
  1468  0076                     ??_LcdInit:	
  1469                           ; 0 bytes @ 0x6
  1470                           
  1471  0076                     ??___wmul:	
  1472                           ; 0 bytes @ 0x6
  1473                           
  1474  0076                     ??___awmod:	
  1475                           ; 0 bytes @ 0x6
  1476                           
  1477  0076                     ??___lwdiv:	
  1478                           ; 0 bytes @ 0x6
  1479                           
  1480  0076                     ?_measureSHT71:	
  1481                           ; 0 bytes @ 0x6
  1482                           
  1483  0076                     ?_readStatusRegSHT71:	
  1484                           ; 1 bytes @ 0x6
  1485                           
  1486  0076                     ?___eetoi:	
  1487                           ; 1 bytes @ 0x6
  1488                           
  1489  0076                     ?___eetoft:	
  1490                           ; 2 bytes @ 0x6
  1491                           
  1492  0076                     LcdSetCursor@b:	
  1493                           ; 3 bytes @ 0x6
  1494                           
  1495  0076                     LcdWriteChar@a:	
  1496                           ; 1 bytes @ 0x6
  1497                           
  1498  0076                     measureSHT71@p_checksum:	
  1499                           ; 1 bytes @ 0x6
  1500                           
  1501  0076                     readStatusRegSHT71@p_checksum:	
  1502                           ; 1 bytes @ 0x6
  1503                           
  1504  0076                     ___awmod@counter:	
  1505                           ; 1 bytes @ 0x6
  1506                           
  1507  0076                     ___ftpack@sign:	
  1508                           ; 1 bytes @ 0x6
  1509                           
  1510  0076                     ___lbmod@rem:	
  1511                           ; 1 bytes @ 0x6
  1512                           
  1513  0076                     ___wmul@product:	
  1514                           ; 1 bytes @ 0x6
  1515                           
  1516  0076                     ___lwdiv@quotient:	
  1517                           ; 2 bytes @ 0x6
  1518                           
  1519  0076                     ___lldiv@dividend:	
  1520                           ; 2 bytes @ 0x6
  1521                           
  1522  0076                     ___llmod@dividend:	
  1523                           ; 4 bytes @ 0x6
  1524                           
  1525                           
  1526                           ; 4 bytes @ 0x6
  1527  0076                     	ds	1
  1528  0077                     ??___ftpack:	
  1529  0077                     ??_LcdSetCursor:	
  1530                           ; 0 bytes @ 0x7
  1531                           
  1532  0077                     ?_LcdWriteString:	
  1533                           ; 0 bytes @ 0x7
  1534                           
  1535  0077                     ??_readStatusRegSHT71:	
  1536                           ; 0 bytes @ 0x7
  1537                           
  1538  0077                     ?___lbdiv:	
  1539                           ; 0 bytes @ 0x7
  1540                           
  1541  0077                     measureSHT71@mode:	
  1542                           ; 1 bytes @ 0x7
  1543                           
  1544  0077                     readStatusRegSHT71@p_value:	
  1545                           ; 1 bytes @ 0x7
  1546                           
  1547  0077                     ___awmod@sign:	
  1548                           ; 1 bytes @ 0x7
  1549                           
  1550  0077                     ___lbdiv@divisor:	
  1551                           ; 1 bytes @ 0x7
  1552                           
  1553  0077                     LcdWriteString@a:	
  1554                           ; 1 bytes @ 0x7
  1555                           
  1556                           
  1557                           ; 2 bytes @ 0x7
  1558  0077                     	ds	1
  1559  0078                     ??_measureSHT71:	
  1560  0078                     ??___awdiv:	
  1561                           ; 0 bytes @ 0x8
  1562                           
  1563  0078                     ??___lbdiv:	
  1564                           ; 0 bytes @ 0x8
  1565                           
  1566  0078                     ?___bmul:	
  1567                           ; 0 bytes @ 0x8
  1568                           
  1569  0078                     readStatusRegSHT71@error:	
  1570                           ; 1 bytes @ 0x8
  1571                           
  1572  0078                     ___bmul@multiplicand:	
  1573                           ; 1 bytes @ 0x8
  1574                           
  1575  0078                     ___lwdiv@counter:	
  1576                           ; 1 bytes @ 0x8
  1577                           
  1578  0078                     UARTWriteString@i:	
  1579                           ; 1 bytes @ 0x8
  1580                           
  1581                           
  1582                           ; 2 bytes @ 0x8
  1583  0078                     	ds	1
  1584  0079                     ??_LcdWriteInt:	
  1585  0079                     ??_displayCO2:	
  1586                           ; 0 bytes @ 0x9
  1587                           
  1588  0079                     ??___eetoi:	
  1589                           ; 0 bytes @ 0x9
  1590                           
  1591  0079                     ??___itoee:	
  1592                           ; 0 bytes @ 0x9
  1593                           
  1594  0079                     ??___bmul:	
  1595                           ; 0 bytes @ 0x9
  1596                           
  1597  0079                     ___itoee@addr:	
  1598                           ; 0 bytes @ 0x9
  1599                           
  1600                           
  1601                           ; 1 bytes @ 0x9
  1602  0079                     	ds	1
  1603  007A                     ??_UARTInit:	
  1604  007A                     ??_calcSHT71:	
  1605                           ; 0 bytes @ 0xA
  1606                           
  1607  007A                     ??_displayAirTemp:	
  1608                           ; 0 bytes @ 0xA
  1609                           
  1610  007A                     ??_displayAirMoist:	
  1611                           ; 0 bytes @ 0xA
  1612                           
  1613  007A                     ??_displaySoilTemp:	
  1614                           ; 0 bytes @ 0xA
  1615                           
  1616  007A                     ??_menuCO2:	
  1617                           ; 0 bytes @ 0xA
  1618                           
  1619  007A                     ??_menuHumi:	
  1620                           ; 0 bytes @ 0xA
  1621                           
  1622  007A                     ??_menu:	
  1623                           ; 0 bytes @ 0xA
  1624                           
  1625  007A                     ??_fround:	
  1626                           ; 0 bytes @ 0xA
  1627                           
  1628  007A                     ??___eetoft:	
  1629                           ; 0 bytes @ 0xA
  1630                           
  1631  007A                     ??___fttoee:	
  1632                           ; 0 bytes @ 0xA
  1633                           
  1634  007A                     ??___ftge:	
  1635                           ; 0 bytes @ 0xA
  1636                           
  1637  007A                     ??___ftsub:	
  1638                           ; 0 bytes @ 0xA
  1639                           
  1640  007A                     ??___lldiv:	
  1641                           ; 0 bytes @ 0xA
  1642                           
  1643  007A                     ??___llmod:	
  1644                           ; 0 bytes @ 0xA
  1645                           
  1646  007A                     ??___lltoft:	
  1647                           ; 0 bytes @ 0xA
  1648                           
  1649  007A                     ??___lwtoft:	
  1650                           ; 0 bytes @ 0xA
  1651                           
  1652                           
  1653                           	psect	cstackBANK0
  1654  0020                     __pcstackBANK0:	
  1655                           ; 0 bytes @ 0xA
  1656                           
  1657  0020                     ??__tdiv_to_l_:	
  1658  0020                     ??__div_to_l_:	
  1659                           ; 0 bytes @ 0x0
  1660                           
  1661  0020                     ??_LcdWriteString:	
  1662                           ; 0 bytes @ 0x0
  1663                           
  1664  0020                     ?_adcRead:	
  1665                           ; 0 bytes @ 0x0
  1666                           
  1667  0020                     ?___awdiv:	
  1668                           ; 2 bytes @ 0x0
  1669                           
  1670  0020                     ?___lltoft:	
  1671                           ; 2 bytes @ 0x0
  1672                           
  1673  0020                     ?___lwtoft:	
  1674                           ; 3 bytes @ 0x0
  1675                           
  1676  0020                     LcdSetCursor@a:	
  1677                           ; 3 bytes @ 0x0
  1678                           
  1679  0020                     measureSHT71@p_value:	
  1680                           ; 1 bytes @ 0x0
  1681                           
  1682  0020                     ___lbdiv@dividend:	
  1683                           ; 1 bytes @ 0x0
  1684                           
  1685  0020                     ___llmod@counter:	
  1686                           ; 1 bytes @ 0x0
  1687                           
  1688  0020                     ___eetoi@data:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0020                     ___awdiv@divisor:	
  1692                           ; 2 bytes @ 0x0
  1693                           
  1694  0020                     ___lwtoft@c:	
  1695                           ; 2 bytes @ 0x0
  1696                           
  1697  0020                     ___eetoft@data:	
  1698                           ; 2 bytes @ 0x0
  1699                           
  1700  0020                     ___lldiv@quotient:	
  1701                           ; 3 bytes @ 0x0
  1702                           
  1703  0020                     ___lltoft@c:	
  1704                           ; 4 bytes @ 0x0
  1705                           
  1706                           
  1707                           ; 4 bytes @ 0x0
  1708  0020                     	ds	1
  1709  0021                     LcdSetCursor@z:	
  1710  0021                     measureSHT71@loop_cnt:	
  1711                           ; 1 bytes @ 0x1
  1712                           
  1713  0021                     ___lbdiv@counter:	
  1714                           ; 1 bytes @ 0x1
  1715                           
  1716                           
  1717                           ; 1 bytes @ 0x1
  1718  0021                     	ds	1
  1719  0022                     ??_adcRead:	
  1720  0022                     LcdSetCursor@y:	
  1721                           ; 0 bytes @ 0x2
  1722                           
  1723  0022                     ___eetoi@addr:	
  1724                           ; 1 bytes @ 0x2
  1725                           
  1726  0022                     ___lbdiv@quotient:	
  1727                           ; 1 bytes @ 0x2
  1728                           
  1729  0022                     measureSHT71@error:	
  1730                           ; 1 bytes @ 0x2
  1731                           
  1732  0022                     ___awdiv@dividend:	
  1733                           ; 2 bytes @ 0x2
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x2
  1737  0022                     	ds	1
  1738  0023                     ?___itoee:	
  1739  0023                     LcdSetCursor@temp:	
  1740                           ; 2 bytes @ 0x3
  1741                           
  1742  0023                     ___eetoft@addr:	
  1743                           ; 1 bytes @ 0x3
  1744                           
  1745  0023                     ___bmul@product:	
  1746                           ; 1 bytes @ 0x3
  1747                           
  1748  0023                     LcdWriteString@i:	
  1749                           ; 1 bytes @ 0x3
  1750                           
  1751  0023                     ___itoee@data:	
  1752                           ; 2 bytes @ 0x3
  1753                           
  1754  0023                     __tdiv_to_l_@quot:	
  1755                           ; 2 bytes @ 0x3
  1756                           
  1757                           
  1758                           ; 4 bytes @ 0x3
  1759  0023                     	ds	1
  1760  0024                     ?_LcdWriteInt:	
  1761  0024                     ___bmul@multiplier:	
  1762                           ; 0 bytes @ 0x4
  1763                           
  1764  0024                     ___awdiv@counter:	
  1765                           ; 1 bytes @ 0x4
  1766                           
  1767  0024                     ___lldiv@counter:	
  1768                           ; 1 bytes @ 0x4
  1769                           
  1770  0024                     ___lltoft@exp:	
  1771                           ; 1 bytes @ 0x4
  1772                           
  1773  0024                     LcdWriteInt@i:	
  1774                           ; 1 bytes @ 0x4
  1775                           
  1776  0024                     measureSHT71@temp:	
  1777                           ; 2 bytes @ 0x4
  1778                           
  1779  0024                     adcRead@loop_count:	
  1780                           ; 2 bytes @ 0x4
  1781                           
  1782                           
  1783                           ; 2 bytes @ 0x4
  1784  0024                     	ds	1
  1785  0025                     ?_UARTInit:	
  1786  0025                     ___awdiv@sign:	
  1787                           ; 1 bytes @ 0x5
  1788                           
  1789  0025                     UARTInit@baud_rate:	
  1790                           ; 1 bytes @ 0x5
  1791                           
  1792                           
  1793                           ; 4 bytes @ 0x5
  1794  0025                     	ds	1
  1795  0026                     LcdWriteInt@row:	
  1796  0026                     adcRead@tempL:	
  1797                           ; 1 bytes @ 0x6
  1798                           
  1799  0026                     ___awdiv@quotient:	
  1800                           ; 2 bytes @ 0x6
  1801                           
  1802                           
  1803                           ; 2 bytes @ 0x6
  1804  0026                     	ds	1
  1805  0027                     LcdWriteInt@column:	
  1806  0027                     __tdiv_to_l_@cntr:	
  1807                           ; 1 bytes @ 0x7
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x7
  1811  0027                     	ds	1
  1812  0028                     ?___ftmul:	
  1813  0028                     LcdWriteInt@ch_manje_100:	
  1814                           ; 3 bytes @ 0x8
  1815                           
  1816  0028                     __tdiv_to_l_@exp1:	
  1817                           ; 1 bytes @ 0x8
  1818                           
  1819  0028                     adcRead@tempH:	
  1820                           ; 1 bytes @ 0x8
  1821                           
  1822  0028                     ___ftmul@f1:	
  1823                           ; 2 bytes @ 0x8
  1824                           
  1825  0028                     __div_to_l_@quot:	
  1826                           ; 3 bytes @ 0x8
  1827                           
  1828                           
  1829                           ; 4 bytes @ 0x8
  1830  0028                     	ds	1
  1831  0029                     LcdWriteInt@ch_manje_1000:	
  1832  0029                     _UARTInit$1259:	
  1833                           ; 1 bytes @ 0x9
  1834                           
  1835                           
  1836                           ; 4 bytes @ 0x9
  1837  0029                     	ds	1
  1838  002A                     LcdWriteInt@ch:	
  1839  002A                     adcRead@temp:	
  1840                           ; 1 bytes @ 0xA
  1841                           
  1842                           
  1843                           ; 2 bytes @ 0xA
  1844  002A                     	ds	1
  1845  002B                     ?_displayCO2:	
  1846  002B                     displayCO2@co22:	
  1847                           ; 0 bytes @ 0xB
  1848                           
  1849  002B                     ___ftmul@f2:	
  1850                           ; 2 bytes @ 0xB
  1851                           
  1852                           
  1853                           ; 3 bytes @ 0xB
  1854  002B                     	ds	1
  1855  002C                     ?_measureTGS4161:	
  1856  002C                     __div_to_l_@cntr:	
  1857                           ; 2 bytes @ 0xC
  1858                           
  1859                           
  1860                           ; 1 bytes @ 0xC
  1861  002C                     	ds	1
  1862  002D                     __div_to_l_@exp1:	
  1863                           
  1864                           ; 1 bytes @ 0xD
  1865  002D                     	ds	1
  1866  002E                     ??_measureTGS4161:	
  1867  002E                     ??___ftmul:	
  1868                           ; 0 bytes @ 0xE
  1869                           
  1870  002E                     UARTInit@x:	
  1871                           ; 0 bytes @ 0xE
  1872                           
  1873                           
  1874                           ; 2 bytes @ 0xE
  1875  002E                     	ds	2
  1876  0030                     measureTGS4161@krez1:	
  1877                           
  1878                           ; 2 bytes @ 0x10
  1879  0030                     	ds	1
  1880  0031                     ___ftmul@exp:	
  1881                           
  1882                           ; 1 bytes @ 0x11
  1883  0031                     	ds	1
  1884  0032                     measureTGS4161@krez2:	
  1885  0032                     ___ftmul@f3_as_product:	
  1886                           ; 2 bytes @ 0x12
  1887                           
  1888                           
  1889                           ; 3 bytes @ 0x12
  1890  0032                     	ds	2
  1891  0034                     measureTGS4161@ppm_temp:	
  1892                           
  1893                           ; 2 bytes @ 0x14
  1894  0034                     	ds	1
  1895  0035                     ___ftmul@cntr:	
  1896                           
  1897                           ; 1 bytes @ 0x15
  1898  0035                     	ds	1
  1899  0036                     ___ftmul@sign:	
  1900  0036                     measureTGS4161@n:	
  1901                           ; 1 bytes @ 0x16
  1902                           
  1903                           
  1904                           ; 2 bytes @ 0x16
  1905  0036                     	ds	1
  1906  0037                     ?_fround:	
  1907  0037                     ?_scale:	
  1908                           ; 3 bytes @ 0x17
  1909                           
  1910                           
  1911                           ; 3 bytes @ 0x17
  1912  0037                     	ds	1
  1913  0038                     measureTGS4161@i:	
  1914                           
  1915                           ; 1 bytes @ 0x18
  1916  0038                     	ds	1
  1917  0039                     measureTGS4161@temp:	
  1918                           
  1919                           ; 2 bytes @ 0x19
  1920  0039                     	ds	1
  1921  003A                     ??_scale:	
  1922                           
  1923                           ; 0 bytes @ 0x1A
  1924  003A                     	ds	1
  1925  003B                     measureTGS4161@ppm:	
  1926  003B                     _fround$1261:	
  1927                           ; 2 bytes @ 0x1B
  1928                           
  1929                           
  1930                           ; 3 bytes @ 0x1B
  1931  003B                     	ds	3
  1932  003E                     _fround$1260:	
  1933  003E                     _scale$1262:	
  1934                           ; 3 bytes @ 0x1E
  1935                           
  1936                           
  1937                           ; 3 bytes @ 0x1E
  1938  003E                     	ds	3
  1939  0041                     fround@prec:	
  1940  0041                     scale@scl:	
  1941                           ; 1 bytes @ 0x21
  1942                           
  1943                           
  1944                           ; 1 bytes @ 0x21
  1945  0041                     	ds	1
  1946  0042                     ?___ftadd:	
  1947  0042                     ?___fttol:	
  1948                           ; 3 bytes @ 0x22
  1949                           
  1950  0042                     ___ftadd@f1:	
  1951                           ; 4 bytes @ 0x22
  1952                           
  1953  0042                     ___fttol@f1:	
  1954                           ; 3 bytes @ 0x22
  1955                           
  1956                           
  1957                           ; 3 bytes @ 0x22
  1958  0042                     	ds	3
  1959  0045                     ___ftadd@f2:	
  1960                           
  1961                           ; 3 bytes @ 0x25
  1962  0045                     	ds	1
  1963  0046                     ??___fttol:	
  1964                           
  1965                           ; 0 bytes @ 0x26
  1966  0046                     	ds	2
  1967  0048                     ??___ftadd:	
  1968                           
  1969                           ; 0 bytes @ 0x28
  1970  0048                     	ds	1
  1971  0049                     ___fttol@sign1:	
  1972                           
  1973                           ; 1 bytes @ 0x29
  1974  0049                     	ds	1
  1975  004A                     ___fttol@lval:	
  1976                           
  1977                           ; 4 bytes @ 0x2A
  1978  004A                     	ds	1
  1979  004B                     ___ftadd@sign:	
  1980                           
  1981                           ; 1 bytes @ 0x2B
  1982  004B                     	ds	1
  1983  004C                     ___ftadd@exp2:	
  1984                           
  1985                           ; 1 bytes @ 0x2C
  1986  004C                     	ds	1
  1987  004D                     ___ftadd@exp1:	
  1988                           
  1989                           ; 1 bytes @ 0x2D
  1990  004D                     	ds	1
  1991  004E                     ?___ftge:	
  1992  004E                     ?_getTempDS18B20:	
  1993                           ; 1 bit 
  1994                           
  1995  004E                     ?___fttoee:	
  1996                           ; 3 bytes @ 0x2E
  1997                           
  1998  004E                     ?___ftsub:	
  1999                           ; 3 bytes @ 0x2E
  2000                           
  2001  004E                     ___fttol@exp1:	
  2002                           ; 3 bytes @ 0x2E
  2003                           
  2004  004E                     ___fttoee@data:	
  2005                           ; 1 bytes @ 0x2E
  2006                           
  2007  004E                     ___ftge@ff1:	
  2008                           ; 3 bytes @ 0x2E
  2009                           
  2010  004E                     ___ftsub@f2:	
  2011                           ; 3 bytes @ 0x2E
  2012                           
  2013                           
  2014                           ; 3 bytes @ 0x2E
  2015  004E                     	ds	3
  2016  0051                     ??_getTempDS18B20:	
  2017  0051                     ___fttoee@addr:	
  2018                           ; 0 bytes @ 0x31
  2019                           
  2020  0051                     ___ftge@ff2:	
  2021                           ; 1 bytes @ 0x31
  2022                           
  2023  0051                     ___ftsub@f1:	
  2024                           ; 3 bytes @ 0x31
  2025                           
  2026                           
  2027                           ; 3 bytes @ 0x31
  2028  0051                     	ds	3
  2029  0054                     ??_regulacija:	
  2030  0054                     ?_sprintf:	
  2031                           ; 0 bytes @ 0x34
  2032                           
  2033  0054                     ?_calcSHT71:	
  2034                           ; 2 bytes @ 0x34
  2035                           
  2036  0054                     sprintf@f:	
  2037                           ; 3 bytes @ 0x34
  2038                           
  2039  0054                     getTempDS18B20@temperatura:	
  2040                           ; 2 bytes @ 0x34
  2041                           
  2042  0054                     calcSHT71@p_humidity:	
  2043                           ; 3 bytes @ 0x34
  2044                           
  2045                           
  2046                           ; 3 bytes @ 0x34
  2047  0054                     	ds	3
  2048  0057                     calcSHT71@p_temperature:	
  2049  0057                     getTempDS18B20@tempL:	
  2050                           ; 1 bytes @ 0x37
  2051                           
  2052                           
  2053                           ; 2 bytes @ 0x37
  2054  0057                     	ds	1
  2055  0058                     calcSHT71@rh_lin:	
  2056                           
  2057                           ; 3 bytes @ 0x38
  2058  0058                     	ds	1
  2059  0059                     ??_sprintf:	
  2060  0059                     getTempDS18B20@tempH:	
  2061                           ; 0 bytes @ 0x39
  2062                           
  2063                           
  2064                           ; 2 bytes @ 0x39
  2065  0059                     	ds	2
  2066  005B                     getTempDS18B20@temp:	
  2067  005B                     calcSHT71@t:	
  2068                           ; 2 bytes @ 0x3B
  2069                           
  2070                           
  2071                           ; 3 bytes @ 0x3B
  2072  005B                     	ds	3
  2073  005E                     ?_displayAirTemp:	
  2074  005E                     ?_displayAirMoist:	
  2075                           ; 0 bytes @ 0x3E
  2076                           
  2077  005E                     ?_displaySoilTemp:	
  2078                           ; 0 bytes @ 0x3E
  2079                           
  2080  005E                     calcSHT71@t_C:	
  2081                           ; 0 bytes @ 0x3E
  2082                           
  2083  005E                     displayAirTemp@temp2:	
  2084                           ; 3 bytes @ 0x3E
  2085                           
  2086  005E                     displayAirMoist@humi2:	
  2087                           ; 3 bytes @ 0x3E
  2088                           
  2089  005E                     displaySoilTemp@t2:	
  2090                           ; 3 bytes @ 0x3E
  2091                           
  2092                           
  2093                           ; 3 bytes @ 0x3E
  2094  005E                     	ds	3
  2095  0061                     _calcSHT71$1257:	
  2096                           
  2097                           ; 3 bytes @ 0x41
  2098  0061                     	ds	3
  2099  0064                     _calcSHT71$1258:	
  2100                           
  2101                           ; 3 bytes @ 0x44
  2102  0064                     	ds	3
  2103  0067                     calcSHT71@rh_true:	
  2104                           
  2105                           ; 3 bytes @ 0x47
  2106  0067                     	ds	3
  2107  006A                     calcSHT71@rh:	
  2108                           
  2109                           ; 3 bytes @ 0x4A
  2110  006A                     	ds	3
  2111  006D                     ?_getResSHT71:	
  2112  006D                     getResSHT71@p_humi:	
  2113                           ; 0 bytes @ 0x4D
  2114                           
  2115                           
  2116                           ; 1 bytes @ 0x4D
  2117  006D                     	ds	1
  2118                           
  2119                           	psect	maintext
  2120  1D49                     __pmaintext:	
  2121 ;;
  2122 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2123 ;;
  2124 ;; *************** function _main *****************
  2125 ;; Defined at:
  2126 ;;		line 458 in file "main.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : B00/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2140 ;;      Params:         0       0       0       0       0
  2141 ;;      Locals:         0       0       0       0       0
  2142 ;;      Temps:          0       0       3       0       0
  2143 ;;      Totals:         0       0       3       0       0
  2144 ;;Total ram usage:        3 bytes
  2145 ;; Hardware stack levels required when called:    8
  2146 ;; This function calls:
  2147 ;;		_IOPinsConfig
  2148 ;;		_IOPinsInit
  2149 ;;		_LcdInit
  2150 ;;		_UARTInit
  2151 ;;		_UARTWriteString
  2152 ;;		_adcInit
  2153 ;;		_displayAirMoist
  2154 ;;		_displayAirTemp
  2155 ;;		_displayCO2
  2156 ;;		_displaySoilTemp
  2157 ;;		_getResSHT71
  2158 ;;		_getTempDS18B20
  2159 ;;		_initSHT71
  2160 ;;		_initTimer0
  2161 ;;		_initTimer1
  2162 ;;		_initWDT
  2163 ;;		_measureTGS4161
  2164 ;;		_menu
  2165 ;;		_regulacija
  2166 ;;		_resetDS18B20
  2167 ;;		_resetValues
  2168 ;; This function is called by:
  2169 ;;		Startup code after reset
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           
  2174                           ;psect for function _main
  2175  1D49                     _main:	
  2176                           
  2177                           ;main.c: 460: LcdInit();
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2181  1D49  120A  158A  271C  160A  158A  	fcall	_LcdInit
  2182                           
  2183                           ;main.c: 461: initSHT71();
  2184  1D4E  120A  158A  2022  160A  158A  	fcall	_initSHT71
  2185                           
  2186                           ;main.c: 462: resetDS18B20();
  2187  1D53  160A  118A  216E  160A  158A  	fcall	_resetDS18B20
  2188                           
  2189                           ;main.c: 463: adcInit();
  2190  1D58  120A  158A  2052  160A  158A  	fcall	_adcInit
  2191                           
  2192                           ;main.c: 464: UARTInit(9600);
  2193  1D5D  3000               	movlw	0
  2194  1D5E  1283               	bcf	3,5	;RP0=0, select bank0
  2195  1D5F  00A8               	movwf	UARTInit@baud_rate+3
  2196  1D60  00A7               	movwf	UARTInit@baud_rate+2
  2197  1D61  3025               	movlw	37
  2198  1D62  00A6               	movwf	UARTInit@baud_rate+1
  2199  1D63  3080               	movlw	128
  2200  1D64  00A5               	movwf	UARTInit@baud_rate
  2201  1D65  120A  118A  201C  160A  158A  	fcall	_UARTInit
  2202                           
  2203                           ;main.c: 465: IOPinsConfig();
  2204  1D6A  120A  158A  2046  160A  158A  	fcall	_IOPinsConfig
  2205                           
  2206                           ;main.c: 466: IOPinsInit();
  2207  1D6F  120A  158A  2026  160A  158A  	fcall	_IOPinsInit
  2208                           
  2209                           ;main.c: 467: resetValues();
  2210  1D74  120A  118A  27DE  160A  158A  	fcall	_resetValues
  2211                           
  2212                           ;main.c: 468: initTimer1();
  2213  1D79  120A  118A  27F1  160A  158A  	fcall	_initTimer1
  2214                           
  2215                           ;main.c: 469: initTimer0();
  2216  1D7E  120A  158A  203C  160A  158A  	fcall	_initTimer0
  2217                           
  2218                           ;main.c: 470: initWDT();
  2219  1D83  120A  158A  202D  160A  158A  	fcall	_initWDT
  2220                           
  2221                           ;main.c: 471: _delay((unsigned long)((100)*(8000000/4000.0)));
  2222  1D88  3002               	movlw	2
  2223  1D89  1683               	bsf	3,5	;RP0=1, select bank1
  2224  1D8A  1303               	bcf	3,6	;RP1=0, select bank1
  2225  1D8B  00DD               	movwf	(??_main^(0+128)+2)
  2226  1D8C  3004               	movlw	4
  2227  1D8D  00DC               	movwf	(??_main^(0+128)+1)
  2228  1D8E  30BA               	movlw	186
  2229  1D8F  00DB               	movwf	??_main^(0+128)
  2230  1D90                     u6967:	
  2231  1D90  0BDB               	decfsz	??_main^(0+128),f
  2232  1D91  2D90               	goto	u6967
  2233  1D92  0BDC               	decfsz	(??_main^(0+128)+1),f
  2234  1D93  2D90               	goto	u6967
  2235  1D94  0BDD               	decfsz	(??_main^(0+128)+2),f
  2236  1D95  2D90               	goto	u6967
  2237  1D96  0000               	nop
  2238                           
  2239                           ;main.c: 473: getResSHT71(&temp, &humi);
  2240  1D97  30BE               	movlw	(low (_humi| 0))& (0+255)
  2241  1D98  1283               	bcf	3,5	;RP0=0, select bank0
  2242  1D99  1303               	bcf	3,6	;RP1=0, select bank0
  2243  1D9A  00ED               	movwf	getResSHT71@p_humi
  2244  1D9B  30C1               	movlw	(low (_temp| 0))& (0+255)
  2245  1D9C  160A  118A  21AA  160A  158A  	fcall	_getResSHT71
  2246                           
  2247                           ;main.c: 475: t = getTempDS18B20();
  2248  1DA1  160A  118A  20AB  160A  158A  	fcall	_getTempDS18B20
  2249  1DA6  084E               	movf	?_getTempDS18B20,w
  2250  1DA7  1683               	bsf	3,5	;RP0=1, select bank1
  2251  1DA8  00A4               	movwf	_t^(0+128)
  2252  1DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2253  1DAA  084F               	movf	?_getTempDS18B20+1,w
  2254  1DAB  1683               	bsf	3,5	;RP0=1, select bank1
  2255  1DAC  00A5               	movwf	(_t+1)^(0+128)
  2256  1DAD  1283               	bcf	3,5	;RP0=0, select bank0
  2257  1DAE  0850               	movf	?_getTempDS18B20+2,w
  2258  1DAF  1683               	bsf	3,5	;RP0=1, select bank1
  2259  1DB0  00A6               	movwf	(_t+2)^(0+128)
  2260  1DB1                     l6083:	
  2261                           
  2262                           ;main.c: 478: {
  2263                           ;main.c: 479: if(measure)
  2264  1DB1  1683               	bsf	3,5	;RP0=1, select bank1
  2265  1DB2  1303               	bcf	3,6	;RP1=0, select bank1
  2266  1DB3  082D               	movf	_measure^(0+128),w
  2267  1DB4  1903               	btfsc	3,2
  2268  1DB5  2E0F               	goto	l6105
  2269                           
  2270                           ;main.c: 480: {
  2271                           ;main.c: 481: measure = 0;
  2272  1DB6  01AD               	clrf	_measure^(0+128)
  2273                           
  2274                           ;main.c: 483: switch(measure_count)
  2275  1DB7  2DFE               	goto	l6099
  2276  1DB8                     l6087:	
  2277                           
  2278                           ;main.c: 486: {
  2279                           ;main.c: 487: getResSHT71(&temp, &humi);
  2280  1DB8  30BE               	movlw	(low (_humi| 0))& (0+255)
  2281  1DB9  1283               	bcf	3,5	;RP0=0, select bank0
  2282  1DBA  00ED               	movwf	getResSHT71@p_humi
  2283  1DBB  30C1               	movlw	(low (_temp| 0))& (0+255)
  2284  1DBC  160A  118A  21AA  160A  158A  	fcall	_getResSHT71
  2285                           
  2286                           ;main.c: 488: UARTWriteString((char *)"\nSHT OK.\n");
  2287  1DC1  305C               	movlw	low (STR_28| (0+32768))
  2288  1DC2  00F3               	movwf	UARTWriteString@str
  2289  1DC3  3099               	movlw	high (STR_28| (0+32768))
  2290  1DC4  00F4               	movwf	UARTWriteString@str+1
  2291  1DC5  160A  158A  2512  160A  158A  	fcall	_UARTWriteString
  2292                           
  2293                           ;main.c: 489: }
  2294                           ;main.c: 490: break;
  2295  1DCA  2E09               	goto	l6101
  2296  1DCB                     l6089:	
  2297                           
  2298                           ;main.c: 493: {
  2299                           ;main.c: 494: if(measure_co2)
  2300  1DCB  082E               	movf	_measure_co2^(0+128),w
  2301  1DCC  1903               	btfsc	3,2
  2302  1DCD  2E09               	goto	l6101
  2303                           
  2304                           ;main.c: 495: {
  2305                           ;main.c: 496: co2 = measureTGS4161();
  2306  1DCE  160A  158A  243E  160A  158A  	fcall	_measureTGS4161
  2307  1DD3  082D               	movf	?_measureTGS4161+1,w
  2308  1DD4  1683               	bsf	3,5	;RP0=1, select bank1
  2309  1DD5  00A8               	movwf	(_co2+1)^(0+128)
  2310  1DD6  1283               	bcf	3,5	;RP0=0, select bank0
  2311  1DD7  082C               	movf	?_measureTGS4161,w
  2312  1DD8  1683               	bsf	3,5	;RP0=1, select bank1
  2313  1DD9  00A7               	movwf	_co2^(0+128)
  2314                           
  2315                           ;main.c: 497: UARTWriteString((char *)"\nTGS OK.\n");
  2316  1DDA  3052               	movlw	low (STR_29| (0+32768))
  2317  1DDB  00F3               	movwf	UARTWriteString@str
  2318  1DDC  3099               	movlw	high (STR_29| (0+32768))
  2319  1DDD  00F4               	movwf	UARTWriteString@str+1
  2320  1DDE  160A  158A  2512  160A  158A  	fcall	_UARTWriteString
  2321  1DE3  2E09               	goto	l6101
  2322  1DE4                     l6093:	
  2323                           
  2324                           ;main.c: 503: {
  2325                           ;main.c: 504: t = getTempDS18B20();
  2326  1DE4  160A  118A  20AB  160A  158A  	fcall	_getTempDS18B20
  2327  1DE9  084E               	movf	?_getTempDS18B20,w
  2328  1DEA  1683               	bsf	3,5	;RP0=1, select bank1
  2329  1DEB  00A4               	movwf	_t^(0+128)
  2330  1DEC  1283               	bcf	3,5	;RP0=0, select bank0
  2331  1DED  084F               	movf	?_getTempDS18B20+1,w
  2332  1DEE  1683               	bsf	3,5	;RP0=1, select bank1
  2333  1DEF  00A5               	movwf	(_t+1)^(0+128)
  2334  1DF0  1283               	bcf	3,5	;RP0=0, select bank0
  2335  1DF1  0850               	movf	?_getTempDS18B20+2,w
  2336  1DF2  1683               	bsf	3,5	;RP0=1, select bank1
  2337  1DF3  00A6               	movwf	(_t+2)^(0+128)
  2338                           
  2339                           ;main.c: 505: UARTWriteString((char *)"\nDS OK.\n");
  2340  1DF4  3066               	movlw	low (STR_30| (0+32768))
  2341  1DF5  00F3               	movwf	UARTWriteString@str
  2342  1DF6  3099               	movlw	high (STR_30| (0+32768))
  2343  1DF7  00F4               	movwf	UARTWriteString@str+1
  2344  1DF8  160A  158A  2512  160A  158A  	fcall	_UARTWriteString
  2345                           
  2346                           ;main.c: 506: }
  2347                           ;main.c: 507: break;
  2348  1DFD  2E09               	goto	l6101
  2349  1DFE                     l6099:	
  2350  1DFE  082F               	movf	_measure_count^(0+128),w
  2351                           
  2352                           ; Switch size 1, requested type "space"
  2353                           ; Number of cases is 3, Range of values is 0 to 2
  2354                           ; switch strategies available:
  2355                           ; Name         Instructions Cycles
  2356                           ; simple_byte           10     6 (average)
  2357                           ; direct_byte           17     8 (fixed)
  2358                           ; jumptable            260     6 (fixed)
  2359                           ;	Chosen strategy is simple_byte
  2360  1DFF  3A00               	xorlw	0	; case 0
  2361  1E00  1903               	skipnz
  2362  1E01  2DB8               	goto	l6087
  2363  1E02  3A01               	xorlw	1	; case 1
  2364  1E03  1903               	skipnz
  2365  1E04  2DCB               	goto	l6089
  2366  1E05  3A03               	xorlw	3	; case 2
  2367  1E06  1903               	skipnz
  2368  1E07  2DE4               	goto	l6093
  2369  1E08  2E09               	goto	l6101
  2370  1E09                     l6101:	
  2371                           
  2372                           ;main.c: 513: if(++measure_count > 3) measure_count = 0;
  2373  1E09  3004               	movlw	4
  2374  1E0A  1683               	bsf	3,5	;RP0=1, select bank1
  2375  1E0B  0AAF               	incf	_measure_count^(0+128),f
  2376  1E0C  022F               	subwf	_measure_count^(0+128),w
  2377  1E0D  1803               	btfsc	3,0
  2378  1E0E  01AF               	clrf	_measure_count^(0+128)
  2379  1E0F                     l6105:	
  2380                           
  2381                           ;main.c: 514: }
  2382                           ;main.c: 516: if(disp)
  2383  1E0F  082B               	movf	_disp^(0+128),w
  2384  1E10  1903               	btfsc	3,2
  2385  1E11  2E68               	goto	l6127
  2386                           
  2387                           ;main.c: 517: {
  2388                           ;main.c: 518: disp = 0;
  2389  1E12  01AB               	clrf	_disp^(0+128)
  2390                           
  2391                           ;main.c: 520: switch(disp_count)
  2392  1E13  2E54               	goto	l6119
  2393  1E14                     l6109:	
  2394                           
  2395                           ;main.c: 523: displayAirTemp(temp);
  2396  1E14  0841               	movf	_temp^(0+128),w
  2397  1E15  1283               	bcf	3,5	;RP0=0, select bank0
  2398  1E16  00DE               	movwf	displayAirTemp@temp2
  2399  1E17  1683               	bsf	3,5	;RP0=1, select bank1
  2400  1E18  0842               	movf	(_temp+1)^(0+128),w
  2401  1E19  1283               	bcf	3,5	;RP0=0, select bank0
  2402  1E1A  00DF               	movwf	displayAirTemp@temp2+1
  2403  1E1B  1683               	bsf	3,5	;RP0=1, select bank1
  2404  1E1C  0843               	movf	(_temp+2)^(0+128),w
  2405  1E1D  1283               	bcf	3,5	;RP0=0, select bank0
  2406  1E1E  00E0               	movwf	displayAirTemp@temp2+2
  2407  1E1F  120A  158A  20BF  160A  158A  	fcall	_displayAirTemp
  2408                           
  2409                           ;main.c: 524: break;
  2410  1E24  2E62               	goto	l6121
  2411  1E25                     l6111:	
  2412                           
  2413                           ;main.c: 526: displayAirMoist(humi);
  2414  1E25  083E               	movf	_humi^(0+128),w
  2415  1E26  1283               	bcf	3,5	;RP0=0, select bank0
  2416  1E27  00DE               	movwf	displayAirMoist@humi2
  2417  1E28  1683               	bsf	3,5	;RP0=1, select bank1
  2418  1E29  083F               	movf	(_humi+1)^(0+128),w
  2419  1E2A  1283               	bcf	3,5	;RP0=0, select bank0
  2420  1E2B  00DF               	movwf	displayAirMoist@humi2+1
  2421  1E2C  1683               	bsf	3,5	;RP0=1, select bank1
  2422  1E2D  0840               	movf	(_humi+2)^(0+128),w
  2423  1E2E  1283               	bcf	3,5	;RP0=0, select bank0
  2424  1E2F  00E0               	movwf	displayAirMoist@humi2+2
  2425  1E30  120A  158A  20F3  160A  158A  	fcall	_displayAirMoist
  2426                           
  2427                           ;main.c: 527: break;
  2428  1E35  2E62               	goto	l6121
  2429  1E36                     l6113:	
  2430                           
  2431                           ;main.c: 529: displayCO2(co2);
  2432  1E36  0828               	movf	(_co2+1)^(0+128),w
  2433  1E37  1283               	bcf	3,5	;RP0=0, select bank0
  2434  1E38  00AC               	movwf	displayCO2@co22+1
  2435  1E39  1683               	bsf	3,5	;RP0=1, select bank1
  2436  1E3A  0827               	movf	_co2^(0+128),w
  2437  1E3B  1283               	bcf	3,5	;RP0=0, select bank0
  2438  1E3C  00AB               	movwf	displayCO2@co22
  2439  1E3D  120A  158A  2127  160A  158A  	fcall	_displayCO2
  2440                           
  2441                           ;main.c: 530: break;
  2442  1E42  2E62               	goto	l6121
  2443  1E43                     l6115:	
  2444                           
  2445                           ;main.c: 532: displaySoilTemp(t);
  2446  1E43  0824               	movf	_t^(0+128),w
  2447  1E44  1283               	bcf	3,5	;RP0=0, select bank0
  2448  1E45  00DE               	movwf	displaySoilTemp@t2
  2449  1E46  1683               	bsf	3,5	;RP0=1, select bank1
  2450  1E47  0825               	movf	(_t+1)^(0+128),w
  2451  1E48  1283               	bcf	3,5	;RP0=0, select bank0
  2452  1E49  00DF               	movwf	displaySoilTemp@t2+1
  2453  1E4A  1683               	bsf	3,5	;RP0=1, select bank1
  2454  1E4B  0826               	movf	(_t+2)^(0+128),w
  2455  1E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2456  1E4D  00E0               	movwf	displaySoilTemp@t2+2
  2457  1E4E  120A  158A  208B  160A  158A  	fcall	_displaySoilTemp
  2458                           
  2459                           ;main.c: 533: break;
  2460  1E53  2E62               	goto	l6121
  2461  1E54                     l6119:	
  2462  1E54  082C               	movf	_disp_count^(0+128),w
  2463                           
  2464                           ; Switch size 1, requested type "space"
  2465                           ; Number of cases is 4, Range of values is 1 to 4
  2466                           ; switch strategies available:
  2467                           ; Name         Instructions Cycles
  2468                           ; simple_byte           13     7 (average)
  2469                           ; direct_byte           23    11 (fixed)
  2470                           ; jumptable            263     9 (fixed)
  2471                           ;	Chosen strategy is simple_byte
  2472  1E55  3A01               	xorlw	1	; case 1
  2473  1E56  1903               	skipnz
  2474  1E57  2E14               	goto	l6109
  2475  1E58  3A03               	xorlw	3	; case 2
  2476  1E59  1903               	skipnz
  2477  1E5A  2E25               	goto	l6111
  2478  1E5B  3A01               	xorlw	1	; case 3
  2479  1E5C  1903               	skipnz
  2480  1E5D  2E36               	goto	l6113
  2481  1E5E  3A07               	xorlw	7	; case 4
  2482  1E5F  1903               	skipnz
  2483  1E60  2E43               	goto	l6115
  2484  1E61  2E62               	goto	l6121
  2485  1E62                     l6121:	
  2486                           
  2487                           ;main.c: 539: disp_count++;
  2488  1E62  1683               	bsf	3,5	;RP0=1, select bank1
  2489  1E63  3005               	movlw	5
  2490  1E64  0AAC               	incf	_disp_count^(0+128),f
  2491                           
  2492                           ;main.c: 540: if(disp_count > 4) disp_count = 0;
  2493  1E65  022C               	subwf	_disp_count^(0+128),w
  2494  1E66  1803               	btfsc	3,0
  2495  1E67  01AC               	clrf	_disp_count^(0+128)
  2496  1E68                     l6127:	
  2497                           
  2498                           ;main.c: 541: }
  2499                           ;main.c: 543: if (RA4)
  2500  1E68  1283               	bcf	3,5	;RP0=0, select bank0
  2501  1E69  1E05               	btfss	5,4	;volatile
  2502  1E6A  2E89               	goto	l6137
  2503                           
  2504                           ;main.c: 544: {
  2505                           ;main.c: 545: _delay((unsigned long)((20)*(8000000/4000.0)));
  2506  1E6B  3034               	movlw	52
  2507  1E6C  1683               	bsf	3,5	;RP0=1, select bank1
  2508  1E6D  00DC               	movwf	(??_main^(0+128)+1)
  2509  1E6E  30F1               	movlw	241
  2510  1E6F  00DB               	movwf	??_main^(0+128)
  2511  1E70                     u6977:	
  2512  1E70  0BDB               	decfsz	??_main^(0+128),f
  2513  1E71  2E70               	goto	u6977
  2514  1E72  0BDC               	decfsz	(??_main^(0+128)+1),f
  2515  1E73  2E70               	goto	u6977
  2516  1E74  2E75               	nop2
  2517                           
  2518                           ;main.c: 546: if(RA4) menu_flag = 1;
  2519  1E75  1283               	bcf	3,5	;RP0=0, select bank0
  2520  1E76  1303               	bcf	3,6	;RP1=0, select bank0
  2521  1E77  1E05               	btfss	5,4	;volatile
  2522  1E78  2E7C               	goto	l465
  2523  1E79  1683               	bsf	3,5	;RP0=1, select bank1
  2524  1E7A  01B0               	clrf	_menu_flag^(0+128)
  2525  1E7B  0AB0               	incf	_menu_flag^(0+128),f
  2526  1E7C                     l465:	
  2527  1E7C  1283               	bcf	3,5	;RP0=0, select bank0
  2528  1E7D  1A05               	btfsc	5,4	;volatile
  2529  1E7E  2E7C               	goto	l465
  2530                           
  2531                           ;main.c: 548: _delay((unsigned long)((20)*(8000000/4000.0)));
  2532  1E7F  3034               	movlw	52
  2533  1E80  1683               	bsf	3,5	;RP0=1, select bank1
  2534  1E81  00DC               	movwf	(??_main^(0+128)+1)
  2535  1E82  30F1               	movlw	241
  2536  1E83  00DB               	movwf	??_main^(0+128)
  2537  1E84                     u6987:	
  2538  1E84  0BDB               	decfsz	??_main^(0+128),f
  2539  1E85  2E84               	goto	u6987
  2540  1E86  0BDC               	decfsz	(??_main^(0+128)+1),f
  2541  1E87  2E84               	goto	u6987
  2542  1E88  2E89               	nop2
  2543  1E89                     l6137:	
  2544                           
  2545                           ;main.c: 549: }
  2546                           ;main.c: 550: if(menu_flag)
  2547  1E89  1683               	bsf	3,5	;RP0=1, select bank1
  2548  1E8A  1303               	bcf	3,6	;RP1=0, select bank1
  2549  1E8B  0830               	movf	_menu_flag^(0+128),w
  2550  1E8C  1903               	btfsc	3,2
  2551  1E8D  2E96               	goto	l6147
  2552                           
  2553                           ;main.c: 551: {
  2554                           ;main.c: 552: menu_flag = 0;
  2555  1E8E  01B0               	clrf	_menu_flag^(0+128)
  2556                           
  2557                           ;main.c: 553: PIE1bits.TMR1IE = 0;
  2558  1E8F  100C               	bcf	12,0	;volatile
  2559                           
  2560                           ;main.c: 554: menu();
  2561  1E90  120A  158A  2455  160A  158A  	fcall	_menu
  2562                           
  2563                           ;main.c: 555: PIE1bits.TMR1IE = 1;
  2564  1E95  140C               	bsf	12,0	;volatile
  2565  1E96                     l6147:	
  2566                           
  2567                           ;main.c: 556: }
  2568                           ;main.c: 558: regulacija();
  2569  1E96  120A  158A  2566  160A  158A  	fcall	_regulacija
  2570  1E9B  0064               	clrwdt	;# 
  2571  1E9C  2DB1               	goto	l6083
  2572  1E9D                     __end_of_main:	
  2573                           
  2574                           	psect	text1
  2575  07DE                     __ptext1:	
  2576 ;; *************** function _resetValues *****************
  2577 ;; Defined at:
  2578 ;;		line 176 in file "main.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;		None               void
  2585 ;; Registers used:
  2586 ;;		status,2
  2587 ;; Tracked objects:
  2588 ;;		On entry : 300/0
  2589 ;;		On exit  : 300/100
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2592 ;;      Params:         0       0       0       0       0
  2593 ;;      Locals:         0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0
  2595 ;;      Totals:         0       0       0       0       0
  2596 ;;Total ram usage:        0 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _resetValues
  2608  07DE                     _resetValues:	
  2609                           
  2610                           ;main.c: 177: ok_flag = 0;
  2611                           
  2612                           ;incstack = 0
  2613                           ; Regs used in _resetValues: [status,2]
  2614  07DE  01FA               	clrf	_ok_flag
  2615                           
  2616                           ;main.c: 178: menu_flag = 0;
  2617  07DF  1683               	bsf	3,5	;RP0=1, select bank1
  2618  07E0  01B0               	clrf	_menu_flag^(0+128)
  2619                           
  2620                           ;main.c: 179: plus_flag = 0;
  2621  07E1  01FB               	clrf	_plus_flag
  2622                           
  2623                           ;main.c: 180: minus_flag = 0;
  2624  07E2  01B1               	clrf	_minus_flag^(0+128)
  2625                           
  2626                           ;main.c: 181: tmr_count = 0;
  2627  07E3  01A9               	clrf	_tmr_count^(0+128)
  2628  07E4  01AA               	clrf	(_tmr_count+1)^(0+128)
  2629                           
  2630                           ;main.c: 182: measure = 0;
  2631  07E5  01AD               	clrf	_measure^(0+128)
  2632                           
  2633                           ;main.c: 183: disp_count = 0;
  2634  07E6  01AC               	clrf	_disp_count^(0+128)
  2635                           
  2636                           ;main.c: 184: measure_count = 0;
  2637  07E7  01AF               	clrf	_measure_count^(0+128)
  2638                           
  2639                           ;main.c: 185: disp = 1;
  2640  07E8  01AB               	clrf	_disp^(0+128)
  2641  07E9  0AAB               	incf	_disp^(0+128),f
  2642                           
  2643                           ;main.c: 189: ok_flag_humi = 0;
  2644  07EA  01B3               	clrf	_ok_flag_humi^(0+128)
  2645                           
  2646                           ;main.c: 191: tmr_co2 = 0;
  2647  07EB  01B2               	clrf	_ok_flag_co2^(0+128)
  2648                           
  2649                           ;main.c: 192: measure_co2 = 1;
  2650  07EC  01AE               	clrf	_measure_co2^(0+128)
  2651  07ED  0AAE               	incf	_measure_co2^(0+128),f
  2652                           
  2653                           ;main.c: 193: co2 = 0;
  2654  07EE  01A7               	clrf	_co2^(0+128)
  2655  07EF  01A8               	clrf	(_co2+1)^(0+128)
  2656  07F0  0008               	return
  2657  07F1                     __end_of_resetValues:	
  2658                           
  2659                           	psect	text13
  2660  1C3E                     __ptext13:	
  2661 ;; *************** function _measureTGS4161 *****************
  2662 ;; Defined at:
  2663 ;;		line 40 in file "tgs4161.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  ppm             2   27[BANK0 ] unsigned int 
  2668 ;;  temp            2   25[BANK0 ] unsigned int 
  2669 ;;  n               2   22[BANK0 ] unsigned short 
  2670 ;;  ppm_temp        2   20[BANK0 ] unsigned int 
  2671 ;;  krez2           2   18[BANK0 ] unsigned int 
  2672 ;;  krez1           2   16[BANK0 ] unsigned int 
  2673 ;;  i               1   24[BANK0 ] unsigned char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  2   12[BANK0 ] unsigned int 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 300/100
  2680 ;;		On exit  : 300/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2683 ;;      Params:         0       2       0       0       0
  2684 ;;      Locals:         0      13       0       0       0
  2685 ;;      Temps:          0       2       0       0       0
  2686 ;;      Totals:         0      17       0       0       0
  2687 ;;Total ram usage:       17 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		___lwdiv
  2692 ;;		___wmul
  2693 ;;		_adcRead
  2694 ;; This function is called by:
  2695 ;;		_main
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function _measureTGS4161
  2701  1C3E                     _measureTGS4161:	
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _measureTGS4161: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2705  1C3E  1283               	bcf	3,5	;RP0=0, select bank0
  2706  1C3F  30E9               	movlw	233
  2707  1C40  01BB               	clrf	measureTGS4161@ppm
  2708  1C41  01BC               	clrf	measureTGS4161@ppm+1
  2709  1C42  01B4               	clrf	measureTGS4161@ppm_temp
  2710  1C43  01B5               	clrf	measureTGS4161@ppm_temp+1
  2711                           
  2712                           ;tgs4161.c: 42: char i;
  2713                           ;tgs4161.c: 43: unsigned short n=0;
  2714  1C44  01B6               	clrf	measureTGS4161@n
  2715  1C45  01B7               	clrf	measureTGS4161@n+1
  2716                           
  2717                           ;tgs4161.c: 45: krez1 = -23.43;
  2718  1C46  00B0               	movwf	measureTGS4161@krez1
  2719  1C47  30FF               	movlw	255
  2720  1C48  00B1               	movwf	measureTGS4161@krez1+1
  2721                           
  2722                           ;tgs4161.c: 46: krez2 = -53.63;
  2723  1C49  30CB               	movlw	203
  2724  1C4A  00B2               	movwf	measureTGS4161@krez2
  2725  1C4B  30FF               	movlw	255
  2726  1C4C  00B3               	movwf	measureTGS4161@krez2+1
  2727                           
  2728                           ;tgs4161.c: 48: INTCONbits.T0IE = 0;
  2729  1C4D  128B               	bcf	11,5	;volatile
  2730                           
  2731                           ;tgs4161.c: 49: for(i=0;i<7;i++)
  2732  1C4E  01B8               	clrf	measureTGS4161@i
  2733  1C4F                     l5899:	
  2734                           
  2735                           ;tgs4161.c: 50: {
  2736                           ;tgs4161.c: 51: temp = adcRead();
  2737  1C4F  24CB  160A  158A   	fcall	_adcRead
  2738  1C52  0821               	movf	?_adcRead+1,w
  2739  1C53  00BA               	movwf	measureTGS4161@temp+1
  2740  1C54  0820               	movf	?_adcRead,w
  2741  1C55  00B9               	movwf	measureTGS4161@temp
  2742                           
  2743                           ;tgs4161.c: 53: if(temp > 236) ppm = krez1*temp + 6650;
  2744  1C56  3000               	movlw	0
  2745  1C57  023A               	subwf	measureTGS4161@temp+1,w
  2746  1C58  30ED               	movlw	237
  2747  1C59  1903               	skipnz
  2748  1C5A  0239               	subwf	measureTGS4161@temp,w
  2749  1C5B  1C03               	skipc
  2750  1C5C  2C71               	goto	l5907
  2751  1C5D  0831               	movf	measureTGS4161@krez1+1,w
  2752  1C5E  00F3               	movwf	___wmul@multiplier+1
  2753  1C5F  0830               	movf	measureTGS4161@krez1,w
  2754  1C60  2543               	fcall	PL96	;call to abstracted procedure
  2755  1C61  120A  118A  259A  160A  158A  	fcall	___wmul
  2756  1C66  0873               	movf	?___wmul+1,w
  2757  1C67  1283               	bcf	3,5	;RP0=0, select bank0
  2758  1C68  00BC               	movwf	measureTGS4161@ppm+1
  2759  1C69  0872               	movf	?___wmul,w
  2760  1C6A  00BB               	movwf	measureTGS4161@ppm
  2761  1C6B  30FA               	movlw	250
  2762  1C6C  07BB               	addwf	measureTGS4161@ppm,f
  2763  1C6D  1803               	skipnc
  2764  1C6E  0ABC               	incf	measureTGS4161@ppm+1,f
  2765  1C6F  3019               	movlw	25
  2766  1C70  2C84               	goto	L1
  2767  1C71                     l5907:	
  2768                           
  2769                           ;tgs4161.c: 54: else ppm = krez2*temp + 13500;
  2770  1C71  0833               	movf	measureTGS4161@krez2+1,w
  2771  1C72  00F3               	movwf	___wmul@multiplier+1
  2772  1C73  0832               	movf	measureTGS4161@krez2,w
  2773  1C74  2543               	fcall	PL96	;call to abstracted procedure
  2774  1C75  120A  118A  259A  160A  158A  	fcall	___wmul
  2775  1C7A  0873               	movf	?___wmul+1,w
  2776  1C7B  1283               	bcf	3,5	;RP0=0, select bank0
  2777  1C7C  00BC               	movwf	measureTGS4161@ppm+1
  2778  1C7D  0872               	movf	?___wmul,w
  2779  1C7E  00BB               	movwf	measureTGS4161@ppm
  2780  1C7F  30BC               	movlw	188
  2781  1C80  07BB               	addwf	measureTGS4161@ppm,f
  2782  1C81  1803               	skipnc
  2783  1C82  0ABC               	incf	measureTGS4161@ppm+1,f
  2784  1C83  3034               	movlw	52
  2785  1C84                     L1:	
  2786  1C84  07BC               	addwf	measureTGS4161@ppm+1,f
  2787                           
  2788                           ;tgs4161.c: 55: ppm_temp += ppm;
  2789  1C85  083B               	movf	measureTGS4161@ppm,w
  2790  1C86  07B4               	addwf	measureTGS4161@ppm_temp,f
  2791  1C87  1803               	skipnc
  2792  1C88  0AB5               	incf	measureTGS4161@ppm_temp+1,f
  2793  1C89  083C               	movf	measureTGS4161@ppm+1,w
  2794  1C8A  07B5               	addwf	measureTGS4161@ppm_temp+1,f
  2795                           
  2796                           ;tgs4161.c: 56: n++;
  2797  1C8B  0AB6               	incf	measureTGS4161@n,f
  2798  1C8C  1903               	skipnz
  2799  1C8D  0AB7               	incf	measureTGS4161@n+1,f
  2800                           
  2801                           ;tgs4161.c: 57: _delay((unsigned long)((20)*(8000000/4000.0)));
  2802  1C8E  3034               	movlw	52
  2803  1C8F  00AF               	movwf	??_measureTGS4161+1
  2804  1C90  30F1               	movlw	241
  2805  1C91  00AE               	movwf	??_measureTGS4161
  2806  1C92                     u7057:	
  2807  1C92  0BAE               	decfsz	??_measureTGS4161,f
  2808  1C93  2C92               	goto	u7057
  2809  1C94  0BAF               	decfsz	??_measureTGS4161+1,f
  2810  1C95  2C92               	goto	u7057
  2811  1C96  2C97               	nop2
  2812  1C97  1283               	bcf	3,5	;RP0=0, select bank0
  2813  1C98  1303               	bcf	3,6	;RP1=0, select bank0
  2814  1C99  3007               	movlw	7
  2815  1C9A  0AB8               	incf	measureTGS4161@i,f
  2816  1C9B  0238               	subwf	measureTGS4161@i,w
  2817  1C9C  1C03               	skipc
  2818  1C9D  2C4F               	goto	l5899
  2819                           
  2820                           ;tgs4161.c: 58: }
  2821                           ;tgs4161.c: 59: INTCONbits.T0IE = 1;
  2822  1C9E  168B               	bsf	11,5	;volatile
  2823                           
  2824                           ;tgs4161.c: 61: ppm = ppm_temp/n;
  2825  1C9F  0837               	movf	measureTGS4161@n+1,w
  2826  1CA0  00F3               	movwf	___lwdiv@divisor+1
  2827  1CA1  0836               	movf	measureTGS4161@n,w
  2828  1CA2  00F2               	movwf	___lwdiv@divisor
  2829  1CA3  0835               	movf	measureTGS4161@ppm_temp+1,w
  2830  1CA4  00F5               	movwf	___lwdiv@dividend+1
  2831  1CA5  0834               	movf	measureTGS4161@ppm_temp,w
  2832  1CA6  00F4               	movwf	___lwdiv@dividend
  2833  1CA7  120A  158A  26F2  160A  158A  	fcall	___lwdiv
  2834  1CAC  0873               	movf	?___lwdiv+1,w
  2835  1CAD  00BC               	movwf	measureTGS4161@ppm+1
  2836  1CAE  0872               	movf	?___lwdiv,w
  2837  1CAF  00BB               	movwf	measureTGS4161@ppm
  2838                           
  2839                           ;tgs4161.c: 62: if(ppm < 350) ppm = 350;
  2840  1CB0  3001               	movlw	1
  2841  1CB1  023C               	subwf	measureTGS4161@ppm+1,w
  2842  1CB2  305E               	movlw	94
  2843  1CB3  1903               	skipnz
  2844  1CB4  023B               	subwf	measureTGS4161@ppm,w
  2845  1CB5  1803               	skipnc
  2846  1CB6  2CBB               	goto	l219
  2847  1CB7  305E               	movlw	94
  2848  1CB8  00BB               	movwf	measureTGS4161@ppm
  2849  1CB9  3001               	movlw	1
  2850  1CBA  00BC               	movwf	measureTGS4161@ppm+1
  2851  1CBB                     l219:	
  2852                           
  2853                           ;tgs4161.c: 63: if(ppm > 5500) ppm = 5500;
  2854  1CBB  3015               	movlw	21
  2855  1CBC  023C               	subwf	measureTGS4161@ppm+1,w
  2856  1CBD  307D               	movlw	125
  2857  1CBE  1903               	skipnz
  2858  1CBF  023B               	subwf	measureTGS4161@ppm,w
  2859  1CC0  1C03               	skipc
  2860  1CC1  2CC6               	goto	l220
  2861  1CC2  307C               	movlw	124
  2862  1CC3  00BB               	movwf	measureTGS4161@ppm
  2863  1CC4  3015               	movlw	21
  2864  1CC5  00BC               	movwf	measureTGS4161@ppm+1
  2865  1CC6                     l220:	
  2866                           
  2867                           ;tgs4161.c: 65: return ppm;
  2868  1CC6  083C               	movf	measureTGS4161@ppm+1,w
  2869  1CC7  00AD               	movwf	?_measureTGS4161+1
  2870  1CC8  083B               	movf	measureTGS4161@ppm,w
  2871  1CC9  00AC               	movwf	?_measureTGS4161
  2872  1CCA  0008               	return
  2873  1CCB                     __end_of_measureTGS4161:	
  2874  1CCB                     __ptext14:	
  2875 ;; *************** function _adcRead *****************
  2876 ;; Defined at:
  2877 ;;		line 13 in file "tgs4161.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  temp            2   10[BANK0 ] unsigned int 
  2882 ;;  tempH           2    8[BANK0 ] unsigned short 
  2883 ;;  tempL           2    6[BANK0 ] unsigned short 
  2884 ;;  loop_count      2    4[BANK0 ] unsigned int 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  2    0[BANK0 ] unsigned int 
  2887 ;; Registers used:
  2888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 200/0
  2891 ;;		On exit  : 300/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2894 ;;      Params:         0       2       0       0       0
  2895 ;;      Locals:         0       8       0       0       0
  2896 ;;      Temps:          0       2       0       0       0
  2897 ;;      Totals:         0      12       0       0       0
  2898 ;;Total ram usage:       12 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    3
  2901 ;; This function calls:
  2902 ;;		_UARTWriteString
  2903 ;; This function is called by:
  2904 ;;		_measureTGS4161
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _adcRead
  2910  1CCB                     _adcRead:	
  2911                           
  2912                           ;tgs4161.c: 15: unsigned short tempL=0, tempH=0;
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _adcRead: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2916  1CCB  1283               	bcf	3,5	;RP0=0, select bank0
  2917  1CCC  01A6               	clrf	adcRead@tempL
  2918  1CCD  01A7               	clrf	adcRead@tempL+1
  2919  1CCE  01A8               	clrf	adcRead@tempH
  2920  1CCF  01A9               	clrf	adcRead@tempH+1
  2921                           
  2922                           ;tgs4161.c: 16: unsigned int loop_count=0;
  2923  1CD0  01A4               	clrf	adcRead@loop_count
  2924  1CD1  01A5               	clrf	adcRead@loop_count+1
  2925                           
  2926                           ;tgs4161.c: 18: ADCON0bits.ADON = 1;
  2927  1CD2  141F               	bsf	31,0	;volatile
  2928                           
  2929                           ;tgs4161.c: 19: _delay((unsigned long)((1)*(8000000/4000.0)));
  2930  1CD3  3003               	movlw	3
  2931  1CD4  00A3               	movwf	??_adcRead+1
  2932  1CD5  3097               	movlw	151
  2933  1CD6  00A2               	movwf	??_adcRead
  2934  1CD7                     u7067:	
  2935  1CD7  0BA2               	decfsz	??_adcRead,f
  2936  1CD8  2CD7               	goto	u7067
  2937  1CD9  0BA3               	decfsz	??_adcRead+1,f
  2938  1CDA  2CD7               	goto	u7067
  2939  1CDB  2CDC               	nop2
  2940                           
  2941                           ;tgs4161.c: 20: ADCON0bits.GO = 1;
  2942  1CDC  1283               	bcf	3,5	;RP0=0, select bank0
  2943  1CDD  1303               	bcf	3,6	;RP1=0, select bank0
  2944  1CDE  149F               	bsf	31,1	;volatile
  2945  1CDF                     l208:	
  2946                           ;tgs4161.c: 22: while(ADCON0bits.GO)
  2947                           
  2948  1CDF  1C9F               	btfss	31,1	;volatile
  2949  1CE0  2CFE               	goto	l5749
  2950                           
  2951                           ;tgs4161.c: 23: {
  2952                           ;tgs4161.c: 24: _delay((unsigned long)((10)*(8000000/4000.0)));
  2953  1CE1  301A               	movlw	26
  2954  1CE2  00A3               	movwf	??_adcRead+1
  2955  1CE3  30F8               	movlw	248
  2956  1CE4  00A2               	movwf	??_adcRead
  2957  1CE5                     u7077:	
  2958  1CE5  0BA2               	decfsz	??_adcRead,f
  2959  1CE6  2CE5               	goto	u7077
  2960  1CE7  0BA3               	decfsz	??_adcRead+1,f
  2961  1CE8  2CE5               	goto	u7077
  2962  1CE9  0000               	nop
  2963                           
  2964                           ;tgs4161.c: 25: if(++loop_count > 150)
  2965  1CEA  1283               	bcf	3,5	;RP0=0, select bank0
  2966  1CEB  1303               	bcf	3,6	;RP1=0, select bank0
  2967  1CEC  0AA4               	incf	adcRead@loop_count,f
  2968  1CED  1903               	skipnz
  2969  1CEE  0AA5               	incf	adcRead@loop_count+1,f
  2970  1CEF  3000               	movlw	0
  2971  1CF0  0225               	subwf	adcRead@loop_count+1,w
  2972  1CF1  3097               	movlw	151
  2973  1CF2  1903               	skipnz
  2974  1CF3  0224               	subwf	adcRead@loop_count,w
  2975  1CF4  1C03               	skipc
  2976  1CF5  2CDF               	goto	l208
  2977                           
  2978                           ;tgs4161.c: 26: {
  2979                           ;tgs4161.c: 27: UARTWriteString((char *)"\nADC ERROR.\n");
  2980  1CF6  3045               	movlw	low (STR_2| (0+32768))
  2981  1CF7  00F3               	movwf	UARTWriteString@str
  2982  1CF8  3099               	movlw	high (STR_2| (0+32768))
  2983  1CF9  00F4               	movwf	UARTWriteString@str+1
  2984  1CFA  2512               	fcall	_UARTWriteString
  2985                           
  2986                           ;tgs4161.c: 28: return 0;
  2987  1CFB  01A0               	clrf	?_adcRead
  2988  1CFC  01A1               	clrf	?_adcRead+1
  2989  1CFD  0008               	return
  2990  1CFE                     l5749:	
  2991                           
  2992                           ;tgs4161.c: 29: }
  2993                           ;tgs4161.c: 30: }
  2994                           ;tgs4161.c: 32: tempL |= ADRESL;
  2995  1CFE  1683               	bsf	3,5	;RP0=1, select bank1
  2996  1CFF  081E               	movf	30,w	;volatile
  2997  1D00  1283               	bcf	3,5	;RP0=0, select bank0
  2998  1D01  04A6               	iorwf	adcRead@tempL,f
  2999                           
  3000                           ;tgs4161.c: 33: tempH |= ADRESH;
  3001  1D02  081E               	movf	30,w	;volatile
  3002  1D03  04A8               	iorwf	adcRead@tempH,f
  3003                           
  3004                           ;tgs4161.c: 35: temp = ((unsigned int)tempH <<8) + (unsigned int)tempL;
  3005  1D04  0828               	movf	adcRead@tempH,w
  3006  1D05  00AB               	movwf	adcRead@temp+1
  3007  1D06  01AA               	clrf	adcRead@temp
  3008  1D07  0826               	movf	adcRead@tempL,w
  3009  1D08  07AA               	addwf	adcRead@temp,f
  3010  1D09  1803               	skipnc
  3011  1D0A  0AAB               	incf	adcRead@temp+1,f
  3012  1D0B  0827               	movf	adcRead@tempL+1,w
  3013  1D0C  07AB               	addwf	adcRead@temp+1,f
  3014                           
  3015                           ;tgs4161.c: 37: return temp;
  3016  1D0D  082B               	movf	adcRead@temp+1,w
  3017  1D0E  00A1               	movwf	?_adcRead+1
  3018  1D0F  082A               	movf	adcRead@temp,w
  3019  1D10  00A0               	movwf	?_adcRead
  3020  1D11  0008               	return
  3021  1D12                     __end_of_adcRead:	
  3022  1D12                     __ptext15:	
  3023 ;; *************** function _UARTWriteString *****************
  3024 ;; Defined at:
  3025 ;;		line 46 in file "uart.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  str             2    3[COMMON] PTR unsigned char 
  3028 ;;		 -> STR_30(9), STR_29(10), STR_28(10), STR_2(13), 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  i               2    8[COMMON] int 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;		None               void
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 300/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3040 ;;      Params:         2       0       0       0       0
  3041 ;;      Locals:         2       0       0       0       0
  3042 ;;      Temps:          3       0       0       0       0
  3043 ;;      Totals:         7       0       0       0       0
  3044 ;;Total ram usage:        7 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    2
  3047 ;; This function calls:
  3048 ;;		_UARTWrite
  3049 ;; This function is called by:
  3050 ;;		_adcRead
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _UARTWriteString
  3057  1D12                     _UARTWriteString:	
  3058                           
  3059                           ;uart.c: 48: int i;
  3060                           ;uart.c: 49: for(i=0;str[i]!='\0';i++)
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _UARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3064  1D12  01F8               	clrf	UARTWriteString@i
  3065  1D13  01F9               	clrf	UARTWriteString@i+1
  3066  1D14                     l3919:	
  3067  1D14  2532               	fcall	PL10	;call to abstracted procedure
  3068  1D15  160A  158A  2000  160A  158A  	fcall	stringtab
  3069  1D1A  3A00               	xorlw	0
  3070  1D1B  1903               	btfsc	3,2
  3071  1D1C  0008               	return
  3072                           
  3073                           ;uart.c: 50: UARTWrite(str[i]);
  3074  1D1D  2532               	fcall	PL10	;call to abstracted procedure
  3075  1D1E  160A  158A  2000  160A  158A  	fcall	stringtab
  3076  1D23  252A  160A  158A   	fcall	_UARTWrite
  3077  1D26  0AF8               	incf	UARTWriteString@i,f
  3078  1D27  1903               	skipnz
  3079  1D28  0AF9               	incf	UARTWriteString@i+1,f
  3080  1D29  2D14               	goto	l3919
  3081  1D2A                     __end_of_UARTWriteString:	
  3082  1D2A                     __ptext16:	
  3083 ;; *************** function _UARTWrite *****************
  3084 ;; Defined at:
  3085 ;;		line 35 in file "uart.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  data            1    wreg     unsigned char 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  data            1    2[COMMON] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;		None               void
  3092 ;; Registers used:
  3093 ;;		wreg
  3094 ;; Tracked objects:
  3095 ;;		On entry : 300/0
  3096 ;;		On exit  : 300/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3099 ;;      Params:         0       0       0       0       0
  3100 ;;      Locals:         1       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0
  3102 ;;      Totals:         1       0       0       0       0
  3103 ;;Total ram usage:        1 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_UARTWriteString
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           
  3114                           ;psect for function _UARTWrite
  3115  1D2A                     _UARTWrite:	
  3116                           
  3117                           ;incstack = 0
  3118                           ; Regs used in _UARTWrite: [wreg]
  3119                           ;UARTWrite@data stored from wreg
  3120  1D2A  00F2               	movwf	UARTWrite@data
  3121  1D2B                     l509:	
  3122                           ;uart.c: 37: while(!TRMT);
  3123                           
  3124  1D2B  1683               	bsf	3,5	;RP0=1, select bank1
  3125  1D2C  1C98               	btfss	24,1	;volatile
  3126  1D2D  2D2B               	goto	l509
  3127                           
  3128                           ;uart.c: 38: TXREG = data;
  3129  1D2E  0872               	movf	UARTWrite@data,w
  3130  1D2F  1283               	bcf	3,5	;RP0=0, select bank0
  3131  1D30  0099               	movwf	25	;volatile
  3132  1D31  0008               	return
  3133  1D32                     __end_of_UARTWrite:	
  3134  1D32                     PL10:	
  3135  1D32  0878               	movf	UARTWriteString@i,w
  3136  1D33  0773               	addwf	UARTWriteString@str,w
  3137  1D34  00F6               	movwf	??_UARTWriteString+1
  3138  1D35  0874               	movf	UARTWriteString@str+1,w
  3139  1D36  00F5               	movwf	??_UARTWriteString
  3140  1D37  1803               	skipnc
  3141  1D38  0AF5               	incf	??_UARTWriteString,f
  3142  1D39  1BF8               	btfsc	UARTWriteString@i,7
  3143  1D3A  03F5               	decf	??_UARTWriteString,f
  3144  1D3B  0875               	movf	??_UARTWriteString,w
  3145  1D3C  00F7               	movwf	??_UARTWriteString+2
  3146  1D3D  1283               	bcf	3,5	;RP0=0, select bank0
  3147  1D3E  1303               	bcf	3,6	;RP1=0, select bank0
  3148  1D3F  00FF               	movwf	127
  3149  1D40  0876               	movf	??_UARTWriteString+1,w
  3150  1D41  0084               	movwf	4
  3151  1D42  0008               	return
  3152  1D43                     __end_ofPL10:	
  3153  1D43                     PL96:	
  3154  1D43  00F2               	movwf	___wmul@multiplier
  3155  1D44  083A               	movf	measureTGS4161@temp+1,w
  3156  1D45  00F5               	movwf	___wmul@multiplicand+1
  3157  1D46  0839               	movf	measureTGS4161@temp,w
  3158  1D47  00F4               	movwf	___wmul@multiplicand
  3159  1D48  0008               	return
  3160  1D49                     __end_ofPL96:	
  3161                           
  3162                           	psect	text17
  3163  082D                     __ptext17:	
  3164 ;; *************** function _initWDT *****************
  3165 ;; Defined at:
  3166 ;;		line 108 in file "main.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;		None               void
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0
  3175 ;; Tracked objects:
  3176 ;;		On entry : 300/0
  3177 ;;		On exit  : 300/200
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3180 ;;      Params:         0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    1
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_main
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _initWDT
  3196  082D                     _initWDT:	
  3197                           
  3198                           ;main.c: 110: WDTCONbits.SWDTEN = 1;
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _initWDT: [wreg+status,2+status,0]
  3202  082D  1703               	bsf	3,6	;RP1=1, select bank2
  3203  082E  1405               	bsf	5,0	;volatile
  3204                           
  3205                           ;main.c: 111: WDTCONbits.WDTPS = 0b0110;
  3206  082F  0805               	movf	5,w	;volatile
  3207  0830  39E1               	andlw	-31
  3208  0831  380C               	iorlw	12
  3209  0832  0085               	movwf	5	;volatile
  3210  0833  0008               	return
  3211  0834                     __end_of_initWDT:	
  3212                           
  3213                           	psect	text18
  3214  07F1                     __ptext18:	
  3215 ;; *************** function _initTimer1 *****************
  3216 ;; Defined at:
  3217 ;;		line 205 in file "main.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;		None               void
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0
  3226 ;; Tracked objects:
  3227 ;;		On entry : 300/100
  3228 ;;		On exit  : 300/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3231 ;;      Params:         0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0
  3234 ;;      Totals:         0       0       0       0       0
  3235 ;;Total ram usage:        0 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    1
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_main
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _initTimer1
  3247  07F1                     _initTimer1:	
  3248                           
  3249                           ;main.c: 207: T1CONbits.T1CKPS = 0b01;
  3250                           
  3251                           ;incstack = 0
  3252                           ; Regs used in _initTimer1: [wreg+status,2+status,0]
  3253  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  3254  07F2  0810               	movf	16,w	;volatile
  3255  07F3  39CF               	andlw	-49
  3256  07F4  3810               	iorlw	16
  3257  07F5  0090               	movwf	16	;volatile
  3258                           
  3259                           ;main.c: 208: TMR1H = 0xD8;
  3260  07F6  30D8               	movlw	216
  3261  07F7  008F               	movwf	15	;volatile
  3262                           
  3263                           ;main.c: 209: TMR1L = 0xEF;
  3264  07F8  30EF               	movlw	239
  3265  07F9  008E               	movwf	14	;volatile
  3266                           
  3267                           ;main.c: 210: PIE1bits.TMR1IE = 1;
  3268  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  3269  07FB  140C               	bsf	12,0	;volatile
  3270                           
  3271                           ;main.c: 211: INTCONbits.GIE = 1;
  3272  07FC  178B               	bsf	11,7	;volatile
  3273                           
  3274                           ;main.c: 212: T1CONbits.TMR1ON = 1;
  3275  07FD  1283               	bcf	3,5	;RP0=0, select bank0
  3276  07FE  1410               	bsf	16,0	;volatile
  3277  07FF  0008               	return
  3278  0800                     __end_of_initTimer1:	
  3279                           
  3280                           	psect	text19
  3281  083C                     __ptext19:	
  3282 ;; *************** function _initTimer0 *****************
  3283 ;; Defined at:
  3284 ;;		line 196 in file "main.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;		None
  3289 ;; Return value:  Size  Location     Type
  3290 ;;		None               void
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0
  3293 ;; Tracked objects:
  3294 ;;		On entry : 300/0
  3295 ;;		On exit  : 300/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3298 ;;      Params:         0       0       0       0       0
  3299 ;;      Locals:         0       0       0       0       0
  3300 ;;      Temps:          0       0       0       0       0
  3301 ;;      Totals:         0       0       0       0       0
  3302 ;;Total ram usage:        0 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    1
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_main
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           
  3313                           ;psect for function _initTimer0
  3314  083C                     _initTimer0:	
  3315                           
  3316                           ;main.c: 197: OPTION_REGbits.T0CS = 0;
  3317                           
  3318                           ;incstack = 0
  3319                           ; Regs used in _initTimer0: [wreg+status,2+status,0]
  3320  083C  1683               	bsf	3,5	;RP0=1, select bank1
  3321  083D  1281               	bcf	1,5	;volatile
  3322                           
  3323                           ;main.c: 198: OPTION_REGbits.PSA = 1;
  3324  083E  1581               	bsf	1,3	;volatile
  3325                           
  3326                           ;main.c: 199: OPTION_REG |= 0b00000111;
  3327  083F  3007               	movlw	7
  3328  0840  0481               	iorwf	1,f	;volatile
  3329                           
  3330                           ;main.c: 200: INTCONbits.GIE = 1;
  3331  0841  178B               	bsf	11,7	;volatile
  3332                           
  3333                           ;main.c: 201: TMR0 = 0;
  3334  0842  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0843  0181               	clrf	1	;volatile
  3336                           
  3337                           ;main.c: 202: INTCONbits.T0IE = 1;
  3338  0844  168B               	bsf	11,5	;volatile
  3339  0845  0008               	return
  3340  0846                     __end_of_initTimer0:	
  3341                           
  3342                           	psect	text20
  3343  0822                     __ptext20:	
  3344 ;; *************** function _initSHT71 *****************
  3345 ;; Defined at:
  3346 ;;		line 10 in file "sht71.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;		None               void
  3353 ;; Registers used:
  3354 ;;		None
  3355 ;; Tracked objects:
  3356 ;;		On entry : 300/0
  3357 ;;		On exit  : 300/100
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3360 ;;      Params:         0       0       0       0       0
  3361 ;;      Locals:         0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0
  3363 ;;      Totals:         0       0       0       0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    1
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_main
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           
  3375                           ;psect for function _initSHT71
  3376  0822                     _initSHT71:	
  3377                           
  3378                           ;sht71.c: 11: TRISBbits.TRISB7 = 0;
  3379                           
  3380                           ;incstack = 0
  3381                           ; Regs used in _initSHT71: []
  3382  0822  1683               	bsf	3,5	;RP0=1, select bank1
  3383  0823  1386               	bcf	6,7	;volatile
  3384                           
  3385                           ;sht71.c: 12: TRISBbits.TRISB7 = 0;
  3386  0824  1386               	bcf	6,7	;volatile
  3387  0825  0008               	return
  3388  0826                     __end_of_initSHT71:	
  3389                           
  3390                           	psect	text21
  3391  10AB                     __ptext21:	
  3392 ;; *************** function _getTempDS18B20 *****************
  3393 ;; Defined at:
  3394 ;;		line 69 in file "ds18b20.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  temperatura     3   52[BANK0 ] float 
  3399 ;;  temp            2   59[BANK0 ] unsigned int 
  3400 ;;  tempH           2   57[BANK0 ] unsigned short 
  3401 ;;  tempL           2   55[BANK0 ] unsigned short 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  3   46[BANK0 ] float 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, status,0, pclath, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 300/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3411 ;;      Params:         0       3       0       0       0
  3412 ;;      Locals:         0       9       0       0       0
  3413 ;;      Temps:          0       3       0       0       0
  3414 ;;      Totals:         0      15       0       0       0
  3415 ;;Total ram usage:       15 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    3
  3418 ;; This function calls:
  3419 ;;		___ftadd
  3420 ;;		___ftmul
  3421 ;;		___lwtoft
  3422 ;;		_readDS18B20
  3423 ;;		_resetDS18B20
  3424 ;;		_writeDS18B20
  3425 ;; This function is called by:
  3426 ;;		_main
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           
  3431                           ;psect for function _getTempDS18B20
  3432  10AB                     _getTempDS18B20:	
  3433                           
  3434                           ;ds18b20.c: 70: unsigned temp;
  3435                           ;ds18b20.c: 71: unsigned short tempL, tempH;
  3436                           ;ds18b20.c: 72: float temperatura;
  3437                           ;ds18b20.c: 73: if(!resetDS18B20())
  3438                           
  3439                           ;incstack = 0
  3440                           ; Regs used in _getTempDS18B20: [wreg+status,2+status,0+pclath+cstack]
  3441  10AB  216E  160A  118A   	fcall	_resetDS18B20
  3442  10AE  3A00               	xorlw	0
  3443  10AF  1D03               	skipz
  3444  10B0  290E               	goto	l5825
  3445                           
  3446                           ;ds18b20.c: 74: {
  3447                           ;ds18b20.c: 75: writeDS18B20(0xCC);
  3448  10B1  30CC               	movlw	204
  3449  10B2  2117  160A  118A   	fcall	_writeDS18B20
  3450                           
  3451                           ;ds18b20.c: 76: writeDS18B20(0x44);
  3452  10B5  3044               	movlw	68
  3453  10B6  2117  160A  118A   	fcall	_writeDS18B20
  3454                           
  3455                           ;ds18b20.c: 77: _delay((unsigned long)((750)*(8000000/4000.0)));
  3456  10B9  3008               	movlw	8
  3457  10BA  1283               	bcf	3,5	;RP0=0, select bank0
  3458  10BB  1303               	bcf	3,6	;RP1=0, select bank0
  3459  10BC  00D3               	movwf	??_getTempDS18B20+2
  3460  10BD  309D               	movlw	157
  3461  10BE  00D2               	movwf	??_getTempDS18B20+1
  3462  10BF  300B               	movlw	11
  3463  10C0  00D1               	movwf	??_getTempDS18B20
  3464  10C1                     u7087:	
  3465  10C1  0BD1               	decfsz	??_getTempDS18B20,f
  3466  10C2  28C1               	goto	u7087
  3467  10C3  0BD2               	decfsz	??_getTempDS18B20+1,f
  3468  10C4  28C1               	goto	u7087
  3469  10C5  0BD3               	decfsz	??_getTempDS18B20+2,f
  3470  10C6  28C1               	goto	u7087
  3471  10C7  28C8               	nop2
  3472                           
  3473                           ;ds18b20.c: 79: resetDS18B20();
  3474  10C8  216E  160A  118A   	fcall	_resetDS18B20
  3475                           
  3476                           ;ds18b20.c: 80: writeDS18B20(0xCC);
  3477  10CB  30CC               	movlw	204
  3478  10CC  2117  160A  118A   	fcall	_writeDS18B20
  3479                           
  3480                           ;ds18b20.c: 81: writeDS18B20(0xBE);
  3481  10CF  30BE               	movlw	190
  3482  10D0  2117  160A  118A   	fcall	_writeDS18B20
  3483                           
  3484                           ;ds18b20.c: 83: tempL = readDS18B20();
  3485  10D3  2147  160A  118A   	fcall	_readDS18B20
  3486  10D6  1283               	bcf	3,5	;RP0=0, select bank0
  3487  10D7  1303               	bcf	3,6	;RP1=0, select bank0
  3488  10D8  00D7               	movwf	getTempDS18B20@tempL
  3489  10D9  01D8               	clrf	getTempDS18B20@tempL+1
  3490                           
  3491                           ;ds18b20.c: 84: tempH = readDS18B20();
  3492  10DA  2147  160A  118A   	fcall	_readDS18B20
  3493  10DD  1283               	bcf	3,5	;RP0=0, select bank0
  3494  10DE  1303               	bcf	3,6	;RP1=0, select bank0
  3495  10DF  00D9               	movwf	getTempDS18B20@tempH
  3496  10E0  01DA               	clrf	getTempDS18B20@tempH+1
  3497                           
  3498                           ;ds18b20.c: 86: temp = ((unsigned int)tempH << 8) + (unsigned int)tempL;
  3499  10E1  00DC               	movwf	getTempDS18B20@temp+1
  3500  10E2  01DB               	clrf	getTempDS18B20@temp
  3501  10E3  0857               	movf	getTempDS18B20@tempL,w
  3502  10E4  07DB               	addwf	getTempDS18B20@temp,f
  3503  10E5  1803               	skipnc
  3504  10E6  0ADC               	incf	getTempDS18B20@temp+1,f
  3505  10E7  0858               	movf	getTempDS18B20@tempL+1,w
  3506  10E8  07DC               	addwf	getTempDS18B20@temp+1,f
  3507                           
  3508                           ;ds18b20.c: 87: temperatura = (float)temp * 0.0625 - 0.3;
  3509  10E9  309A               	movlw	154
  3510  10EA  00C2               	movwf	___ftadd@f1
  3511  10EB  3099               	movlw	153
  3512  10EC  00C3               	movwf	___ftadd@f1+1
  3513  10ED  30BE               	movlw	190
  3514  10EE  00C4               	movwf	___ftadd@f1+2
  3515  10EF  3080               	movlw	128
  3516  10F0  01A8               	clrf	___ftmul@f1
  3517  10F1  00A9               	movwf	___ftmul@f1+1
  3518  10F2  303D               	movlw	61
  3519  10F3  00AA               	movwf	___ftmul@f1+2
  3520  10F4  085C               	movf	getTempDS18B20@temp+1,w
  3521  10F5  00A1               	movwf	___lwtoft@c+1
  3522  10F6  085B               	movf	getTempDS18B20@temp,w
  3523  10F7  00A0               	movwf	___lwtoft@c
  3524  10F8  2247  160A  118A   	fcall	___lwtoft
  3525  10FB  0820               	movf	?___lwtoft,w
  3526  10FC  00AB               	movwf	___ftmul@f2
  3527  10FD  0821               	movf	?___lwtoft+1,w
  3528  10FE  00AC               	movwf	___ftmul@f2+1
  3529  10FF  0822               	movf	?___lwtoft+2,w
  3530  1100  00AD               	movwf	___ftmul@f2+2
  3531  1101  26AA  160A  118A   	fcall	___ftmul
  3532  1104  27C4               	fcall	PL60	;call to abstracted procedure
  3533  1105  120A  118A  25BB   	fcall	___ftadd
  3534  1108  0842               	movf	?___ftadd,w
  3535  1109  00D4               	movwf	getTempDS18B20@temperatura
  3536  110A  0843               	movf	?___ftadd+1,w
  3537  110B  00D5               	movwf	getTempDS18B20@temperatura+1
  3538  110C  0844               	movf	?___ftadd+2,w
  3539  110D  00D6               	movwf	getTempDS18B20@temperatura+2
  3540  110E                     l5825:	
  3541                           
  3542                           ;ds18b20.c: 88: }
  3543                           ;ds18b20.c: 89: return temperatura;
  3544  110E  1283               	bcf	3,5	;RP0=0, select bank0
  3545  110F  1303               	bcf	3,6	;RP1=0, select bank0
  3546  1110  0854               	movf	getTempDS18B20@temperatura,w
  3547  1111  00CE               	movwf	?_getTempDS18B20
  3548  1112  0855               	movf	getTempDS18B20@temperatura+1,w
  3549  1113  00CF               	movwf	?_getTempDS18B20+1
  3550  1114  0856               	movf	getTempDS18B20@temperatura+2,w
  3551  1115  00D0               	movwf	?_getTempDS18B20+2
  3552  1116  0008               	return
  3553  1117                     __end_of_getTempDS18B20:	
  3554  1117                     __ptext22:	
  3555 ;; *************** function _writeDS18B20 *****************
  3556 ;; Defined at:
  3557 ;;		line 25 in file "ds18b20.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  Cmd             1    wreg     unsigned char 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  Cmd             1    3[COMMON] unsigned char 
  3562 ;;  i               1    4[COMMON] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;		None               void
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3572 ;;      Params:         0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0
  3574 ;;      Temps:          1       0       0       0       0
  3575 ;;      Totals:         3       0       0       0       0
  3576 ;;Total ram usage:        3 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    1
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_getTempDS18B20
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _writeDS18B20
  3588  1117                     _writeDS18B20:	
  3589                           
  3590                           ;incstack = 0
  3591                           ; Regs used in _writeDS18B20: [wreg+status,2+status,0]
  3592                           ;writeDS18B20@Cmd stored from wreg
  3593  1117  00F3               	movwf	writeDS18B20@Cmd
  3594                           
  3595                           ;ds18b20.c: 26: char i;
  3596                           ;ds18b20.c: 27: TRISCbits.TRISC5 = 1;
  3597  1118  1683               	bsf	3,5	;RP0=1, select bank1
  3598  1119  1303               	bcf	3,6	;RP1=0, select bank1
  3599  111A  1687               	bsf	7,5	;volatile
  3600                           
  3601                           ;ds18b20.c: 28: for(i = 0; i < 8; i++)
  3602  111B  01F4               	clrf	writeDS18B20@i
  3603  111C                     l4217:	
  3604                           
  3605                           ;ds18b20.c: 29: {
  3606                           ;ds18b20.c: 30: if((Cmd & (1<<i))!= 0)
  3607  111C  3001               	movlw	1
  3608  111D  00F2               	movwf	??_writeDS18B20
  3609  111E  0A74               	incf	writeDS18B20@i,w
  3610  111F  2922               	goto	u4564
  3611  1120                     u4565:	
  3612  1120  1003               	clrc
  3613  1121  0DF2               	rlf	??_writeDS18B20,f
  3614  1122                     u4564:	
  3615  1122  3EFF               	addlw	-1
  3616  1123  1D03               	skipz
  3617  1124  2920               	goto	u4565
  3618  1125  0872               	movf	??_writeDS18B20,w
  3619  1126  0573               	andwf	writeDS18B20@Cmd,w
  3620  1127  1903               	btfsc	3,2
  3621  1128  2936               	goto	l20
  3622                           
  3623                           ;ds18b20.c: 31: {
  3624                           ;ds18b20.c: 32: TRISCbits.TRISC5 = 0;
  3625                           
  3626                           ;ds18b20.c: 33: RC5 = 0;
  3627  1129  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3628                           
  3629                           ;ds18b20.c: 34: _delay((unsigned long)((1)*(8000000/4000000.0)));
  3630  112C  292D               	nop2	;2 cycle nop
  3631                           
  3632                           ;ds18b20.c: 35: TRISCbits.TRISC5 = 1;
  3633  112D  1683               	bsf	3,5	;RP0=1, select bank1
  3634  112E  1303               	bcf	3,6	;RP1=0, select bank1
  3635  112F  1687               	bsf	7,5	;volatile
  3636                           
  3637                           ;ds18b20.c: 36: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3638  1130  3027               	movlw	39
  3639  1131  00F2               	movwf	??_writeDS18B20
  3640  1132                     u7097:	
  3641  1132  0BF2               	decfsz	??_writeDS18B20,f
  3642  1133  2932               	goto	u7097
  3643  1134  2935               	nop2	;nop
  3644                           
  3645                           ;ds18b20.c: 37: }
  3646  1135  2941               	goto	l4227
  3647  1136                     l20:	
  3648                           
  3649                           ;ds18b20.c: 38: else
  3650                           ;ds18b20.c: 39: {
  3651                           ;ds18b20.c: 41: TRISCbits.TRISC5 = 0;
  3652                           
  3653                           ;ds18b20.c: 42: RC5 = 0;
  3654  1136  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3655                           
  3656                           ;ds18b20.c: 43: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3657  1139  3027               	movlw	39
  3658  113A  00F2               	movwf	??_writeDS18B20
  3659  113B                     u7107:	
  3660  113B  0BF2               	decfsz	??_writeDS18B20,f
  3661  113C  293B               	goto	u7107
  3662  113D  293E               	nop2	;nop
  3663                           
  3664                           ;ds18b20.c: 44: TRISCbits.TRISC5 = 1;
  3665  113E  1683               	bsf	3,5	;RP0=1, select bank1
  3666  113F  1303               	bcf	3,6	;RP1=0, select bank1
  3667  1140  1687               	bsf	7,5	;volatile
  3668  1141                     l4227:	
  3669  1141  3008               	movlw	8
  3670  1142  0AF4               	incf	writeDS18B20@i,f
  3671  1143  0274               	subwf	writeDS18B20@i,w
  3672  1144  1803               	btfsc	3,0
  3673  1145  0008               	return
  3674  1146  291C               	goto	l4217
  3675  1147                     __end_of_writeDS18B20:	
  3676  1147                     __ptext24:	
  3677 ;; *************** function _readDS18B20 *****************
  3678 ;; Defined at:
  3679 ;;		line 50 in file "ds18b20.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  i               1    4[COMMON] unsigned char 
  3684 ;;  result          1    3[COMMON] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      unsigned char 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3694 ;;      Params:         0       0       0       0       0
  3695 ;;      Locals:         2       0       0       0       0
  3696 ;;      Temps:          1       0       0       0       0
  3697 ;;      Totals:         3       0       0       0       0
  3698 ;;Total ram usage:        3 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    1
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_getTempDS18B20
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _readDS18B20
  3710  1147                     _readDS18B20:	
  3711                           
  3712                           ;ds18b20.c: 51: char i,result = 0;
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _readDS18B20: [wreg+status,2+status,0]
  3716  1147  01F3               	clrf	readDS18B20@result
  3717                           
  3718                           ;ds18b20.c: 52: TRISCbits.TRISC5 = 1;
  3719  1148  1683               	bsf	3,5	;RP0=1, select bank1
  3720  1149  1303               	bcf	3,6	;RP1=0, select bank1
  3721  114A  1687               	bsf	7,5	;volatile
  3722                           
  3723                           ;ds18b20.c: 54: for(i = 0; i < 8; i++)
  3724  114B  01F4               	clrf	readDS18B20@i
  3725  114C                     l25:	
  3726                           
  3727                           ;ds18b20.c: 55: {
  3728                           ;ds18b20.c: 56: TRISCbits.TRISC5 = 0;
  3729                           
  3730                           ;ds18b20.c: 57: RC5 = 0;
  3731  114C  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3732                           
  3733                           ;ds18b20.c: 58: _delay((unsigned long)((2)*(8000000/4000000.0)));
  3734  114F  2950               	nop2	;2 cycle nop
  3735  1150  2951               	nop2	;2 cycle nop
  3736                           
  3737                           ;ds18b20.c: 59: TRISCbits.TRISC5 = 1;
  3738  1151  1683               	bsf	3,5	;RP0=1, select bank1
  3739  1152  1303               	bcf	3,6	;RP1=0, select bank1
  3740  1153  1687               	bsf	7,5	;volatile
  3741                           
  3742                           ;ds18b20.c: 61: if(RC5 != 0) result |= 1<<i;
  3743  1154  1283               	bcf	3,5	;RP0=0, select bank0
  3744  1155  1E87               	btfss	7,5	;volatile
  3745  1156  2962               	goto	l4241
  3746  1157  3001               	movlw	1
  3747  1158  00F2               	movwf	??_readDS18B20
  3748  1159  0A74               	incf	readDS18B20@i,w
  3749  115A  295D               	goto	u4604
  3750  115B                     u4605:	
  3751  115B  1003               	clrc
  3752  115C  0DF2               	rlf	??_readDS18B20,f
  3753  115D                     u4604:	
  3754  115D  3EFF               	addlw	-1
  3755  115E  1D03               	skipz
  3756  115F  295B               	goto	u4605
  3757  1160  0872               	movf	??_readDS18B20,w
  3758  1161  04F3               	iorwf	readDS18B20@result,f
  3759  1162                     l4241:	
  3760                           
  3761                           ;ds18b20.c: 63: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3762  1162  3027               	movlw	39
  3763  1163  00F2               	movwf	??_readDS18B20
  3764  1164                     u7157:	
  3765  1164  0BF2               	decfsz	??_readDS18B20,f
  3766  1165  2964               	goto	u7157
  3767  1166  2967               	nop2	;nop
  3768  1167  3008               	movlw	8
  3769  1168  0AF4               	incf	readDS18B20@i,f
  3770  1169  0274               	subwf	readDS18B20@i,w
  3771  116A  1C03               	skipc
  3772  116B  294C               	goto	l25
  3773                           
  3774                           ;ds18b20.c: 64: }
  3775                           ;ds18b20.c: 65: return result;
  3776  116C  0873               	movf	readDS18B20@result,w
  3777  116D  0008               	return
  3778  116E                     __end_of_readDS18B20:	
  3779  116E                     __ptext23:	
  3780 ;; *************** function _resetDS18B20 *****************
  3781 ;; Defined at:
  3782 ;;		line 6 in file "ds18b20.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      unsigned char 
  3789 ;; Registers used:
  3790 ;;		wreg
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/100
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3796 ;;      Params:         0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0
  3798 ;;      Temps:          1       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    1
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_getTempDS18B20
  3807 ;;		_main
  3808 ;; This function uses a non-reentrant model
  3809 ;;
  3810                           
  3811                           
  3812                           ;psect for function _resetDS18B20
  3813  116E                     _resetDS18B20:	
  3814                           
  3815                           ;ds18b20.c: 7: TRISCbits.TRISC5 = 0;
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _resetDS18B20: [wreg]
  3819                           
  3820                           ;ds18b20.c: 8: RC5 = 0;
  3821  116E  27F3  160A  118A   	fcall	PL86	;call to abstracted procedure
  3822                           
  3823                           ;ds18b20.c: 9: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3824  1171  3089               	movlw	137
  3825  1172  00F2               	movwf	??_resetDS18B20
  3826  1173                     u7117:	
  3827  1173  2974               	nop2
  3828  1174  2975               	nop2
  3829  1175  0BF2               	decfsz	??_resetDS18B20,f
  3830  1176  2973               	goto	u7117
  3831                           
  3832                           ;ds18b20.c: 10: TRISCbits.TRISC5 = 1;
  3833  1177  1683               	bsf	3,5	;RP0=1, select bank1
  3834  1178  1303               	bcf	3,6	;RP1=0, select bank1
  3835  1179  1687               	bsf	7,5	;volatile
  3836                           
  3837                           ;ds18b20.c: 11: _delay((unsigned long)((60)*(8000000/4000000.0)));
  3838  117A  3027               	movlw	39
  3839  117B  00F2               	movwf	??_resetDS18B20
  3840  117C                     u7127:	
  3841  117C  0BF2               	decfsz	??_resetDS18B20,f
  3842  117D  297C               	goto	u7127
  3843  117E  297F               	nop2	;nop
  3844                           
  3845                           ;ds18b20.c: 13: if (RC5 == 0)
  3846  117F  1283               	bcf	3,5	;RP0=0, select bank0
  3847  1180  1303               	bcf	3,6	;RP1=0, select bank0
  3848  1181  1A87               	btfsc	7,5	;volatile
  3849  1182  298A               	goto	l4205
  3850                           
  3851                           ;ds18b20.c: 14: {
  3852                           ;ds18b20.c: 15: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3853  1183  3089               	movlw	137
  3854  1184  00F2               	movwf	??_resetDS18B20
  3855  1185                     u7137:	
  3856  1185  2986               	nop2
  3857  1186  2987               	nop2
  3858  1187  0BF2               	decfsz	??_resetDS18B20,f
  3859  1188  2985               	goto	u7137
  3860                           
  3861                           ;ds18b20.c: 16: return 0;
  3862  1189  3400               	retlw	0
  3863  118A                     l4205:	
  3864                           
  3865                           ;ds18b20.c: 18: else
  3866                           ;ds18b20.c: 19: {
  3867                           ;ds18b20.c: 20: _delay((unsigned long)((480)*(8000000/4000000.0)));
  3868  118A  3089               	movlw	137
  3869  118B  00F2               	movwf	??_resetDS18B20
  3870  118C                     u7147:	
  3871  118C  298D               	nop2
  3872  118D  298E               	nop2
  3873  118E  0BF2               	decfsz	??_resetDS18B20,f
  3874  118F  298C               	goto	u7147
  3875                           
  3876                           ;ds18b20.c: 21: return 1;
  3877  1190  3401               	retlw	1
  3878  1191                     __end_of_resetDS18B20:	
  3879  1191                     __ptext26:	
  3880 ;; *************** function _readStatusRegSHT71 *****************
  3881 ;; Defined at:
  3882 ;;		line 216 in file "sht71.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  p_value         1    wreg     PTR unsigned char 
  3885 ;;		 -> getResSHT71@inp(1), 
  3886 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  3887 ;;		 -> getResSHT71@checksum(1), 
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  p_value         1    7[COMMON] PTR unsigned char 
  3890 ;;		 -> getResSHT71@inp(1), 
  3891 ;;  error           1    8[COMMON] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      unsigned char 
  3894 ;; Registers used:
  3895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : B00/100
  3898 ;;		On exit  : B00/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3901 ;;      Params:         1       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0
  3904 ;;      Totals:         3       0       0       0       0
  3905 ;;Total ram usage:        3 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    2
  3908 ;; This function calls:
  3909 ;;		_readByteSHT71
  3910 ;;		_tranStartSHT71
  3911 ;;		_writeByteSHT71
  3912 ;; This function is called by:
  3913 ;;		_getResSHT71
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           
  3918                           ;psect for function _readStatusRegSHT71
  3919  1191                     _readStatusRegSHT71:	
  3920                           
  3921                           ;incstack = 0
  3922                           ; Regs used in _readStatusRegSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3923                           ;readStatusRegSHT71@p_value stored from wreg
  3924  1191  00F7               	movwf	readStatusRegSHT71@p_value
  3925                           
  3926                           ;sht71.c: 219: tranStartSHT71();
  3927  1192  2309  160A  118A   	fcall	_tranStartSHT71
  3928                           
  3929                           ;sht71.c: 220: error = writeByteSHT71(0x07);
  3930  1195  3007               	movlw	7
  3931  1196  2333  160A  118A   	fcall	_writeByteSHT71
  3932  1199  00F8               	movwf	readStatusRegSHT71@error
  3933                           
  3934                           ;sht71.c: 221: *p_value = readByteSHT71(1);
  3935  119A  0877               	movf	readStatusRegSHT71@p_value,w
  3936  119B  0084               	movwf	4
  3937  119C  3001               	movlw	1
  3938  119D  22D9  160A  118A   	fcall	_readByteSHT71
  3939  11A0  1383               	bcf	3,7	;select IRP bank0
  3940  11A1  0080               	movwf	0
  3941                           
  3942                           ;sht71.c: 222: *p_checksum = readByteSHT71(0);
  3943  11A2  0876               	movf	readStatusRegSHT71@p_checksum,w
  3944  11A3  0084               	movwf	4
  3945  11A4  3000               	movlw	0
  3946  11A5  22D9               	fcall	_readByteSHT71
  3947  11A6  1383               	bcf	3,7	;select IRP bank0
  3948  11A7  0080               	movwf	0
  3949                           
  3950                           ;sht71.c: 223: return error;
  3951  11A8  0878               	movf	readStatusRegSHT71@error,w
  3952  11A9  0008               	return
  3953  11AA                     __end_of_readStatusRegSHT71:	
  3954  11AA                     __ptext25:	
  3955 ;; *************** function _getResSHT71 *****************
  3956 ;; Defined at:
  3957 ;;		line 226 in file "sht71.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  p_temp          1    wreg     PTR float 
  3960 ;;		 -> temp(3), 
  3961 ;;  p_humi          1   77[BANK0 ] PTR float 
  3962 ;;		 -> humi(3), 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;  p_temp          1    4[BANK1 ] PTR float 
  3965 ;;		 -> temp(3), 
  3966 ;;  temp_val        3   10[BANK1 ] struct .
  3967 ;;  humi_val        3    6[BANK1 ] struct .
  3968 ;;  checksum        1    9[BANK1 ] unsigned char 
  3969 ;;  error           1    5[BANK1 ] unsigned char 
  3970 ;;  inp             1    3[BANK1 ] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;		None               void
  3973 ;; Registers used:
  3974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 300/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3980 ;;      Params:         0       1       0       0       0
  3981 ;;      Locals:         0       0      10       0       0
  3982 ;;      Temps:          0       0       3       0       0
  3983 ;;      Totals:         0       1      13       0       0
  3984 ;;Total ram usage:       14 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		_LcdSetCursor
  3989 ;;		_LcdWriteString
  3990 ;;		___lwtoft
  3991 ;;		_calcSHT71
  3992 ;;		_connectionResetSHT71
  3993 ;;		_measureSHT71
  3994 ;;		_readStatusRegSHT71
  3995 ;; This function is called by:
  3996 ;;		_main
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           
  4001                           ;psect for function _getResSHT71
  4002  11AA                     _getResSHT71:	
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _getResSHT71: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4006                           ;getResSHT71@p_temp stored from wreg
  4007  11AA  1683               	bsf	3,5	;RP0=1, select bank1
  4008  11AB  00C8               	movwf	getResSHT71@p_temp^(0+128)
  4009  11AC  30CD               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4010                           
  4011                           ;sht71.c: 227: value humi_val,temp_val;
  4012                           ;sht71.c: 228: unsigned char error, checksum;
  4013                           ;sht71.c: 229: char inp;
  4014                           ;sht71.c: 231: error=0;
  4015  11AD  01C9               	clrf	getResSHT71@error^(0+128)
  4016                           
  4017                           ;sht71.c: 232: error += measureSHT71((unsigned char*) (&humi_val.i),&checksum,3);
  4018  11AE  00F6               	movwf	measureSHT71@p_checksum
  4019  11AF  3003               	movlw	3
  4020  11B0  00F7               	movwf	measureSHT71@mode
  4021  11B1  30CA               	movlw	(low (getResSHT71@humi_val| 0))& (0+255)
  4022  11B2  2257  160A  118A   	fcall	_measureSHT71
  4023  11B5  1683               	bsf	3,5	;RP0=1, select bank1
  4024  11B6  07C9               	addwf	getResSHT71@error^(0+128),f
  4025                           
  4026                           ;sht71.c: 233: error += measureSHT71((unsigned char*) (&temp_val.i),&checksum,2);
  4027  11B7  30CD               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4028  11B8  00F6               	movwf	measureSHT71@p_checksum
  4029  11B9  3002               	movlw	2
  4030  11BA  00F7               	movwf	measureSHT71@mode
  4031  11BB  30CE               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  4032  11BC  2257  160A  118A   	fcall	_measureSHT71
  4033  11BF  1683               	bsf	3,5	;RP0=1, select bank1
  4034  11C0  07C9               	addwf	getResSHT71@error^(0+128),f
  4035                           
  4036                           ;sht71.c: 234: error += readStatusRegSHT71(&inp, &checksum);
  4037  11C1  30CD               	movlw	(low (getResSHT71@checksum| 0))& (0+255)
  4038  11C2  00F6               	movwf	readStatusRegSHT71@p_checksum
  4039  11C3  30C7               	movlw	(low (getResSHT71@inp| 0))& (0+255)
  4040  11C4  2191  160A  118A   	fcall	_readStatusRegSHT71
  4041  11C7  1683               	bsf	3,5	;RP0=1, select bank1
  4042  11C8  07C9               	addwf	getResSHT71@error^(0+128),f
  4043                           
  4044                           ;sht71.c: 235: if(error != 0)
  4045  11C9  0849               	movf	getResSHT71@error^(0+128),w
  4046  11CA  1903               	btfsc	3,2
  4047  11CB  29ED               	goto	l5879
  4048                           
  4049                           ;sht71.c: 236: {
  4050                           ;sht71.c: 237: connectionResetSHT71();
  4051  11CC  2363               	fcall	_connectionResetSHT71
  4052  11CD  3001               	movlw	1
  4053                           
  4054                           ;sht71.c: 238: LcdSetCursor(1,1);
  4055  11CE  01F6               	clrf	LcdSetCursor@b
  4056  11CF  0AF6               	incf	LcdSetCursor@b,f
  4057  11D0  120A  158A  2685  160A  118A  	fcall	_LcdSetCursor
  4058                           
  4059                           ;sht71.c: 239: LcdWriteString((char *)"Greska SHT71!");
  4060  11D5  3010               	movlw	low (STR_1| (0+32768))
  4061  11D6  00F7               	movwf	LcdWriteString@a
  4062  11D7  3099               	movlw	high (STR_1| (0+32768))
  4063  11D8  00F8               	movwf	LcdWriteString@a+1
  4064  11D9  120A  158A  26AE  160A  118A  	fcall	_LcdWriteString
  4065                           
  4066                           ;sht71.c: 240: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4067  11DE  300B               	movlw	11
  4068  11DF  1683               	bsf	3,5	;RP0=1, select bank1
  4069  11E0  00C6               	movwf	(??_getResSHT71^(0+128)+2)
  4070  11E1  3026               	movlw	38
  4071  11E2  00C5               	movwf	(??_getResSHT71^(0+128)+1)
  4072  11E3  3066               	movlw	102
  4073  11E4  00C4               	movwf	??_getResSHT71^(0+128)
  4074  11E5                     u7167:	
  4075  11E5  0BC4               	decfsz	??_getResSHT71^(0+128),f
  4076  11E6  29E5               	goto	u7167
  4077  11E7  0BC5               	decfsz	(??_getResSHT71^(0+128)+1),f
  4078  11E8  29E5               	goto	u7167
  4079  11E9  0BC6               	decfsz	(??_getResSHT71^(0+128)+2),f
  4080  11EA  29E5               	goto	u7167
  4081  11EB  29EC               	nop2
  4082                           
  4083                           ;sht71.c: 241: }
  4084  11EC  0008               	return
  4085  11ED                     l5879:	
  4086                           
  4087                           ;sht71.c: 242: else
  4088                           ;sht71.c: 243: {
  4089                           ;sht71.c: 244: humi_val.f = (float)tempervalue[1];
  4090  11ED  0823               	movf	((_tempervalue+1)^(0+128)+2),w
  4091  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  4092  11EF  00A1               	movwf	___lwtoft@c+1
  4093  11F0  1683               	bsf	3,5	;RP0=1, select bank1
  4094  11F1  0822               	movf	(_tempervalue^(0+128)+2),w
  4095  11F2  1283               	bcf	3,5	;RP0=0, select bank0
  4096  11F3  00A0               	movwf	___lwtoft@c
  4097  11F4  2247  160A  118A   	fcall	___lwtoft
  4098  11F7  0820               	movf	?___lwtoft,w
  4099  11F8  1683               	bsf	3,5	;RP0=1, select bank1
  4100  11F9  00CA               	movwf	getResSHT71@humi_val^(0+128)
  4101  11FA  1283               	bcf	3,5	;RP0=0, select bank0
  4102  11FB  0821               	movf	?___lwtoft+1,w
  4103  11FC  1683               	bsf	3,5	;RP0=1, select bank1
  4104  11FD  00CB               	movwf	(getResSHT71@humi_val+1)^(0+128)
  4105  11FE  1283               	bcf	3,5	;RP0=0, select bank0
  4106  11FF  0822               	movf	?___lwtoft+2,w
  4107  1200  1683               	bsf	3,5	;RP0=1, select bank1
  4108  1201  00CC               	movwf	(getResSHT71@humi_val+2)^(0+128)
  4109                           
  4110                           ;sht71.c: 245: temp_val.f = (float)tempervalue[0];
  4111  1202  0821               	movf	(_tempervalue+1)^(0+128),w
  4112  1203  1283               	bcf	3,5	;RP0=0, select bank0
  4113  1204  00A1               	movwf	___lwtoft@c+1
  4114  1205  1683               	bsf	3,5	;RP0=1, select bank1
  4115  1206  0820               	movf	_tempervalue^(0+128),w
  4116  1207  1283               	bcf	3,5	;RP0=0, select bank0
  4117  1208  00A0               	movwf	___lwtoft@c
  4118  1209  2247  160A  118A   	fcall	___lwtoft
  4119  120C  0820               	movf	?___lwtoft,w
  4120  120D  1683               	bsf	3,5	;RP0=1, select bank1
  4121  120E  00CE               	movwf	getResSHT71@temp_val^(0+128)
  4122  120F  1283               	bcf	3,5	;RP0=0, select bank0
  4123  1210  0821               	movf	?___lwtoft+1,w
  4124  1211  1683               	bsf	3,5	;RP0=1, select bank1
  4125  1212  00CF               	movwf	(getResSHT71@temp_val+1)^(0+128)
  4126  1213  1283               	bcf	3,5	;RP0=0, select bank0
  4127  1214  0822               	movf	?___lwtoft+2,w
  4128  1215  1683               	bsf	3,5	;RP0=1, select bank1
  4129  1216  00D0               	movwf	(getResSHT71@temp_val+2)^(0+128)
  4130                           
  4131                           ;sht71.c: 246: humi_val.f = calcSHT71(humi_val.f,&temp_val.f);
  4132  1217  084A               	movf	getResSHT71@humi_val^(0+128),w
  4133  1218  1283               	bcf	3,5	;RP0=0, select bank0
  4134  1219  00D4               	movwf	calcSHT71@p_humidity
  4135  121A  1683               	bsf	3,5	;RP0=1, select bank1
  4136  121B  084B               	movf	(getResSHT71@humi_val+1)^(0+128),w
  4137  121C  1283               	bcf	3,5	;RP0=0, select bank0
  4138  121D  00D5               	movwf	calcSHT71@p_humidity+1
  4139  121E  1683               	bsf	3,5	;RP0=1, select bank1
  4140  121F  084C               	movf	(getResSHT71@humi_val+2)^(0+128),w
  4141  1220  1283               	bcf	3,5	;RP0=0, select bank0
  4142  1221  00D6               	movwf	calcSHT71@p_humidity+2
  4143  1222  30CE               	movlw	(low (getResSHT71@temp_val| 0))& (0+255)
  4144  1223  00D7               	movwf	calcSHT71@p_temperature
  4145  1224  237A               	fcall	_calcSHT71
  4146  1225  0854               	movf	?_calcSHT71,w
  4147  1226  1683               	bsf	3,5	;RP0=1, select bank1
  4148  1227  00CA               	movwf	getResSHT71@humi_val^(0+128)
  4149  1228  1283               	bcf	3,5	;RP0=0, select bank0
  4150  1229  0855               	movf	?_calcSHT71+1,w
  4151  122A  1683               	bsf	3,5	;RP0=1, select bank1
  4152  122B  00CB               	movwf	(getResSHT71@humi_val+1)^(0+128)
  4153  122C  1283               	bcf	3,5	;RP0=0, select bank0
  4154  122D  0856               	movf	?_calcSHT71+2,w
  4155  122E  1683               	bsf	3,5	;RP0=1, select bank1
  4156  122F  00CC               	movwf	(getResSHT71@humi_val+2)^(0+128)
  4157                           
  4158                           ;sht71.c: 247: *p_temp = temp_val.f;
  4159  1230  0848               	movf	getResSHT71@p_temp^(0+128),w
  4160  1231  0084               	movwf	4
  4161  1232  084E               	movf	getResSHT71@temp_val^(0+128),w
  4162  1233  0080               	movwf	0
  4163  1234  0A84               	incf	4,f
  4164  1235  084F               	movf	(getResSHT71@temp_val+1)^(0+128),w
  4165  1236  0080               	movwf	0
  4166  1237  0A84               	incf	4,f
  4167  1238  0850               	movf	(getResSHT71@temp_val+2)^(0+128),w
  4168  1239  0080               	movwf	0
  4169                           
  4170                           ;sht71.c: 248: *p_humi = humi_val.f;
  4171  123A  1283               	bcf	3,5	;RP0=0, select bank0
  4172  123B  086D               	movf	getResSHT71@p_humi,w
  4173  123C  0084               	movwf	4
  4174  123D  1683               	bsf	3,5	;RP0=1, select bank1
  4175  123E  084A               	movf	getResSHT71@humi_val^(0+128),w
  4176  123F  0080               	movwf	0
  4177  1240  0A84               	incf	4,f
  4178  1241  084B               	movf	(getResSHT71@humi_val+1)^(0+128),w
  4179  1242  0080               	movwf	0
  4180  1243  0A84               	incf	4,f
  4181  1244  084C               	movf	(getResSHT71@humi_val+2)^(0+128),w
  4182  1245  0080               	movwf	0
  4183  1246  0008               	return
  4184  1247                     __end_of_getResSHT71:	
  4185  1247                     __ptext33:	
  4186 ;; *************** function ___lwtoft *****************
  4187 ;; Defined at:
  4188 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  c               2    0[BANK0 ] unsigned int 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  3    0[BANK0 ] float 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, pclath, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 300/0
  4199 ;;		On exit  : 300/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4202 ;;      Params:         0       3       0       0       0
  4203 ;;      Locals:         0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0
  4205 ;;      Totals:         0       3       0       0       0
  4206 ;;Total ram usage:        3 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    2
  4209 ;; This function calls:
  4210 ;;		___ftpack
  4211 ;; This function is called by:
  4212 ;;		_getTempDS18B20
  4213 ;;		_getResSHT71
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function ___lwtoft
  4219  1247                     ___lwtoft:	
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4223  1247  0820               	movf	___lwtoft@c,w
  4224  1248  00F2               	movwf	___ftpack@arg
  4225  1249  0821               	movf	___lwtoft@c+1,w
  4226  124A  00F3               	movwf	___ftpack@arg+1
  4227  124B  308E               	movlw	142
  4228  124C  01F4               	clrf	___ftpack@arg+2
  4229  124D  00F5               	movwf	___ftpack@exp
  4230  124E  01F6               	clrf	___ftpack@sign
  4231  124F  2725               	fcall	___ftpack
  4232  1250  0872               	movf	?___ftpack,w
  4233  1251  00A0               	movwf	?___lwtoft
  4234  1252  0873               	movf	?___ftpack+1,w
  4235  1253  00A1               	movwf	?___lwtoft+1
  4236  1254  0874               	movf	?___ftpack+2,w
  4237  1255  00A2               	movwf	?___lwtoft+2
  4238  1256  0008               	return
  4239  1257                     __end_of___lwtoft:	
  4240  1257                     __ptext27:	
  4241 ;; *************** function _measureSHT71 *****************
  4242 ;; Defined at:
  4243 ;;		line 91 in file "sht71.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  p_value         1    wreg     PTR unsigned char 
  4246 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  4247 ;;  p_checksum      1    6[COMMON] PTR unsigned char 
  4248 ;;		 -> getResSHT71@checksum(1), 
  4249 ;;  mode            1    7[COMMON] unsigned char 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  p_value         1    0[BANK0 ] PTR unsigned char 
  4252 ;;		 -> getResSHT71@temp_val(3), getResSHT71@humi_val(3), 
  4253 ;;  temp            2    4[BANK0 ] unsigned int 
  4254 ;;  error           2    2[BANK0 ] unsigned int 
  4255 ;;  loop_cnt        1    1[BANK0 ] unsigned char 
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      unsigned char 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 300/100
  4262 ;;		On exit  : B00/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4265 ;;      Params:         2       0       0       0       0
  4266 ;;      Locals:         0       6       0       0       0
  4267 ;;      Temps:          2       0       0       0       0
  4268 ;;      Totals:         4       6       0       0       0
  4269 ;;Total ram usage:       10 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    2
  4272 ;; This function calls:
  4273 ;;		_readByteSHT71
  4274 ;;		_tranStartSHT71
  4275 ;;		_writeByteSHT71
  4276 ;; This function is called by:
  4277 ;;		_getResSHT71
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           
  4282                           ;psect for function _measureSHT71
  4283  1257                     _measureSHT71:	
  4284                           
  4285                           ;sht71.c: 92: unsigned error = 0;
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _measureSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4289  1257  1283               	bcf	3,5	;RP0=0, select bank0
  4290  1258  01A2               	clrf	measureSHT71@error
  4291  1259  01A3               	clrf	measureSHT71@error+1
  4292                           
  4293                           ;sht71.c: 94: unsigned char loop_cnt=0;
  4294  125A  01A1               	clrf	measureSHT71@loop_cnt
  4295                           
  4296                           ;sht71.c: 96: tranStartSHT71();
  4297  125B  2309  160A  118A   	fcall	_tranStartSHT71
  4298                           
  4299                           ;sht71.c: 97: switch(mode){
  4300  125E  2A69               	goto	l4259
  4301  125F                     l4253:	
  4302  125F  3003               	movlw	3
  4303  1260  2A62               	goto	L3
  4304  1261                     l4255:	
  4305  1261  3005               	movlw	5
  4306  1262                     L3:	
  4307  1262  2333  160A  118A   	fcall	_writeByteSHT71
  4308  1265  07A2               	addwf	measureSHT71@error,f
  4309  1266  1803               	skipnc
  4310  1267  0AA3               	incf	measureSHT71@error+1,f
  4311  1268  2A71               	goto	l131
  4312  1269                     l4259:	
  4313  1269  0877               	movf	measureSHT71@mode,w
  4314                           
  4315                           ; Switch size 1, requested type "space"
  4316                           ; Number of cases is 2, Range of values is 2 to 3
  4317                           ; switch strategies available:
  4318                           ; Name         Instructions Cycles
  4319                           ; simple_byte            7     4 (average)
  4320                           ; direct_byte           17    11 (fixed)
  4321                           ; jumptable            263     9 (fixed)
  4322                           ;	Chosen strategy is simple_byte
  4323  126A  3A02               	xorlw	2	; case 2
  4324  126B  1903               	skipnz
  4325  126C  2A5F               	goto	l4253
  4326  126D  3A01               	xorlw	1	; case 3
  4327  126E  1903               	skipnz
  4328  126F  2A61               	goto	l4255
  4329  1270  2A71               	goto	l131
  4330  1271                     l131:	
  4331                           
  4332                           ;sht71.c: 102: TRISBbits.TRISB7 = 1;
  4333  1271  1683               	bsf	3,5	;RP0=1, select bank1
  4334  1272  1303               	bcf	3,6	;RP1=0, select bank1
  4335  1273  1786               	bsf	6,7	;volatile
  4336  1274  2A83               	goto	l134
  4337  1275                     l4261:	
  4338  1275  30C9               	movlw	201
  4339  1276  0AA1               	incf	measureSHT71@loop_cnt,f
  4340  1277  0221               	subwf	measureSHT71@loop_cnt,w
  4341  1278  1803               	btfsc	3,0
  4342  1279  2A87               	goto	l138
  4343                           
  4344                           ;sht71.c: 106: _delay((unsigned long)((10)*(8000000/4000.0)));
  4345  127A  301A               	movlw	26
  4346  127B  00F9               	movwf	??_measureSHT71+1
  4347  127C  30F8               	movlw	248
  4348  127D  00F8               	movwf	??_measureSHT71
  4349  127E                     u7177:	
  4350  127E  0BF8               	decfsz	??_measureSHT71,f
  4351  127F  2A7E               	goto	u7177
  4352  1280  0BF9               	decfsz	??_measureSHT71+1,f
  4353  1281  2A7E               	goto	u7177
  4354  1282  0000               	nop
  4355  1283                     l134:	
  4356                           ;sht71.c: 103: while (1)
  4357                           
  4358                           
  4359                           ;sht71.c: 104: {
  4360                           ;sht71.c: 105: if((RB7 == 0) || (++loop_cnt > 200)) break;
  4361  1283  1283               	bcf	3,5	;RP0=0, select bank0
  4362  1284  1303               	bcf	3,6	;RP1=0, select bank0
  4363  1285  1B86               	btfsc	6,7	;volatile
  4364  1286  2A75               	goto	l4261
  4365  1287                     l138:	
  4366                           
  4367                           ;sht71.c: 107: }
  4368                           ;sht71.c: 108: if(RB7) error += 1;
  4369  1287  1F86               	btfss	6,7	;volatile
  4370  1288  2AC9               	goto	l4293
  4371  1289  0AA2               	incf	measureSHT71@error,f
  4372  128A  1903               	skipnz
  4373  128B  0AA3               	incf	measureSHT71@error+1,f
  4374  128C  2AC9               	goto	l4293
  4375  128D                     l4267:	
  4376                           
  4377                           ;sht71.c: 111: temp = readByteSHT71(1);
  4378  128D  3001               	movlw	1
  4379  128E  22D9  160A  118A   	fcall	_readByteSHT71
  4380  1291  00A4               	movwf	measureSHT71@temp
  4381  1292  01A5               	clrf	measureSHT71@temp+1
  4382                           
  4383                           ;sht71.c: 112: temp <<= 8;
  4384  1293  00A5               	movwf	measureSHT71@temp+1
  4385  1294  01A4               	clrf	measureSHT71@temp
  4386                           
  4387                           ;sht71.c: 113: tempervalue[0] = temp;
  4388  1295  1683               	bsf	3,5	;RP0=1, select bank1
  4389  1296  00A1               	movwf	(_tempervalue+1)^(0+128)
  4390  1297  1283               	bcf	3,5	;RP0=0, select bank0
  4391  1298  0824               	movf	measureSHT71@temp,w
  4392  1299  1683               	bsf	3,5	;RP0=1, select bank1
  4393  129A  00A0               	movwf	_tempervalue^(0+128)
  4394                           
  4395                           ;sht71.c: 114: temp = 0;
  4396  129B  1283               	bcf	3,5	;RP0=0, select bank0
  4397  129C  3001               	movlw	1
  4398  129D  01A4               	clrf	measureSHT71@temp
  4399  129E  01A5               	clrf	measureSHT71@temp+1
  4400                           
  4401                           ;sht71.c: 115: temp = readByteSHT71(1);
  4402  129F  22D9  160A  118A   	fcall	_readByteSHT71
  4403  12A2  00A4               	movwf	measureSHT71@temp
  4404  12A3  01A5               	clrf	measureSHT71@temp+1
  4405                           
  4406                           ;sht71.c: 116: tempervalue[0] |= temp;
  4407  12A4  1683               	bsf	3,5	;RP0=1, select bank1
  4408  12A5  04A0               	iorwf	_tempervalue^(0+128),f
  4409  12A6  1283               	bcf	3,5	;RP0=0, select bank0
  4410  12A7  0825               	movf	measureSHT71@temp+1,w
  4411  12A8  1683               	bsf	3,5	;RP0=1, select bank1
  4412  12A9  04A1               	iorwf	(_tempervalue+1)^(0+128),f
  4413                           
  4414                           ;sht71.c: 117: break;
  4415  12AA  2AD1               	goto	l4295
  4416  12AB                     l4279:	
  4417                           
  4418                           ;sht71.c: 119: temp = readByteSHT71(1);
  4419  12AB  3001               	movlw	1
  4420  12AC  22D9  160A  118A   	fcall	_readByteSHT71
  4421  12AF  00A4               	movwf	measureSHT71@temp
  4422  12B0  01A5               	clrf	measureSHT71@temp+1
  4423                           
  4424                           ;sht71.c: 120: temp <<= 8;
  4425  12B1  00A5               	movwf	measureSHT71@temp+1
  4426  12B2  01A4               	clrf	measureSHT71@temp
  4427                           
  4428                           ;sht71.c: 121: tempervalue[1] = temp;
  4429  12B3  1683               	bsf	3,5	;RP0=1, select bank1
  4430  12B4  00A3               	movwf	((_tempervalue+1)^(0+128)+2)
  4431  12B5  1283               	bcf	3,5	;RP0=0, select bank0
  4432  12B6  0824               	movf	measureSHT71@temp,w
  4433  12B7  1683               	bsf	3,5	;RP0=1, select bank1
  4434  12B8  00A2               	movwf	(_tempervalue^(0+128)+2)
  4435                           
  4436                           ;sht71.c: 122: temp = 0;
  4437  12B9  1283               	bcf	3,5	;RP0=0, select bank0
  4438  12BA  3001               	movlw	1
  4439  12BB  01A4               	clrf	measureSHT71@temp
  4440  12BC  01A5               	clrf	measureSHT71@temp+1
  4441                           
  4442                           ;sht71.c: 123: temp = readByteSHT71(1);
  4443  12BD  22D9  160A  118A   	fcall	_readByteSHT71
  4444  12C0  00A4               	movwf	measureSHT71@temp
  4445  12C1  01A5               	clrf	measureSHT71@temp+1
  4446                           
  4447                           ;sht71.c: 124: tempervalue[1] |= temp;
  4448  12C2  1683               	bsf	3,5	;RP0=1, select bank1
  4449  12C3  04A2               	iorwf	(_tempervalue^(0+128)+2),f
  4450  12C4  1283               	bcf	3,5	;RP0=0, select bank0
  4451  12C5  0825               	movf	measureSHT71@temp+1,w
  4452  12C6  1683               	bsf	3,5	;RP0=1, select bank1
  4453  12C7  04A3               	iorwf	((_tempervalue+1)^(0+128)+2),f
  4454                           
  4455                           ;sht71.c: 125: break;
  4456  12C8  2AD1               	goto	l4295
  4457  12C9                     l4293:	
  4458  12C9  0877               	movf	measureSHT71@mode,w
  4459                           
  4460                           ; Switch size 1, requested type "space"
  4461                           ; Number of cases is 2, Range of values is 2 to 3
  4462                           ; switch strategies available:
  4463                           ; Name         Instructions Cycles
  4464                           ; simple_byte            7     4 (average)
  4465                           ; direct_byte           17    11 (fixed)
  4466                           ; jumptable            263     9 (fixed)
  4467                           ;	Chosen strategy is simple_byte
  4468  12CA  3A02               	xorlw	2	; case 2
  4469  12CB  1903               	skipnz
  4470  12CC  2A8D               	goto	l4267
  4471  12CD  3A01               	xorlw	1	; case 3
  4472  12CE  1903               	skipnz
  4473  12CF  2AAB               	goto	l4279
  4474  12D0  2AD1               	goto	l4295
  4475  12D1                     l4295:	
  4476                           
  4477                           ;sht71.c: 128: *p_checksum = readByteSHT71(0);
  4478  12D1  0876               	movf	measureSHT71@p_checksum,w
  4479  12D2  0084               	movwf	4
  4480  12D3  3000               	movlw	0
  4481  12D4  22D9               	fcall	_readByteSHT71
  4482  12D5  1383               	bcf	3,7	;select IRP bank0
  4483  12D6  0080               	movwf	0
  4484                           
  4485                           ;sht71.c: 129: return error;
  4486  12D7  0822               	movf	measureSHT71@error,w
  4487  12D8  0008               	return
  4488  12D9                     __end_of_measureSHT71:	
  4489  12D9                     __ptext29:	
  4490 ;; *************** function _readByteSHT71 *****************
  4491 ;; Defined at:
  4492 ;;		line 151 in file "sht71.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  ack             1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  ack             1    3[COMMON] unsigned char 
  4497 ;;  i               1    5[COMMON] unsigned char 
  4498 ;;  res             1    4[COMMON] unsigned char 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      unsigned char 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0
  4503 ;; Tracked objects:
  4504 ;;		On entry : 200/0
  4505 ;;		On exit  : 300/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4508 ;;      Params:         0       0       0       0       0
  4509 ;;      Locals:         3       0       0       0       0
  4510 ;;      Temps:          1       0       0       0       0
  4511 ;;      Totals:         4       0       0       0       0
  4512 ;;Total ram usage:        4 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    1
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_measureSHT71
  4519 ;;		_readStatusRegSHT71
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _readByteSHT71
  4525  12D9                     _readByteSHT71:	
  4526                           
  4527                           ;incstack = 0
  4528                           ; Regs used in _readByteSHT71: [wreg+status,2+status,0]
  4529                           ;readByteSHT71@ack stored from wreg
  4530  12D9  00F3               	movwf	readByteSHT71@ack
  4531                           
  4532                           ;sht71.c: 152: unsigned char i, res=0;
  4533  12DA  01F4               	clrf	readByteSHT71@res
  4534                           
  4535                           ;sht71.c: 153: TRISBbits.TRISB7 = 1;
  4536  12DB  1683               	bsf	3,5	;RP0=1, select bank1
  4537  12DC  1786               	bsf	6,7	;volatile
  4538                           
  4539                           ;sht71.c: 154: for (i=0x80;i>0;i/=2)
  4540  12DD  3080               	movlw	128
  4541  12DE  00F5               	movwf	readByteSHT71@i
  4542  12DF                     l154:	
  4543                           
  4544                           ;sht71.c: 155: {
  4545                           ;sht71.c: 156: RB6 = 1;
  4546  12DF  1283               	bcf	3,5	;RP0=0, select bank0
  4547  12E0  1706               	bsf	6,6	;volatile
  4548                           
  4549                           ;sht71.c: 157: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4550  12E1  2AE2               	nop2	;2 cycle nop
  4551  12E2  2AE3               	nop2	;2 cycle nop
  4552                           
  4553                           ;sht71.c: 158: if (RB7) res = (res | i);
  4554  12E3  1283               	bcf	3,5	;RP0=0, select bank0
  4555  12E4  1303               	bcf	3,6	;RP1=0, select bank0
  4556  12E5  0875               	movf	readByteSHT71@i,w
  4557  12E6  1B86               	btfsc	6,7	;volatile
  4558  12E7  04F4               	iorwf	readByteSHT71@res,f
  4559                           
  4560                           ;sht71.c: 159: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4561  12E8  2AE9               	nop2	;2 cycle nop
  4562  12E9  2AEA               	nop2	;2 cycle nop
  4563                           
  4564                           ;sht71.c: 160: RB6 = 0;
  4565  12EA  1283               	bcf	3,5	;RP0=0, select bank0
  4566  12EB  1303               	bcf	3,6	;RP1=0, select bank0
  4567  12EC  1306               	bcf	6,6	;volatile
  4568  12ED  1003               	clrc
  4569  12EE  0CF5               	rrf	readByteSHT71@i,f
  4570  12EF  0875               	movf	readByteSHT71@i,w
  4571  12F0  1D03               	btfss	3,2
  4572  12F1  2ADF               	goto	l154
  4573                           
  4574                           ;sht71.c: 161: }
  4575                           ;sht71.c: 162: TRISBbits.TRISB7 = 0;
  4576  12F2  1683               	bsf	3,5	;RP0=1, select bank1
  4577  12F3  1386               	bcf	6,7	;volatile
  4578                           
  4579                           ;sht71.c: 163: RB7 = !ack;
  4580  12F4  0873               	movf	readByteSHT71@ack,w
  4581  12F5  1D03               	btfss	3,2
  4582  12F6  2AFB               	goto	u4080
  4583  12F7  1283               	bcf	3,5	;RP0=0, select bank0
  4584  12F8  1303               	bcf	3,6	;RP1=0, select bank0
  4585  12F9  1786               	bsf	6,7	;volatile
  4586  12FA  2AFE               	goto	l3901
  4587  12FB                     u4080:	
  4588  12FB  1283               	bcf	3,5	;RP0=0, select bank0
  4589  12FC  1303               	bcf	3,6	;RP1=0, select bank0
  4590  12FD  1386               	bcf	6,7	;volatile
  4591  12FE                     l3901:	
  4592                           
  4593                           ;sht71.c: 164: RB6 = 1;
  4594  12FE  1706               	bsf	6,6	;volatile
  4595                           
  4596                           ;sht71.c: 165: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4597  12FF  3003               	movlw	3
  4598  1300  00F2               	movwf	??_readByteSHT71
  4599  1301                     u7197:	
  4600  1301  0BF2               	decfsz	??_readByteSHT71,f
  4601  1302  2B01               	goto	u7197
  4602                           
  4603                           ;sht71.c: 166: RB6 = 0;
  4604  1303  1283               	bcf	3,5	;RP0=0, select bank0
  4605  1304  1303               	bcf	3,6	;RP1=0, select bank0
  4606  1305  1306               	bcf	6,6	;volatile
  4607                           
  4608                           ;sht71.c: 167: RB7 = 1;
  4609  1306  1786               	bsf	6,7	;volatile
  4610                           
  4611                           ;sht71.c: 168: return res;
  4612  1307  0874               	movf	readByteSHT71@res,w
  4613  1308  0008               	return
  4614  1309                     __end_of_readByteSHT71:	
  4615  1309                     __ptext31:	
  4616 ;; *************** function _tranStartSHT71 *****************
  4617 ;; Defined at:
  4618 ;;		line 15 in file "sht71.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;		None               void
  4625 ;; Registers used:
  4626 ;;		None
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/100
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4632 ;;      Params:         0       0       0       0       0
  4633 ;;      Locals:         0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0
  4635 ;;      Totals:         0       0       0       0       0
  4636 ;;Total ram usage:        0 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    1
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_measureSHT71
  4643 ;;		_connectionResetSHT71
  4644 ;;		_readStatusRegSHT71
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _tranStartSHT71
  4650  1309                     _tranStartSHT71:	
  4651                           
  4652                           ;sht71.c: 16: TRISBbits.TRISB7 = 0;
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _tranStartSHT71: []
  4656  1309  1683               	bsf	3,5	;RP0=1, select bank1
  4657  130A  1303               	bcf	3,6	;RP1=0, select bank1
  4658  130B  1386               	bcf	6,7	;volatile
  4659                           
  4660                           ;sht71.c: 17: RB7 = 1;
  4661  130C  1283               	bcf	3,5	;RP0=0, select bank0
  4662  130D  1786               	bsf	6,7	;volatile
  4663                           
  4664                           ;sht71.c: 18: RB6 = 0;
  4665  130E  1306               	bcf	6,6	;volatile
  4666                           
  4667                           ;sht71.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4668  130F  2B10               	nop2	;2 cycle nop
  4669  1310  2B11               	nop2	;2 cycle nop
  4670                           
  4671                           ;sht71.c: 20: RB6 = 1;
  4672  1311  1283               	bcf	3,5	;RP0=0, select bank0
  4673  1312  1303               	bcf	3,6	;RP1=0, select bank0
  4674  1313  1706               	bsf	6,6	;volatile
  4675                           
  4676                           ;sht71.c: 21: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4677  1314  2B15               	nop2	;2 cycle nop
  4678  1315  2B16               	nop2	;2 cycle nop
  4679                           
  4680                           ;sht71.c: 22: RB7 = 0;
  4681  1316  1283               	bcf	3,5	;RP0=0, select bank0
  4682  1317  1303               	bcf	3,6	;RP1=0, select bank0
  4683  1318  1386               	bcf	6,7	;volatile
  4684                           
  4685                           ;sht71.c: 23: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4686  1319  2B1A               	nop2	;2 cycle nop
  4687                           
  4688                           ;sht71.c: 24: RB6 = 0;
  4689  131A  1283               	bcf	3,5	;RP0=0, select bank0
  4690  131B  1303               	bcf	3,6	;RP1=0, select bank0
  4691  131C  1306               	bcf	6,6	;volatile
  4692                           
  4693                           ;sht71.c: 25: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4694  131D  2B1E               	nop2	;2 cycle nop
  4695  131E  2B1F               	nop2	;2 cycle nop
  4696                           
  4697                           ;sht71.c: 26: RB6 = 1;
  4698  131F  1283               	bcf	3,5	;RP0=0, select bank0
  4699  1320  1303               	bcf	3,6	;RP1=0, select bank0
  4700  1321  1706               	bsf	6,6	;volatile
  4701                           
  4702                           ;sht71.c: 27: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4703  1322  2B23               	nop2	;2 cycle nop
  4704  1323  2B24               	nop2	;2 cycle nop
  4705                           
  4706                           ;sht71.c: 28: RB7 = 1;
  4707  1324  1283               	bcf	3,5	;RP0=0, select bank0
  4708  1325  1303               	bcf	3,6	;RP1=0, select bank0
  4709  1326  1786               	bsf	6,7	;volatile
  4710                           
  4711                           ;sht71.c: 29: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4712  1327  2B28               	nop2	;2 cycle nop
  4713                           
  4714                           ;sht71.c: 30: RB6 = 0;
  4715  1328  1283               	bcf	3,5	;RP0=0, select bank0
  4716  1329  1303               	bcf	3,6	;RP1=0, select bank0
  4717  132A  1306               	bcf	6,6	;volatile
  4718                           
  4719                           ;sht71.c: 31: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4720  132B  2B2C               	nop2	;2 cycle nop
  4721  132C  2B2D               	nop2	;2 cycle nop
  4722                           
  4723                           ;sht71.c: 32: RB7 = 0;
  4724  132D  1283               	bcf	3,5	;RP0=0, select bank0
  4725  132E  1303               	bcf	3,6	;RP1=0, select bank0
  4726  132F  1386               	bcf	6,7	;volatile
  4727                           
  4728                           ;sht71.c: 33: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4729  1330  2B31               	nop2	;2 cycle nop
  4730  1331  2B32               	nop2	;2 cycle nop
  4731  1332  0008               	return
  4732  1333                     __end_of_tranStartSHT71:	
  4733  1333                     __ptext28:	
  4734 ;; *************** function _writeByteSHT71 *****************
  4735 ;; Defined at:
  4736 ;;		line 171 in file "sht71.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  cmd             1    wreg     unsigned char 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  cmd             1    3[COMMON] unsigned char 
  4741 ;;  i               1    5[COMMON] unsigned char 
  4742 ;;  error           1    4[COMMON] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      unsigned char 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/100
  4749 ;;		On exit  : 300/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4752 ;;      Params:         0       0       0       0       0
  4753 ;;      Locals:         3       0       0       0       0
  4754 ;;      Temps:          1       0       0       0       0
  4755 ;;      Totals:         4       0       0       0       0
  4756 ;;Total ram usage:        4 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_measureSHT71
  4763 ;;		_readStatusRegSHT71
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _writeByteSHT71
  4769  1333                     _writeByteSHT71:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _writeByteSHT71: [wreg+status,2+status,0]
  4773                           ;writeByteSHT71@cmd stored from wreg
  4774  1333  00F3               	movwf	writeByteSHT71@cmd
  4775                           
  4776                           ;sht71.c: 173: TRISBbits.TRISB7 = 0;
  4777  1334  1683               	bsf	3,5	;RP0=1, select bank1
  4778  1335  1303               	bcf	3,6	;RP1=0, select bank1
  4779  1336  1386               	bcf	6,7	;volatile
  4780                           
  4781                           ;sht71.c: 175: for (i=0x80;i>0;i/=2)
  4782  1337  3080               	movlw	128
  4783  1338  00F5               	movwf	writeByteSHT71@i
  4784  1339                     l3859:	
  4785                           
  4786                           ;sht71.c: 176: {
  4787                           ;sht71.c: 177: if (i & cmd)
  4788  1339  0875               	movf	writeByteSHT71@i,w
  4789  133A  0573               	andwf	writeByteSHT71@cmd,w
  4790  133B  1903               	btfsc	3,2
  4791  133C  2B40               	goto	l162
  4792                           
  4793                           ;sht71.c: 178: RB7 = 1;
  4794  133D  1283               	bcf	3,5	;RP0=0, select bank0
  4795  133E  1786               	bsf	6,7	;volatile
  4796  133F  2B42               	goto	l163
  4797  1340                     l162:	
  4798                           
  4799                           ;sht71.c: 179: else RB7 = 0;
  4800  1340  1283               	bcf	3,5	;RP0=0, select bank0
  4801  1341  1386               	bcf	6,7	;volatile
  4802  1342                     l163:	
  4803                           
  4804                           ;sht71.c: 180: RB6 = 1;
  4805  1342  1706               	bsf	6,6	;volatile
  4806                           
  4807                           ;sht71.c: 181: _delay((unsigned long)((5)*(8000000/4000000.0)));
  4808  1343  3003               	movlw	3
  4809  1344  00F2               	movwf	??_writeByteSHT71
  4810  1345                     u7187:	
  4811  1345  0BF2               	decfsz	??_writeByteSHT71,f
  4812  1346  2B45               	goto	u7187
  4813                           
  4814                           ;sht71.c: 182: RB6 = 0;
  4815  1347  1283               	bcf	3,5	;RP0=0, select bank0
  4816  1348  1303               	bcf	3,6	;RP1=0, select bank0
  4817  1349  1306               	bcf	6,6	;volatile
  4818  134A  1003               	clrc
  4819  134B  0CF5               	rrf	writeByteSHT71@i,f
  4820  134C  0875               	movf	writeByteSHT71@i,w
  4821  134D  1D03               	btfss	3,2
  4822  134E  2B39               	goto	l3859
  4823                           
  4824                           ;sht71.c: 183: }
  4825                           ;sht71.c: 184: RB7 = 1;
  4826  134F  1786               	bsf	6,7	;volatile
  4827                           
  4828                           ;sht71.c: 185: TRISBbits.TRISB7 = 1;
  4829  1350  1683               	bsf	3,5	;RP0=1, select bank1
  4830  1351  1786               	bsf	6,7	;volatile
  4831                           
  4832                           ;sht71.c: 186: RB6 = 1;
  4833  1352  1283               	bcf	3,5	;RP0=0, select bank0
  4834  1353  1706               	bsf	6,6	;volatile
  4835                           
  4836                           ;sht71.c: 187: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4837  1354  2B55               	nop2	;2 cycle nop
  4838  1355  2B56               	nop2	;2 cycle nop
  4839                           
  4840                           ;sht71.c: 188: error = RB7;
  4841  1356  3000               	movlw	0
  4842  1357  1283               	bcf	3,5	;RP0=0, select bank0
  4843  1358  1303               	bcf	3,6	;RP1=0, select bank0
  4844  1359  1B86               	btfsc	6,7	;volatile
  4845  135A  3001               	movlw	1
  4846  135B  00F4               	movwf	writeByteSHT71@error
  4847                           
  4848                           ;sht71.c: 189: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4849  135C  2B5D               	nop2	;2 cycle nop
  4850  135D  2B5E               	nop2	;2 cycle nop
  4851                           
  4852                           ;sht71.c: 190: RB6 = 0;
  4853  135E  1283               	bcf	3,5	;RP0=0, select bank0
  4854  135F  1303               	bcf	3,6	;RP1=0, select bank0
  4855  1360  1306               	bcf	6,6	;volatile
  4856                           
  4857                           ;sht71.c: 191: return error;
  4858  1361  0874               	movf	writeByteSHT71@error,w
  4859  1362  0008               	return
  4860  1363                     __end_of_writeByteSHT71:	
  4861  1363                     __ptext30:	
  4862 ;; *************** function _connectionResetSHT71 *****************
  4863 ;; Defined at:
  4864 ;;		line 194 in file "sht71.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  i               1    2[COMMON] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;		None               void
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, pclath, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : B00/100
  4875 ;;		On exit  : 300/100
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4878 ;;      Params:         0       0       0       0       0
  4879 ;;      Locals:         1       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0
  4881 ;;      Totals:         1       0       0       0       0
  4882 ;;Total ram usage:        1 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    2
  4885 ;; This function calls:
  4886 ;;		_tranStartSHT71
  4887 ;; This function is called by:
  4888 ;;		_getResSHT71
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _connectionResetSHT71
  4894  1363                     _connectionResetSHT71:	
  4895                           
  4896                           ;sht71.c: 195: unsigned char i;
  4897                           ;sht71.c: 196: TRISBbits.TRISB7 = 0;
  4898                           
  4899                           ;incstack = 0
  4900                           ; Regs used in _connectionResetSHT71: [wreg+status,2+status,0+pclath+cstack]
  4901  1363  1386               	bcf	6,7	;volatile
  4902                           
  4903                           ;sht71.c: 197: RB7 = 1;
  4904  1364  1283               	bcf	3,5	;RP0=0, select bank0
  4905  1365  1786               	bsf	6,7	;volatile
  4906                           
  4907                           ;sht71.c: 198: RB6=0;
  4908  1366  1306               	bcf	6,6	;volatile
  4909                           
  4910                           ;sht71.c: 199: for(i=0;i<9;i++)
  4911  1367  01F2               	clrf	connectionResetSHT71@i
  4912  1368                     l167:	
  4913                           
  4914                           ;sht71.c: 200: { RB6 = 1;
  4915  1368  1283               	bcf	3,5	;RP0=0, select bank0
  4916  1369  1303               	bcf	3,6	;RP1=0, select bank0
  4917  136A  1706               	bsf	6,6	;volatile
  4918                           
  4919                           ;sht71.c: 201: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4920  136B  2B6C               	nop2	;2 cycle nop
  4921                           
  4922                           ;sht71.c: 202: RB6 = 0;
  4923  136C  1283               	bcf	3,5	;RP0=0, select bank0
  4924  136D  1303               	bcf	3,6	;RP1=0, select bank0
  4925  136E  1306               	bcf	6,6	;volatile
  4926                           
  4927                           ;sht71.c: 203: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4928  136F  2B70               	nop2	;2 cycle nop
  4929  1370  3009               	movlw	9
  4930  1371  0AF2               	incf	connectionResetSHT71@i,f
  4931  1372  0272               	subwf	connectionResetSHT71@i,w
  4932  1373  1C03               	skipc
  4933  1374  2B68               	goto	l167
  4934                           
  4935                           ;sht71.c: 204: }
  4936                           ;sht71.c: 205: tranStartSHT71();
  4937  1375  2309               	fcall	_tranStartSHT71
  4938                           
  4939                           ;sht71.c: 206: TRISBbits.TRISB7 = 1;
  4940  1376  1683               	bsf	3,5	;RP0=1, select bank1
  4941  1377  1303               	bcf	3,6	;RP1=0, select bank1
  4942  1378  1786               	bsf	6,7	;volatile
  4943  1379  0008               	return
  4944  137A                     __end_of_connectionResetSHT71:	
  4945  137A                     __ptext32:	
  4946 ;; *************** function _calcSHT71 *****************
  4947 ;; Defined at:
  4948 ;;		line 132 in file "sht71.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  p_humidity      3   52[BANK0 ] float 
  4951 ;;  p_temperatur    1   55[BANK0 ] PTR float 
  4952 ;;		 -> getResSHT71@temp_val(3), 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  rh              3   74[BANK0 ] float 
  4955 ;;  rh_true         3   71[BANK0 ] float 
  4956 ;;  t_C             3   62[BANK0 ] float 
  4957 ;;  t               3   59[BANK0 ] float 
  4958 ;;  rh_lin          3   56[BANK0 ] float 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  3   52[BANK0 ] float 
  4961 ;; Registers used:
  4962 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 300/0
  4965 ;;		On exit  : B00/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4968 ;;      Params:         0       4       0       0       0
  4969 ;;      Locals:         0      21       0       0       0
  4970 ;;      Temps:          0       0       0       0       0
  4971 ;;      Totals:         0      25       0       0       0
  4972 ;;Total ram usage:       25 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    3
  4975 ;; This function calls:
  4976 ;;		___ftadd
  4977 ;;		___ftge
  4978 ;;		___ftmul
  4979 ;; This function is called by:
  4980 ;;		_getResSHT71
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _calcSHT71
  4986  137A                     _calcSHT71:	
  4987                           
  4988                           ;sht71.c: 133: float rh_lin;
  4989                           ;sht71.c: 134: float rh_true;
  4990                           ;sht71.c: 135: float t = *p_temperature;
  4991                           
  4992                           ;incstack = 0
  4993                           ; Regs used in _calcSHT71: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4994  137A  0857               	movf	calcSHT71@p_temperature,w
  4995  137B  0084               	movwf	4
  4996  137C  1383               	bcf	3,7	;select IRP bank0
  4997  137D  0800               	movf	0,w
  4998  137E  00DB               	movwf	calcSHT71@t
  4999  137F  0A84               	incf	4,f
  5000  1380  0800               	movf	0,w
  5001  1381  00DC               	movwf	calcSHT71@t+1
  5002  1382  0A84               	incf	4,f
  5003  1383  0800               	movf	0,w
  5004  1384  00DD               	movwf	calcSHT71@t+2
  5005                           
  5006                           ;sht71.c: 136: float rh = p_humidity;
  5007  1385  0854               	movf	calcSHT71@p_humidity,w
  5008  1386  00EA               	movwf	calcSHT71@rh
  5009  1387  0855               	movf	calcSHT71@p_humidity+1,w
  5010  1388  00EB               	movwf	calcSHT71@rh+1
  5011  1389  0856               	movf	calcSHT71@p_humidity+2,w
  5012  138A  00EC               	movwf	calcSHT71@rh+2
  5013                           
  5014                           ;sht71.c: 137: float t_C;
  5015                           ;sht71.c: 139: t_C = t*0.01 + -40.1 - 1;
  5016  138B  3066               	movlw	102
  5017  138C  00C2               	movwf	___ftadd@f1
  5018  138D  3024               	movlw	36
  5019  138E  00C3               	movwf	___ftadd@f1+1
  5020  138F  30C2               	movlw	194
  5021  1390  00C4               	movwf	___ftadd@f1+2
  5022  1391  30D7               	movlw	215
  5023  1392  00A8               	movwf	___ftmul@f1
  5024  1393  3023               	movlw	35
  5025  1394  00A9               	movwf	___ftmul@f1+1
  5026  1395  303C               	movlw	60
  5027  1396  00AA               	movwf	___ftmul@f1+2
  5028  1397  085B               	movf	calcSHT71@t,w
  5029  1398  00AB               	movwf	___ftmul@f2
  5030  1399  085C               	movf	calcSHT71@t+1,w
  5031  139A  00AC               	movwf	___ftmul@f2+1
  5032  139B  085D               	movf	calcSHT71@t+2,w
  5033  139C  00AD               	movwf	___ftmul@f2+2
  5034  139D  26AA  160A  118A   	fcall	___ftmul
  5035  13A0  27C4               	fcall	PL60	;call to abstracted procedure
  5036  13A1  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5037  13A6  0842               	movf	?___ftadd,w
  5038  13A7  00DE               	movwf	calcSHT71@t_C
  5039  13A8  0843               	movf	?___ftadd+1,w
  5040  13A9  00DF               	movwf	calcSHT71@t_C+1
  5041  13AA  0844               	movf	?___ftadd+2,w
  5042  13AB  00E0               	movwf	calcSHT71@t_C+2
  5043                           
  5044                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  5045  13AC  086A               	movf	calcSHT71@rh,w
  5046  13AD  00A8               	movwf	___ftmul@f1
  5047  13AE  086B               	movf	calcSHT71@rh+1,w
  5048  13AF  00A9               	movwf	___ftmul@f1+1
  5049  13B0  086C               	movf	calcSHT71@rh+2,w
  5050  13B1  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  5051  13B4  26AA  160A  118A   	fcall	___ftmul
  5052  13B7  0828               	movf	?___ftmul,w
  5053  13B8  00E1               	movwf	_calcSHT71$1257
  5054  13B9  0829               	movf	?___ftmul+1,w
  5055  13BA  00E2               	movwf	_calcSHT71$1257+1
  5056  13BB  082A               	movf	?___ftmul+2,w
  5057  13BC  00E3               	movwf	_calcSHT71$1257+2
  5058                           
  5059                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  5060  13BD  30E3               	movlw	227
  5061  13BE  00A8               	movwf	___ftmul@f1
  5062  13BF  3025               	movlw	37
  5063  13C0  00A9               	movwf	___ftmul@f1+1
  5064  13C1  303D               	movlw	61
  5065  13C2  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  5066  13C5  26AA  160A  118A   	fcall	___ftmul
  5067  13C8  0828               	movf	?___ftmul,w
  5068  13C9  00C2               	movwf	___ftadd@f1
  5069  13CA  0829               	movf	?___ftmul+1,w
  5070  13CB  00C3               	movwf	___ftadd@f1+1
  5071  13CC  082A               	movf	?___ftmul+2,w
  5072  13CD  00C4               	movwf	___ftadd@f1+2
  5073  13CE  30E8               	movlw	232
  5074  13CF  00A8               	movwf	___ftmul@f1
  5075  13D0  303B               	movlw	59
  5076  13D1  00A9               	movwf	___ftmul@f1+1
  5077  13D2  30B6               	movlw	182
  5078  13D3  00AA               	movwf	___ftmul@f1+2
  5079  13D4  0861               	movf	_calcSHT71$1257,w
  5080  13D5  00AB               	movwf	___ftmul@f2
  5081  13D6  0862               	movf	_calcSHT71$1257+1,w
  5082  13D7  00AC               	movwf	___ftmul@f2+1
  5083  13D8  0863               	movf	_calcSHT71$1257+2,w
  5084  13D9  00AD               	movwf	___ftmul@f2+2
  5085  13DA  26AA  160A  118A   	fcall	___ftmul
  5086  13DD  27C4               	fcall	PL60	;call to abstracted procedure
  5087  13DE  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5088  13E3  0842               	movf	?___ftadd,w
  5089  13E4  00E4               	movwf	_calcSHT71$1258
  5090  13E5  0843               	movf	?___ftadd+1,w
  5091  13E6  00E5               	movwf	_calcSHT71$1258+1
  5092  13E7  0844               	movf	?___ftadd+2,w
  5093  13E8  00E6               	movwf	_calcSHT71$1258+2
  5094                           
  5095                           ;sht71.c: 141: rh_lin = -0.0000028*rh*rh + +0.0405*rh + -4.0;
  5096  13E9  3080               	movlw	128
  5097  13EA  01C2               	clrf	___ftadd@f1
  5098  13EB  00C3               	movwf	___ftadd@f1+1
  5099  13EC  30C0               	movlw	192
  5100  13ED  27D3               	fcall	PL68	;call to abstracted procedure
  5101  13EE  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5102  13F3  0842               	movf	?___ftadd,w
  5103  13F4  00D8               	movwf	calcSHT71@rh_lin
  5104  13F5  0843               	movf	?___ftadd+1,w
  5105  13F6  00D9               	movwf	calcSHT71@rh_lin+1
  5106  13F7  0844               	movf	?___ftadd+2,w
  5107  13F8  00DA               	movwf	calcSHT71@rh_lin+2
  5108                           
  5109                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  5110  13F9  30D7               	movlw	215
  5111  13FA  00C2               	movwf	___ftadd@f1
  5112  13FB  3023               	movlw	35
  5113  13FC  00C3               	movwf	___ftadd@f1+1
  5114  13FD  303C               	movlw	60
  5115  13FE  00C4               	movwf	___ftadd@f1+2
  5116  13FF  30C6               	movlw	198
  5117  1400  00A8               	movwf	___ftmul@f1
  5118  1401  30A7               	movlw	167
  5119  1402  00A9               	movwf	___ftmul@f1+1
  5120  1403  3038               	movlw	56
  5121  1404  27B5  160A  118A   	fcall	PL54	;call to abstracted procedure
  5122  1407  26AA  160A  118A   	fcall	___ftmul
  5123  140A  27C4               	fcall	PL60	;call to abstracted procedure
  5124  140B  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5125  1410  0842               	movf	?___ftadd,w
  5126  1411  00E1               	movwf	_calcSHT71$1257
  5127  1412  0843               	movf	?___ftadd+1,w
  5128  1413  00E2               	movwf	_calcSHT71$1257+1
  5129  1414  0844               	movf	?___ftadd+2,w
  5130  1415  00E3               	movwf	_calcSHT71$1257+2
  5131                           
  5132                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  5133  1416  0861               	movf	_calcSHT71$1257,w
  5134  1417  00A8               	movwf	___ftmul@f1
  5135  1418  0862               	movf	_calcSHT71$1257+1,w
  5136  1419  00A9               	movwf	___ftmul@f1+1
  5137  141A  0863               	movf	_calcSHT71$1257+2,w
  5138  141B  00AA               	movwf	___ftmul@f1+2
  5139  141C  30C8               	movlw	200
  5140  141D  01C2               	clrf	___ftadd@f1
  5141  141E  00C3               	movwf	___ftadd@f1+1
  5142  141F  30C1               	movlw	193
  5143  1420  00C4               	movwf	___ftadd@f1+2
  5144  1421  085E               	movf	calcSHT71@t_C,w
  5145  1422  00C5               	movwf	___ftadd@f2
  5146  1423  085F               	movf	calcSHT71@t_C+1,w
  5147  1424  00C6               	movwf	___ftadd@f2+1
  5148  1425  0860               	movf	calcSHT71@t_C+2,w
  5149  1426  00C7               	movwf	___ftadd@f2+2
  5150  1427  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5151  142C  0842               	movf	?___ftadd,w
  5152  142D  00AB               	movwf	___ftmul@f2
  5153  142E  0843               	movf	?___ftadd+1,w
  5154  142F  00AC               	movwf	___ftmul@f2+1
  5155  1430  0844               	movf	?___ftadd+2,w
  5156  1431  00AD               	movwf	___ftmul@f2+2
  5157  1432  26AA  160A  118A   	fcall	___ftmul
  5158  1435  0828               	movf	?___ftmul,w
  5159  1436  00E4               	movwf	_calcSHT71$1258
  5160  1437  0829               	movf	?___ftmul+1,w
  5161  1438  00E5               	movwf	_calcSHT71$1258+1
  5162  1439  082A               	movf	?___ftmul+2,w
  5163  143A  00E6               	movwf	_calcSHT71$1258+2
  5164                           
  5165                           ;sht71.c: 142: rh_true = (t_C - 25)*(+0.01 + +0.00008*rh) + rh_lin;
  5166  143B  0858               	movf	calcSHT71@rh_lin,w
  5167  143C  00C2               	movwf	___ftadd@f1
  5168  143D  0859               	movf	calcSHT71@rh_lin+1,w
  5169  143E  00C3               	movwf	___ftadd@f1+1
  5170  143F  085A               	movf	calcSHT71@rh_lin+2,w
  5171  1440  27D3               	fcall	PL68	;call to abstracted procedure
  5172  1441  120A  118A  25BB  160A  118A  	fcall	___ftadd
  5173  1446  0842               	movf	?___ftadd,w
  5174  1447  00E7               	movwf	calcSHT71@rh_true
  5175  1448  0843               	movf	?___ftadd+1,w
  5176  1449  00E8               	movwf	calcSHT71@rh_true+1
  5177  144A  0844               	movf	?___ftadd+2,w
  5178  144B  00E9               	movwf	calcSHT71@rh_true+2
  5179                           
  5180                           ;sht71.c: 144: if(rh_true > 99) rh_true = 99;
  5181  144C  30C6               	movlw	198
  5182  144D  01CE               	clrf	___ftge@ff1
  5183  144E  00CF               	movwf	___ftge@ff1+1
  5184  144F  3042               	movlw	66
  5185  1450  00D0               	movwf	___ftge@ff1+2
  5186  1451  0867               	movf	calcSHT71@rh_true,w
  5187  1452  00D1               	movwf	___ftge@ff2
  5188  1453  0868               	movf	calcSHT71@rh_true+1,w
  5189  1454  00D2               	movwf	___ftge@ff2+1
  5190  1455  0869               	movf	calcSHT71@rh_true+2,w
  5191  1456  00D3               	movwf	___ftge@ff2+2
  5192  1457  120A  118A  248B  160A  118A  	fcall	___ftge
  5193  145C  1803               	btfsc	3,0
  5194  145D  2C63               	goto	l5721
  5195  145E  30C6               	movlw	198
  5196  145F  01E7               	clrf	calcSHT71@rh_true
  5197  1460  00E8               	movwf	calcSHT71@rh_true+1
  5198  1461  3042               	movlw	66
  5199  1462  00E9               	movwf	calcSHT71@rh_true+2
  5200  1463                     l5721:	
  5201                           
  5202                           ;sht71.c: 145: if(rh_true < 0.1) rh_true = 0.1;
  5203  1463  0867               	movf	calcSHT71@rh_true,w
  5204  1464  00CE               	movwf	___ftge@ff1
  5205  1465  0868               	movf	calcSHT71@rh_true+1,w
  5206  1466  00CF               	movwf	___ftge@ff1+1
  5207  1467  0869               	movf	calcSHT71@rh_true+2,w
  5208  1468  00D0               	movwf	___ftge@ff1+2
  5209  1469  30CD               	movlw	205
  5210  146A  00D1               	movwf	___ftge@ff2
  5211  146B  30CC               	movlw	204
  5212  146C  00D2               	movwf	___ftge@ff2+1
  5213  146D  303D               	movlw	61
  5214  146E  00D3               	movwf	___ftge@ff2+2
  5215  146F  120A  118A  248B  160A  118A  	fcall	___ftge
  5216  1474  1803               	btfsc	3,0
  5217  1475  2C7C               	goto	l5725
  5218  1476  30CD               	movlw	205
  5219  1477  00E7               	movwf	calcSHT71@rh_true
  5220  1478  30CC               	movlw	204
  5221  1479  00E8               	movwf	calcSHT71@rh_true+1
  5222  147A  303D               	movlw	61
  5223  147B  00E9               	movwf	calcSHT71@rh_true+2
  5224  147C                     l5725:	
  5225                           
  5226                           ;sht71.c: 147: *p_temperature = t_C;
  5227  147C  0857               	movf	calcSHT71@p_temperature,w
  5228  147D  0084               	movwf	4
  5229  147E  085E               	movf	calcSHT71@t_C,w
  5230  147F  1383               	bcf	3,7	;select IRP bank0
  5231  1480  0080               	movwf	0
  5232  1481  0A84               	incf	4,f
  5233  1482  085F               	movf	calcSHT71@t_C+1,w
  5234  1483  0080               	movwf	0
  5235  1484  0A84               	incf	4,f
  5236  1485  0860               	movf	calcSHT71@t_C+2,w
  5237  1486  0080               	movwf	0
  5238                           
  5239                           ;sht71.c: 148: return rh_true;
  5240  1487  0867               	movf	calcSHT71@rh_true,w
  5241  1488  00D4               	movwf	?_calcSHT71
  5242  1489  0868               	movf	calcSHT71@rh_true+1,w
  5243  148A  00D5               	movwf	?_calcSHT71+1
  5244  148B  0869               	movf	calcSHT71@rh_true+2,w
  5245  148C  00D6               	movwf	?_calcSHT71+2
  5246  148D  0008               	return
  5247  148E                     __end_of_calcSHT71:	
  5248  148E                     __ptext41:	
  5249 ;; *************** function _scale *****************
  5250 ;; Defined at:
  5251 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  scl             1    wreg     char 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  scl             1   33[BANK0 ] char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  3   23[BANK0 ] char 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 300/100
  5262 ;;		On exit  : 300/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5265 ;;      Params:         0       3       0       0       0
  5266 ;;      Locals:         0       4       0       0       0
  5267 ;;      Temps:          0       4       0       0       0
  5268 ;;      Totals:         0      11       0       0       0
  5269 ;;Total ram usage:       11 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    3
  5272 ;; This function calls:
  5273 ;;		___awdiv
  5274 ;;		___awmod
  5275 ;;		___bmul
  5276 ;;		___ftmul
  5277 ;; This function is called by:
  5278 ;;		_sprintf
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _scale
  5284  148E                     _scale:	
  5285                           
  5286                           ;incstack = 0
  5287                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5288                           ;scale@scl stored from wreg
  5289  148E  1283               	bcf	3,5	;RP0=0, select bank0
  5290  148F  00C1               	movwf	scale@scl
  5291                           
  5292                           ;doprnt.c: 428: if(scl < 0) {
  5293  1490  1FC1               	btfss	scale@scl,7
  5294  1491  2D5E               	goto	l5313
  5295                           
  5296                           ;doprnt.c: 429: scl = -scl;
  5297  1492  09C1               	comf	scale@scl,f
  5298  1493  0AC1               	incf	scale@scl,f
  5299                           
  5300                           ;doprnt.c: 430: if(scl>=110)
  5301  1494  0841               	movf	scale@scl,w
  5302  1495  3A80               	xorlw	128
  5303  1496  3E12               	addlw	-238
  5304  1497  1C03               	skipc
  5305  1498  2D01               	goto	l5303
  5306                           
  5307                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5308  1499  279E  160A  118A   	fcall	PL44	;call to abstracted procedure
  5309  149C  266D  160A  118A   	fcall	___awmod
  5310  149F  0873               	movf	?___awmod+1,w
  5311  14A0  00A3               	movwf	___awdiv@dividend+1
  5312  14A1  0872               	movf	?___awmod,w
  5313  14A2  00A2               	movwf	___awdiv@dividend
  5314  14A3  2628  160A  118A   	fcall	___awdiv
  5315  14A6  27EB               	fcall	PL78	;call to abstracted procedure
  5316  14A7  160A  158A  27DD  160A  118A  	fcall	PL56	;call to abstracted procedure
  5317  14AC  160A  158A  2000  160A  118A  	fcall	stringtab
  5318  14B1  00A8               	movwf	___ftmul@f1
  5319  14B2  160A  158A  2000  160A  118A  	fcall	stringtab
  5320  14B7  00A9               	movwf	___ftmul@f1+1
  5321  14B8  160A  158A  2000  160A  118A  	fcall	stringtab
  5322  14BD  27E3  160A  118A   	fcall	PL74	;call to abstracted procedure
  5323  14C0  1BA2               	btfsc	___awdiv@dividend,7
  5324  14C1  03A3               	decf	___awdiv@dividend+1,f
  5325  14C2  2628  160A  118A   	fcall	___awdiv
  5326  14C5  2775               	fcall	PL28	;call to abstracted procedure
  5327  14C6  160A  158A  27EC  160A  118A  	fcall	PL84	;call to abstracted procedure
  5328  14CB  160A  158A  2000  160A  118A  	fcall	stringtab
  5329  14D0  00AB               	movwf	___ftmul@f2
  5330  14D1  160A  158A  2000  160A  118A  	fcall	stringtab
  5331  14D6  00AC               	movwf	___ftmul@f2+1
  5332  14D7  160A  158A  2000  160A  118A  	fcall	stringtab
  5333  14DC  00AD               	movwf	___ftmul@f2+2
  5334  14DD  26AA  160A  118A   	fcall	___ftmul
  5335                           
  5336                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5337  14E0  277D  160A  118A   	fcall	PL32	;call to abstracted procedure
  5338  14E3  1BF4               	btfsc	___awmod@dividend,7
  5339  14E4  03F5               	decf	___awmod@dividend+1,f
  5340  14E5  266D  160A  118A   	fcall	___awmod
  5341  14E8  2767               	fcall	PL18	;call to abstracted procedure
  5342  14E9  160A  158A  2000  160A  118A  	fcall	stringtab
  5343  14EE  00A8               	movwf	___ftmul@f1
  5344  14EF  160A  158A  2000  160A  118A  	fcall	stringtab
  5345  14F4  00A9               	movwf	___ftmul@f1+1
  5346  14F5  160A  158A  2000  160A  118A  	fcall	stringtab
  5347  14FA  27DB  160A  118A   	fcall	PL70	;call to abstracted procedure
  5348  14FD  26AA  160A  118A   	fcall	___ftmul
  5349  1500  2F8A               	ljmp	PL34	;call to abstracted procedure
  5350  1501                     l5303:	
  5351                           
  5352                           ;doprnt.c: 432: else if(scl > 10)
  5353  1501  0841               	movf	scale@scl,w
  5354  1502  3A80               	xorlw	128
  5355  1503  3E75               	addlw	-139
  5356  1504  1C03               	skipc
  5357  1505  2D44               	goto	l5309
  5358                           
  5359                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5360  1506  27BD  160A  118A   	fcall	PL58	;call to abstracted procedure
  5361  1509  1BF4               	btfsc	___awmod@dividend,7
  5362  150A  03F5               	decf	___awmod@dividend+1,f
  5363  150B  266D  160A  118A   	fcall	___awmod
  5364  150E  2767               	fcall	PL18	;call to abstracted procedure
  5365  150F  160A  158A  2000  160A  118A  	fcall	stringtab
  5366  1514  00A8               	movwf	___ftmul@f1
  5367  1515  160A  158A  2000  160A  118A  	fcall	stringtab
  5368  151A  00A9               	movwf	___ftmul@f1+1
  5369  151B  160A  158A  2000  160A  118A  	fcall	stringtab
  5370  1520  27CB  160A  118A   	fcall	PL64	;call to abstracted procedure
  5371  1523  1BA2               	btfsc	___awdiv@dividend,7
  5372  1524  03A3               	decf	___awdiv@dividend+1,f
  5373  1525  2628  160A  118A   	fcall	___awdiv
  5374  1528  2775               	fcall	PL28	;call to abstracted procedure
  5375  1529  160A  158A  27DD  160A  118A  	fcall	PL56	;call to abstracted procedure
  5376  152E  160A  158A  2000  160A  118A  	fcall	stringtab
  5377  1533  00AB               	movwf	___ftmul@f2
  5378  1534  160A  158A  2000  160A  118A  	fcall	stringtab
  5379  1539  00AC               	movwf	___ftmul@f2+1
  5380  153A  160A  158A  2000  160A  118A  	fcall	stringtab
  5381  153F  00AD               	movwf	___ftmul@f2+2
  5382  1540  26AA  160A  118A   	fcall	___ftmul
  5383  1543  2F8A               	ljmp	PL34	;call to abstracted procedure
  5384  1544                     l5309:	
  5385                           
  5386                           ;doprnt.c: 434: return _npowers_[scl];
  5387  1544  3003               	movlw	3
  5388  1545  00F8               	movwf	___bmul@multiplicand
  5389  1546  0841               	movf	scale@scl,w
  5390  1547  2717               	fcall	___bmul
  5391  1548  160A  158A  27CF  160A  118A  	fcall	PL30	;call to abstracted procedure
  5392  154D  160A  158A  2000  160A  118A  	fcall	stringtab
  5393  1552  00B7               	movwf	?_scale
  5394  1553  160A  158A  2000  160A  118A  	fcall	stringtab
  5395  1558  00B8               	movwf	?_scale+1
  5396  1559  160A  158A  2000   	fcall	stringtab
  5397  155C  00B9               	movwf	?_scale+2
  5398  155D  0008               	return
  5399  155E                     l5313:	
  5400                           
  5401                           ;doprnt.c: 435: }
  5402                           ;doprnt.c: 436: if(scl>=110)
  5403  155E  0841               	movf	scale@scl,w
  5404  155F  3A80               	xorlw	128
  5405  1560  3E12               	addlw	-238
  5406  1561  1C03               	skipc
  5407  1562  2DCB               	goto	l5321
  5408                           
  5409                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5410  1563  279E  160A  118A   	fcall	PL44	;call to abstracted procedure
  5411  1566  266D  160A  118A   	fcall	___awmod
  5412  1569  0873               	movf	?___awmod+1,w
  5413  156A  00A3               	movwf	___awdiv@dividend+1
  5414  156B  0872               	movf	?___awmod,w
  5415  156C  00A2               	movwf	___awdiv@dividend
  5416  156D  2628  160A  118A   	fcall	___awdiv
  5417  1570  27EB  160A  118A   	fcall	PL78	;call to abstracted procedure
  5418  1573  27F9               	fcall	PL88	;call to abstracted procedure
  5419  1574  160A  158A  2000  160A  118A  	fcall	stringtab
  5420  1579  00A8               	movwf	___ftmul@f1
  5421  157A  160A  158A  2000  160A  118A  	fcall	stringtab
  5422  157F  00A9               	movwf	___ftmul@f1+1
  5423  1580  160A  158A  2000  160A  118A  	fcall	stringtab
  5424  1585  27E3  160A  118A   	fcall	PL74	;call to abstracted procedure
  5425  1588  1BA2               	btfsc	___awdiv@dividend,7
  5426  1589  03A3               	decf	___awdiv@dividend+1,f
  5427  158A  2628  160A  118A   	fcall	___awdiv
  5428  158D  2775               	fcall	PL28	;call to abstracted procedure
  5429  158E  3E6F               	addlw	low ((__powers_| (0+32768)+54))
  5430  158F  0084               	movwf	4
  5431  1590  3098               	movlw	high ((__powers_| (0+32768)+54))
  5432  1591  1803               	skipnc
  5433  1592  3E01               	addlw	1
  5434  1593  00FF               	movwf	127
  5435  1594  160A  158A  2000  160A  118A  	fcall	stringtab
  5436  1599  00AB               	movwf	___ftmul@f2
  5437  159A  160A  158A  2000  160A  118A  	fcall	stringtab
  5438  159F  00AC               	movwf	___ftmul@f2+1
  5439  15A0  160A  158A  2000  160A  118A  	fcall	stringtab
  5440  15A5  00AD               	movwf	___ftmul@f2+2
  5441  15A6  26AA  160A  118A   	fcall	___ftmul
  5442                           
  5443                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5444  15A9  277D  160A  118A   	fcall	PL32	;call to abstracted procedure
  5445  15AC  1BF4               	btfsc	___awmod@dividend,7
  5446  15AD  03F5               	decf	___awmod@dividend+1,f
  5447  15AE  266D  160A  118A   	fcall	___awmod
  5448  15B1  0872               	movf	?___awmod,w
  5449  15B2  2791               	fcall	PL36	;call to abstracted procedure
  5450  15B3  160A  158A  2000  160A  118A  	fcall	stringtab
  5451  15B8  00A8               	movwf	___ftmul@f1
  5452  15B9  160A  158A  2000  160A  118A  	fcall	stringtab
  5453  15BE  00A9               	movwf	___ftmul@f1+1
  5454  15BF  160A  158A  2000  160A  118A  	fcall	stringtab
  5455  15C4  27DB  160A  118A   	fcall	PL70	;call to abstracted procedure
  5456  15C7  26AA  160A  118A   	fcall	___ftmul
  5457  15CA  2F8A               	ljmp	PL34	;call to abstracted procedure
  5458  15CB                     l5321:	
  5459                           
  5460                           ;doprnt.c: 438: else if(scl > 10)
  5461  15CB  0841               	movf	scale@scl,w
  5462  15CC  3A80               	xorlw	128
  5463  15CD  3E75               	addlw	-139
  5464  15CE  1C03               	skipc
  5465  15CF  2E0D               	goto	l5327
  5466                           
  5467                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5468  15D0  27BD  160A  118A   	fcall	PL58	;call to abstracted procedure
  5469  15D3  1BF4               	btfsc	___awmod@dividend,7
  5470  15D4  03F5               	decf	___awmod@dividend+1,f
  5471  15D5  266D  160A  118A   	fcall	___awmod
  5472  15D8  0872               	movf	?___awmod,w
  5473  15D9  2791               	fcall	PL36	;call to abstracted procedure
  5474  15DA  160A  158A  2000  160A  118A  	fcall	stringtab
  5475  15DF  00A8               	movwf	___ftmul@f1
  5476  15E0  160A  158A  2000  160A  118A  	fcall	stringtab
  5477  15E5  00A9               	movwf	___ftmul@f1+1
  5478  15E6  160A  158A  2000  160A  118A  	fcall	stringtab
  5479  15EB  27CB  160A  118A   	fcall	PL64	;call to abstracted procedure
  5480  15EE  1BA2               	btfsc	___awdiv@dividend,7
  5481  15EF  03A3               	decf	___awdiv@dividend+1,f
  5482  15F0  2628  160A  118A   	fcall	___awdiv
  5483  15F3  2775  160A  118A   	fcall	PL28	;call to abstracted procedure
  5484  15F6  27F9               	fcall	PL88	;call to abstracted procedure
  5485  15F7  160A  158A  2000  160A  118A  	fcall	stringtab
  5486  15FC  00AB               	movwf	___ftmul@f2
  5487  15FD  160A  158A  2000  160A  118A  	fcall	stringtab
  5488  1602  00AC               	movwf	___ftmul@f2+1
  5489  1603  160A  158A  2000  160A  118A  	fcall	stringtab
  5490  1608  00AD               	movwf	___ftmul@f2+2
  5491  1609  26AA  160A  118A   	fcall	___ftmul
  5492  160C  2F8A               	ljmp	PL34	;call to abstracted procedure
  5493  160D                     l5327:	
  5494                           
  5495                           ;doprnt.c: 440: return _powers_[scl];
  5496  160D  3003               	movlw	3
  5497  160E  00F8               	movwf	___bmul@multiplicand
  5498  160F  0841               	movf	scale@scl,w
  5499  1610  2717               	fcall	___bmul
  5500  1611  3E39               	addlw	low (__powers_| (0+32768))
  5501  1612  0084               	movwf	4
  5502  1613  3098               	movlw	high (__powers_| (0+32768))
  5503  1614  1803               	skipnc
  5504  1615  3E01               	addlw	1
  5505  1616  00FF               	movwf	127
  5506  1617  160A  158A  2000  160A  118A  	fcall	stringtab
  5507  161C  00B7               	movwf	?_scale
  5508  161D  160A  158A  2000  160A  118A  	fcall	stringtab
  5509  1622  00B8               	movwf	?_scale+1
  5510  1623  160A  158A  2000   	fcall	stringtab
  5511  1626  00B9               	movwf	?_scale+2
  5512  1627  0008               	return
  5513  1628                     __end_of_scale:	
  5514  1628                     __ptext43:	
  5515 ;; *************** function ___awdiv *****************
  5516 ;; Defined at:
  5517 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  divisor         2    0[BANK0 ] int 
  5520 ;;  dividend        2    2[BANK0 ] int 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  quotient        2    6[BANK0 ] int 
  5523 ;;  sign            1    5[BANK0 ] unsigned char 
  5524 ;;  counter         1    4[BANK0 ] unsigned char 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  2    0[BANK0 ] int 
  5527 ;; Registers used:
  5528 ;;		wreg, status,2, status,0
  5529 ;; Tracked objects:
  5530 ;;		On entry : 300/0
  5531 ;;		On exit  : 300/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5534 ;;      Params:         0       4       0       0       0
  5535 ;;      Locals:         0       4       0       0       0
  5536 ;;      Temps:          0       0       0       0       0
  5537 ;;      Totals:         0       8       0       0       0
  5538 ;;Total ram usage:        8 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    1
  5541 ;; This function calls:
  5542 ;;		Nothing
  5543 ;; This function is called by:
  5544 ;;		_scale
  5545 ;;		_sprintf
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function ___awdiv
  5551  1628                     ___awdiv:	
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5555  1628  01A5               	clrf	___awdiv@sign
  5556  1629  1FA1               	btfss	___awdiv@divisor+1,7
  5557  162A  2E32               	goto	l5035
  5558  162B  09A0               	comf	___awdiv@divisor,f
  5559  162C  09A1               	comf	___awdiv@divisor+1,f
  5560  162D  0AA0               	incf	___awdiv@divisor,f
  5561  162E  1903               	skipnz
  5562  162F  0AA1               	incf	___awdiv@divisor+1,f
  5563  1630  01A5               	clrf	___awdiv@sign
  5564  1631  0AA5               	incf	___awdiv@sign,f
  5565  1632                     l5035:	
  5566  1632  1FA3               	btfss	___awdiv@dividend+1,7
  5567  1633  2E3B               	goto	l5041
  5568  1634  09A2               	comf	___awdiv@dividend,f
  5569  1635  09A3               	comf	___awdiv@dividend+1,f
  5570  1636  0AA2               	incf	___awdiv@dividend,f
  5571  1637  1903               	skipnz
  5572  1638  0AA3               	incf	___awdiv@dividend+1,f
  5573  1639  3001               	movlw	1
  5574  163A  06A5               	xorwf	___awdiv@sign,f
  5575  163B                     l5041:	
  5576  163B  01A6               	clrf	___awdiv@quotient
  5577  163C  01A7               	clrf	___awdiv@quotient+1
  5578  163D  0820               	movf	___awdiv@divisor,w
  5579  163E  0421               	iorwf	___awdiv@divisor+1,w
  5580  163F  1903               	btfsc	3,2
  5581  1640  2E60               	goto	l5063
  5582  1641  01A4               	clrf	___awdiv@counter
  5583  1642                     L20:	
  5584  1642  0AA4               	incf	___awdiv@counter,f
  5585  1643  1BA1               	btfsc	___awdiv@divisor+1,7
  5586  1644  2E49               	goto	l5051
  5587  1645  1003               	clrc
  5588  1646  0DA0               	rlf	___awdiv@divisor,f
  5589  1647  0DA1               	rlf	___awdiv@divisor+1,f
  5590  1648  2E42               	goto	L20
  5591  1649                     l5051:	
  5592  1649  1003               	clrc
  5593  164A  0DA6               	rlf	___awdiv@quotient,f
  5594  164B  0DA7               	rlf	___awdiv@quotient+1,f
  5595  164C  0821               	movf	___awdiv@divisor+1,w
  5596  164D  0223               	subwf	___awdiv@dividend+1,w
  5597  164E  1D03               	skipz
  5598  164F  2E52               	goto	u5435
  5599  1650  0820               	movf	___awdiv@divisor,w
  5600  1651  0222               	subwf	___awdiv@dividend,w
  5601  1652                     u5435:	
  5602  1652  1C03               	skipc
  5603  1653  2E5C               	goto	L21
  5604  1654  0820               	movf	___awdiv@divisor,w
  5605  1655  02A2               	subwf	___awdiv@dividend,f
  5606  1656  0821               	movf	___awdiv@divisor+1,w
  5607  1657  1C03               	skipc
  5608  1658  03A3               	decf	___awdiv@dividend+1,f
  5609  1659  02A3               	subwf	___awdiv@dividend+1,f
  5610  165A  1426               	bsf	___awdiv@quotient,0
  5611  165B  1003               	clrc
  5612  165C                     L21:	
  5613  165C  0CA1               	rrf	___awdiv@divisor+1,f
  5614  165D  0CA0               	rrf	___awdiv@divisor,f
  5615  165E  0BA4               	decfsz	___awdiv@counter,f
  5616  165F  2E49               	goto	l5051
  5617  1660                     l5063:	
  5618  1660  0825               	movf	___awdiv@sign,w
  5619  1661  1903               	btfsc	3,2
  5620  1662  2E68               	goto	l5067
  5621  1663  09A6               	comf	___awdiv@quotient,f
  5622  1664  09A7               	comf	___awdiv@quotient+1,f
  5623  1665  0AA6               	incf	___awdiv@quotient,f
  5624  1666  1903               	skipnz
  5625  1667  0AA7               	incf	___awdiv@quotient+1,f
  5626  1668                     l5067:	
  5627  1668  0827               	movf	___awdiv@quotient+1,w
  5628  1669  00A1               	movwf	?___awdiv+1
  5629  166A  0826               	movf	___awdiv@quotient,w
  5630  166B  00A0               	movwf	?___awdiv
  5631  166C  0008               	return
  5632  166D                     __end_of___awdiv:	
  5633  166D                     __ptext42:	
  5634 ;; *************** function ___awmod *****************
  5635 ;; Defined at:
  5636 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\awmod.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  divisor         2    2[COMMON] int 
  5639 ;;  dividend        2    4[COMMON] int 
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  sign            1    7[COMMON] unsigned char 
  5642 ;;  counter         1    6[COMMON] unsigned char 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  2    2[COMMON] int 
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0
  5647 ;; Tracked objects:
  5648 ;;		On entry : 300/0
  5649 ;;		On exit  : 300/0
  5650 ;;		Unchanged: 300/0
  5651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5652 ;;      Params:         4       0       0       0       0
  5653 ;;      Locals:         2       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0
  5655 ;;      Totals:         6       0       0       0       0
  5656 ;;Total ram usage:        6 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    1
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		_scale
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function ___awmod
  5668  166D                     ___awmod:	
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5672  166D  01F7               	clrf	___awmod@sign
  5673  166E  1FF5               	btfss	___awmod@dividend+1,7
  5674  166F  2E77               	goto	l3229
  5675  1670  09F4               	comf	___awmod@dividend,f
  5676  1671  09F5               	comf	___awmod@dividend+1,f
  5677  1672  0AF4               	incf	___awmod@dividend,f
  5678  1673  1903               	skipnz
  5679  1674  0AF5               	incf	___awmod@dividend+1,f
  5680  1675  01F7               	clrf	___awmod@sign
  5681  1676  0AF7               	incf	___awmod@sign,f
  5682  1677                     l3229:	
  5683  1677  1FF3               	btfss	___awmod@divisor+1,7
  5684  1678  2E7E               	goto	l3233
  5685  1679  09F2               	comf	___awmod@divisor,f
  5686  167A  09F3               	comf	___awmod@divisor+1,f
  5687  167B  0AF2               	incf	___awmod@divisor,f
  5688  167C  1903               	skipnz
  5689  167D  0AF3               	incf	___awmod@divisor+1,f
  5690  167E                     l3233:	
  5691  167E  0872               	movf	___awmod@divisor,w
  5692  167F  0473               	iorwf	___awmod@divisor+1,w
  5693  1680  1903               	btfsc	3,2
  5694  1681  2E9D               	goto	l3249
  5695  1682  01F6               	clrf	___awmod@counter
  5696  1683                     L18:	
  5697  1683  0AF6               	incf	___awmod@counter,f
  5698  1684  1BF3               	btfsc	___awmod@divisor+1,7
  5699  1685  2E8A               	goto	l3241
  5700  1686  1003               	clrc
  5701  1687  0DF2               	rlf	___awmod@divisor,f
  5702  1688  0DF3               	rlf	___awmod@divisor+1,f
  5703  1689  2E83               	goto	L18
  5704  168A                     l3241:	
  5705  168A  0873               	movf	___awmod@divisor+1,w
  5706  168B  0275               	subwf	___awmod@dividend+1,w
  5707  168C  1D03               	skipz
  5708  168D  2E90               	goto	u2965
  5709  168E  0872               	movf	___awmod@divisor,w
  5710  168F  0274               	subwf	___awmod@dividend,w
  5711  1690                     u2965:	
  5712  1690  1C03               	skipc
  5713  1691  2E99               	goto	L19
  5714  1692  0872               	movf	___awmod@divisor,w
  5715  1693  02F4               	subwf	___awmod@dividend,f
  5716  1694  0873               	movf	___awmod@divisor+1,w
  5717  1695  1C03               	skipc
  5718  1696  03F5               	decf	___awmod@dividend+1,f
  5719  1697  02F5               	subwf	___awmod@dividend+1,f
  5720  1698  1003               	clrc
  5721  1699                     L19:	
  5722  1699  0CF3               	rrf	___awmod@divisor+1,f
  5723  169A  0CF2               	rrf	___awmod@divisor,f
  5724  169B  0BF6               	decfsz	___awmod@counter,f
  5725  169C  2E8A               	goto	l3241
  5726  169D                     l3249:	
  5727  169D  0877               	movf	___awmod@sign,w
  5728  169E  1903               	btfsc	3,2
  5729  169F  2EA5               	goto	l3253
  5730  16A0  09F4               	comf	___awmod@dividend,f
  5731  16A1  09F5               	comf	___awmod@dividend+1,f
  5732  16A2  0AF4               	incf	___awmod@dividend,f
  5733  16A3  1903               	skipnz
  5734  16A4  0AF5               	incf	___awmod@dividend+1,f
  5735  16A5                     l3253:	
  5736  16A5  0875               	movf	___awmod@dividend+1,w
  5737  16A6  00F3               	movwf	?___awmod+1
  5738  16A7  0874               	movf	___awmod@dividend,w
  5739  16A8  00F2               	movwf	?___awmod
  5740  16A9  0008               	return
  5741  16AA                     __end_of___awmod:	
  5742  16AA                     __ptext48:	
  5743 ;; *************** function ___ftmul *****************
  5744 ;; Defined at:
  5745 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftmul.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  f1              3    8[BANK0 ] float 
  5748 ;;  f2              3   11[BANK0 ] float 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  5751 ;;  sign            1   22[BANK0 ] unsigned char 
  5752 ;;  cntr            1   21[BANK0 ] unsigned char 
  5753 ;;  exp             1   17[BANK0 ] unsigned char 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  3    8[BANK0 ] float 
  5756 ;; Registers used:
  5757 ;;		wreg, status,2, status,0, pclath, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 300/0
  5760 ;;		On exit  : 300/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5763 ;;      Params:         0       6       0       0       0
  5764 ;;      Locals:         0       6       0       0       0
  5765 ;;      Temps:          0       3       0       0       0
  5766 ;;      Totals:         0      15       0       0       0
  5767 ;;Total ram usage:       15 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    2
  5770 ;; This function calls:
  5771 ;;		___ftpack
  5772 ;; This function is called by:
  5773 ;;		_getTempDS18B20
  5774 ;;		_calcSHT71
  5775 ;;		_fround
  5776 ;;		_scale
  5777 ;;		_sprintf
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           
  5782                           ;psect for function ___ftmul
  5783  16AA                     ___ftmul:	
  5784                           
  5785                           ;incstack = 0
  5786                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5787  16AA  0828               	movf	___ftmul@f1,w
  5788  16AB  00AE               	movwf	??___ftmul
  5789  16AC  0829               	movf	___ftmul@f1+1,w
  5790  16AD  00AF               	movwf	??___ftmul+1
  5791  16AE  082A               	movf	___ftmul@f1+2,w
  5792  16AF  00B0               	movwf	??___ftmul+2
  5793  16B0  1003               	clrc
  5794  16B1  0D2F               	rlf	??___ftmul+1,w
  5795  16B2  0D30               	rlf	??___ftmul+2,w
  5796  16B3  00B1               	movwf	___ftmul@exp
  5797  16B4  0831               	movf	___ftmul@exp,w
  5798  16B5  1D03               	btfss	3,2
  5799  16B6  2EBB               	goto	l5151
  5800  16B7  01A8               	clrf	?___ftmul
  5801  16B8  01A9               	clrf	?___ftmul+1
  5802  16B9  01AA               	clrf	?___ftmul+2
  5803  16BA  0008               	return
  5804  16BB                     l5151:	
  5805  16BB  082B               	movf	___ftmul@f2,w
  5806  16BC  00AE               	movwf	??___ftmul
  5807  16BD  082C               	movf	___ftmul@f2+1,w
  5808  16BE  00AF               	movwf	??___ftmul+1
  5809  16BF  082D               	movf	___ftmul@f2+2,w
  5810  16C0  00B0               	movwf	??___ftmul+2
  5811  16C1  1003               	clrc
  5812  16C2  0D2F               	rlf	??___ftmul+1,w
  5813  16C3  0D30               	rlf	??___ftmul+2,w
  5814  16C4  00B6               	movwf	___ftmul@sign
  5815  16C5  0836               	movf	___ftmul@sign,w
  5816  16C6  1D03               	btfss	3,2
  5817  16C7  2ECC               	goto	l5155
  5818  16C8  01A8               	clrf	?___ftmul
  5819  16C9  01A9               	clrf	?___ftmul+1
  5820  16CA  01AA               	clrf	?___ftmul+2
  5821  16CB  0008               	return
  5822  16CC                     l5155:	
  5823  16CC  0836               	movf	___ftmul@sign,w
  5824  16CD  3E7B               	addlw	123
  5825  16CE  07B1               	addwf	___ftmul@exp,f
  5826  16CF  082A               	movf	___ftmul@f1+2,w
  5827  16D0  00B6               	movwf	___ftmul@sign
  5828  16D1  082D               	movf	___ftmul@f2+2,w
  5829  16D2  06B6               	xorwf	___ftmul@sign,f
  5830  16D3  3080               	movlw	128
  5831  16D4  05B6               	andwf	___ftmul@sign,f
  5832  16D5  3007               	movlw	7
  5833  16D6  17A9               	bsf	___ftmul@f1+1,7
  5834  16D7  17AC               	bsf	___ftmul@f2+1,7
  5835  16D8  01AD               	clrf	___ftmul@f2+2
  5836  16D9  01B2               	clrf	___ftmul@f3_as_product
  5837  16DA  01B3               	clrf	___ftmul@f3_as_product+1
  5838  16DB  01B4               	clrf	___ftmul@f3_as_product+2
  5839  16DC  00B5               	movwf	___ftmul@cntr
  5840  16DD                     l5173:	
  5841  16DD  1C28               	btfss	___ftmul@f1,0
  5842  16DE  2EE6               	goto	l5177
  5843  16DF  27AA  160A  118A   	fcall	PL48	;call to abstracted procedure
  5844  16E2  1803               	skipnc
  5845  16E3  0A2D               	incf	___ftmul@f2+2,w
  5846  16E4  1D03               	btfss	3,2
  5847  16E5  07B4               	addwf	___ftmul@f3_as_product+2,f
  5848  16E6                     l5177:	
  5849  16E6  1003               	clrc
  5850  16E7  0CAA               	rrf	___ftmul@f1+2,f
  5851  16E8  0CA9               	rrf	___ftmul@f1+1,f
  5852  16E9  0CA8               	rrf	___ftmul@f1,f
  5853  16EA  1003               	clrc
  5854  16EB  0DAB               	rlf	___ftmul@f2,f
  5855  16EC  0DAC               	rlf	___ftmul@f2+1,f
  5856  16ED  0DAD               	rlf	___ftmul@f2+2,f
  5857  16EE  0BB5               	decfsz	___ftmul@cntr,f
  5858  16EF  2EDD               	goto	l5173
  5859  16F0  3009               	movlw	9
  5860  16F1  00B5               	movwf	___ftmul@cntr
  5861  16F2                     l5185:	
  5862  16F2  1C28               	btfss	___ftmul@f1,0
  5863  16F3  2EFB               	goto	l5189
  5864  16F4  27AA  160A  118A   	fcall	PL48	;call to abstracted procedure
  5865  16F7  1803               	skipnc
  5866  16F8  0A2D               	incf	___ftmul@f2+2,w
  5867  16F9  1D03               	btfss	3,2
  5868  16FA  07B4               	addwf	___ftmul@f3_as_product+2,f
  5869  16FB                     l5189:	
  5870  16FB  1003               	clrc
  5871  16FC  0CAA               	rrf	___ftmul@f1+2,f
  5872  16FD  0CA9               	rrf	___ftmul@f1+1,f
  5873  16FE  0CA8               	rrf	___ftmul@f1,f
  5874  16FF  1003               	clrc
  5875  1700  0CB4               	rrf	___ftmul@f3_as_product+2,f
  5876  1701  0CB3               	rrf	___ftmul@f3_as_product+1,f
  5877  1702  0CB2               	rrf	___ftmul@f3_as_product,f
  5878  1703  0BB5               	decfsz	___ftmul@cntr,f
  5879  1704  2EF2               	goto	l5185
  5880  1705  0832               	movf	___ftmul@f3_as_product,w
  5881  1706  00F2               	movwf	___ftpack@arg
  5882  1707  0833               	movf	___ftmul@f3_as_product+1,w
  5883  1708  00F3               	movwf	___ftpack@arg+1
  5884  1709  0834               	movf	___ftmul@f3_as_product+2,w
  5885  170A  00F4               	movwf	___ftpack@arg+2
  5886  170B  0831               	movf	___ftmul@exp,w
  5887  170C  00F5               	movwf	___ftpack@exp
  5888  170D  0836               	movf	___ftmul@sign,w
  5889  170E  00F6               	movwf	___ftpack@sign
  5890  170F  2725               	fcall	___ftpack
  5891  1710  0872               	movf	?___ftpack,w
  5892  1711  00A8               	movwf	?___ftmul
  5893  1712  0873               	movf	?___ftpack+1,w
  5894  1713  00A9               	movwf	?___ftmul+1
  5895  1714  0874               	movf	?___ftpack+2,w
  5896  1715  00AA               	movwf	?___ftmul+2
  5897  1716  0008               	return
  5898  1717                     __end_of___ftmul:	
  5899  1717                     __ptext49:	
  5900 ;; *************** function ___bmul *****************
  5901 ;; Defined at:
  5902 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul8.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  multiplier      1    wreg     unsigned char 
  5905 ;;  multiplicand    1    8[COMMON] unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  multiplier      1    4[BANK0 ] unsigned char 
  5908 ;;  product         1    3[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      unsigned char 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 300/0
  5915 ;;		On exit  : 300/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5918 ;;      Params:         1       0       0       0       0
  5919 ;;      Locals:         0       2       0       0       0
  5920 ;;      Temps:          0       0       0       0       0
  5921 ;;      Totals:         1       2       0       0       0
  5922 ;;Total ram usage:        3 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    1
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_fround
  5929 ;;		_scale
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function ___bmul
  5935  1717                     ___bmul:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5939                           ;___bmul@multiplier stored from wreg
  5940  1717  00A4               	movwf	___bmul@multiplier
  5941  1718  01A3               	clrf	___bmul@product
  5942  1719                     l3165:	
  5943  1719  0878               	movf	___bmul@multiplicand,w
  5944  171A  1824               	btfsc	___bmul@multiplier,0
  5945  171B  07A3               	addwf	___bmul@product,f
  5946  171C  1003               	clrc
  5947  171D  0DF8               	rlf	___bmul@multiplicand,f
  5948  171E  1003               	clrc
  5949  171F  0CA4               	rrf	___bmul@multiplier,f
  5950  1720  0824               	movf	___bmul@multiplier,w
  5951  1721  1D03               	btfss	3,2
  5952  1722  2F19               	goto	l3165
  5953  1723  0823               	movf	___bmul@product,w
  5954  1724  0008               	return
  5955  1725                     __end_of___bmul:	
  5956  1725                     __ptext58:	
  5957 ;; *************** function ___ftpack *****************
  5958 ;; Defined at:
  5959 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\float.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  arg             3    2[COMMON] unsigned um
  5962 ;;  exp             1    5[COMMON] unsigned char 
  5963 ;;  sign            1    6[COMMON] unsigned char 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  3    2[COMMON] float 
  5968 ;; Registers used:
  5969 ;;		wreg, status,2, status,0
  5970 ;; Tracked objects:
  5971 ;;		On entry : 300/0
  5972 ;;		On exit  : 300/0
  5973 ;;		Unchanged: 300/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5975 ;;      Params:         5       0       0       0       0
  5976 ;;      Locals:         0       0       0       0       0
  5977 ;;      Temps:          3       0       0       0       0
  5978 ;;      Totals:         8       0       0       0       0
  5979 ;;Total ram usage:        8 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    1
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		___ftadd
  5986 ;;		___ftmul
  5987 ;;		___lltoft
  5988 ;;		___lwtoft
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function ___ftpack
  5994  1725                     ___ftpack:	
  5995                           
  5996                           ;incstack = 0
  5997                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5998  1725  0875               	movf	___ftpack@exp,w
  5999  1726  1903               	btfsc	3,2
  6000  1727  2F2D               	goto	l871
  6001  1728  0874               	movf	___ftpack@arg+2,w
  6002  1729  0473               	iorwf	___ftpack@arg+1,w
  6003  172A  0472               	iorwf	___ftpack@arg,w
  6004  172B  1D03               	skipz
  6005  172C  2F36               	goto	l4919
  6006  172D                     l871:	
  6007  172D  01F2               	clrf	?___ftpack
  6008  172E  01F3               	clrf	?___ftpack+1
  6009  172F  01F4               	clrf	?___ftpack+2
  6010  1730  0008               	return
  6011  1731                     l4917:	
  6012  1731  0AF5               	incf	___ftpack@exp,f
  6013  1732  1003               	clrc
  6014  1733  0CF4               	rrf	___ftpack@arg+2,f
  6015  1734  0CF3               	rrf	___ftpack@arg+1,f
  6016  1735  0CF2               	rrf	___ftpack@arg,f
  6017  1736                     l4919:	
  6018  1736  30FE               	movlw	254
  6019  1737  0574               	andwf	___ftpack@arg+2,w
  6020  1738  1903               	btfsc	3,2
  6021  1739  2F45               	goto	l4923
  6022  173A  2F31               	goto	l4917
  6023  173B                     l4921:	
  6024  173B  0AF5               	incf	___ftpack@exp,f
  6025  173C  0AF2               	incf	___ftpack@arg,f
  6026  173D  1903               	skipnz
  6027  173E  0AF3               	incf	___ftpack@arg+1,f
  6028  173F  1903               	skipnz
  6029  1740  0AF4               	incf	___ftpack@arg+2,f
  6030  1741  1003               	clrc
  6031  1742  0CF4               	rrf	___ftpack@arg+2,f
  6032  1743  0CF3               	rrf	___ftpack@arg+1,f
  6033  1744  0CF2               	rrf	___ftpack@arg,f
  6034  1745                     l4923:	
  6035  1745  30FF               	movlw	255
  6036  1746  0574               	andwf	___ftpack@arg+2,w
  6037  1747  1903               	btfsc	3,2
  6038  1748  2F53               	goto	l4927
  6039  1749  2F3B               	goto	l4921
  6040  174A                     l4929:	
  6041  174A  3002               	movlw	2
  6042  174B  0275               	subwf	___ftpack@exp,w
  6043  174C  1C03               	btfss	3,0
  6044  174D  2F55               	goto	l883
  6045  174E  03F5               	decf	___ftpack@exp,f
  6046  174F  1003               	clrc
  6047  1750  0DF2               	rlf	___ftpack@arg,f
  6048  1751  0DF3               	rlf	___ftpack@arg+1,f
  6049  1752  0DF4               	rlf	___ftpack@arg+2,f
  6050  1753                     l4927:	
  6051  1753  1FF3               	btfss	___ftpack@arg+1,7
  6052  1754  2F4A               	goto	l4929
  6053  1755                     l883:	
  6054  1755  1C75               	btfss	___ftpack@exp,0
  6055  1756  13F3               	bcf	___ftpack@arg+1,7
  6056  1757  1003               	clrc
  6057  1758  0CF5               	rrf	___ftpack@exp,f
  6058  1759  0875               	movf	___ftpack@exp,w
  6059  175A  00F9               	movwf	??___ftpack+2
  6060  175B  01F8               	clrf	??___ftpack+1
  6061  175C  01F7               	clrf	??___ftpack
  6062  175D  0877               	movf	??___ftpack,w
  6063  175E  04F2               	iorwf	___ftpack@arg,f
  6064  175F  0878               	movf	??___ftpack+1,w
  6065  1760  04F3               	iorwf	___ftpack@arg+1,f
  6066  1761  0879               	movf	??___ftpack+2,w
  6067  1762  04F4               	iorwf	___ftpack@arg+2,f
  6068  1763  0876               	movf	___ftpack@sign,w
  6069  1764  1D03               	btfss	3,2
  6070  1765  17F4               	bsf	___ftpack@arg+2,7
  6071  1766  0008               	return
  6072  1767                     __end_of___ftpack:	
  6073  1767                     PL18:	
  6074  1767  0872               	movf	?___awmod,w
  6075  1768  00BA               	movwf	??_scale
  6076  1769  0873               	movf	?___awmod+1,w
  6077  176A  00BB               	movwf	??_scale+1
  6078  176B  083A               	movf	??_scale,w
  6079  176C  073A               	addwf	??_scale,w
  6080  176D  073A               	addwf	??_scale,w
  6081  176E  3E12               	addlw	low (__npowers_| (0+32768))
  6082  176F  0084               	movwf	4
  6083  1770  3098               	movlw	high (__npowers_| (0+32768))
  6084  1771  1803               	skipnc
  6085  1772  3E01               	addlw	1
  6086  1773  00FF               	movwf	127
  6087  1774  0008               	return
  6088  1775                     __end_ofPL18:	
  6089  1775                     PL28:	
  6090  1775  0820               	movf	?___awdiv,w
  6091  1776  00BC               	movwf	??_scale+2
  6092  1777  0821               	movf	?___awdiv+1,w
  6093  1778  00BD               	movwf	??_scale+3
  6094  1779  083C               	movf	??_scale+2,w
  6095  177A  073C               	addwf	??_scale+2,w
  6096  177B  073C               	addwf	??_scale+2,w
  6097  177C  0008               	return
  6098  177D                     __end_ofPL28:	
  6099  177D                     PL32:	
  6100  177D  0828               	movf	?___ftmul,w
  6101  177E  00BE               	movwf	_scale$1262
  6102  177F  0829               	movf	?___ftmul+1,w
  6103  1780  00BF               	movwf	_scale$1262+1
  6104  1781  082A               	movf	?___ftmul+2,w
  6105  1782  00C0               	movwf	_scale$1262+2
  6106  1783  300A               	movlw	10
  6107  1784  00F2               	movwf	___awmod@divisor
  6108  1785  01F3               	clrf	___awmod@divisor+1
  6109  1786  0841               	movf	scale@scl,w
  6110  1787  00F4               	movwf	___awmod@dividend
  6111  1788  01F5               	clrf	___awmod@dividend+1
  6112  1789  0008               	return
  6113  178A                     __end_ofPL32:	
  6114  178A                     PL34:	
  6115  178A  0828               	movf	?___ftmul,w
  6116  178B  00B7               	movwf	?_scale
  6117  178C  0829               	movf	?___ftmul+1,w
  6118  178D  00B8               	movwf	?_scale+1
  6119  178E  082A               	movf	?___ftmul+2,w
  6120  178F  00B9               	movwf	?_scale+2
  6121  1790  0008               	return
  6122  1791                     __end_ofPL34:	
  6123  1791                     PL36:	
  6124  1791  00BA               	movwf	??_scale
  6125  1792  0873               	movf	?___awmod+1,w
  6126  1793  00BB               	movwf	??_scale+1
  6127  1794  083A               	movf	??_scale,w
  6128  1795  073A               	addwf	??_scale,w
  6129  1796  073A               	addwf	??_scale,w
  6130  1797  3E39               	addlw	low (__powers_| (0+32768))
  6131  1798  0084               	movwf	4
  6132  1799  3098               	movlw	high (__powers_| (0+32768))
  6133  179A  1803               	skipnc
  6134  179B  3E01               	addlw	1
  6135  179C  00FF               	movwf	127
  6136  179D  0008               	return
  6137  179E                     __end_ofPL36:	
  6138  179E                     PL44:	
  6139  179E  300A               	movlw	10
  6140  179F  00A0               	movwf	___awdiv@divisor
  6141  17A0  01A1               	clrf	___awdiv@divisor+1
  6142  17A1  0841               	movf	scale@scl,w
  6143  17A2  00F4               	movwf	___awmod@dividend
  6144  17A3  01F5               	clrf	___awmod@dividend+1
  6145  17A4  1BF4               	btfsc	___awmod@dividend,7
  6146  17A5  03F5               	decf	___awmod@dividend+1,f
  6147  17A6  3064               	movlw	100
  6148  17A7  00F2               	movwf	___awmod@divisor
  6149  17A8  01F3               	clrf	___awmod@divisor+1
  6150  17A9  0008               	return
  6151  17AA                     __end_ofPL44:	
  6152  17AA                     PL48:	
  6153  17AA  082B               	movf	___ftmul@f2,w
  6154  17AB  07B2               	addwf	___ftmul@f3_as_product,f
  6155  17AC  082C               	movf	___ftmul@f2+1,w
  6156  17AD  1103               	clrz
  6157  17AE  1803               	skipnc
  6158  17AF  0A2C               	incf	___ftmul@f2+1,w
  6159  17B0  1D03               	btfss	3,2
  6160  17B1  07B3               	addwf	___ftmul@f3_as_product+1,f
  6161  17B2  082D               	movf	___ftmul@f2+2,w
  6162  17B3  1103               	clrz
  6163  17B4  0008               	return
  6164  17B5                     __end_ofPL48:	
  6165  17B5                     PL54:	
  6166  17B5  00AA               	movwf	___ftmul@f1+2
  6167  17B6  086A               	movf	calcSHT71@rh,w
  6168  17B7  00AB               	movwf	___ftmul@f2
  6169  17B8  086B               	movf	calcSHT71@rh+1,w
  6170  17B9  00AC               	movwf	___ftmul@f2+1
  6171  17BA  086C               	movf	calcSHT71@rh+2,w
  6172  17BB  00AD               	movwf	___ftmul@f2+2
  6173  17BC  0008               	return
  6174  17BD                     __end_ofPL54:	
  6175  17BD                     PL58:	
  6176  17BD  300A               	movlw	10
  6177  17BE  00F2               	movwf	___awmod@divisor
  6178  17BF  01F3               	clrf	___awmod@divisor+1
  6179  17C0  0841               	movf	scale@scl,w
  6180  17C1  00F4               	movwf	___awmod@dividend
  6181  17C2  01F5               	clrf	___awmod@dividend+1
  6182  17C3  0008               	return
  6183  17C4                     __end_ofPL58:	
  6184  17C4                     PL60:	
  6185  17C4  0828               	movf	?___ftmul,w
  6186  17C5  00C5               	movwf	___ftadd@f2
  6187  17C6  0829               	movf	?___ftmul+1,w
  6188  17C7  00C6               	movwf	___ftadd@f2+1
  6189  17C8  082A               	movf	?___ftmul+2,w
  6190  17C9  00C7               	movwf	___ftadd@f2+2
  6191  17CA  0008               	return
  6192  17CB                     __end_ofPL60:	
  6193  17CB                     PL64:	
  6194  17CB  00AA               	movwf	___ftmul@f1+2
  6195  17CC  300A               	movlw	10
  6196  17CD  00A0               	movwf	___awdiv@divisor
  6197  17CE  01A1               	clrf	___awdiv@divisor+1
  6198  17CF  0841               	movf	scale@scl,w
  6199  17D0  00A2               	movwf	___awdiv@dividend
  6200  17D1  01A3               	clrf	___awdiv@dividend+1
  6201  17D2  0008               	return
  6202  17D3                     __end_ofPL64:	
  6203  17D3                     PL68:	
  6204  17D3  00C4               	movwf	___ftadd@f1+2
  6205  17D4  0864               	movf	_calcSHT71$1258,w
  6206  17D5  00C5               	movwf	___ftadd@f2
  6207  17D6  0865               	movf	_calcSHT71$1258+1,w
  6208  17D7  00C6               	movwf	___ftadd@f2+1
  6209  17D8  0866               	movf	_calcSHT71$1258+2,w
  6210  17D9  00C7               	movwf	___ftadd@f2+2
  6211  17DA  0008               	return
  6212  17DB                     __end_ofPL68:	
  6213  17DB                     PL70:	
  6214  17DB  00AA               	movwf	___ftmul@f1+2
  6215  17DC  083E               	movf	_scale$1262,w
  6216  17DD  00AB               	movwf	___ftmul@f2
  6217  17DE  083F               	movf	_scale$1262+1,w
  6218  17DF  00AC               	movwf	___ftmul@f2+1
  6219  17E0  0840               	movf	_scale$1262+2,w
  6220  17E1  00AD               	movwf	___ftmul@f2+2
  6221  17E2  0008               	return
  6222  17E3                     __end_ofPL70:	
  6223  17E3                     PL74:	
  6224  17E3  00AA               	movwf	___ftmul@f1+2
  6225  17E4  3064               	movlw	100
  6226  17E5  00A0               	movwf	___awdiv@divisor
  6227  17E6  01A1               	clrf	___awdiv@divisor+1
  6228  17E7  0841               	movf	scale@scl,w
  6229  17E8  00A2               	movwf	___awdiv@dividend
  6230  17E9  01A3               	clrf	___awdiv@dividend+1
  6231  17EA  0008               	return
  6232  17EB                     __end_ofPL74:	
  6233  17EB                     PL78:	
  6234  17EB  0820               	movf	?___awdiv,w
  6235  17EC  00BA               	movwf	??_scale
  6236  17ED  0821               	movf	?___awdiv+1,w
  6237  17EE  00BB               	movwf	??_scale+1
  6238  17EF  083A               	movf	??_scale,w
  6239  17F0  073A               	addwf	??_scale,w
  6240  17F1  073A               	addwf	??_scale,w
  6241  17F2  0008               	return
  6242  17F3                     __end_ofPL78:	
  6243  17F3                     PL86:	
  6244  17F3  1683               	bsf	3,5	;RP0=1, select bank1
  6245  17F4  1303               	bcf	3,6	;RP1=0, select bank1
  6246  17F5  1287               	bcf	7,5	;volatile
  6247  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  6248  17F7  1287               	bcf	7,5	;volatile
  6249  17F8  0008               	return
  6250  17F9                     __end_ofPL86:	
  6251  17F9                     PL88:	
  6252  17F9  3E54               	addlw	low ((__powers_| (0+32768)+27))
  6253  17FA  0084               	movwf	4
  6254  17FB  3098               	movlw	high ((__powers_| (0+32768)+27))
  6255  17FC  1803               	skipnc
  6256  17FD  3E01               	addlw	1
  6257  17FE  00FF               	movwf	127
  6258  17FF  0008               	return
  6259  1800                     __end_ofPL88:	
  6260                           
  6261                           	psect	text34
  6262  088B                     __ptext34:	
  6263 ;; *************** function _displaySoilTemp *****************
  6264 ;; Defined at:
  6265 ;;		line 166 in file "main.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  t2              3   62[BANK0 ] float 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;		None
  6270 ;; Return value:  Size  Location     Type
  6271 ;;		None               void
  6272 ;; Registers used:
  6273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 300/0
  6276 ;;		On exit  : 300/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6279 ;;      Params:         0       3       0       0       0
  6280 ;;      Locals:         0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0
  6282 ;;      Totals:         0       3       0       0       0
  6283 ;;Total ram usage:        3 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    5
  6286 ;; This function calls:
  6287 ;;		_LcdSetCursor
  6288 ;;		_LcdWriteString
  6289 ;;		_sprintf
  6290 ;; This function is called by:
  6291 ;;		_main
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function _displaySoilTemp
  6297  088B                     _displaySoilTemp:	
  6298                           
  6299                           ;main.c: 167: sprintf(temperature, " %.1f", t2);
  6300                           
  6301                           ;incstack = 0
  6302                           ; Regs used in _displaySoilTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6303  088B  306F               	movlw	low (STR_3| (0+32768))
  6304  088C  00D4               	movwf	sprintf@f
  6305  088D  3099               	movlw	high (STR_3| (0+32768))
  6306  088E  00D5               	movwf	sprintf@f+1
  6307  088F  085E               	movf	displaySoilTemp@t2,w
  6308  0890  00D6               	movwf	?_sprintf+2
  6309  0891  085F               	movf	displaySoilTemp@t2+1,w
  6310  0892  00D7               	movwf	?_sprintf+3
  6311  0893  0860               	movf	displaySoilTemp@t2+2,w
  6312  0894  00D8               	movwf	?_sprintf+4
  6313  0895  30B9               	movlw	(low (_temperature| 0))& (0+255)
  6314  0896  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6315  089B  3001               	movlw	1
  6316                           
  6317                           ;main.c: 168: LcdSetCursor(1,1);
  6318  089C  01F6               	clrf	LcdSetCursor@b
  6319  089D  0AF6               	incf	LcdSetCursor@b,f
  6320  089E  2685  120A  158A   	fcall	_LcdSetCursor
  6321                           
  6322                           ;main.c: 169: LcdWriteString((char *)"Soil temperature");
  6323  08A1  30FF               	movlw	low (STR_13| (0+32768))
  6324  08A2  00F7               	movwf	LcdWriteString@a
  6325  08A3  3098               	movlw	high (STR_13| (0+32768))
  6326  08A4  00F8               	movwf	LcdWriteString@a+1
  6327  08A5  26AE  120A  158A   	fcall	_LcdWriteString
  6328  08A8  3002               	movlw	2
  6329                           
  6330                           ;main.c: 170: LcdSetCursor(2,1);
  6331  08A9  01F6               	clrf	LcdSetCursor@b
  6332  08AA  0AF6               	incf	LcdSetCursor@b,f
  6333  08AB  2685  120A  158A   	fcall	_LcdSetCursor
  6334                           
  6335                           ;main.c: 171: LcdWriteString(temperature);
  6336  08AE  30B9               	movlw	(low (_temperature| 0))& (0+255)
  6337  08AF  00F7               	movwf	LcdWriteString@a
  6338  08B0  01F8               	clrf	LcdWriteString@a+1
  6339  08B1  26AE  120A  158A   	fcall	_LcdWriteString
  6340                           
  6341                           ;main.c: 172: LcdSetCursor(2,6);
  6342  08B4  3006               	movlw	6
  6343  08B5  00F6               	movwf	LcdSetCursor@b
  6344  08B6  3002               	movlw	2
  6345  08B7  2685  120A  158A   	fcall	_LcdSetCursor
  6346                           
  6347                           ;main.c: 173: LcdWriteString((char *)" deg        ");
  6348  08BA  302B               	movlw	low (STR_5| (0+32768))
  6349  08BB  00F7               	movwf	LcdWriteString@a
  6350  08BC  3099               	movlw	high (STR_5| (0+32768))
  6351  08BD  00F8               	movwf	LcdWriteString@a+1
  6352  08BE  2EAE               	ljmp	l5223
  6353  08BF                     __end_of_displaySoilTemp:	
  6354  08BF                     __ptext38:	
  6355 ;; *************** function _displayAirTemp *****************
  6356 ;; Defined at:
  6357 ;;		line 130 in file "main.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  temp2           3   62[BANK0 ] float 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 300/0
  6368 ;;		On exit  : 300/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6371 ;;      Params:         0       3       0       0       0
  6372 ;;      Locals:         0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0
  6374 ;;      Totals:         0       3       0       0       0
  6375 ;;Total ram usage:        3 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    5
  6378 ;; This function calls:
  6379 ;;		_LcdSetCursor
  6380 ;;		_LcdWriteString
  6381 ;;		_sprintf
  6382 ;; This function is called by:
  6383 ;;		_main
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _displayAirTemp
  6389  08BF                     _displayAirTemp:	
  6390                           
  6391                           ;main.c: 131: sprintf(temperature, " %.1f", temp2);
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _displayAirTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6395  08BF  306F               	movlw	low (STR_3| (0+32768))
  6396  08C0  00D4               	movwf	sprintf@f
  6397  08C1  3099               	movlw	high (STR_3| (0+32768))
  6398  08C2  00D5               	movwf	sprintf@f+1
  6399  08C3  085E               	movf	displayAirTemp@temp2,w
  6400  08C4  00D6               	movwf	?_sprintf+2
  6401  08C5  085F               	movf	displayAirTemp@temp2+1,w
  6402  08C6  00D7               	movwf	?_sprintf+3
  6403  08C7  0860               	movf	displayAirTemp@temp2+2,w
  6404  08C8  00D8               	movwf	?_sprintf+4
  6405  08C9  30B9               	movlw	(low (_temperature| 0))& (0+255)
  6406  08CA  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6407  08CF  3001               	movlw	1
  6408                           
  6409                           ;main.c: 132: LcdSetCursor(1,1);
  6410  08D0  01F6               	clrf	LcdSetCursor@b
  6411  08D1  0AF6               	incf	LcdSetCursor@b,f
  6412  08D2  2685  120A  158A   	fcall	_LcdSetCursor
  6413                           
  6414                           ;main.c: 133: LcdWriteString((char *)"Air temperature ");
  6415  08D5  30EE               	movlw	low (STR_4| (0+32768))
  6416  08D6  00F7               	movwf	LcdWriteString@a
  6417  08D7  3098               	movlw	high (STR_4| (0+32768))
  6418  08D8  00F8               	movwf	LcdWriteString@a+1
  6419  08D9  26AE  120A  158A   	fcall	_LcdWriteString
  6420  08DC  3002               	movlw	2
  6421                           
  6422                           ;main.c: 134: LcdSetCursor(2,1);
  6423  08DD  01F6               	clrf	LcdSetCursor@b
  6424  08DE  0AF6               	incf	LcdSetCursor@b,f
  6425  08DF  2685  120A  158A   	fcall	_LcdSetCursor
  6426                           
  6427                           ;main.c: 135: LcdWriteString(temperature);
  6428  08E2  30B9               	movlw	(low (_temperature| 0))& (0+255)
  6429  08E3  00F7               	movwf	LcdWriteString@a
  6430  08E4  01F8               	clrf	LcdWriteString@a+1
  6431  08E5  26AE  120A  158A   	fcall	_LcdWriteString
  6432                           
  6433                           ;main.c: 136: LcdSetCursor(2,6);
  6434  08E8  3006               	movlw	6
  6435  08E9  00F6               	movwf	LcdSetCursor@b
  6436  08EA  3002               	movlw	2
  6437  08EB  2685  120A  158A   	fcall	_LcdSetCursor
  6438                           
  6439                           ;main.c: 137: LcdWriteString((char *)" deg        ");
  6440  08EE  302B               	movlw	low (STR_5| (0+32768))
  6441  08EF  00F7               	movwf	LcdWriteString@a
  6442  08F0  3099               	movlw	high (STR_5| (0+32768))
  6443  08F1  00F8               	movwf	LcdWriteString@a+1
  6444  08F2  2EAE               	ljmp	l5223
  6445  08F3                     __end_of_displayAirTemp:	
  6446  08F3                     __ptext39:	
  6447 ;; *************** function _displayAirMoist *****************
  6448 ;; Defined at:
  6449 ;;		line 140 in file "main.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  humi2           3   62[BANK0 ] float 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;		None
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 300/0
  6460 ;;		On exit  : 300/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6463 ;;      Params:         0       3       0       0       0
  6464 ;;      Locals:         0       0       0       0       0
  6465 ;;      Temps:          0       0       0       0       0
  6466 ;;      Totals:         0       3       0       0       0
  6467 ;;Total ram usage:        3 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    5
  6470 ;; This function calls:
  6471 ;;		_LcdSetCursor
  6472 ;;		_LcdWriteString
  6473 ;;		_sprintf
  6474 ;; This function is called by:
  6475 ;;		_main
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           
  6480                           ;psect for function _displayAirMoist
  6481  08F3                     _displayAirMoist:	
  6482                           
  6483                           ;main.c: 141: sprintf(humidity, " %.1f", humi2);
  6484                           
  6485                           ;incstack = 0
  6486                           ; Regs used in _displayAirMoist: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6487  08F3  306F               	movlw	low (STR_3| (0+32768))
  6488  08F4  00D4               	movwf	sprintf@f
  6489  08F5  3099               	movlw	high (STR_3| (0+32768))
  6490  08F6  00D5               	movwf	sprintf@f+1
  6491  08F7  085E               	movf	displayAirMoist@humi2,w
  6492  08F8  00D6               	movwf	?_sprintf+2
  6493  08F9  085F               	movf	displayAirMoist@humi2+1,w
  6494  08FA  00D7               	movwf	?_sprintf+3
  6495  08FB  0860               	movf	displayAirMoist@humi2+2,w
  6496  08FC  00D8               	movwf	?_sprintf+4
  6497  08FD  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6498  08FE  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6499  0903  3001               	movlw	1
  6500                           
  6501                           ;main.c: 142: LcdSetCursor(1,1);
  6502  0904  01F6               	clrf	LcdSetCursor@b
  6503  0905  0AF6               	incf	LcdSetCursor@b,f
  6504  0906  2685  120A  158A   	fcall	_LcdSetCursor
  6505                           
  6506                           ;main.c: 143: LcdWriteString((char *)"Air moist       ");
  6507  0909  3088               	movlw	low (STR_7| (0+32768))
  6508  090A  00F7               	movwf	LcdWriteString@a
  6509  090B  3098               	movlw	high (STR_7| (0+32768))
  6510  090C  00F8               	movwf	LcdWriteString@a+1
  6511  090D  26AE  120A  158A   	fcall	_LcdWriteString
  6512  0910  3002               	movlw	2
  6513                           
  6514                           ;main.c: 144: LcdSetCursor(2,1);
  6515  0911  01F6               	clrf	LcdSetCursor@b
  6516  0912  0AF6               	incf	LcdSetCursor@b,f
  6517  0913  2685  120A  158A   	fcall	_LcdSetCursor
  6518                           
  6519                           ;main.c: 145: LcdWriteString(humidity);
  6520  0916  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6521  0917  00F7               	movwf	LcdWriteString@a
  6522  0918  01F8               	clrf	LcdWriteString@a+1
  6523  0919  26AE  120A  158A   	fcall	_LcdWriteString
  6524                           
  6525                           ;main.c: 146: LcdSetCursor(2,6);
  6526  091C  3006               	movlw	6
  6527  091D  00F6               	movwf	LcdSetCursor@b
  6528  091E  3002               	movlw	2
  6529  091F  2685  120A  158A   	fcall	_LcdSetCursor
  6530                           
  6531                           ;main.c: 147: LcdWriteString((char *)" %          ");
  6532  0922  301E               	movlw	low (STR_8| (0+32768))
  6533  0923  00F7               	movwf	LcdWriteString@a
  6534  0924  3099               	movlw	high (STR_8| (0+32768))
  6535  0925  00F8               	movwf	LcdWriteString@a+1
  6536  0926  2EAE               	ljmp	l5223
  6537  0927                     __end_of_displayAirMoist:	
  6538  0927                     __ptext35:	
  6539 ;; *************** function _displayCO2 *****************
  6540 ;; Defined at:
  6541 ;;		line 150 in file "main.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  co22            2   11[BANK0 ] unsigned int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 300/0
  6552 ;;		On exit  : 300/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6555 ;;      Params:         0       2       0       0       0
  6556 ;;      Locals:         0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0
  6558 ;;      Totals:         0       2       0       0       0
  6559 ;;Total ram usage:        2 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    5
  6562 ;; This function calls:
  6563 ;;		_LcdSetCursor
  6564 ;;		_LcdWriteInt
  6565 ;;		_LcdWriteString
  6566 ;; This function is called by:
  6567 ;;		_main
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           
  6572                           ;psect for function _displayCO2
  6573  0927                     _displayCO2:	
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in _displayCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6577  0927  3001               	movlw	1
  6578                           
  6579                           ;main.c: 151: LcdSetCursor(1,1);
  6580  0928  01F6               	clrf	LcdSetCursor@b
  6581  0929  0AF6               	incf	LcdSetCursor@b,f
  6582  092A  2685  120A  158A   	fcall	_LcdSetCursor
  6583                           
  6584                           ;main.c: 152: LcdWriteString((char *)"CO2 in air      ");
  6585  092D  3099               	movlw	low (STR_9| (0+32768))
  6586  092E  00F7               	movwf	LcdWriteString@a
  6587  092F  3098               	movlw	high (STR_9| (0+32768))
  6588  0930  00F8               	movwf	LcdWriteString@a+1
  6589  0931  26AE  120A  158A   	fcall	_LcdWriteString
  6590                           
  6591                           ;main.c: 153: if(measure_co2)
  6592  0934  1683               	bsf	3,5	;RP0=1, select bank1
  6593  0935  082E               	movf	_measure_co2^(0+128),w
  6594  0936  1903               	btfsc	3,2
  6595  0937  294F               	goto	l5961
  6596                           
  6597                           ;main.c: 154: {
  6598                           ;main.c: 155: LcdWriteInt(co22,2,1);
  6599  0938  1283               	bcf	3,5	;RP0=0, select bank0
  6600  0939  082C               	movf	displayCO2@co22+1,w
  6601  093A  00A5               	movwf	LcdWriteInt@i+1
  6602  093B  082B               	movf	displayCO2@co22,w
  6603  093C  00A4               	movwf	LcdWriteInt@i
  6604  093D  3002               	movlw	2
  6605  093E  00A6               	movwf	LcdWriteInt@row
  6606  093F  01A7               	clrf	LcdWriteInt@column
  6607  0940  0AA7               	incf	LcdWriteInt@column,f
  6608  0941  23A1  120A  158A   	fcall	_LcdWriteInt
  6609                           
  6610                           ;main.c: 156: LcdSetCursor(2,5);
  6611  0944  3005               	movlw	5
  6612  0945  00F6               	movwf	LcdSetCursor@b
  6613  0946  3002               	movlw	2
  6614  0947  2685  120A  158A   	fcall	_LcdSetCursor
  6615                           
  6616                           ;main.c: 157: LcdWriteString((char *)" ppm        ");
  6617  094A  3038               	movlw	low (STR_10| (0+32768))
  6618  094B  00F7               	movwf	LcdWriteString@a
  6619  094C  3099               	movlw	high (STR_10| (0+32768))
  6620  094D  00F8               	movwf	LcdWriteString@a+1
  6621  094E  2EAE               	ljmp	l5223
  6622  094F                     l5961:	
  6623                           ;main.c: 158: }
  6624                           
  6625  094F  3002               	movlw	2
  6626                           
  6627                           ;main.c: 159: else
  6628                           ;main.c: 160: {
  6629                           ;main.c: 161: LcdSetCursor(2,1);
  6630  0950  01F6               	clrf	LcdSetCursor@b
  6631  0951  0AF6               	incf	LcdSetCursor@b,f
  6632  0952  2685  120A  158A   	fcall	_LcdSetCursor
  6633                           
  6634                           ;main.c: 162: LcdWriteString((char *)"Measuring...    ");
  6635  0955  30AA               	movlw	low (STR_11| (0+32768))
  6636  0956  00F7               	movwf	LcdWriteString@a
  6637  0957  3098               	movlw	high (STR_11| (0+32768))
  6638  0958  00F8               	movwf	LcdWriteString@a+1
  6639  0959  2EAE               	ljmp	l5223
  6640  095A                     __end_of_displayCO2:	
  6641  095A                     __ptext4:	
  6642 ;; *************** function _menuHumi *****************
  6643 ;; Defined at:
  6644 ;;		line 345 in file "main.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 200/100
  6655 ;;		On exit  : 300/100
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6658 ;;      Params:         0       0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0
  6661 ;;      Totals:         0       0       0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    6
  6665 ;; This function calls:
  6666 ;;		_LcdSetCursor
  6667 ;;		_LcdWriteString
  6668 ;;		___eetoft
  6669 ;;		___ftadd
  6670 ;;		___ftge
  6671 ;;		___fttoee
  6672 ;;		_manage_buttons
  6673 ;;		_menuCO2
  6674 ;;		_sprintf
  6675 ;; This function is called by:
  6676 ;;		_menu
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           
  6681                           ;psect for function _menuHumi
  6682  095A                     _menuHumi:	
  6683                           
  6684                           ;main.c: 346: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _menuHumi: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6688  095A  306F               	movlw	low (STR_3| (0+32768))
  6689  095B  1283               	bcf	3,5	;RP0=0, select bank0
  6690  095C  00D4               	movwf	sprintf@f
  6691  095D  3099               	movlw	high (STR_3| (0+32768))
  6692  095E  00D5               	movwf	sprintf@f+1
  6693  095F  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6694  0960  264B               	fcall	___eetoft
  6695  0961  0876               	movf	?___eetoft,w
  6696  0962  00D6               	movwf	?_sprintf+2
  6697  0963  0877               	movf	?___eetoft+1,w
  6698  0964  00D7               	movwf	?_sprintf+3
  6699  0965  0878               	movf	?___eetoft+2,w
  6700  0966  00D8               	movwf	?_sprintf+4
  6701  0967  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6702  0968  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6703  096D  3001               	movlw	1
  6704                           
  6705                           ;main.c: 347: LcdSetCursor(1,1);
  6706  096E  01F6               	clrf	LcdSetCursor@b
  6707  096F  0AF6               	incf	LcdSetCursor@b,f
  6708  0970  2685  120A  158A   	fcall	_LcdSetCursor
  6709                           
  6710                           ;main.c: 348: LcdWriteString((char *)"Set air moist   ");
  6711  0973  30CC               	movlw	low (STR_19| (0+32768))
  6712  0974  00F7               	movwf	LcdWriteString@a
  6713  0975  3098               	movlw	high (STR_19| (0+32768))
  6714  0976  00F8               	movwf	LcdWriteString@a+1
  6715  0977  26AE  120A  158A   	fcall	_LcdWriteString
  6716  097A  3002               	movlw	2
  6717                           
  6718                           ;main.c: 349: LcdSetCursor(2,1);
  6719  097B  01F6               	clrf	LcdSetCursor@b
  6720  097C  0AF6               	incf	LcdSetCursor@b,f
  6721  097D  2685  120A  158A   	fcall	_LcdSetCursor
  6722                           
  6723                           ;main.c: 350: LcdWriteString(humidity);
  6724  0980  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6725  0981  00F7               	movwf	LcdWriteString@a
  6726  0982  01F8               	clrf	LcdWriteString@a+1
  6727  0983  26AE  120A  158A   	fcall	_LcdWriteString
  6728                           
  6729                           ;main.c: 351: LcdSetCursor(2,6);
  6730  0986  3006               	movlw	6
  6731  0987  00F6               	movwf	LcdSetCursor@b
  6732  0988  3002               	movlw	2
  6733  0989  2685  120A  158A   	fcall	_LcdSetCursor
  6734                           
  6735                           ;main.c: 352: LcdWriteString((char *)"        ");
  6736  098C  3022               	movlw	low ((STR_8+4)| (0+32768))
  6737  098D  00F7               	movwf	LcdWriteString@a
  6738  098E  3099               	movlw	high ((STR_8+4)| (0+32768))
  6739  098F  00F8               	movwf	LcdWriteString@a+1
  6740  0990  26AE  120A  158A   	fcall	_LcdWriteString
  6741  0993                     l5801:	
  6742                           ;main.c: 354: while(!ok_flag_co2)
  6743                           
  6744  0993  1683               	bsf	3,5	;RP0=1, select bank1
  6745  0994  0832               	movf	_ok_flag_co2^(0+128),w
  6746  0995  1D03               	btfss	3,2
  6747  0996  0008               	return
  6748  0997  0064               	clrwdt	;# 
  6749                           
  6750                           ;main.c: 358: manage_buttons();
  6751  0998  2268  120A  158A   	fcall	_manage_buttons
  6752                           
  6753                           ;main.c: 360: if(plus_flag)
  6754  099B  087B               	movf	_plus_flag,w
  6755  099C  1903               	btfsc	3,2
  6756  099D  29FC               	goto	l5779
  6757                           
  6758                           ;main.c: 361: {
  6759                           ;main.c: 362: zeljena_vlaznost += 1;
  6760  099E  1283               	bcf	3,5	;RP0=0, select bank0
  6761  099F  1303               	bcf	3,6	;RP1=0, select bank0
  6762  09A0  3080               	movlw	128
  6763  09A1  01C2               	clrf	___ftadd@f1
  6764  09A2  00C3               	movwf	___ftadd@f1+1
  6765  09A3  303F               	movlw	63
  6766  09A4  00C4               	movwf	___ftadd@f1+2
  6767  09A5  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6768  09A6  264B               	fcall	___eetoft
  6769  09A7  0876               	movf	?___eetoft,w
  6770  09A8  00C5               	movwf	___ftadd@f2
  6771  09A9  0877               	movf	?___eetoft+1,w
  6772  09AA  00C6               	movwf	___ftadd@f2+1
  6773  09AB  0878               	movf	?___eetoft+2,w
  6774  09AC  00C7               	movwf	___ftadd@f2+2
  6775  09AD  120A  118A  25BB  120A  158A  	fcall	___ftadd
  6776  09B2  0842               	movf	?___ftadd,w
  6777  09B3  00CE               	movwf	___fttoee@data
  6778  09B4  0843               	movf	?___ftadd+1,w
  6779  09B5  00CF               	movwf	___fttoee@data+1
  6780  09B6  0844               	movf	?___ftadd+2,w
  6781  09B7  00D0               	movwf	___fttoee@data+2
  6782  09B8  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6783  09B9  26C6  120A  158A   	fcall	___fttoee
  6784                           
  6785                           ;main.c: 363: if(zeljena_vlaznost > 99) zeljena_vlaznost = 99;
  6786  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  6787  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  6788  09BE  30C6               	movlw	198
  6789  09BF  01CE               	clrf	___ftge@ff1
  6790  09C0  00CF               	movwf	___ftge@ff1+1
  6791  09C1  3042               	movlw	66
  6792  09C2  00D0               	movwf	___ftge@ff1+2
  6793  09C3  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6794  09C4  264B               	fcall	___eetoft
  6795  09C5  0876               	movf	?___eetoft,w
  6796  09C6  00D1               	movwf	___ftge@ff2
  6797  09C7  0877               	movf	?___eetoft+1,w
  6798  09C8  00D2               	movwf	___ftge@ff2+1
  6799  09C9  0878               	movf	?___eetoft+2,w
  6800  09CA  00D3               	movwf	___ftge@ff2+2
  6801  09CB  120A  118A  248B  120A  158A  	fcall	___ftge
  6802  09D0  1803               	btfsc	3,0
  6803  09D1  29DB               	goto	l5771
  6804  09D2  30C6               	movlw	198
  6805  09D3  01CE               	clrf	___fttoee@data
  6806  09D4  00CF               	movwf	___fttoee@data+1
  6807  09D5  3042               	movlw	66
  6808  09D6  00D0               	movwf	___fttoee@data+2
  6809  09D7  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6810  09D8  26C6  120A  158A   	fcall	___fttoee
  6811  09DB                     l5771:	
  6812  09DB  306F               	movlw	low (STR_3| (0+32768))
  6813                           
  6814                           ;main.c: 364: plus_flag = 0;
  6815  09DC  01FB               	clrf	_plus_flag
  6816                           
  6817                           ;main.c: 366: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6818  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  6819  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  6820  09DF  00D4               	movwf	sprintf@f
  6821  09E0  3099               	movlw	high (STR_3| (0+32768))
  6822  09E1  00D5               	movwf	sprintf@f+1
  6823  09E2  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6824  09E3  264B               	fcall	___eetoft
  6825  09E4  0876               	movf	?___eetoft,w
  6826  09E5  00D6               	movwf	?_sprintf+2
  6827  09E6  0877               	movf	?___eetoft+1,w
  6828  09E7  00D7               	movwf	?_sprintf+3
  6829  09E8  0878               	movf	?___eetoft+2,w
  6830  09E9  00D8               	movwf	?_sprintf+4
  6831  09EA  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6832  09EB  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6833  09F0  3002               	movlw	2
  6834                           
  6835                           ;main.c: 367: LcdSetCursor(2,1);
  6836  09F1  01F6               	clrf	LcdSetCursor@b
  6837  09F2  0AF6               	incf	LcdSetCursor@b,f
  6838  09F3  2685  120A  158A   	fcall	_LcdSetCursor
  6839                           
  6840                           ;main.c: 368: LcdWriteString(humidity);
  6841  09F6  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6842  09F7  00F7               	movwf	LcdWriteString@a
  6843  09F8  01F8               	clrf	LcdWriteString@a+1
  6844  09F9  26AE  120A  158A   	fcall	_LcdWriteString
  6845  09FC                     l5779:	
  6846                           
  6847                           ;main.c: 369: }
  6848                           ;main.c: 371: if(minus_flag)
  6849  09FC  1683               	bsf	3,5	;RP0=1, select bank1
  6850  09FD  1303               	bcf	3,6	;RP1=0, select bank1
  6851  09FE  0831               	movf	_minus_flag^(0+128),w
  6852  09FF  1903               	btfsc	3,2
  6853  0A00  2A5D               	goto	l5793
  6854                           
  6855                           ;main.c: 372: {
  6856                           ;main.c: 373: zeljena_vlaznost -= 1;
  6857  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  6858  0A02  3080               	movlw	128
  6859  0A03  01C2               	clrf	___ftadd@f1
  6860  0A04  00C3               	movwf	___ftadd@f1+1
  6861  0A05  30BF               	movlw	191
  6862  0A06  00C4               	movwf	___ftadd@f1+2
  6863  0A07  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6864  0A08  264B               	fcall	___eetoft
  6865  0A09  0876               	movf	?___eetoft,w
  6866  0A0A  00C5               	movwf	___ftadd@f2
  6867  0A0B  0877               	movf	?___eetoft+1,w
  6868  0A0C  00C6               	movwf	___ftadd@f2+1
  6869  0A0D  0878               	movf	?___eetoft+2,w
  6870  0A0E  00C7               	movwf	___ftadd@f2+2
  6871  0A0F  120A  118A  25BB  120A  158A  	fcall	___ftadd
  6872  0A14  0842               	movf	?___ftadd,w
  6873  0A15  00CE               	movwf	___fttoee@data
  6874  0A16  0843               	movf	?___ftadd+1,w
  6875  0A17  00CF               	movwf	___fttoee@data+1
  6876  0A18  0844               	movf	?___ftadd+2,w
  6877  0A19  00D0               	movwf	___fttoee@data+2
  6878  0A1A  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6879  0A1B  26C6  120A  158A   	fcall	___fttoee
  6880                           
  6881                           ;main.c: 374: if(zeljena_vlaznost < 30) zeljena_vlaznost = 30;
  6882  0A1E  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6883  0A1F  264B               	fcall	___eetoft
  6884  0A20  0876               	movf	?___eetoft,w
  6885  0A21  00CE               	movwf	___ftge@ff1
  6886  0A22  0877               	movf	?___eetoft+1,w
  6887  0A23  00CF               	movwf	___ftge@ff1+1
  6888  0A24  0878               	movf	?___eetoft+2,w
  6889  0A25  00D0               	movwf	___ftge@ff1+2
  6890  0A26  30F0               	movlw	240
  6891  0A27  01D1               	clrf	___ftge@ff2
  6892  0A28  00D2               	movwf	___ftge@ff2+1
  6893  0A29  3041               	movlw	65
  6894  0A2A  00D3               	movwf	___ftge@ff2+2
  6895  0A2B  120A  118A  248B  120A  158A  	fcall	___ftge
  6896  0A30  1803               	btfsc	3,0
  6897  0A31  2A3B               	goto	l5785
  6898  0A32  30F0               	movlw	240
  6899  0A33  01CE               	clrf	___fttoee@data
  6900  0A34  00CF               	movwf	___fttoee@data+1
  6901  0A35  3041               	movlw	65
  6902  0A36  00D0               	movwf	___fttoee@data+2
  6903  0A37  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6904  0A38  26C6  120A  158A   	fcall	___fttoee
  6905  0A3B                     l5785:	
  6906                           
  6907                           ;main.c: 375: minus_flag = 0;
  6908  0A3B  1683               	bsf	3,5	;RP0=1, select bank1
  6909  0A3C  1303               	bcf	3,6	;RP1=0, select bank1
  6910  0A3D  306F               	movlw	low (STR_3| (0+32768))
  6911  0A3E  01B1               	clrf	_minus_flag^(0+128)
  6912                           
  6913                           ;main.c: 377: sprintf(humidity, " %.1f", zeljena_vlaznost);
  6914  0A3F  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0A40  00D4               	movwf	sprintf@f
  6916  0A41  3099               	movlw	high (STR_3| (0+32768))
  6917  0A42  00D5               	movwf	sprintf@f+1
  6918  0A43  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  6919  0A44  264B               	fcall	___eetoft
  6920  0A45  0876               	movf	?___eetoft,w
  6921  0A46  00D6               	movwf	?_sprintf+2
  6922  0A47  0877               	movf	?___eetoft+1,w
  6923  0A48  00D7               	movwf	?_sprintf+3
  6924  0A49  0878               	movf	?___eetoft+2,w
  6925  0A4A  00D8               	movwf	?_sprintf+4
  6926  0A4B  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6927  0A4C  120A  118A  20A6  120A  158A  	fcall	_sprintf
  6928  0A51  3002               	movlw	2
  6929                           
  6930                           ;main.c: 378: LcdSetCursor(2,1);
  6931  0A52  01F6               	clrf	LcdSetCursor@b
  6932  0A53  0AF6               	incf	LcdSetCursor@b,f
  6933  0A54  2685  120A  158A   	fcall	_LcdSetCursor
  6934                           
  6935                           ;main.c: 379: LcdWriteString(humidity);
  6936  0A57  30B4               	movlw	(low (_humidity| 0))& (0+255)
  6937  0A58  00F7               	movwf	LcdWriteString@a
  6938  0A59  01F8               	clrf	LcdWriteString@a+1
  6939  0A5A  26AE  120A  158A   	fcall	_LcdWriteString
  6940  0A5D                     l5793:	
  6941                           
  6942                           ;main.c: 380: }
  6943                           ;main.c: 382: if(ok_flag)
  6944  0A5D  087A               	movf	_ok_flag,w
  6945  0A5E  1903               	btfsc	3,2
  6946  0A5F  2993               	goto	l5801
  6947                           
  6948                           ;main.c: 383: {
  6949                           ;main.c: 384: ok_flag = 0;
  6950  0A60  01FA               	clrf	_ok_flag
  6951                           
  6952                           ;main.c: 385: ok_flag_humi = 1;
  6953  0A61  1683               	bsf	3,5	;RP0=1, select bank1
  6954  0A62  01B3               	clrf	_ok_flag_humi^(0+128)
  6955  0A63  0AB3               	incf	_ok_flag_humi^(0+128),f
  6956                           
  6957                           ;main.c: 386: menuCO2();
  6958  0A64  22C6  120A  158A   	fcall	_menuCO2
  6959  0A67  2993               	goto	l5801
  6960  0A68                     __end_of_menuHumi:	
  6961  0A68                     __ptext6:	
  6962 ;; *************** function _manage_buttons *****************
  6963 ;; Defined at:
  6964 ;;		line 276 in file "main.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/100
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6978 ;;      Params:         0       0       0       0       0
  6979 ;;      Locals:         0       0       0       0       0
  6980 ;;      Temps:          3       0       0       0       0
  6981 ;;      Totals:         3       0       0       0       0
  6982 ;;Total ram usage:        3 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    1
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		_menuCO2
  6989 ;;		_menuHumi
  6990 ;;		_menu
  6991 ;; This function uses a non-reentrant model
  6992 ;;
  6993                           
  6994                           
  6995                           ;psect for function _manage_buttons
  6996  0A68                     _manage_buttons:	
  6997                           
  6998                           ;main.c: 278: if(RA2)
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _manage_buttons: [wreg]
  7002  0A68  1283               	bcf	3,5	;RP0=0, select bank0
  7003  0A69  1303               	bcf	3,6	;RP1=0, select bank0
  7004  0A6A  1D05               	btfss	5,2	;volatile
  7005  0A6B  2A87               	goto	l3509
  7006                           
  7007                           ;main.c: 279: {
  7008                           ;main.c: 280: _delay((unsigned long)((20)*(8000000/4000.0)));
  7009  0A6C  3034               	movlw	52
  7010  0A6D  00F3               	movwf	??_manage_buttons+1
  7011  0A6E  30F1               	movlw	241
  7012  0A6F  00F2               	movwf	??_manage_buttons
  7013  0A70                     u6997:	
  7014  0A70  0BF2               	decfsz	??_manage_buttons,f
  7015  0A71  2A70               	goto	u6997
  7016  0A72  0BF3               	decfsz	??_manage_buttons+1,f
  7017  0A73  2A70               	goto	u6997
  7018  0A74  2A75               	nop2
  7019                           
  7020                           ;main.c: 281: if(RA2) plus_flag = 1;
  7021  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  7022  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  7023  0A77  1D05               	btfss	5,2	;volatile
  7024  0A78  2A7B               	goto	l3507
  7025  0A79  01FB               	clrf	_plus_flag
  7026  0A7A  0AFB               	incf	_plus_flag,f
  7027  0A7B                     l3507:	
  7028                           
  7029                           ;main.c: 282: _delay((unsigned long)((150)*(8000000/4000.0)));
  7030  0A7B  3002               	movlw	2
  7031  0A7C  00F4               	movwf	??_manage_buttons+2
  7032  0A7D  3086               	movlw	134
  7033  0A7E  00F3               	movwf	??_manage_buttons+1
  7034  0A7F  3099               	movlw	153
  7035  0A80  00F2               	movwf	??_manage_buttons
  7036  0A81                     u7007:	
  7037  0A81  0BF2               	decfsz	??_manage_buttons,f
  7038  0A82  2A81               	goto	u7007
  7039  0A83  0BF3               	decfsz	??_manage_buttons+1,f
  7040  0A84  2A81               	goto	u7007
  7041  0A85  0BF4               	decfsz	??_manage_buttons+2,f
  7042  0A86  2A81               	goto	u7007
  7043  0A87                     l3509:	
  7044                           
  7045                           ;main.c: 283: }
  7046                           ;main.c: 285: if(RA3)
  7047  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  7048  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  7049  0A89  1D85               	btfss	5,3	;volatile
  7050  0A8A  2AA7               	goto	l3519
  7051                           
  7052                           ;main.c: 286: {
  7053                           ;main.c: 287: _delay((unsigned long)((20)*(8000000/4000.0)));
  7054  0A8B  3034               	movlw	52
  7055  0A8C  00F3               	movwf	??_manage_buttons+1
  7056  0A8D  30F1               	movlw	241
  7057  0A8E  00F2               	movwf	??_manage_buttons
  7058  0A8F                     u7017:	
  7059  0A8F  0BF2               	decfsz	??_manage_buttons,f
  7060  0A90  2A8F               	goto	u7017
  7061  0A91  0BF3               	decfsz	??_manage_buttons+1,f
  7062  0A92  2A8F               	goto	u7017
  7063  0A93  2A94               	nop2
  7064                           
  7065                           ;main.c: 288: if(RA3) minus_flag = 1;
  7066  0A94  1283               	bcf	3,5	;RP0=0, select bank0
  7067  0A95  1303               	bcf	3,6	;RP1=0, select bank0
  7068  0A96  1D85               	btfss	5,3	;volatile
  7069  0A97  2A9B               	goto	l3517
  7070  0A98  1683               	bsf	3,5	;RP0=1, select bank1
  7071  0A99  01B1               	clrf	_minus_flag^(0+128)
  7072  0A9A  0AB1               	incf	_minus_flag^(0+128),f
  7073  0A9B                     l3517:	
  7074                           
  7075                           ;main.c: 289: _delay((unsigned long)((150)*(8000000/4000.0)));
  7076  0A9B  3002               	movlw	2
  7077  0A9C  00F4               	movwf	??_manage_buttons+2
  7078  0A9D  3086               	movlw	134
  7079  0A9E  00F3               	movwf	??_manage_buttons+1
  7080  0A9F  3099               	movlw	153
  7081  0AA0  00F2               	movwf	??_manage_buttons
  7082  0AA1                     u7027:	
  7083  0AA1  0BF2               	decfsz	??_manage_buttons,f
  7084  0AA2  2AA1               	goto	u7027
  7085  0AA3  0BF3               	decfsz	??_manage_buttons+1,f
  7086  0AA4  2AA1               	goto	u7027
  7087  0AA5  0BF4               	decfsz	??_manage_buttons+2,f
  7088  0AA6  2AA1               	goto	u7027
  7089  0AA7                     l3519:	
  7090                           
  7091                           ;main.c: 290: }
  7092                           ;main.c: 292: if(RA1)
  7093  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  7094  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  7095  0AA9  1C85               	btfss	5,1	;volatile
  7096  0AAA  0008               	return
  7097                           
  7098                           ;main.c: 293: {
  7099                           ;main.c: 294: _delay((unsigned long)((20)*(8000000/4000.0)));
  7100  0AAB  3034               	movlw	52
  7101  0AAC  00F3               	movwf	??_manage_buttons+1
  7102  0AAD  30F1               	movlw	241
  7103  0AAE  00F2               	movwf	??_manage_buttons
  7104  0AAF                     u7037:	
  7105  0AAF  0BF2               	decfsz	??_manage_buttons,f
  7106  0AB0  2AAF               	goto	u7037
  7107  0AB1  0BF3               	decfsz	??_manage_buttons+1,f
  7108  0AB2  2AAF               	goto	u7037
  7109  0AB3  2AB4               	nop2
  7110                           
  7111                           ;main.c: 295: if(RA1) ok_flag = 1;
  7112  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  7113  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  7114  0AB6  1C85               	btfss	5,1	;volatile
  7115  0AB7  2ABA               	goto	l405
  7116  0AB8  01FA               	clrf	_ok_flag
  7117  0AB9  0AFA               	incf	_ok_flag,f
  7118  0ABA                     l405:	
  7119  0ABA  1885               	btfsc	5,1	;volatile
  7120  0ABB  2ABA               	goto	l405
  7121                           
  7122                           ;main.c: 297: _delay((unsigned long)((20)*(8000000/4000.0)));
  7123  0ABC  3034               	movlw	52
  7124  0ABD  00F3               	movwf	??_manage_buttons+1
  7125  0ABE  30F1               	movlw	241
  7126  0ABF  00F2               	movwf	??_manage_buttons
  7127  0AC0                     u7047:	
  7128  0AC0  0BF2               	decfsz	??_manage_buttons,f
  7129  0AC1  2AC0               	goto	u7047
  7130  0AC2  0BF3               	decfsz	??_manage_buttons+1,f
  7131  0AC3  2AC0               	goto	u7047
  7132  0AC4  2AC5               	nop2
  7133  0AC5  0008               	return
  7134  0AC6                     __end_of_manage_buttons:	
  7135  0AC6                     __ptext5:	
  7136 ;; *************** function _menuCO2 *****************
  7137 ;; Defined at:
  7138 ;;		line 301 in file "main.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;		None
  7143 ;; Return value:  Size  Location     Type
  7144 ;;		None               void
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 300/100
  7149 ;;		On exit  : 200/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7152 ;;      Params:         0       0       0       0       0
  7153 ;;      Locals:         0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0
  7155 ;;      Totals:         0       0       0       0       0
  7156 ;;Total ram usage:        0 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    5
  7159 ;; This function calls:
  7160 ;;		_LcdSetCursor
  7161 ;;		_LcdWriteInt
  7162 ;;		_LcdWriteString
  7163 ;;		___eetoi
  7164 ;;		___itoee
  7165 ;;		_manage_buttons
  7166 ;; This function is called by:
  7167 ;;		_menuHumi
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _menuCO2
  7173  0AC6                     _menuCO2:	
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _menuCO2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7177  0AC6  3001               	movlw	1
  7178                           
  7179                           ;main.c: 302: LcdSetCursor(1,1);
  7180  0AC7  01F6               	clrf	LcdSetCursor@b
  7181  0AC8  0AF6               	incf	LcdSetCursor@b,f
  7182  0AC9  2685  120A  158A   	fcall	_LcdSetCursor
  7183                           
  7184                           ;main.c: 303: LcdWriteString((char *)"Set CO2 in air  ");
  7185  0ACC  30DD               	movlw	low (STR_15| (0+32768))
  7186  0ACD  00F7               	movwf	LcdWriteString@a
  7187  0ACE  3098               	movlw	high (STR_15| (0+32768))
  7188  0ACF  00F8               	movwf	LcdWriteString@a+1
  7189  0AD0  26AE  120A  158A   	fcall	_LcdWriteString
  7190  0AD3  3002               	movlw	2
  7191                           
  7192                           ;main.c: 304: LcdSetCursor(2,1);
  7193  0AD4  01F6               	clrf	LcdSetCursor@b
  7194  0AD5  0AF6               	incf	LcdSetCursor@b,f
  7195  0AD6  2685  120A  158A   	fcall	_LcdSetCursor
  7196                           
  7197                           ;main.c: 305: LcdWriteString((char *)"          ");
  7198  0AD9  3020               	movlw	low ((STR_8+2)| (0+32768))
  7199  0ADA  00F7               	movwf	LcdWriteString@a
  7200  0ADB  3099               	movlw	high ((STR_8+2)| (0+32768))
  7201  0ADC  00F8               	movwf	LcdWriteString@a+1
  7202  0ADD  26AE  120A  158A   	fcall	_LcdWriteString
  7203  0AE0  3002               	movlw	2
  7204                           
  7205                           ;main.c: 306: LcdSetCursor(2,1);
  7206  0AE1  01F6               	clrf	LcdSetCursor@b
  7207  0AE2  0AF6               	incf	LcdSetCursor@b,f
  7208  0AE3  2685  120A  158A   	fcall	_LcdSetCursor
  7209                           
  7210                           ;main.c: 307: LcdWriteInt(zeljena_co2,2,1);
  7211  0AE6  3006               	movlw	(low _zeljena_co2)& (0+255)
  7212  0AE7  265B  120A  158A   	fcall	___eetoi
  7213  0AEA  0877               	movf	?___eetoi+1,w
  7214  0AEB  00A5               	movwf	LcdWriteInt@i+1
  7215  0AEC  0876               	movf	?___eetoi,w
  7216  0AED  00A4               	movwf	LcdWriteInt@i
  7217  0AEE  3002               	movlw	2
  7218  0AEF  00A6               	movwf	LcdWriteInt@row
  7219  0AF0  01A7               	clrf	LcdWriteInt@column
  7220  0AF1  0AA7               	incf	LcdWriteInt@column,f
  7221  0AF2  23A1  120A  158A   	fcall	_LcdWriteInt
  7222                           
  7223                           ;main.c: 308: LcdSetCursor(2,6);
  7224  0AF5  3006               	movlw	6
  7225  0AF6  00F6               	movwf	LcdSetCursor@b
  7226  0AF7  3002               	movlw	2
  7227  0AF8  2685  120A  158A   	fcall	_LcdSetCursor
  7228                           
  7229                           ;main.c: 309: LcdWriteString((char *)"        ");
  7230  0AFB  3022               	movlw	low ((STR_8+4)| (0+32768))
  7231  0AFC  00F7               	movwf	LcdWriteString@a
  7232  0AFD  3099               	movlw	high ((STR_8+4)| (0+32768))
  7233  0AFE  00F8               	movwf	LcdWriteString@a+1
  7234  0AFF  26AE  120A  158A   	fcall	_LcdWriteString
  7235  0B02                     l5687:	
  7236                           ;main.c: 310: while(!ok_flag)
  7237                           
  7238  0B02  087A               	movf	_ok_flag,w
  7239  0B03  1D03               	btfss	3,2
  7240  0B04  0008               	return
  7241  0B05  0064               	clrwdt	;# 
  7242                           
  7243                           ;main.c: 314: manage_buttons();
  7244  0B06  2268  120A  158A   	fcall	_manage_buttons
  7245                           
  7246                           ;main.c: 316: if(plus_flag)
  7247  0B09  087B               	movf	_plus_flag,w
  7248  0B0A  1903               	btfsc	3,2
  7249  0B0B  2B4B               	goto	l5669
  7250                           
  7251                           ;main.c: 317: {
  7252                           ;main.c: 318: zeljena_co2 += 100;
  7253  0B0C  3006               	movlw	(low _zeljena_co2)& (0+255)
  7254  0B0D  265B  120A  158A   	fcall	___eetoi
  7255  0B10  0876               	movf	?___eetoi,w
  7256  0B11  3E64               	addlw	100
  7257  0B12  00A3               	movwf	___itoee@data
  7258  0B13  0877               	movf	?___eetoi+1,w
  7259  0B14  1803               	skipnc
  7260  0B15  3E01               	addlw	1
  7261  0B16  3E00               	addlw	0
  7262  0B17  00A4               	movwf	___itoee@data+1
  7263  0B18  3006               	movlw	(low _zeljena_co2)& (0+255)
  7264  0B19  239A  120A  158A   	fcall	___itoee
  7265                           
  7266                           ;main.c: 319: if(zeljena_co2 > 5000) zeljena_co2 = 5000;
  7267  0B1C  3006               	movlw	(low _zeljena_co2)& (0+255)
  7268  0B1D  265B  120A  158A   	fcall	___eetoi
  7269  0B20  0877               	movf	?___eetoi+1,w
  7270  0B21  3A80               	xorlw	128
  7271  0B22  00FF               	movwf	127
  7272  0B23  3093               	movlw	147
  7273  0B24  027F               	subwf	127,w
  7274  0B25  1D03               	skipz
  7275  0B26  2B29               	goto	u6465
  7276  0B27  3089               	movlw	137
  7277  0B28  0276               	subwf	?___eetoi,w
  7278  0B29                     u6465:	
  7279  0B29  1C03               	skipc
  7280  0B2A  2B35               	goto	l5663
  7281  0B2B  3088               	movlw	136
  7282  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  7283  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  7284  0B2E  00A3               	movwf	___itoee@data
  7285  0B2F  3013               	movlw	19
  7286  0B30  00A4               	movwf	___itoee@data+1
  7287  0B31  3006               	movlw	(low _zeljena_co2)& (0+255)
  7288  0B32  239A  120A  158A   	fcall	___itoee
  7289  0B35                     l5663:	
  7290  0B35  3002               	movlw	2
  7291                           
  7292                           ;main.c: 320: plus_flag = 0;
  7293  0B36  01FB               	clrf	_plus_flag
  7294  0B37  01F6               	clrf	LcdSetCursor@b
  7295  0B38  0AF6               	incf	LcdSetCursor@b,f
  7296  0B39  2685  120A  158A   	fcall	_LcdSetCursor
  7297                           
  7298                           ;main.c: 323: LcdWriteInt(zeljena_co2,2,1);
  7299  0B3C  3006               	movlw	(low _zeljena_co2)& (0+255)
  7300  0B3D  265B  120A  158A   	fcall	___eetoi
  7301  0B40  0877               	movf	?___eetoi+1,w
  7302  0B41  00A5               	movwf	LcdWriteInt@i+1
  7303  0B42  0876               	movf	?___eetoi,w
  7304  0B43  00A4               	movwf	LcdWriteInt@i
  7305  0B44  3002               	movlw	2
  7306  0B45  00A6               	movwf	LcdWriteInt@row
  7307  0B46  01A7               	clrf	LcdWriteInt@column
  7308  0B47  0AA7               	incf	LcdWriteInt@column,f
  7309  0B48  23A1  120A  158A   	fcall	_LcdWriteInt
  7310  0B4B                     l5669:	
  7311                           
  7312                           ;main.c: 324: }
  7313                           ;main.c: 326: if(minus_flag)
  7314  0B4B  1683               	bsf	3,5	;RP0=1, select bank1
  7315  0B4C  1303               	bcf	3,6	;RP1=0, select bank1
  7316  0B4D  0831               	movf	_minus_flag^(0+128),w
  7317  0B4E  1903               	btfsc	3,2
  7318  0B4F  2B91               	goto	l5683
  7319                           
  7320                           ;main.c: 327: {
  7321                           ;main.c: 328: zeljena_co2 -= 100;
  7322  0B50  3006               	movlw	(low _zeljena_co2)& (0+255)
  7323  0B51  265B  120A  158A   	fcall	___eetoi
  7324  0B54  0876               	movf	?___eetoi,w
  7325  0B55  3E9C               	addlw	156
  7326  0B56  00A3               	movwf	___itoee@data
  7327  0B57  0877               	movf	?___eetoi+1,w
  7328  0B58  1803               	skipnc
  7329  0B59  3E01               	addlw	1
  7330  0B5A  3EFF               	addlw	255
  7331  0B5B  00A4               	movwf	___itoee@data+1
  7332  0B5C  3006               	movlw	(low _zeljena_co2)& (0+255)
  7333  0B5D  239A  120A  158A   	fcall	___itoee
  7334                           
  7335                           ;main.c: 329: if(zeljena_co2 < 300) zeljena_co2 = 300;
  7336  0B60  3006               	movlw	(low _zeljena_co2)& (0+255)
  7337  0B61  265B  120A  158A   	fcall	___eetoi
  7338  0B64  0877               	movf	?___eetoi+1,w
  7339  0B65  3A80               	xorlw	128
  7340  0B66  00FF               	movwf	127
  7341  0B67  3081               	movlw	129
  7342  0B68  027F               	subwf	127,w
  7343  0B69  1D03               	skipz
  7344  0B6A  2B6D               	goto	u6485
  7345  0B6B  302C               	movlw	44
  7346  0B6C  0276               	subwf	?___eetoi,w
  7347  0B6D                     u6485:	
  7348  0B6D  1803               	skipnc
  7349  0B6E  2B79               	goto	l5677
  7350  0B6F  302C               	movlw	44
  7351  0B70  1283               	bcf	3,5	;RP0=0, select bank0
  7352  0B71  1303               	bcf	3,6	;RP1=0, select bank0
  7353  0B72  00A3               	movwf	___itoee@data
  7354  0B73  3001               	movlw	1
  7355  0B74  00A4               	movwf	___itoee@data+1
  7356  0B75  3006               	movlw	(low _zeljena_co2)& (0+255)
  7357  0B76  239A  120A  158A   	fcall	___itoee
  7358  0B79                     l5677:	
  7359                           
  7360                           ;main.c: 330: minus_flag = 0;
  7361  0B79  1683               	bsf	3,5	;RP0=1, select bank1
  7362  0B7A  1303               	bcf	3,6	;RP1=0, select bank1
  7363  0B7B  3002               	movlw	2
  7364  0B7C  01B1               	clrf	_minus_flag^(0+128)
  7365  0B7D  01F6               	clrf	LcdSetCursor@b
  7366  0B7E  0AF6               	incf	LcdSetCursor@b,f
  7367  0B7F  2685  120A  158A   	fcall	_LcdSetCursor
  7368                           
  7369                           ;main.c: 333: LcdWriteInt(zeljena_co2,2,1);
  7370  0B82  3006               	movlw	(low _zeljena_co2)& (0+255)
  7371  0B83  265B  120A  158A   	fcall	___eetoi
  7372  0B86  0877               	movf	?___eetoi+1,w
  7373  0B87  00A5               	movwf	LcdWriteInt@i+1
  7374  0B88  0876               	movf	?___eetoi,w
  7375  0B89  00A4               	movwf	LcdWriteInt@i
  7376  0B8A  3002               	movlw	2
  7377  0B8B  00A6               	movwf	LcdWriteInt@row
  7378  0B8C  01A7               	clrf	LcdWriteInt@column
  7379  0B8D  0AA7               	incf	LcdWriteInt@column,f
  7380  0B8E  23A1  120A  158A   	fcall	_LcdWriteInt
  7381  0B91                     l5683:	
  7382                           
  7383                           ;main.c: 335: }
  7384                           ;main.c: 337: if(ok_flag)
  7385  0B91  087A               	movf	_ok_flag,w
  7386  0B92  1903               	btfsc	3,2
  7387  0B93  2B02               	goto	l5687
  7388                           
  7389                           ;main.c: 338: {
  7390                           ;main.c: 339: ok_flag = 1;
  7391  0B94  01FA               	clrf	_ok_flag
  7392  0B95  0AFA               	incf	_ok_flag,f
  7393                           
  7394                           ;main.c: 340: ok_flag_co2 = 1;
  7395  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  7396  0B97  01B2               	clrf	_ok_flag_co2^(0+128)
  7397  0B98  0AB2               	incf	_ok_flag_co2^(0+128),f
  7398  0B99  2B02               	goto	l5687
  7399  0B9A                     __end_of_menuCO2:	
  7400  0B9A                     __ptext7:	
  7401 ;; *************** function ___itoee *****************
  7402 ;; Defined at:
  7403 ;;		line 87 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  addr            1    wreg     PTR eeprom void 
  7406 ;;		 -> zeljena_co2(2), 
  7407 ;;  data            2    3[BANK0 ] unsigned int 
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;  addr            1    9[COMMON] PTR eeprom void 
  7410 ;;		 -> zeljena_co2(2), 
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  2    3[BANK0 ] unsigned int 
  7413 ;; Registers used:
  7414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7415 ;; Tracked objects:
  7416 ;;		On entry : 300/0
  7417 ;;		On exit  : 300/300
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7420 ;;      Params:         0       2       0       0       0
  7421 ;;      Locals:         1       0       0       0       0
  7422 ;;      Temps:          0       0       0       0       0
  7423 ;;      Totals:         1       2       0       0       0
  7424 ;;Total ram usage:        3 bytes
  7425 ;; Hardware stack levels used:    1
  7426 ;; Hardware stack levels required when called:    2
  7427 ;; This function calls:
  7428 ;;		_memcpyee
  7429 ;; This function is called by:
  7430 ;;		_menuCO2
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function ___itoee
  7436  0B9A                     ___itoee:	
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7440                           ;___itoee@addr stored from wreg
  7441  0B9A  00F9               	movwf	___itoee@addr
  7442  0B9B  3023               	movlw	(low (___itoee@data| 0))& (0+255)
  7443  0B9C  00F2               	movwf	memcpyee@from
  7444  0B9D  3002               	movlw	2
  7445  0B9E  00F3               	movwf	memcpyee@size
  7446  0B9F  0879               	movf	___itoee@addr,w
  7447  0BA0  2F95               	ljmp	_memcpyee
  7448  0BA1                     __end_of___itoee:	
  7449  0BA1                     __ptext36:	
  7450 ;; *************** function _LcdWriteInt *****************
  7451 ;; Defined at:
  7452 ;;		line 125 in file "lcd.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  i               2    4[BANK0 ] unsigned int 
  7455 ;;  row             1    6[BANK0 ] unsigned char 
  7456 ;;  column          1    7[BANK0 ] unsigned char 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  ch              1   10[BANK0 ] unsigned char 
  7459 ;;  ch_manje_100    1    9[BANK0 ] unsigned char 
  7460 ;;  ch_manje_100    1    8[BANK0 ] unsigned char 
  7461 ;; Return value:  Size  Location     Type
  7462 ;;		None               void
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0, pclath, cstack
  7465 ;; Tracked objects:
  7466 ;;		On entry : 300/0
  7467 ;;		On exit  : 300/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7470 ;;      Params:         0       4       0       0       0
  7471 ;;      Locals:         0       3       0       0       0
  7472 ;;      Temps:          0       0       0       0       0
  7473 ;;      Totals:         0       7       0       0       0
  7474 ;;Total ram usage:        7 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:    4
  7477 ;; This function calls:
  7478 ;;		_LcdSetCursor
  7479 ;;		_LcdWriteChar
  7480 ;;		___lwdiv
  7481 ;;		___wmul
  7482 ;; This function is called by:
  7483 ;;		_displayCO2
  7484 ;;		_menuCO2
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           
  7489                           ;psect for function _LcdWriteInt
  7490  0BA1                     _LcdWriteInt:	
  7491  0BA1  30E8               	movlw	232
  7492                           
  7493                           ;lcd.c: 126: unsigned char ch, ch_manje_1000=0, ch_manje_100=0;
  7494                           
  7495                           ;incstack = 0
  7496                           ; Regs used in _LcdWriteInt: [wreg+status,2+status,0+pclath+cstack]
  7497  0BA2  01A9               	clrf	LcdWriteInt@ch_manje_1000
  7498  0BA3  01A8               	clrf	LcdWriteInt@ch_manje_100
  7499                           
  7500                           ;lcd.c: 128: ch = i/1000;
  7501  0BA4  00F2               	movwf	___lwdiv@divisor
  7502  0BA5  3003               	movlw	3
  7503  0BA6  00F3               	movwf	___lwdiv@divisor+1
  7504  0BA7  0825               	movf	LcdWriteInt@i+1,w
  7505  0BA8  00F5               	movwf	___lwdiv@dividend+1
  7506  0BA9  0824               	movf	LcdWriteInt@i,w
  7507  0BAA  00F4               	movwf	___lwdiv@dividend
  7508  0BAB  26F2  120A  158A   	fcall	___lwdiv
  7509  0BAE  0872               	movf	?___lwdiv,w
  7510  0BAF  00AA               	movwf	LcdWriteInt@ch
  7511                           
  7512                           ;lcd.c: 129: if(ch == 0)
  7513  0BB0  082A               	movf	LcdWriteInt@ch,w
  7514  0BB1  1D03               	btfss	3,2
  7515  0BB2  2BBD               	goto	l5241
  7516                           
  7517                           ;lcd.c: 130: {
  7518                           ;lcd.c: 131: ch_manje_1000 = 1;
  7519  0BB3  01A9               	clrf	LcdWriteInt@ch_manje_1000
  7520  0BB4  0AA9               	incf	LcdWriteInt@ch_manje_1000,f
  7521                           
  7522                           ;lcd.c: 132: LcdSetCursor(row,column);
  7523  0BB5  0827               	movf	LcdWriteInt@column,w
  7524  0BB6  00F6               	movwf	LcdSetCursor@b
  7525  0BB7  0826               	movf	LcdWriteInt@row,w
  7526  0BB8  2685  120A  158A   	fcall	_LcdSetCursor
  7527                           
  7528                           ;lcd.c: 133: LcdWriteChar(' ');
  7529  0BBB  3020               	movlw	32
  7530  0BBC  2BC5               	goto	L4
  7531  0BBD                     l5241:	
  7532                           ;lcd.c: 134: }
  7533                           
  7534  0BBD  3002               	movlw	2
  7535                           
  7536                           ;lcd.c: 135: else
  7537                           ;lcd.c: 136: {
  7538                           ;lcd.c: 137: LcdSetCursor(2,1);
  7539  0BBE  01F6               	clrf	LcdSetCursor@b
  7540  0BBF  0AF6               	incf	LcdSetCursor@b,f
  7541  0BC0  2685  120A  158A   	fcall	_LcdSetCursor
  7542                           
  7543                           ;lcd.c: 138: LcdWriteChar(ch+'0');
  7544  0BC3  082A               	movf	LcdWriteInt@ch,w
  7545  0BC4  3E30               	addlw	48
  7546  0BC5                     L4:	
  7547  0BC5  26CD               	fcall	_LcdWriteChar
  7548                           
  7549                           ;lcd.c: 139: }
  7550                           ;lcd.c: 142: i = (i - ch*1000);
  7551  0BC6  082A               	movf	LcdWriteInt@ch,w
  7552  0BC7  00F2               	movwf	___wmul@multiplier
  7553  0BC8  30E8               	movlw	232
  7554  0BC9  01F3               	clrf	___wmul@multiplier+1
  7555  0BCA  00F4               	movwf	___wmul@multiplicand
  7556  0BCB  3003               	movlw	3
  7557  0BCC  00F5               	movwf	___wmul@multiplicand+1
  7558  0BCD  120A  118A  259A  120A  158A  	fcall	___wmul
  7559  0BD2  0872               	movf	?___wmul,w
  7560  0BD3  1283               	bcf	3,5	;RP0=0, select bank0
  7561  0BD4  02A4               	subwf	LcdWriteInt@i,f
  7562  0BD5  0873               	movf	?___wmul+1,w
  7563  0BD6  1C03               	skipc
  7564  0BD7  03A5               	decf	LcdWriteInt@i+1,f
  7565  0BD8  02A5               	subwf	LcdWriteInt@i+1,f
  7566                           
  7567                           ;lcd.c: 143: ch = i/100;
  7568  0BD9  3064               	movlw	100
  7569  0BDA  00F2               	movwf	___lwdiv@divisor
  7570  0BDB  01F3               	clrf	___lwdiv@divisor+1
  7571  0BDC  0825               	movf	LcdWriteInt@i+1,w
  7572  0BDD  00F5               	movwf	___lwdiv@dividend+1
  7573  0BDE  0824               	movf	LcdWriteInt@i,w
  7574  0BDF  00F4               	movwf	___lwdiv@dividend
  7575  0BE0  26F2  120A  158A   	fcall	___lwdiv
  7576  0BE3  0872               	movf	?___lwdiv,w
  7577  0BE4  00AA               	movwf	LcdWriteInt@ch
  7578                           
  7579                           ;lcd.c: 144: if((ch == 0) && (ch_manje_1000))
  7580  0BE5  082A               	movf	LcdWriteInt@ch,w
  7581  0BE6  1D03               	btfss	3,2
  7582  0BE7  2BF6               	goto	l5251
  7583  0BE8  0829               	movf	LcdWriteInt@ch_manje_1000,w
  7584  0BE9  1903               	btfsc	3,2
  7585  0BEA  2BF6               	goto	l5251
  7586                           
  7587                           ;lcd.c: 145: {
  7588                           ;lcd.c: 146: ch_manje_100 = 1;
  7589  0BEB  01A8               	clrf	LcdWriteInt@ch_manje_100
  7590  0BEC  0AA8               	incf	LcdWriteInt@ch_manje_100,f
  7591                           
  7592                           ;lcd.c: 147: LcdSetCursor(row,column+1);
  7593  0BED  0827               	movf	LcdWriteInt@column,w
  7594  0BEE  3E01               	addlw	1
  7595  0BEF  00F6               	movwf	LcdSetCursor@b
  7596  0BF0  0826               	movf	LcdWriteInt@row,w
  7597  0BF1  2685  120A  158A   	fcall	_LcdSetCursor
  7598                           
  7599                           ;lcd.c: 148: LcdWriteChar(' ');
  7600  0BF4  3020               	movlw	32
  7601  0BF5  2BFD               	goto	L5
  7602  0BF6                     l5251:	
  7603                           ;lcd.c: 149: }
  7604                           
  7605                           
  7606                           ;lcd.c: 150: else
  7607                           ;lcd.c: 151: {
  7608                           ;lcd.c: 152: LcdSetCursor(2,2);
  7609  0BF6  3002               	movlw	2
  7610  0BF7  00F6               	movwf	LcdSetCursor@b
  7611  0BF8  2685  120A  158A   	fcall	_LcdSetCursor
  7612                           
  7613                           ;lcd.c: 153: LcdWriteChar(ch+'0');
  7614  0BFB  082A               	movf	LcdWriteInt@ch,w
  7615  0BFC  3E30               	addlw	48
  7616  0BFD                     L5:	
  7617  0BFD  26CD               	fcall	_LcdWriteChar
  7618                           
  7619                           ;lcd.c: 154: }
  7620                           ;lcd.c: 157: i = (i - ch*100);
  7621  0BFE  082A               	movf	LcdWriteInt@ch,w
  7622  0BFF  00F2               	movwf	___wmul@multiplier
  7623  0C00  3064               	movlw	100
  7624  0C01  01F3               	clrf	___wmul@multiplier+1
  7625  0C02  00F4               	movwf	___wmul@multiplicand
  7626  0C03  01F5               	clrf	___wmul@multiplicand+1
  7627  0C04  120A  118A  259A  120A  158A  	fcall	___wmul
  7628  0C09  0872               	movf	?___wmul,w
  7629  0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  7630  0C0B  02A4               	subwf	LcdWriteInt@i,f
  7631  0C0C  0873               	movf	?___wmul+1,w
  7632  0C0D  1C03               	skipc
  7633  0C0E  03A5               	decf	LcdWriteInt@i+1,f
  7634  0C0F  02A5               	subwf	LcdWriteInt@i+1,f
  7635                           
  7636                           ;lcd.c: 158: ch = i/10;
  7637  0C10  300A               	movlw	10
  7638  0C11  00F2               	movwf	___lwdiv@divisor
  7639  0C12  01F3               	clrf	___lwdiv@divisor+1
  7640  0C13  0825               	movf	LcdWriteInt@i+1,w
  7641  0C14  00F5               	movwf	___lwdiv@dividend+1
  7642  0C15  0824               	movf	LcdWriteInt@i,w
  7643  0C16  00F4               	movwf	___lwdiv@dividend
  7644  0C17  26F2  120A  158A   	fcall	___lwdiv
  7645  0C1A  0872               	movf	?___lwdiv,w
  7646  0C1B  00AA               	movwf	LcdWriteInt@ch
  7647                           
  7648                           ;lcd.c: 159: if((ch == 0) && (ch_manje_1000) && (ch_manje_100))
  7649  0C1C  082A               	movf	LcdWriteInt@ch,w
  7650  0C1D  1D03               	btfss	3,2
  7651  0C1E  2C2E               	goto	l5261
  7652  0C1F  0829               	movf	LcdWriteInt@ch_manje_1000,w
  7653  0C20  1903               	btfsc	3,2
  7654  0C21  2C2E               	goto	l5261
  7655  0C22  0828               	movf	LcdWriteInt@ch_manje_100,w
  7656  0C23  1903               	btfsc	3,2
  7657  0C24  2C2E               	goto	l5261
  7658                           
  7659                           ;lcd.c: 160: {
  7660                           ;lcd.c: 161: LcdSetCursor(row,column+2);
  7661  0C25  0827               	movf	LcdWriteInt@column,w
  7662  0C26  3E02               	addlw	2
  7663  0C27  00F6               	movwf	LcdSetCursor@b
  7664  0C28  0826               	movf	LcdWriteInt@row,w
  7665  0C29  2685  120A  158A   	fcall	_LcdSetCursor
  7666                           
  7667                           ;lcd.c: 162: LcdWriteChar(' ');
  7668  0C2C  3020               	movlw	32
  7669  0C2D  2C36               	goto	L6
  7670  0C2E                     l5261:	
  7671                           ;lcd.c: 163: }
  7672                           
  7673                           
  7674                           ;lcd.c: 164: else
  7675                           ;lcd.c: 165: {
  7676                           ;lcd.c: 166: LcdSetCursor(2,3);
  7677  0C2E  3003               	movlw	3
  7678  0C2F  00F6               	movwf	LcdSetCursor@b
  7679  0C30  3002               	movlw	2
  7680  0C31  2685  120A  158A   	fcall	_LcdSetCursor
  7681                           
  7682                           ;lcd.c: 167: LcdWriteChar(ch+'0');
  7683  0C34  082A               	movf	LcdWriteInt@ch,w
  7684  0C35  3E30               	addlw	48
  7685  0C36                     L6:	
  7686  0C36  26CD               	fcall	_LcdWriteChar
  7687                           
  7688                           ;lcd.c: 168: }
  7689                           ;lcd.c: 171: i = (i - ch*10);
  7690  0C37  082A               	movf	LcdWriteInt@ch,w
  7691  0C38  00F2               	movwf	___wmul@multiplier
  7692  0C39  300A               	movlw	10
  7693  0C3A  01F3               	clrf	___wmul@multiplier+1
  7694  0C3B  00F4               	movwf	___wmul@multiplicand
  7695  0C3C  01F5               	clrf	___wmul@multiplicand+1
  7696  0C3D  120A  118A  259A  120A  158A  	fcall	___wmul
  7697  0C42  0872               	movf	?___wmul,w
  7698  0C43  1283               	bcf	3,5	;RP0=0, select bank0
  7699  0C44  02A4               	subwf	LcdWriteInt@i,f
  7700  0C45  0873               	movf	?___wmul+1,w
  7701  0C46  1C03               	skipc
  7702  0C47  03A5               	decf	LcdWriteInt@i+1,f
  7703  0C48  02A5               	subwf	LcdWriteInt@i+1,f
  7704                           
  7705                           ;lcd.c: 172: ch = i;
  7706  0C49  0824               	movf	LcdWriteInt@i,w
  7707  0C4A  00AA               	movwf	LcdWriteInt@ch
  7708                           
  7709                           ;lcd.c: 173: LcdSetCursor(row,column+3);
  7710  0C4B  0827               	movf	LcdWriteInt@column,w
  7711  0C4C  3E03               	addlw	3
  7712  0C4D  00F6               	movwf	LcdSetCursor@b
  7713  0C4E  0826               	movf	LcdWriteInt@row,w
  7714  0C4F  2685  120A  158A   	fcall	_LcdSetCursor
  7715                           
  7716                           ;lcd.c: 174: LcdWriteChar(ch+'0');
  7717  0C52  082A               	movf	LcdWriteInt@ch,w
  7718  0C53  3E30               	addlw	48
  7719  0C54  2ECD               	ljmp	_LcdWriteChar
  7720  0C55                     __end_of_LcdWriteInt:	
  7721  0C55                     __ptext3:	
  7722 ;; *************** function _menu *****************
  7723 ;; Defined at:
  7724 ;;		line 392 in file "main.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;		None
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;		None
  7729 ;; Return value:  Size  Location     Type
  7730 ;;		None               void
  7731 ;; Registers used:
  7732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : 300/100
  7735 ;;		On exit  : 300/100
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7738 ;;      Params:         0       0       0       0       0
  7739 ;;      Locals:         0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0
  7741 ;;      Totals:         0       0       0       0       0
  7742 ;;Total ram usage:        0 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    7
  7745 ;; This function calls:
  7746 ;;		_LcdSetCursor
  7747 ;;		_LcdWriteString
  7748 ;;		___eetoft
  7749 ;;		___ftadd
  7750 ;;		___ftge
  7751 ;;		___fttoee
  7752 ;;		_manage_buttons
  7753 ;;		_menuHumi
  7754 ;;		_sprintf
  7755 ;; This function is called by:
  7756 ;;		_main
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           
  7761                           ;psect for function _menu
  7762  0C55                     _menu:	
  7763                           
  7764                           ;main.c: 394: sprintf(temperature, " %.1f", zeljena_temperatura);
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _menu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7768  0C55  306F               	movlw	low (STR_3| (0+32768))
  7769  0C56  1283               	bcf	3,5	;RP0=0, select bank0
  7770  0C57  00D4               	movwf	sprintf@f
  7771  0C58  3099               	movlw	high (STR_3| (0+32768))
  7772  0C59  00D5               	movwf	sprintf@f+1
  7773  0C5A  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7774  0C5B  264B               	fcall	___eetoft
  7775  0C5C  0876               	movf	?___eetoft,w
  7776  0C5D  00D6               	movwf	?_sprintf+2
  7777  0C5E  0877               	movf	?___eetoft+1,w
  7778  0C5F  00D7               	movwf	?_sprintf+3
  7779  0C60  0878               	movf	?___eetoft+2,w
  7780  0C61  00D8               	movwf	?_sprintf+4
  7781  0C62  30B9               	movlw	(low (_temperature| 0))& (0+255)
  7782  0C63  120A  118A  20A6  120A  158A  	fcall	_sprintf
  7783  0C68  3001               	movlw	1
  7784                           
  7785                           ;main.c: 395: LcdSetCursor(1,1);
  7786  0C69  01F6               	clrf	LcdSetCursor@b
  7787  0C6A  0AF6               	incf	LcdSetCursor@b,f
  7788  0C6B  2685  120A  158A   	fcall	_LcdSetCursor
  7789                           
  7790                           ;main.c: 396: LcdWriteString((char *)"Set air temp.   ");
  7791  0C6E  30BB               	movlw	low (STR_24| (0+32768))
  7792  0C6F  00F7               	movwf	LcdWriteString@a
  7793  0C70  3098               	movlw	high (STR_24| (0+32768))
  7794  0C71  00F8               	movwf	LcdWriteString@a+1
  7795  0C72  26AE  120A  158A   	fcall	_LcdWriteString
  7796  0C75  3002               	movlw	2
  7797                           
  7798                           ;main.c: 397: LcdSetCursor(2,1);
  7799  0C76  01F6               	clrf	LcdSetCursor@b
  7800  0C77  0AF6               	incf	LcdSetCursor@b,f
  7801  0C78  2685  120A  158A   	fcall	_LcdSetCursor
  7802                           
  7803                           ;main.c: 398: LcdWriteString(temperature);
  7804  0C7B  30B9               	movlw	(low (_temperature| 0))& (0+255)
  7805  0C7C  00F7               	movwf	LcdWriteString@a
  7806  0C7D  01F8               	clrf	LcdWriteString@a+1
  7807  0C7E  26AE  120A  158A   	fcall	_LcdWriteString
  7808                           
  7809                           ;main.c: 399: LcdSetCursor(2,6);
  7810  0C81  3006               	movlw	6
  7811  0C82  00F6               	movwf	LcdSetCursor@b
  7812  0C83  3002               	movlw	2
  7813  0C84  2685  120A  158A   	fcall	_LcdSetCursor
  7814                           
  7815                           ;main.c: 400: LcdWriteString((char *)"         ");
  7816  0C87  3021               	movlw	low ((STR_8+3)| (0+32768))
  7817  0C88  00F7               	movwf	LcdWriteString@a
  7818  0C89  3099               	movlw	high ((STR_8+3)| (0+32768))
  7819  0C8A  00F8               	movwf	LcdWriteString@a+1
  7820  0C8B  26AE  120A  158A   	fcall	_LcdWriteString
  7821  0C8E                     l6059:	
  7822                           ;main.c: 402: while(!ok_flag_humi)
  7823                           
  7824  0C8E  1683               	bsf	3,5	;RP0=1, select bank1
  7825  0C8F  0833               	movf	_ok_flag_humi^(0+128),w
  7826  0C90  1D03               	btfss	3,2
  7827  0C91  2D62               	goto	l6061
  7828  0C92  0064               	clrwdt	;# 
  7829                           
  7830                           ;main.c: 406: manage_buttons();
  7831  0C93  2268  120A  158A   	fcall	_manage_buttons
  7832                           
  7833                           ;main.c: 408: if(plus_flag)
  7834  0C96  087B               	movf	_plus_flag,w
  7835  0C97  1903               	btfsc	3,2
  7836  0C98  2CF8               	goto	l6039
  7837                           
  7838                           ;main.c: 409: {
  7839                           ;main.c: 410: zeljena_temperatura += 0.1;
  7840  0C99  30CD               	movlw	205
  7841  0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  7842  0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  7843  0C9C  00C2               	movwf	___ftadd@f1
  7844  0C9D  30CC               	movlw	204
  7845  0C9E  00C3               	movwf	___ftadd@f1+1
  7846  0C9F  303D               	movlw	61
  7847  0CA0  00C4               	movwf	___ftadd@f1+2
  7848  0CA1  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7849  0CA2  264B               	fcall	___eetoft
  7850  0CA3  0876               	movf	?___eetoft,w
  7851  0CA4  00C5               	movwf	___ftadd@f2
  7852  0CA5  0877               	movf	?___eetoft+1,w
  7853  0CA6  00C6               	movwf	___ftadd@f2+1
  7854  0CA7  0878               	movf	?___eetoft+2,w
  7855  0CA8  00C7               	movwf	___ftadd@f2+2
  7856  0CA9  120A  118A  25BB  120A  158A  	fcall	___ftadd
  7857  0CAE  0842               	movf	?___ftadd,w
  7858  0CAF  00CE               	movwf	___fttoee@data
  7859  0CB0  0843               	movf	?___ftadd+1,w
  7860  0CB1  00CF               	movwf	___fttoee@data+1
  7861  0CB2  0844               	movf	?___ftadd+2,w
  7862  0CB3  00D0               	movwf	___fttoee@data+2
  7863  0CB4  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7864  0CB5  26C6  120A  158A   	fcall	___fttoee
  7865                           
  7866                           ;main.c: 411: if(zeljena_temperatura > 40) zeljena_temperatura = 40;
  7867  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  7868  0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  7869  0CBA  3020               	movlw	32
  7870  0CBB  01CE               	clrf	___ftge@ff1
  7871  0CBC  00CF               	movwf	___ftge@ff1+1
  7872  0CBD  3042               	movlw	66
  7873  0CBE  00D0               	movwf	___ftge@ff1+2
  7874  0CBF  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7875  0CC0  264B               	fcall	___eetoft
  7876  0CC1  0876               	movf	?___eetoft,w
  7877  0CC2  00D1               	movwf	___ftge@ff2
  7878  0CC3  0877               	movf	?___eetoft+1,w
  7879  0CC4  00D2               	movwf	___ftge@ff2+1
  7880  0CC5  0878               	movf	?___eetoft+2,w
  7881  0CC6  00D3               	movwf	___ftge@ff2+2
  7882  0CC7  120A  118A  248B  120A  158A  	fcall	___ftge
  7883  0CCC  1803               	btfsc	3,0
  7884  0CCD  2CD7               	goto	l6031
  7885  0CCE  3020               	movlw	32
  7886  0CCF  01CE               	clrf	___fttoee@data
  7887  0CD0  00CF               	movwf	___fttoee@data+1
  7888  0CD1  3042               	movlw	66
  7889  0CD2  00D0               	movwf	___fttoee@data+2
  7890  0CD3  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7891  0CD4  26C6  120A  158A   	fcall	___fttoee
  7892  0CD7                     l6031:	
  7893  0CD7  306F               	movlw	low (STR_3| (0+32768))
  7894                           
  7895                           ;main.c: 412: plus_flag = 0;
  7896  0CD8  01FB               	clrf	_plus_flag
  7897                           
  7898                           ;main.c: 414: sprintf(temperature, " %.1f", zeljena_temperatura);
  7899  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  7900  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  7901  0CDB  00D4               	movwf	sprintf@f
  7902  0CDC  3099               	movlw	high (STR_3| (0+32768))
  7903  0CDD  00D5               	movwf	sprintf@f+1
  7904  0CDE  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7905  0CDF  264B               	fcall	___eetoft
  7906  0CE0  0876               	movf	?___eetoft,w
  7907  0CE1  00D6               	movwf	?_sprintf+2
  7908  0CE2  0877               	movf	?___eetoft+1,w
  7909  0CE3  00D7               	movwf	?_sprintf+3
  7910  0CE4  0878               	movf	?___eetoft+2,w
  7911  0CE5  00D8               	movwf	?_sprintf+4
  7912  0CE6  30B9               	movlw	(low (_temperature| 0))& (0+255)
  7913  0CE7  120A  118A  20A6  120A  158A  	fcall	_sprintf
  7914  0CEC  3002               	movlw	2
  7915                           
  7916                           ;main.c: 415: LcdSetCursor(2,1);
  7917  0CED  01F6               	clrf	LcdSetCursor@b
  7918  0CEE  0AF6               	incf	LcdSetCursor@b,f
  7919  0CEF  2685  120A  158A   	fcall	_LcdSetCursor
  7920                           
  7921                           ;main.c: 416: LcdWriteString(temperature);
  7922  0CF2  30B9               	movlw	(low (_temperature| 0))& (0+255)
  7923  0CF3  00F7               	movwf	LcdWriteString@a
  7924  0CF4  01F8               	clrf	LcdWriteString@a+1
  7925  0CF5  26AE  120A  158A   	fcall	_LcdWriteString
  7926  0CF8                     l6039:	
  7927                           
  7928                           ;main.c: 417: }
  7929                           ;main.c: 419: if(minus_flag)
  7930  0CF8  1683               	bsf	3,5	;RP0=1, select bank1
  7931  0CF9  1303               	bcf	3,6	;RP1=0, select bank1
  7932  0CFA  0831               	movf	_minus_flag^(0+128),w
  7933  0CFB  1903               	btfsc	3,2
  7934  0CFC  2D5A               	goto	l6053
  7935                           
  7936                           ;main.c: 420: {
  7937                           ;main.c: 421: zeljena_temperatura -= 0.1;
  7938  0CFD  30CD               	movlw	205
  7939  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
  7940  0CFF  00C2               	movwf	___ftadd@f1
  7941  0D00  30CC               	movlw	204
  7942  0D01  00C3               	movwf	___ftadd@f1+1
  7943  0D02  30BD               	movlw	189
  7944  0D03  00C4               	movwf	___ftadd@f1+2
  7945  0D04  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7946  0D05  264B               	fcall	___eetoft
  7947  0D06  0876               	movf	?___eetoft,w
  7948  0D07  00C5               	movwf	___ftadd@f2
  7949  0D08  0877               	movf	?___eetoft+1,w
  7950  0D09  00C6               	movwf	___ftadd@f2+1
  7951  0D0A  0878               	movf	?___eetoft+2,w
  7952  0D0B  00C7               	movwf	___ftadd@f2+2
  7953  0D0C  120A  118A  25BB  120A  158A  	fcall	___ftadd
  7954  0D11  0842               	movf	?___ftadd,w
  7955  0D12  00CE               	movwf	___fttoee@data
  7956  0D13  0843               	movf	?___ftadd+1,w
  7957  0D14  00CF               	movwf	___fttoee@data+1
  7958  0D15  0844               	movf	?___ftadd+2,w
  7959  0D16  00D0               	movwf	___fttoee@data+2
  7960  0D17  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7961  0D18  26C6  120A  158A   	fcall	___fttoee
  7962                           
  7963                           ;main.c: 422: if(zeljena_temperatura < 15) zeljena_temperatura = 15;
  7964  0D1B  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7965  0D1C  264B               	fcall	___eetoft
  7966  0D1D  0876               	movf	?___eetoft,w
  7967  0D1E  00CE               	movwf	___ftge@ff1
  7968  0D1F  0877               	movf	?___eetoft+1,w
  7969  0D20  00CF               	movwf	___ftge@ff1+1
  7970  0D21  0878               	movf	?___eetoft+2,w
  7971  0D22  00D0               	movwf	___ftge@ff1+2
  7972  0D23  3070               	movlw	112
  7973  0D24  01D1               	clrf	___ftge@ff2
  7974  0D25  00D2               	movwf	___ftge@ff2+1
  7975  0D26  3041               	movlw	65
  7976  0D27  00D3               	movwf	___ftge@ff2+2
  7977  0D28  120A  118A  248B  120A  158A  	fcall	___ftge
  7978  0D2D  1803               	btfsc	3,0
  7979  0D2E  2D38               	goto	l6045
  7980  0D2F  3070               	movlw	112
  7981  0D30  01CE               	clrf	___fttoee@data
  7982  0D31  00CF               	movwf	___fttoee@data+1
  7983  0D32  3041               	movlw	65
  7984  0D33  00D0               	movwf	___fttoee@data+2
  7985  0D34  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  7986  0D35  26C6  120A  158A   	fcall	___fttoee
  7987  0D38                     l6045:	
  7988                           
  7989                           ;main.c: 423: minus_flag = 0;
  7990  0D38  1683               	bsf	3,5	;RP0=1, select bank1
  7991  0D39  1303               	bcf	3,6	;RP1=0, select bank1
  7992  0D3A  306F               	movlw	low (STR_3| (0+32768))
  7993  0D3B  01B1               	clrf	_minus_flag^(0+128)
  7994                           
  7995                           ;main.c: 425: sprintf(temperature, " %.1f", zeljena_temperatura);
  7996  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  7997  0D3D  00D4               	movwf	sprintf@f
  7998  0D3E  3099               	movlw	high (STR_3| (0+32768))
  7999  0D3F  00D5               	movwf	sprintf@f+1
  8000  0D40  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  8001  0D41  264B               	fcall	___eetoft
  8002  0D42  0876               	movf	?___eetoft,w
  8003  0D43  00D6               	movwf	?_sprintf+2
  8004  0D44  0877               	movf	?___eetoft+1,w
  8005  0D45  00D7               	movwf	?_sprintf+3
  8006  0D46  0878               	movf	?___eetoft+2,w
  8007  0D47  00D8               	movwf	?_sprintf+4
  8008  0D48  30B9               	movlw	(low (_temperature| 0))& (0+255)
  8009  0D49  120A  118A  20A6  120A  158A  	fcall	_sprintf
  8010  0D4E  3002               	movlw	2
  8011                           
  8012                           ;main.c: 426: LcdSetCursor(2,1);
  8013  0D4F  01F6               	clrf	LcdSetCursor@b
  8014  0D50  0AF6               	incf	LcdSetCursor@b,f
  8015  0D51  2685  120A  158A   	fcall	_LcdSetCursor
  8016                           
  8017                           ;main.c: 427: LcdWriteString(temperature);
  8018  0D54  30B9               	movlw	(low (_temperature| 0))& (0+255)
  8019  0D55  00F7               	movwf	LcdWriteString@a
  8020  0D56  01F8               	clrf	LcdWriteString@a+1
  8021  0D57  26AE  120A  158A   	fcall	_LcdWriteString
  8022  0D5A                     l6053:	
  8023                           
  8024                           ;main.c: 428: }
  8025                           ;main.c: 430: if(ok_flag)
  8026  0D5A  087A               	movf	_ok_flag,w
  8027  0D5B  1903               	btfsc	3,2
  8028  0D5C  2C8E               	goto	l6059
  8029                           
  8030                           ;main.c: 431: {
  8031                           ;main.c: 432: ok_flag = 0;
  8032  0D5D  01FA               	clrf	_ok_flag
  8033                           
  8034                           ;main.c: 433: menuHumi();
  8035  0D5E  215A  120A  158A   	fcall	_menuHumi
  8036  0D61  2C8E               	goto	l6059
  8037  0D62                     l6061:	
  8038                           
  8039                           ;main.c: 434: }
  8040                           ;main.c: 435: }
  8041                           ;main.c: 437: ok_flag = 0;
  8042  0D62  01FA               	clrf	_ok_flag
  8043                           
  8044                           ;main.c: 438: ok_flag_humi = 0;
  8045  0D63  01B3               	clrf	_ok_flag_humi^(0+128)
  8046                           
  8047                           ;main.c: 439: ok_flag_co2 = 0;
  8048  0D64  01B2               	clrf	_ok_flag_co2^(0+128)
  8049  0D65  0008               	return
  8050  0D66                     __end_of_menu:	
  8051  0D66                     __ptext2:	
  8052 ;; *************** function _regulacija *****************
  8053 ;; Defined at:
  8054 ;;		line 215 in file "main.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;		None               void
  8061 ;; Registers used:
  8062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : 300/100
  8065 ;;		On exit  : 200/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8068 ;;      Params:         0       0       0       0       0
  8069 ;;      Locals:         0       0       0       0       0
  8070 ;;      Temps:          0       2       0       0       0
  8071 ;;      Totals:         0       2       0       0       0
  8072 ;;Total ram usage:        2 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    3
  8075 ;; This function calls:
  8076 ;;		___eetoft
  8077 ;;		___eetoi
  8078 ;;		___ftadd
  8079 ;;		___ftge
  8080 ;; This function is called by:
  8081 ;;		_main
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function _regulacija
  8087  0D66                     _regulacija:	
  8088                           
  8089                           ;main.c: 217: if(RC4)
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in _regulacija: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8093  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  8094  0D67  1E07               	btfss	7,4	;volatile
  8095  0D68  2D7C               	goto	l5981
  8096                           
  8097                           ;main.c: 218: {
  8098                           ;main.c: 219: if(temp > zeljena_temperatura)
  8099  0D69  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  8100  0D6A  264B  120A  158A   	fcall	___eetoft
  8101  0D6D  0876               	movf	?___eetoft,w
  8102  0D6E  00CE               	movwf	___ftge@ff1
  8103  0D6F  0877               	movf	?___eetoft+1,w
  8104  0D70  00CF               	movwf	___ftge@ff1+1
  8105  0D71  0878               	movf	?___eetoft+2,w
  8106  0D72  27D1               	fcall	PL20	;call to abstracted procedure
  8107  0D73  120A  118A  248B  120A  158A  	fcall	___ftge
  8108  0D78  1803               	btfsc	3,0
  8109  0D79  2D97               	goto	l381
  8110                           
  8111                           ;main.c: 220: {
  8112                           ;main.c: 221: RC4 = 0;
  8113  0D7A  1207               	bcf	7,4	;volatile
  8114  0D7B  2D97               	goto	l381
  8115  0D7C                     l5981:	
  8116                           
  8117                           ;main.c: 224: else if(temp < (zeljena_temperatura - 0.4))
  8118  0D7C  27DF  120A  158A   	fcall	PL24	;call to abstracted procedure
  8119  0D7F  30CD               	movlw	205
  8120  0D80  00C2               	movwf	___ftadd@f1
  8121  0D81  30CC               	movlw	204
  8122  0D82  00C3               	movwf	___ftadd@f1+1
  8123  0D83  30BE               	movlw	190
  8124  0D84  00C4               	movwf	___ftadd@f1+2
  8125  0D85  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  8126  0D86  264B  120A  158A   	fcall	___eetoft
  8127  0D89  27EC               	fcall	PL62	;call to abstracted procedure
  8128  0D8A  120A  118A  25BB  120A  158A  	fcall	___ftadd
  8129  0D8F  27F9               	fcall	PL90	;call to abstracted procedure
  8130  0D90  120A  118A  248B  120A  158A  	fcall	___ftge
  8131  0D95  1C03               	btfss	3,0
  8132                           
  8133                           ;main.c: 225: {
  8134                           ;main.c: 226: RC4 = 1;
  8135  0D96  1607               	bsf	7,4	;volatile
  8136  0D97                     l381:	
  8137                           
  8138                           ;main.c: 227: }
  8139                           ;main.c: 229: if(RC3)
  8140  0D97  1D87               	btfss	7,3	;volatile
  8141  0D98  2DAD               	goto	l5989
  8142                           
  8143                           ;main.c: 230: {
  8144                           ;main.c: 231: if(temp < zeljena_temperatura)
  8145  0D99  27DF  120A  158A   	fcall	PL24	;call to abstracted procedure
  8146  0D9C  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  8147  0D9D  264B               	fcall	___eetoft
  8148  0D9E  0876               	movf	?___eetoft,w
  8149  0D9F  00D1               	movwf	___ftge@ff2
  8150  0DA0  0877               	movf	?___eetoft+1,w
  8151  0DA1  00D2               	movwf	___ftge@ff2+1
  8152  0DA2  0878               	movf	?___eetoft+2,w
  8153  0DA3  00D3               	movwf	___ftge@ff2+2
  8154  0DA4  120A  118A  248B  120A  158A  	fcall	___ftge
  8155  0DA9  1803               	btfsc	3,0
  8156  0DAA  2DC8               	goto	l385
  8157                           
  8158                           ;main.c: 232: {
  8159                           ;main.c: 233: RC3 = 0;
  8160  0DAB  1187               	bcf	7,3	;volatile
  8161  0DAC  2DC8               	goto	l385
  8162  0DAD                     l5989:	
  8163                           
  8164                           ;main.c: 236: else if(temp > (zeljena_temperatura + 0.4))
  8165  0DAD  30CD               	movlw	205
  8166  0DAE  00C2               	movwf	___ftadd@f1
  8167  0DAF  30CC               	movlw	204
  8168  0DB0  00C3               	movwf	___ftadd@f1+1
  8169  0DB1  303E               	movlw	62
  8170  0DB2  00C4               	movwf	___ftadd@f1+2
  8171  0DB3  3000               	movlw	(low _zeljena_temperatura)& (0+255)
  8172  0DB4  264B  120A  158A   	fcall	___eetoft
  8173  0DB7  27EC               	fcall	PL62	;call to abstracted procedure
  8174  0DB8  120A  118A  25BB  120A  158A  	fcall	___ftadd
  8175  0DBD  27F3  120A  158A   	fcall	PL76	;call to abstracted procedure
  8176  0DC0  27D1               	fcall	PL20	;call to abstracted procedure
  8177  0DC1  120A  118A  248B  120A  158A  	fcall	___ftge
  8178  0DC6  1C03               	btfss	3,0
  8179                           
  8180                           ;main.c: 237: {
  8181                           ;main.c: 238: RC3 = 1;
  8182  0DC7  1587               	bsf	7,3	;volatile
  8183  0DC8                     l385:	
  8184                           
  8185                           ;main.c: 239: }
  8186                           ;main.c: 244: if(RC1)
  8187  0DC8  1C87               	btfss	7,1	;volatile
  8188  0DC9  2DF0               	goto	l5997
  8189                           
  8190                           ;main.c: 245: {
  8191                           ;main.c: 246: if(humi > (zeljena_vlaznost + 2.5))
  8192  0DCA  3020               	movlw	32
  8193  0DCB  01C2               	clrf	___ftadd@f1
  8194  0DCC  00C3               	movwf	___ftadd@f1+1
  8195  0DCD  3040               	movlw	64
  8196  0DCE  00C4               	movwf	___ftadd@f1+2
  8197  0DCF  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  8198  0DD0  264B  120A  158A   	fcall	___eetoft
  8199  0DD3  27EC               	fcall	PL62	;call to abstracted procedure
  8200  0DD4  120A  118A  25BB  120A  158A  	fcall	___ftadd
  8201  0DD9  27F3               	fcall	PL76	;call to abstracted procedure
  8202  0DDA  00D0               	movwf	___ftge@ff1+2
  8203  0DDB  1683               	bsf	3,5	;RP0=1, select bank1
  8204  0DDC  083E               	movf	_humi^(0+128),w
  8205  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  8206  0DDE  00D1               	movwf	___ftge@ff2
  8207  0DDF  1683               	bsf	3,5	;RP0=1, select bank1
  8208  0DE0  083F               	movf	(_humi+1)^(0+128),w
  8209  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  8210  0DE2  00D2               	movwf	___ftge@ff2+1
  8211  0DE3  1683               	bsf	3,5	;RP0=1, select bank1
  8212  0DE4  0840               	movf	(_humi+2)^(0+128),w
  8213  0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  8214  0DE6  00D3               	movwf	___ftge@ff2+2
  8215  0DE7  120A  118A  248B  120A  158A  	fcall	___ftge
  8216  0DEC  1803               	btfsc	3,0
  8217  0DED  2E13               	goto	l6001
  8218                           
  8219                           ;main.c: 247: {
  8220                           ;main.c: 248: RC1 = 0;
  8221  0DEE  1087               	bcf	7,1	;volatile
  8222  0DEF  2E13               	goto	l6001
  8223  0DF0                     l5997:	
  8224                           
  8225                           ;main.c: 252: else if(humi < (zeljena_vlaznost - 2.5))
  8226  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  8227  0DF1  083E               	movf	_humi^(0+128),w
  8228  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  8229  0DF3  00CE               	movwf	___ftge@ff1
  8230  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  8231  0DF5  083F               	movf	(_humi+1)^(0+128),w
  8232  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  8233  0DF7  00CF               	movwf	___ftge@ff1+1
  8234  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  8235  0DF9  0840               	movf	(_humi+2)^(0+128),w
  8236  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  8237  0DFB  00D0               	movwf	___ftge@ff1+2
  8238  0DFC  3020               	movlw	32
  8239  0DFD  01C2               	clrf	___ftadd@f1
  8240  0DFE  00C3               	movwf	___ftadd@f1+1
  8241  0DFF  30C0               	movlw	192
  8242  0E00  00C4               	movwf	___ftadd@f1+2
  8243  0E01  3003               	movlw	(low _zeljena_vlaznost)& (0+255)
  8244  0E02  264B  120A  158A   	fcall	___eetoft
  8245  0E05  27EC               	fcall	PL62	;call to abstracted procedure
  8246  0E06  120A  118A  25BB  120A  158A  	fcall	___ftadd
  8247  0E0B  27F9               	fcall	PL90	;call to abstracted procedure
  8248  0E0C  120A  118A  248B  120A  158A  	fcall	___ftge
  8249  0E11  1C03               	btfss	3,0
  8250                           
  8251                           ;main.c: 253: {
  8252                           ;main.c: 254: RC1 = 1;
  8253  0E12  1487               	bsf	7,1	;volatile
  8254  0E13                     l6001:	
  8255                           
  8256                           ;main.c: 255: }
  8257                           ;main.c: 259: if(measure_co2)
  8258  0E13  1683               	bsf	3,5	;RP0=1, select bank1
  8259  0E14  082E               	movf	_measure_co2^(0+128),w
  8260  0E15  1903               	btfsc	3,2
  8261  0E16  0008               	return
  8262                           
  8263                           ;main.c: 260: {
  8264                           ;main.c: 261: if (RC0)
  8265  0E17  1283               	bcf	3,5	;RP0=0, select bank0
  8266  0E18  1C07               	btfss	7,0	;volatile
  8267  0E19  2E33               	goto	l6009
  8268                           
  8269                           ;main.c: 262: {
  8270                           ;main.c: 263: if(co2 < (zeljena_co2 - 250))
  8271  0E1A  3006               	movlw	(low _zeljena_co2)& (0+255)
  8272  0E1B  265B  120A  158A   	fcall	___eetoi
  8273  0E1E  0876               	movf	?___eetoi,w
  8274  0E1F  3E06               	addlw	6
  8275  0E20  00D4               	movwf	??_regulacija
  8276  0E21  0877               	movf	?___eetoi+1,w
  8277  0E22  1803               	skipnc
  8278  0E23  3E01               	addlw	1
  8279  0E24  3EFF               	addlw	255
  8280  0E25  00D5               	movwf	??_regulacija+1
  8281  0E26  1683               	bsf	3,5	;RP0=1, select bank1
  8282  0E27  0228               	subwf	(_co2+1)^(0+128),w
  8283  0E28  1D03               	skipz
  8284  0E29  2E2E               	goto	u6795
  8285  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  8286  0E2B  0854               	movf	??_regulacija,w
  8287  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  8288  0E2D  0227               	subwf	_co2^(0+128),w
  8289  0E2E                     u6795:	
  8290  0E2E  1803               	skipnc
  8291  0E2F  0008               	return
  8292                           
  8293                           ;main.c: 264: {
  8294                           ;main.c: 265: RC0 = 0;
  8295  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  8296  0E31  1007               	bcf	7,0	;volatile
  8297  0E32  0008               	return
  8298  0E33                     l6009:	
  8299                           
  8300                           ;main.c: 269: else if(co2 > (zeljena_co2 + 250))
  8301  0E33  3006               	movlw	(low _zeljena_co2)& (0+255)
  8302  0E34  265B  120A  158A   	fcall	___eetoi
  8303  0E37  0876               	movf	?___eetoi,w
  8304  0E38  3EFA               	addlw	250
  8305  0E39  00D4               	movwf	??_regulacija
  8306  0E3A  0877               	movf	?___eetoi+1,w
  8307  0E3B  1803               	skipnc
  8308  0E3C  3E01               	addlw	1
  8309  0E3D  00D5               	movwf	??_regulacija+1
  8310  0E3E  1683               	bsf	3,5	;RP0=1, select bank1
  8311  0E3F  0828               	movf	(_co2+1)^(0+128),w
  8312  0E40  1283               	bcf	3,5	;RP0=0, select bank0
  8313  0E41  0255               	subwf	??_regulacija+1,w
  8314  0E42  1D03               	skipz
  8315  0E43  2E48               	goto	u6805
  8316  0E44  1683               	bsf	3,5	;RP0=1, select bank1
  8317  0E45  0827               	movf	_co2^(0+128),w
  8318  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  8319  0E47  0254               	subwf	??_regulacija,w
  8320  0E48                     u6805:	
  8321  0E48  1C03               	btfss	3,0
  8322                           
  8323                           ;main.c: 270: {
  8324                           ;main.c: 271: RC0 = 1;
  8325  0E49  1407               	bsf	7,0	;volatile
  8326  0E4A  0008               	return
  8327  0E4B                     __end_of_regulacija:	
  8328  0E4B                     __ptext11:	
  8329 ;; *************** function ___eetoft *****************
  8330 ;; Defined at:
  8331 ;;		line 108 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  addr            1    wreg     PTR eeprom void 
  8334 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  addr            1    3[BANK0 ] PTR eeprom void 
  8337 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8338 ;;  data            3    0[BANK0 ] float 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  3    6[COMMON] float 
  8341 ;; Registers used:
  8342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 300/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8348 ;;      Params:         4       0       0       0       0
  8349 ;;      Locals:         0       4       0       0       0
  8350 ;;      Temps:          0       0       0       0       0
  8351 ;;      Totals:         4       4       0       0       0
  8352 ;;Total ram usage:        8 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    2
  8355 ;; This function calls:
  8356 ;;		_eecpymem
  8357 ;; This function is called by:
  8358 ;;		_regulacija
  8359 ;;		_menuHumi
  8360 ;;		_menu
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           
  8365                           ;psect for function ___eetoft
  8366  0E4B                     ___eetoft:	
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in ___eetoft: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8370                           ;___eetoft@addr stored from wreg
  8371  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  8372  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  8373  0E4D  00A3               	movwf	___eetoft@addr
  8374  0E4E  00F2               	movwf	eecpymem@from
  8375  0E4F  3003               	movlw	3
  8376  0E50  00F3               	movwf	eecpymem@size
  8377  0E51  3020               	movlw	(low (___eetoft@data| 0))& (0+255)
  8378  0E52  2669               	fcall	_eecpymem
  8379  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  8380  0E54  0820               	movf	___eetoft@data,w
  8381  0E55  00F6               	movwf	?___eetoft
  8382  0E56  0821               	movf	___eetoft@data+1,w
  8383  0E57  00F7               	movwf	?___eetoft+1
  8384  0E58  0822               	movf	___eetoft@data+2,w
  8385  0E59  00F8               	movwf	?___eetoft+2
  8386  0E5A  0008               	return
  8387  0E5B                     __end_of___eetoft:	
  8388  0E5B                     __ptext8:	
  8389 ;; *************** function ___eetoi *****************
  8390 ;; Defined at:
  8391 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  addr            1    wreg     PTR eeprom void 
  8394 ;;		 -> zeljena_co2(2), 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  addr            1    2[BANK0 ] PTR eeprom void 
  8397 ;;		 -> zeljena_co2(2), 
  8398 ;;  data            2    0[BANK0 ] unsigned int 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  2    6[COMMON] unsigned int 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 300/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8408 ;;      Params:         3       0       0       0       0
  8409 ;;      Locals:         0       3       0       0       0
  8410 ;;      Temps:          0       0       0       0       0
  8411 ;;      Totals:         3       3       0       0       0
  8412 ;;Total ram usage:        6 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    2
  8415 ;; This function calls:
  8416 ;;		_eecpymem
  8417 ;; This function is called by:
  8418 ;;		_regulacija
  8419 ;;		_menuCO2
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function ___eetoi
  8425  0E5B                     ___eetoi:	
  8426                           
  8427                           ;incstack = 0
  8428                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8429                           ;___eetoi@addr stored from wreg
  8430  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  8431  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  8432  0E5D  00A2               	movwf	___eetoi@addr
  8433  0E5E  00F2               	movwf	eecpymem@from
  8434  0E5F  3002               	movlw	2
  8435  0E60  00F3               	movwf	eecpymem@size
  8436  0E61  3020               	movlw	(low (___eetoi@data| 0))& (0+255)
  8437  0E62  2669               	fcall	_eecpymem
  8438  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  8439  0E64  0821               	movf	___eetoi@data+1,w
  8440  0E65  00F7               	movwf	?___eetoi+1
  8441  0E66  0820               	movf	___eetoi@data,w
  8442  0E67  00F6               	movwf	?___eetoi
  8443  0E68  0008               	return
  8444  0E69                     __end_of___eetoi:	
  8445  0E69                     __ptext12:	
  8446 ;; *************** function _eecpymem *****************
  8447 ;; Defined at:
  8448 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  to              1    wreg     PTR volatile unsigned ch
  8451 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8452 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8453 ;;  from            1    2[COMMON] PTR eeprom unsigned char
  8454 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  8455 ;;  size            1    3[COMMON] unsigned char 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;  to              1    5[COMMON] PTR volatile unsigned ch
  8458 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8459 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8460 ;;  cp              1    4[COMMON] PTR volatile unsigned ch
  8461 ;;		 -> __eetofl@data(3), __eetoft@data(3), __eetol@data(4), __eetom@data(3), 
  8462 ;;		 -> __eetoi@data(2), __eetoc@data(1), 
  8463 ;; Return value:  Size  Location     Type
  8464 ;;		None               void
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8467 ;; Tracked objects:
  8468 ;;		On entry : 300/0
  8469 ;;		On exit  : 300/200
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8472 ;;      Params:         2       0       0       0       0
  8473 ;;      Locals:         2       0       0       0       0
  8474 ;;      Temps:          0       0       0       0       0
  8475 ;;      Totals:         4       0       0       0       0
  8476 ;;Total ram usage:        4 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    1
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		___eetoi
  8483 ;;		___eetoft
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _eecpymem
  8489  0E69                     _eecpymem:	
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _eecpymem: [wreg-fsr0h+status,2+status,0]
  8493                           ;eecpymem@to stored from wreg
  8494  0E69  00F5               	movwf	eecpymem@to
  8495  0E6A  0875               	movf	eecpymem@to,w
  8496  0E6B  00F4               	movwf	eecpymem@cp
  8497  0E6C                     l635:	
  8498  0E6C  1683               	bsf	3,5	;RP0=1, select bank3
  8499  0E6D  1703               	bsf	3,6	;RP1=1, select bank3
  8500  0E6E  188C               	btfsc	12,1	;volsfr
  8501  0E6F  2E6C               	goto	l635
  8502  0E70  0872               	movf	eecpymem@from,w
  8503  0E71  1283               	bcf	3,5	;RP0=0, select bank2
  8504  0E72  008D               	movwf	13	;volatile
  8505  0E73                     l4995:	
  8506  0E73  03F3               	decf	eecpymem@size,f
  8507  0E74  0F73               	incfsz	eecpymem@size,w
  8508  0E75  2E77               	goto	l640
  8509  0E76  0008               	return
  8510  0E77                     l640:	
  8511  0E77  1683               	bsf	3,5	;RP0=1, select bank3
  8512  0E78  188C               	btfsc	12,1	;volsfr
  8513  0E79  2E77               	goto	l640
  8514  0E7A  138C               	bcf	12,7	;volsfr
  8515  0E7B  140C               	bsf	12,0	;volsfr
  8516  0E7C  0874               	movf	eecpymem@cp,w
  8517  0E7D  0084               	movwf	4
  8518  0E7E  1283               	bcf	3,5	;RP0=0, select bank2
  8519  0E7F  080C               	movf	12,w	;volatile
  8520  0E80  1383               	bcf	3,7	;select IRP bank0
  8521  0E81  0080               	movwf	0
  8522  0E82  0AF4               	incf	eecpymem@cp,f
  8523  0E83  0A8D               	incf	13,f	;volatile
  8524  0E84  2E73               	goto	l4995
  8525  0E85                     __end_of_eecpymem:	
  8526  0E85                     __ptext63:	
  8527 ;; *************** function _LcdSetCursor *****************
  8528 ;; Defined at:
  8529 ;;		line 45 in file "lcd.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  a               1    wreg     unsigned char 
  8532 ;;  b               1    6[COMMON] unsigned char 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  a               1    0[BANK0 ] unsigned char 
  8535 ;;  temp            1    3[BANK0 ] unsigned char 
  8536 ;;  y               1    2[BANK0 ] unsigned char 
  8537 ;;  z               1    1[BANK0 ] unsigned char 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;		None               void
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0, pclath, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/100
  8544 ;;		On exit  : 300/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8547 ;;      Params:         1       0       0       0       0
  8548 ;;      Locals:         0       4       0       0       0
  8549 ;;      Temps:          0       0       0       0       0
  8550 ;;      Totals:         1       4       0       0       0
  8551 ;;Total ram usage:        5 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    3
  8554 ;; This function calls:
  8555 ;;		_LcdCmd
  8556 ;; This function is called by:
  8557 ;;		_LcdWriteInt
  8558 ;;		_getResSHT71
  8559 ;;		_displayAirTemp
  8560 ;;		_displayAirMoist
  8561 ;;		_displayCO2
  8562 ;;		_displaySoilTemp
  8563 ;;		_menuCO2
  8564 ;;		_menuHumi
  8565 ;;		_menu
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _LcdSetCursor
  8571  0E85                     _LcdSetCursor:	
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _LcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  8575                           ;LcdSetCursor@a stored from wreg
  8576  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  8577  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  8578  0E87  00A0               	movwf	LcdSetCursor@a
  8579                           
  8580                           ;lcd.c: 47: char temp,z,y;
  8581                           ;lcd.c: 48: if(a == 1)
  8582  0E88  0B20               	decfsz	LcdSetCursor@a,w
  8583  0E89  2E9A               	goto	l4949
  8584                           
  8585                           ;lcd.c: 49: {
  8586                           ;lcd.c: 50: temp = 0x80 + b - 1;
  8587  0E8A  0876               	movf	LcdSetCursor@b,w
  8588  0E8B  3E7F               	addlw	127
  8589  0E8C  00A3               	movwf	LcdSetCursor@temp
  8590                           
  8591                           ;lcd.c: 51: z = temp>>4;
  8592  0E8D  0E23               	swapf	LcdSetCursor@temp,w
  8593  0E8E  390F               	andlw	15
  8594  0E8F  00A1               	movwf	LcdSetCursor@z
  8595                           
  8596                           ;lcd.c: 52: y = temp & 0x0F;
  8597  0E90  0823               	movf	LcdSetCursor@temp,w
  8598  0E91  00A2               	movwf	LcdSetCursor@y
  8599  0E92  300F               	movlw	15
  8600  0E93  05A2               	andwf	LcdSetCursor@y,f
  8601                           
  8602                           ;lcd.c: 53: LcdCmd(z);
  8603  0E94  0821               	movf	LcdSetCursor@z,w
  8604  0E95  2767  120A  158A   	fcall	_LcdCmd
  8605                           
  8606                           ;lcd.c: 54: LcdCmd(y);
  8607  0E98  0822               	movf	LcdSetCursor@y,w
  8608  0E99  2F67               	ljmp	_LcdCmd
  8609  0E9A                     l4949:	
  8610                           ;lcd.c: 55: }
  8611                           
  8612                           
  8613                           ;lcd.c: 56: else if(a == 2)
  8614  0E9A  3002               	movlw	2
  8615  0E9B  0620               	xorwf	LcdSetCursor@a,w
  8616  0E9C  1D03               	btfss	3,2
  8617  0E9D  0008               	return
  8618                           
  8619                           ;lcd.c: 57: {
  8620                           ;lcd.c: 58: temp = 0xC0 + b - 1;
  8621  0E9E  0876               	movf	LcdSetCursor@b,w
  8622  0E9F  3EBF               	addlw	191
  8623  0EA0  00A3               	movwf	LcdSetCursor@temp
  8624                           
  8625                           ;lcd.c: 59: z = temp>>4;
  8626  0EA1  0E23               	swapf	LcdSetCursor@temp,w
  8627  0EA2  390F               	andlw	15
  8628  0EA3  00A1               	movwf	LcdSetCursor@z
  8629                           
  8630                           ;lcd.c: 60: y = temp & 0x0F;
  8631  0EA4  0823               	movf	LcdSetCursor@temp,w
  8632  0EA5  00A2               	movwf	LcdSetCursor@y
  8633  0EA6  300F               	movlw	15
  8634  0EA7  05A2               	andwf	LcdSetCursor@y,f
  8635                           
  8636                           ;lcd.c: 61: LcdCmd(z);
  8637  0EA8  0821               	movf	LcdSetCursor@z,w
  8638  0EA9  2767  120A  158A   	fcall	_LcdCmd
  8639                           
  8640                           ;lcd.c: 62: LcdCmd(y);
  8641  0EAC  0822               	movf	LcdSetCursor@y,w
  8642  0EAD  2F67               	ljmp	_LcdCmd
  8643  0EAE                     __end_of_LcdSetCursor:	
  8644  0EAE                     __ptext61:	
  8645 ;; *************** function _LcdWriteString *****************
  8646 ;; Defined at:
  8647 ;;		line 106 in file "lcd.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  a               2    7[COMMON] PTR unsigned char 
  8650 ;;		 -> STR_25(10), STR_24(17), STR_20(9), STR_19(17), 
  8651 ;;		 -> STR_17(9), STR_16(11), STR_15(17), STR_14(13), 
  8652 ;;		 -> STR_13(17), STR_11(17), STR_10(13), STR_9(17), 
  8653 ;;		 -> STR_8(13), STR_7(17), humidity(5), STR_5(13), 
  8654 ;;		 -> STR_4(17), temperature(5), STR_1(14), 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  i               2    3[BANK0 ] int 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;		None               void
  8659 ;; Registers used:
  8660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 300/0
  8663 ;;		On exit  : 300/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8666 ;;      Params:         2       0       0       0       0
  8667 ;;      Locals:         0       2       0       0       0
  8668 ;;      Temps:          0       3       0       0       0
  8669 ;;      Totals:         2       5       0       0       0
  8670 ;;Total ram usage:        7 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    3
  8673 ;; This function calls:
  8674 ;;		_LcdWriteChar
  8675 ;; This function is called by:
  8676 ;;		_getResSHT71
  8677 ;;		_displayAirTemp
  8678 ;;		_displayAirMoist
  8679 ;;		_displayCO2
  8680 ;;		_displaySoilTemp
  8681 ;;		_menuCO2
  8682 ;;		_menuHumi
  8683 ;;		_menu
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function _LcdWriteString
  8689  0EAE                     _LcdWriteString:	
  8690  0EAE                     l5223:	
  8691                           ;incstack = 0
  8692                           ; Regs used in _LcdWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8693                           
  8694                           
  8695                           ;lcd.c: 108: int i;
  8696                           ;lcd.c: 109: for(i=0;a[i]!='\0';i++)
  8697  0EAE  01A3               	clrf	LcdWriteString@i
  8698  0EAF  01A4               	clrf	LcdWriteString@i+1
  8699  0EB0                     l5229:	
  8700  0EB0  27C0               	fcall	PL12	;call to abstracted procedure
  8701  0EB1  160A  158A  2000  120A  158A  	fcall	stringtab
  8702  0EB6  3A00               	xorlw	0
  8703  0EB7  1903               	btfsc	3,2
  8704  0EB8  0008               	return
  8705                           
  8706                           ;lcd.c: 110: LcdWriteChar(a[i]);
  8707  0EB9  27C0               	fcall	PL12	;call to abstracted procedure
  8708  0EBA  160A  158A  2000  120A  158A  	fcall	stringtab
  8709  0EBF  26CD  120A  158A   	fcall	_LcdWriteChar
  8710  0EC2  0AA3               	incf	LcdWriteString@i,f
  8711  0EC3  1903               	skipnz
  8712  0EC4  0AA4               	incf	LcdWriteString@i+1,f
  8713  0EC5  2EB0               	goto	l5229
  8714  0EC6                     __end_of_LcdWriteString:	
  8715  0EC6                     __ptext9:	
  8716 ;; *************** function ___fttoee *****************
  8717 ;; Defined at:
  8718 ;;		line 124 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  addr            1    wreg     PTR eeprom void 
  8721 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8722 ;;  data            3   46[BANK0 ] float 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  addr            1   49[BANK0 ] PTR eeprom void 
  8725 ;;		 -> zeljena_vlaznost(3), zeljena_temperatura(3), 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  3   46[BANK0 ] float 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 300/0
  8732 ;;		On exit  : 300/300
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8735 ;;      Params:         0       3       0       0       0
  8736 ;;      Locals:         0       1       0       0       0
  8737 ;;      Temps:          0       0       0       0       0
  8738 ;;      Totals:         0       4       0       0       0
  8739 ;;Total ram usage:        4 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    2
  8742 ;; This function calls:
  8743 ;;		_memcpyee
  8744 ;; This function is called by:
  8745 ;;		_menuHumi
  8746 ;;		_menu
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           
  8751                           ;psect for function ___fttoee
  8752  0EC6                     ___fttoee:	
  8753                           
  8754                           ;incstack = 0
  8755                           ; Regs used in ___fttoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8756                           ;___fttoee@addr stored from wreg
  8757  0EC6  00D1               	movwf	___fttoee@addr
  8758  0EC7  304E               	movlw	(low (___fttoee@data| 0))& (0+255)
  8759  0EC8  00F2               	movwf	memcpyee@from
  8760  0EC9  3003               	movlw	3
  8761  0ECA  00F3               	movwf	memcpyee@size
  8762  0ECB  0851               	movf	___fttoee@addr,w
  8763  0ECC  2F95               	ljmp	_memcpyee
  8764  0ECD                     __end_of___fttoee:	
  8765  0ECD                     __ptext62:	
  8766 ;; *************** function _LcdWriteChar *****************
  8767 ;; Defined at:
  8768 ;;		line 90 in file "lcd.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  a               1    wreg     unsigned char 
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  a               1    6[COMMON] unsigned char 
  8773 ;;  y               1    5[COMMON] unsigned char 
  8774 ;;  temp            1    4[COMMON] unsigned char 
  8775 ;; Return value:  Size  Location     Type
  8776 ;;		None               void
  8777 ;; Registers used:
  8778 ;;		wreg, status,2, status,0, pclath, cstack
  8779 ;; Tracked objects:
  8780 ;;		On entry : 300/0
  8781 ;;		On exit  : 300/0
  8782 ;;		Unchanged: 0/0
  8783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8784 ;;      Params:         0       0       0       0       0
  8785 ;;      Locals:         3       0       0       0       0
  8786 ;;      Temps:          1       0       0       0       0
  8787 ;;      Totals:         4       0       0       0       0
  8788 ;;Total ram usage:        4 bytes
  8789 ;; Hardware stack levels used:    1
  8790 ;; Hardware stack levels required when called:    2
  8791 ;; This function calls:
  8792 ;;		_LcdPort
  8793 ;; This function is called by:
  8794 ;;		_LcdWriteString
  8795 ;;		_LcdWriteInt
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           
  8800                           ;psect for function _LcdWriteChar
  8801  0ECD                     _LcdWriteChar:	
  8802                           
  8803                           ;incstack = 0
  8804                           ; Regs used in _LcdWriteChar: [wreg+status,2+status,0+pclath+cstack]
  8805                           ;LcdWriteChar@a stored from wreg
  8806  0ECD  00F6               	movwf	LcdWriteChar@a
  8807                           
  8808                           ;lcd.c: 92: char temp,y;
  8809                           ;lcd.c: 93: temp = a&0x0F;
  8810  0ECE  00F4               	movwf	LcdWriteChar@temp
  8811  0ECF  300F               	movlw	15
  8812  0ED0  05F4               	andwf	LcdWriteChar@temp,f
  8813                           
  8814                           ;lcd.c: 94: y = a&0xF0;
  8815  0ED1  0876               	movf	LcdWriteChar@a,w
  8816  0ED2  00F5               	movwf	LcdWriteChar@y
  8817  0ED3  30F0               	movlw	240
  8818  0ED4  05F5               	andwf	LcdWriteChar@y,f
  8819                           
  8820                           ;lcd.c: 95: RB5 = 1;
  8821  0ED5  1686               	bsf	6,5	;volatile
  8822                           
  8823                           ;lcd.c: 96: LcdPort(y>>4);
  8824  0ED6  0E75               	swapf	LcdWriteChar@y,w
  8825  0ED7  390F               	andlw	15
  8826  0ED8  277D  120A  158A   	fcall	_LcdPort
  8827                           
  8828                           ;lcd.c: 97: RB4 = 1;
  8829  0EDB  1606               	bsf	6,4	;volatile
  8830                           
  8831                           ;lcd.c: 98: _delay((unsigned long)((40)*(8000000/4000000.0)));
  8832  0EDC  301A               	movlw	26
  8833  0EDD  00F3               	movwf	??_LcdWriteChar
  8834  0EDE                     u7207:	
  8835  0EDE  0BF3               	decfsz	??_LcdWriteChar,f
  8836  0EDF  2EDE               	goto	u7207
  8837  0EE0  0000               	nop
  8838                           
  8839                           ;lcd.c: 99: RB4 = 0;
  8840  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
  8841  0EE2  1303               	bcf	3,6	;RP1=0, select bank0
  8842  0EE3  1206               	bcf	6,4	;volatile
  8843                           
  8844                           ;lcd.c: 100: LcdPort(temp);
  8845  0EE4  0874               	movf	LcdWriteChar@temp,w
  8846  0EE5  277D  120A  158A   	fcall	_LcdPort
  8847                           
  8848                           ;lcd.c: 101: RB4 = 1;
  8849  0EE8  1606               	bsf	6,4	;volatile
  8850                           
  8851                           ;lcd.c: 102: _delay((unsigned long)((40)*(8000000/4000000.0)));
  8852  0EE9  301A               	movlw	26
  8853  0EEA  00F3               	movwf	??_LcdWriteChar
  8854  0EEB                     u7217:	
  8855  0EEB  0BF3               	decfsz	??_LcdWriteChar,f
  8856  0EEC  2EEB               	goto	u7217
  8857  0EED  0000               	nop
  8858                           
  8859                           ;lcd.c: 103: RB4 = 0;
  8860  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
  8861  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
  8862  0EF0  1206               	bcf	6,4	;volatile
  8863  0EF1  0008               	return
  8864  0EF2                     __end_of_LcdWriteChar:	
  8865  0EF2                     __ptext37:	
  8866 ;; *************** function ___lwdiv *****************
  8867 ;; Defined at:
  8868 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;  divisor         2    2[COMMON] unsigned int 
  8871 ;;  dividend        2    4[COMMON] unsigned int 
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;  quotient        2    6[COMMON] unsigned int 
  8874 ;;  counter         1    8[COMMON] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  2    2[COMMON] unsigned int 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0
  8879 ;; Tracked objects:
  8880 ;;		On entry : 300/0
  8881 ;;		On exit  : 300/0
  8882 ;;		Unchanged: 300/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8884 ;;      Params:         4       0       0       0       0
  8885 ;;      Locals:         3       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0
  8887 ;;      Totals:         7       0       0       0       0
  8888 ;;Total ram usage:        7 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    1
  8891 ;; This function calls:
  8892 ;;		Nothing
  8893 ;; This function is called by:
  8894 ;;		_LcdWriteInt
  8895 ;;		_measureTGS4161
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           
  8900                           ;psect for function ___lwdiv
  8901  0EF2                     ___lwdiv:	
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8905  0EF2  01F6               	clrf	___lwdiv@quotient
  8906  0EF3  01F7               	clrf	___lwdiv@quotient+1
  8907  0EF4  0872               	movf	___lwdiv@divisor,w
  8908  0EF5  0473               	iorwf	___lwdiv@divisor+1,w
  8909  0EF6  1903               	btfsc	3,2
  8910  0EF7  2F17               	goto	l3449
  8911  0EF8  01F8               	clrf	___lwdiv@counter
  8912  0EF9                     L7:	
  8913  0EF9  0AF8               	incf	___lwdiv@counter,f
  8914  0EFA  1BF3               	btfsc	___lwdiv@divisor+1,7
  8915  0EFB  2F00               	goto	l3437
  8916  0EFC  1003               	clrc
  8917  0EFD  0DF2               	rlf	___lwdiv@divisor,f
  8918  0EFE  0DF3               	rlf	___lwdiv@divisor+1,f
  8919  0EFF  2EF9               	goto	L7
  8920  0F00                     l3437:	
  8921  0F00  1003               	clrc
  8922  0F01  0DF6               	rlf	___lwdiv@quotient,f
  8923  0F02  0DF7               	rlf	___lwdiv@quotient+1,f
  8924  0F03  0873               	movf	___lwdiv@divisor+1,w
  8925  0F04  0275               	subwf	___lwdiv@dividend+1,w
  8926  0F05  1D03               	skipz
  8927  0F06  2F09               	goto	u3365
  8928  0F07  0872               	movf	___lwdiv@divisor,w
  8929  0F08  0274               	subwf	___lwdiv@dividend,w
  8930  0F09                     u3365:	
  8931  0F09  1C03               	skipc
  8932  0F0A  2F13               	goto	L8
  8933  0F0B  0872               	movf	___lwdiv@divisor,w
  8934  0F0C  02F4               	subwf	___lwdiv@dividend,f
  8935  0F0D  0873               	movf	___lwdiv@divisor+1,w
  8936  0F0E  1C03               	skipc
  8937  0F0F  03F5               	decf	___lwdiv@dividend+1,f
  8938  0F10  02F5               	subwf	___lwdiv@dividend+1,f
  8939  0F11  1476               	bsf	___lwdiv@quotient,0
  8940  0F12  1003               	clrc
  8941  0F13                     L8:	
  8942  0F13  0CF3               	rrf	___lwdiv@divisor+1,f
  8943  0F14  0CF2               	rrf	___lwdiv@divisor,f
  8944  0F15  0BF8               	decfsz	___lwdiv@counter,f
  8945  0F16  2F00               	goto	l3437
  8946  0F17                     l3449:	
  8947  0F17  0877               	movf	___lwdiv@quotient+1,w
  8948  0F18  00F3               	movwf	?___lwdiv+1
  8949  0F19  0876               	movf	___lwdiv@quotient,w
  8950  0F1A  00F2               	movwf	?___lwdiv
  8951  0F1B  0008               	return
  8952  0F1C                     __end_of___lwdiv:	
  8953  0F1C                     __ptext67:	
  8954 ;; *************** function _LcdInit *****************
  8955 ;; Defined at:
  8956 ;;		line 66 in file "lcd.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;		None
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;		None
  8961 ;; Return value:  Size  Location     Type
  8962 ;;		None               void
  8963 ;; Registers used:
  8964 ;;		wreg, status,2, status,0, pclath, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : B00/0
  8967 ;;		On exit  : 300/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8970 ;;      Params:         0       0       0       0       0
  8971 ;;      Locals:         0       0       0       0       0
  8972 ;;      Temps:          2       0       0       0       0
  8973 ;;      Totals:         2       0       0       0       0
  8974 ;;Total ram usage:        2 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    3
  8977 ;; This function calls:
  8978 ;;		_LcdCmd
  8979 ;;		_LcdPort
  8980 ;; This function is called by:
  8981 ;;		_main
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           
  8986                           ;psect for function _LcdInit
  8987  0F1C                     _LcdInit:	
  8988                           
  8989                           ;lcd.c: 69: OPTION_REG |= 0b10000000;
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _LcdInit: [wreg+status,2+status,0+pclath+cstack]
  8993  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  8994  0F1D  1781               	bsf	1,7	;volatile
  8995                           
  8996                           ;lcd.c: 70: ANSELH &= 0b11000000;
  8997  0F1E  30C0               	movlw	192
  8998  0F1F  1703               	bsf	3,6	;RP1=1, select bank3
  8999  0F20  0589               	andwf	9,f	;volatile
  9000                           
  9001                           ;lcd.c: 71: TRISB = 0b00000000;
  9002  0F21  1303               	bcf	3,6	;RP1=0, select bank1
  9003  0F22  0186               	clrf	6	;volatile
  9004                           
  9005                           ;lcd.c: 73: LcdPort(0x00);
  9006  0F23  3000               	movlw	0
  9007  0F24  277D  120A  158A   	fcall	_LcdPort
  9008                           
  9009                           ;lcd.c: 74: _delay((unsigned long)((20)*(8000000/4000.0)));
  9010  0F27  3034               	movlw	52
  9011  0F28  00F7               	movwf	??_LcdInit+1
  9012  0F29  30F1               	movlw	241
  9013  0F2A  00F6               	movwf	??_LcdInit
  9014  0F2B                     u7227:	
  9015  0F2B  0BF6               	decfsz	??_LcdInit,f
  9016  0F2C  2F2B               	goto	u7227
  9017  0F2D  0BF7               	decfsz	??_LcdInit+1,f
  9018  0F2E  2F2B               	goto	u7227
  9019  0F2F  2F30               	nop2
  9020                           
  9021                           ;lcd.c: 75: LcdCmd(0x03);
  9022  0F30  3003               	movlw	3
  9023  0F31  2767  120A  158A   	fcall	_LcdCmd
  9024                           
  9025                           ;lcd.c: 76: _delay((unsigned long)((5)*(8000000/4000.0)));
  9026  0F34  300D               	movlw	13
  9027  0F35  00F7               	movwf	??_LcdInit+1
  9028  0F36  30FB               	movlw	251
  9029  0F37  00F6               	movwf	??_LcdInit
  9030  0F38                     u7237:	
  9031  0F38  0BF6               	decfsz	??_LcdInit,f
  9032  0F39  2F38               	goto	u7237
  9033  0F3A  0BF7               	decfsz	??_LcdInit+1,f
  9034  0F3B  2F38               	goto	u7237
  9035  0F3C  2F3D               	nop2
  9036                           
  9037                           ;lcd.c: 77: LcdCmd(0x03);
  9038  0F3D  3003               	movlw	3
  9039  0F3E  2767  120A  158A   	fcall	_LcdCmd
  9040                           
  9041                           ;lcd.c: 78: _delay((unsigned long)((11)*(8000000/4000.0)));
  9042  0F41  301D               	movlw	29
  9043  0F42  00F7               	movwf	??_LcdInit+1
  9044  0F43  3091               	movlw	145
  9045  0F44  00F6               	movwf	??_LcdInit
  9046  0F45                     u7247:	
  9047  0F45  0BF6               	decfsz	??_LcdInit,f
  9048  0F46  2F45               	goto	u7247
  9049  0F47  0BF7               	decfsz	??_LcdInit+1,f
  9050  0F48  2F45               	goto	u7247
  9051                           
  9052                           ;lcd.c: 79: LcdCmd(0x03);
  9053  0F49  3003               	movlw	3
  9054  0F4A  2767  120A  158A   	fcall	_LcdCmd
  9055                           
  9056                           ;lcd.c: 81: LcdCmd(0x02);
  9057  0F4D  3002               	movlw	2
  9058  0F4E  2767  120A  158A   	fcall	_LcdCmd
  9059                           
  9060                           ;lcd.c: 82: LcdCmd(0x02);
  9061  0F51  3002               	movlw	2
  9062  0F52  2767  120A  158A   	fcall	_LcdCmd
  9063                           
  9064                           ;lcd.c: 83: LcdCmd(0x08);
  9065  0F55  3008               	movlw	8
  9066  0F56  2767  120A  158A   	fcall	_LcdCmd
  9067                           
  9068                           ;lcd.c: 84: LcdCmd(0x00);
  9069  0F59  3000               	movlw	0
  9070  0F5A  2767  120A  158A   	fcall	_LcdCmd
  9071                           
  9072                           ;lcd.c: 85: LcdCmd(0x0C);
  9073  0F5D  300C               	movlw	12
  9074  0F5E  2767  120A  158A   	fcall	_LcdCmd
  9075                           
  9076                           ;lcd.c: 86: LcdCmd(0x00);
  9077  0F61  3000               	movlw	0
  9078  0F62  2767  120A  158A   	fcall	_LcdCmd
  9079                           
  9080                           ;lcd.c: 87: LcdCmd(0x06);
  9081  0F65  3006               	movlw	6
  9082  0F66  2F67               	ljmp	_LcdCmd
  9083  0F67                     __end_of_LcdInit:	
  9084  0F67                     __ptext68:	
  9085 ;; *************** function _LcdCmd *****************
  9086 ;; Defined at:
  9087 ;;		line 30 in file "lcd.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  a               1    wreg     unsigned char 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  a               1    5[COMMON] unsigned char 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		wreg, status,2, status,0, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 300/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9101 ;;      Params:         0       0       0       0       0
  9102 ;;      Locals:         1       0       0       0       0
  9103 ;;      Temps:          2       0       0       0       0
  9104 ;;      Totals:         3       0       0       0       0
  9105 ;;Total ram usage:        3 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    2
  9108 ;; This function calls:
  9109 ;;		_LcdPort
  9110 ;; This function is called by:
  9111 ;;		_LcdSetCursor
  9112 ;;		_LcdInit
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           
  9117                           ;psect for function _LcdCmd
  9118  0F67                     _LcdCmd:	
  9119                           
  9120                           ;incstack = 0
  9121                           ; Regs used in _LcdCmd: [wreg+status,2+status,0+pclath+cstack]
  9122                           ;LcdCmd@a stored from wreg
  9123  0F67  00F5               	movwf	LcdCmd@a
  9124                           
  9125                           ;lcd.c: 32: RB5 = 0;
  9126  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  9127  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  9128  0F6A  1286               	bcf	6,5	;volatile
  9129                           
  9130                           ;lcd.c: 33: LcdPort(a);
  9131  0F6B  0875               	movf	LcdCmd@a,w
  9132  0F6C  277D  120A  158A   	fcall	_LcdPort
  9133                           
  9134                           ;lcd.c: 34: RB4 = 1;
  9135  0F6F  1606               	bsf	6,4	;volatile
  9136                           
  9137                           ;lcd.c: 35: _delay((unsigned long)((4)*(8000000/4000.0)));
  9138  0F70  300B               	movlw	11
  9139  0F71  00F4               	movwf	??_LcdCmd+1
  9140  0F72  3062               	movlw	98
  9141  0F73  00F3               	movwf	??_LcdCmd
  9142  0F74                     u7257:	
  9143  0F74  0BF3               	decfsz	??_LcdCmd,f
  9144  0F75  2F74               	goto	u7257
  9145  0F76  0BF4               	decfsz	??_LcdCmd+1,f
  9146  0F77  2F74               	goto	u7257
  9147  0F78  0000               	nop
  9148                           
  9149                           ;lcd.c: 36: RB4 = 0;
  9150  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  9151  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  9152  0F7B  1206               	bcf	6,4	;volatile
  9153  0F7C  0008               	return
  9154  0F7D                     __end_of_LcdCmd:	
  9155  0F7D                     __ptext69:	
  9156 ;; *************** function _LcdPort *****************
  9157 ;; Defined at:
  9158 ;;		line 8 in file "lcd.c"
  9159 ;; Parameters:    Size  Location     Type
  9160 ;;  a               1    wreg     unsigned char 
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;  a               1    2[COMMON] unsigned char 
  9163 ;; Return value:  Size  Location     Type
  9164 ;;		None               void
  9165 ;; Registers used:
  9166 ;;		wreg
  9167 ;; Tracked objects:
  9168 ;;		On entry : 200/0
  9169 ;;		On exit  : 300/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9172 ;;      Params:         0       0       0       0       0
  9173 ;;      Locals:         1       0       0       0       0
  9174 ;;      Temps:          0       0       0       0       0
  9175 ;;      Totals:         1       0       0       0       0
  9176 ;;Total ram usage:        1 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    1
  9179 ;; This function calls:
  9180 ;;		Nothing
  9181 ;; This function is called by:
  9182 ;;		_LcdCmd
  9183 ;;		_LcdInit
  9184 ;;		_LcdWriteChar
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           
  9189                           ;psect for function _LcdPort
  9190  0F7D                     _LcdPort:	
  9191                           
  9192                           ;incstack = 0
  9193                           ; Regs used in _LcdPort: [wreg]
  9194                           ;LcdPort@a stored from wreg
  9195  0F7D  00F2               	movwf	LcdPort@a
  9196                           
  9197                           ;lcd.c: 10: if(a & 1)
  9198  0F7E  1C72               	btfss	LcdPort@a,0
  9199  0F7F  2F83               	goto	l55
  9200                           
  9201                           ;lcd.c: 11: RB0 = 1;
  9202  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  9203  0F81  1406               	bsf	6,0	;volatile
  9204  0F82  2F85               	goto	l56
  9205  0F83                     l55:	
  9206                           
  9207                           ;lcd.c: 12: else
  9208                           ;lcd.c: 13: RB0 = 0;
  9209  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  9210  0F84  1006               	bcf	6,0	;volatile
  9211  0F85                     l56:	
  9212                           
  9213                           ;lcd.c: 15: if(a & 2)
  9214  0F85  1CF2               	btfss	LcdPort@a,1
  9215  0F86  2F89               	goto	l57
  9216                           
  9217                           ;lcd.c: 16: RB1 = 1;
  9218  0F87  1486               	bsf	6,1	;volatile
  9219  0F88  2F8A               	goto	l58
  9220  0F89                     l57:	
  9221                           
  9222                           ;lcd.c: 17: else
  9223                           ;lcd.c: 18: RB1 = 0;
  9224  0F89  1086               	bcf	6,1	;volatile
  9225  0F8A                     l58:	
  9226                           
  9227                           ;lcd.c: 20: if(a & 4)
  9228  0F8A  1D72               	btfss	LcdPort@a,2
  9229  0F8B  2F8E               	goto	l59
  9230                           
  9231                           ;lcd.c: 21: RB2 = 1;
  9232  0F8C  1506               	bsf	6,2	;volatile
  9233  0F8D  2F8F               	goto	l60
  9234  0F8E                     l59:	
  9235                           
  9236                           ;lcd.c: 22: else
  9237                           ;lcd.c: 23: RB2 = 0;
  9238  0F8E  1106               	bcf	6,2	;volatile
  9239  0F8F                     l60:	
  9240                           
  9241                           ;lcd.c: 25: if(a & 8)
  9242  0F8F  1DF2               	btfss	LcdPort@a,3
  9243  0F90  2F93               	goto	l61
  9244                           
  9245                           ;lcd.c: 26: RB3 = 1;
  9246  0F91  1586               	bsf	6,3	;volatile
  9247  0F92  0008               	return
  9248  0F93                     l61:	
  9249                           
  9250                           ;lcd.c: 27: else
  9251                           ;lcd.c: 28: RB3 = 0;
  9252  0F93  1186               	bcf	6,3	;volatile
  9253  0F94  0008               	return
  9254  0F95                     __end_of_LcdPort:	
  9255  0F95                     __ptext10:	
  9256 ;; *************** function _memcpyee *****************
  9257 ;; Defined at:
  9258 ;;		line 24 in file "C:\Program Files\Microchip\xc8\v1.35\sources\pic\eeprom.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  to              1    wreg     PTR eeprom unsigned char
  9261 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  9262 ;;  from            1    2[COMMON] PTR const unsigned char 
  9263 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
  9264 ;;		 -> __itoee@data(2), __ctoee@data(1), 
  9265 ;;  size            1    3[COMMON] unsigned char 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  to              1    5[COMMON] PTR eeprom unsigned char
  9268 ;;		 -> zeljena_co2(2), zeljena_vlaznost(3), zeljena_temperatura(3), 
  9269 ;;  ptr             1    4[COMMON] PTR const unsigned char 
  9270 ;;		 -> __fltoee@data(3), __fttoee@data(3), __ltoee@data(4), __mtoee@data(3), 
  9271 ;;		 -> __itoee@data(2), __ctoee@data(1), 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;		None               void
  9274 ;; Registers used:
  9275 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9276 ;; Tracked objects:
  9277 ;;		On entry : 300/0
  9278 ;;		On exit  : 300/300
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9281 ;;      Params:         2       0       0       0       0
  9282 ;;      Locals:         2       0       0       0       0
  9283 ;;      Temps:          0       0       0       0       0
  9284 ;;      Totals:         4       0       0       0       0
  9285 ;;Total ram usage:        4 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    1
  9288 ;; This function calls:
  9289 ;;		Nothing
  9290 ;; This function is called by:
  9291 ;;		___itoee
  9292 ;;		___fttoee
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _memcpyee
  9298  0F95                     _memcpyee:	
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _memcpyee: [wreg-fsr0h+status,2+status,0]
  9302                           ;memcpyee@to stored from wreg
  9303  0F95  00F5               	movwf	memcpyee@to
  9304  0F96  0872               	movf	memcpyee@from,w
  9305  0F97  00F4               	movwf	memcpyee@ptr
  9306  0F98                     l647:	
  9307  0F98  1683               	bsf	3,5	;RP0=1, select bank3
  9308  0F99  1703               	bsf	3,6	;RP1=1, select bank3
  9309  0F9A  188C               	btfsc	12,1	;volsfr
  9310  0F9B  2F98               	goto	l647
  9311  0F9C  0875               	movf	memcpyee@to,w
  9312  0F9D  3EFF               	addlw	255
  9313  0F9E  1283               	bcf	3,5	;RP0=0, select bank2
  9314  0F9F  008D               	movwf	13	;volatile
  9315  0FA0  1683               	bsf	3,5	;RP0=1, select bank3
  9316  0FA1  138C               	bcf	12,7	;volsfr
  9317  0FA2                     l5025:	
  9318  0FA2  03F3               	decf	memcpyee@size,f
  9319  0FA3  0F73               	incfsz	memcpyee@size,w
  9320  0FA4  2FA6               	goto	l652
  9321  0FA5  0008               	return
  9322  0FA6                     l652:	
  9323  0FA6  188C               	btfsc	12,1	;volsfr
  9324  0FA7  2FA6               	goto	l652
  9325  0FA8  0874               	movf	memcpyee@ptr,w
  9326  0FA9  0084               	movwf	4
  9327  0FAA  1383               	bcf	3,7	;select IRP bank0
  9328  0FAB  0800               	movf	0,w
  9329  0FAC  1283               	bcf	3,5	;RP0=0, select bank2
  9330  0FAD  008C               	movwf	12	;volatile
  9331  0FAE  0AF4               	incf	memcpyee@ptr,f
  9332  0FAF  0A8D               	incf	13,f	;volatile
  9333  0FB0  1003               	bcf	3,0	;volatile
  9334  0FB1  1B8B               	btfsc	11,7	;volatile
  9335  0FB2  1403               	bsf	3,0	;volatile
  9336  0FB3  138B               	bcf	11,7	;volatile
  9337  0FB4  1683               	bsf	3,5	;RP0=1, select bank3
  9338  0FB5  150C               	bsf	12,2	;volsfr
  9339  0FB6  3055               	movlw	85
  9340  0FB7  008D               	movwf	13	;volsfr
  9341  0FB8  30AA               	movlw	170
  9342  0FB9  008D               	movwf	13	;volsfr
  9343  0FBA  148C               	bsf	12,1	;volsfr
  9344  0FBB  110C               	bcf	12,2	;volsfr
  9345  0FBC  1C03               	btfss	3,0	;volatile
  9346  0FBD  2FA2               	goto	l5025
  9347  0FBE  178B               	bsf	11,7	;volatile
  9348  0FBF  2FA2               	goto	l5025
  9349  0FC0                     __end_of_memcpyee:	
  9350  0FC0                     PL12:	
  9351  0FC0  0823               	movf	LcdWriteString@i,w
  9352  0FC1  0777               	addwf	LcdWriteString@a,w
  9353  0FC2  00A1               	movwf	??_LcdWriteString+1
  9354  0FC3  0878               	movf	LcdWriteString@a+1,w
  9355  0FC4  00A0               	movwf	??_LcdWriteString
  9356  0FC5  1803               	skipnc
  9357  0FC6  0AA0               	incf	??_LcdWriteString,f
  9358  0FC7  1BA3               	btfsc	LcdWriteString@i,7
  9359  0FC8  03A0               	decf	??_LcdWriteString,f
  9360  0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  9361  0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  9362  0FCB  0820               	movf	??_LcdWriteString,w
  9363  0FCC  00A2               	movwf	??_LcdWriteString+2
  9364  0FCD  00FF               	movwf	127
  9365  0FCE  0821               	movf	??_LcdWriteString+1,w
  9366  0FCF  0084               	movwf	4
  9367  0FD0  0008               	return
  9368  0FD1                     __end_ofPL12:	
  9369  0FD1                     PL20:	
  9370  0FD1  00D0               	movwf	___ftge@ff1+2
  9371  0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  9372  0FD3  0841               	movf	_temp^(0+128),w
  9373  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  9374  0FD5  00D1               	movwf	___ftge@ff2
  9375  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  9376  0FD7  0842               	movf	(_temp+1)^(0+128),w
  9377  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  9378  0FD9  00D2               	movwf	___ftge@ff2+1
  9379  0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  9380  0FDB  0843               	movf	(_temp+2)^(0+128),w
  9381  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  9382  0FDD  00D3               	movwf	___ftge@ff2+2
  9383  0FDE  0008               	return
  9384  0FDF                     __end_ofPL20:	
  9385  0FDF                     PL24:	
  9386  0FDF  1683               	bsf	3,5	;RP0=1, select bank1
  9387  0FE0  0841               	movf	_temp^(0+128),w
  9388  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  9389  0FE2  00CE               	movwf	___ftge@ff1
  9390  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  9391  0FE4  0842               	movf	(_temp+1)^(0+128),w
  9392  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  9393  0FE6  00CF               	movwf	___ftge@ff1+1
  9394  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  9395  0FE8  0843               	movf	(_temp+2)^(0+128),w
  9396  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  9397  0FEA  00D0               	movwf	___ftge@ff1+2
  9398  0FEB  0008               	return
  9399  0FEC                     __end_ofPL24:	
  9400  0FEC                     PL62:	
  9401  0FEC  0876               	movf	?___eetoft,w
  9402  0FED  00C5               	movwf	___ftadd@f2
  9403  0FEE  0877               	movf	?___eetoft+1,w
  9404  0FEF  00C6               	movwf	___ftadd@f2+1
  9405  0FF0  0878               	movf	?___eetoft+2,w
  9406  0FF1  00C7               	movwf	___ftadd@f2+2
  9407  0FF2  0008               	return
  9408  0FF3                     __end_ofPL62:	
  9409  0FF3                     PL76:	
  9410  0FF3  0842               	movf	?___ftadd,w
  9411  0FF4  00CE               	movwf	___ftge@ff1
  9412  0FF5  0843               	movf	?___ftadd+1,w
  9413  0FF6  00CF               	movwf	___ftge@ff1+1
  9414  0FF7  0844               	movf	?___ftadd+2,w
  9415  0FF8  0008               	return
  9416  0FF9                     __end_ofPL76:	
  9417  0FF9                     PL90:	
  9418  0FF9  0842               	movf	?___ftadd,w
  9419  0FFA  00D1               	movwf	___ftge@ff2
  9420  0FFB  0843               	movf	?___ftadd+1,w
  9421  0FFC  00D2               	movwf	___ftge@ff2+1
  9422  0FFD  0844               	movf	?___ftadd+2,w
  9423  0FFE  00D3               	movwf	___ftge@ff2+2
  9424  0FFF  0008               	return
  9425  1000                     __end_ofPL90:	
  9426                           
  9427                           	psect	text45
  9428  1E9D                     __ptext45:	
  9429 ;; *************** function _fround *****************
  9430 ;; Defined at:
  9431 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  prec            1    wreg     unsigned char 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  prec            1   33[BANK0 ] unsigned char 
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  3   23[BANK0 ] unsigned char 
  9438 ;; Registers used:
  9439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 300/100
  9442 ;;		On exit  : 300/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9445 ;;      Params:         0       4       0       0       0
  9446 ;;      Locals:         0       7       0       0       0
  9447 ;;      Temps:          0       0       0       0       0
  9448 ;;      Totals:         0      11       0       0       0
  9449 ;;Total ram usage:       11 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    3
  9452 ;; This function calls:
  9453 ;;		___bmul
  9454 ;;		___ftmul
  9455 ;;		___lbdiv
  9456 ;;		___lbmod
  9457 ;; This function is called by:
  9458 ;;		_sprintf
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function _fround
  9464  1E9D                     _fround:	
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  9468                           ;fround@prec stored from wreg
  9469  1E9D  1283               	bcf	3,5	;RP0=0, select bank0
  9470  1E9E  00C1               	movwf	fround@prec
  9471                           
  9472                           ;doprnt.c: 413: if(prec>=110)
  9473  1E9F  306E               	movlw	110
  9474  1EA0  0241               	subwf	fround@prec,w
  9475  1EA1  1C03               	skipc
  9476  1EA2  2F23               	goto	l5279
  9477                           
  9478                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9479  1EA3  3003               	movlw	3
  9480  1EA4  00F8               	movwf	___bmul@multiplicand
  9481  1EA5  300A               	movlw	10
  9482  1EA6  00F7               	movwf	___lbdiv@divisor
  9483  1EA7  3064               	movlw	100
  9484  1EA8  00F2               	movwf	___lbmod@divisor
  9485  1EA9  0841               	movf	fround@prec,w
  9486  1EAA  27B3  160A  158A   	fcall	___lbmod
  9487  1EAD  2798               	fcall	___lbdiv
  9488  1EAE  160A  118A  2717  160A  158A  	fcall	___bmul
  9489  1EB3  27DD               	fcall	PL56	;call to abstracted procedure
  9490  1EB4  160A  158A  2000  160A  158A  	fcall	stringtab
  9491  1EB9  00A8               	movwf	___ftmul@f1
  9492  1EBA  160A  158A  2000  160A  158A  	fcall	stringtab
  9493  1EBF  00A9               	movwf	___ftmul@f1+1
  9494  1EC0  160A  158A  2000  160A  158A  	fcall	stringtab
  9495  1EC5  00AA               	movwf	___ftmul@f1+2
  9496  1EC6  3003               	movlw	3
  9497  1EC7  00F8               	movwf	___bmul@multiplicand
  9498  1EC8  3064               	movlw	100
  9499  1EC9  00F7               	movwf	___lbdiv@divisor
  9500  1ECA  0841               	movf	fround@prec,w
  9501  1ECB  2798               	fcall	___lbdiv
  9502  1ECC  160A  118A  2717  160A  158A  	fcall	___bmul
  9503  1ED1  27EC               	fcall	PL84	;call to abstracted procedure
  9504  1ED2  160A  158A  2000  160A  158A  	fcall	stringtab
  9505  1ED7  00AB               	movwf	___ftmul@f2
  9506  1ED8  160A  158A  2000  160A  158A  	fcall	stringtab
  9507  1EDD  00AC               	movwf	___ftmul@f2+1
  9508  1EDE  160A  158A  2000  160A  158A  	fcall	stringtab
  9509  1EE3  00AD               	movwf	___ftmul@f2+2
  9510  1EE4  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9511  1EE9  27F3  160A  158A   	fcall	PL92	;call to abstracted procedure
  9512                           
  9513                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9514  1EEC  27FA  160A  158A   	fcall	PL98	;call to abstracted procedure
  9515  1EEF  27B3               	fcall	___lbmod
  9516  1EF0  160A  118A  2717  160A  158A  	fcall	___bmul
  9517  1EF5  27CF               	fcall	PL30	;call to abstracted procedure
  9518  1EF6  160A  158A  2000  160A  158A  	fcall	stringtab
  9519  1EFB  00A8               	movwf	___ftmul@f1
  9520  1EFC  160A  158A  2000  160A  158A  	fcall	stringtab
  9521  1F01  00A9               	movwf	___ftmul@f1+1
  9522  1F02  160A  158A  2000  160A  158A  	fcall	stringtab
  9523  1F07  27E4               	fcall	PL72	;call to abstracted procedure
  9524  1F08  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9525  1F0D  0828               	movf	?___ftmul,w
  9526  1F0E  00BB               	movwf	_fround$1261
  9527  1F0F  0829               	movf	?___ftmul+1,w
  9528  1F10  00BC               	movwf	_fround$1261+1
  9529  1F11  082A               	movf	?___ftmul+2,w
  9530  1F12  00BD               	movwf	_fround$1261+2
  9531                           
  9532                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9533  1F13  303F               	movlw	63
  9534  1F14  01A8               	clrf	___ftmul@f1
  9535  1F15  01A9               	clrf	___ftmul@f1+1
  9536  1F16  00AA               	movwf	___ftmul@f1+2
  9537  1F17  083B               	movf	_fround$1261,w
  9538  1F18  00AB               	movwf	___ftmul@f2
  9539  1F19  083C               	movf	_fround$1261+1,w
  9540  1F1A  00AC               	movwf	___ftmul@f2+1
  9541  1F1B  083D               	movf	_fround$1261+2,w
  9542  1F1C  00AD               	movwf	___ftmul@f2+2
  9543  1F1D  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9544  1F22  2FD6               	ljmp	PL52	;call to abstracted procedure
  9545  1F23                     l5279:	
  9546                           
  9547                           ;doprnt.c: 415: else if(prec > 10)
  9548  1F23  300B               	movlw	11
  9549  1F24  0241               	subwf	fround@prec,w
  9550  1F25  1C03               	skipc
  9551  1F26  2F73               	goto	l5287
  9552                           
  9553                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9554  1F27  27FA  160A  158A   	fcall	PL98	;call to abstracted procedure
  9555  1F2A  27B3               	fcall	___lbmod
  9556  1F2B  160A  118A  2717  160A  158A  	fcall	___bmul
  9557  1F30  27CF               	fcall	PL30	;call to abstracted procedure
  9558  1F31  160A  158A  2000  160A  158A  	fcall	stringtab
  9559  1F36  00A8               	movwf	___ftmul@f1
  9560  1F37  160A  158A  2000  160A  158A  	fcall	stringtab
  9561  1F3C  00A9               	movwf	___ftmul@f1+1
  9562  1F3D  160A  158A  2000  160A  158A  	fcall	stringtab
  9563  1F42  00AA               	movwf	___ftmul@f1+2
  9564  1F43  3003               	movlw	3
  9565  1F44  00F8               	movwf	___bmul@multiplicand
  9566  1F45  300A               	movlw	10
  9567  1F46  00F7               	movwf	___lbdiv@divisor
  9568  1F47  0841               	movf	fround@prec,w
  9569  1F48  2798               	fcall	___lbdiv
  9570  1F49  160A  118A  2717  160A  158A  	fcall	___bmul
  9571  1F4E  27DD               	fcall	PL56	;call to abstracted procedure
  9572  1F4F  160A  158A  2000  160A  158A  	fcall	stringtab
  9573  1F54  00AB               	movwf	___ftmul@f2
  9574  1F55  160A  158A  2000  160A  158A  	fcall	stringtab
  9575  1F5A  00AC               	movwf	___ftmul@f2+1
  9576  1F5B  160A  158A  2000  160A  158A  	fcall	stringtab
  9577  1F60  00AD               	movwf	___ftmul@f2+2
  9578  1F61  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9579  1F66  27F3  160A  158A   	fcall	PL92	;call to abstracted procedure
  9580                           
  9581                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9582  1F69  303F               	movlw	63
  9583  1F6A  01A8               	clrf	___ftmul@f1
  9584  1F6B  01A9               	clrf	___ftmul@f1+1
  9585  1F6C  27E4               	fcall	PL72	;call to abstracted procedure
  9586  1F6D  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9587  1F72  2FD6               	ljmp	PL52	;call to abstracted procedure
  9588  1F73                     l5287:	
  9589                           
  9590                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9591  1F73  303F               	movlw	63
  9592  1F74  01A8               	clrf	___ftmul@f1
  9593  1F75  01A9               	clrf	___ftmul@f1+1
  9594  1F76  00AA               	movwf	___ftmul@f1+2
  9595  1F77  3003               	movlw	3
  9596  1F78  00F8               	movwf	___bmul@multiplicand
  9597  1F79  0841               	movf	fround@prec,w
  9598  1F7A  160A  118A  2717  160A  158A  	fcall	___bmul
  9599  1F7F  27CF               	fcall	PL30	;call to abstracted procedure
  9600  1F80  160A  158A  2000  160A  158A  	fcall	stringtab
  9601  1F85  00AB               	movwf	___ftmul@f2
  9602  1F86  160A  158A  2000  160A  158A  	fcall	stringtab
  9603  1F8B  00AC               	movwf	___ftmul@f2+1
  9604  1F8C  160A  158A  2000  160A  158A  	fcall	stringtab
  9605  1F91  00AD               	movwf	___ftmul@f2+2
  9606  1F92  160A  118A  26AA  160A  158A  	fcall	___ftmul
  9607  1F97  2FD6               	ljmp	PL52	;call to abstracted procedure
  9608  1F98                     __end_of_fround:	
  9609  1F98                     __ptext47:	
  9610 ;; *************** function ___lbdiv *****************
  9611 ;; Defined at:
  9612 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbdiv.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  dividend        1    wreg     unsigned char 
  9615 ;;  divisor         1    7[COMMON] unsigned char 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  dividend        1    0[BANK0 ] unsigned char 
  9618 ;;  quotient        1    2[BANK0 ] unsigned char 
  9619 ;;  counter         1    1[BANK0 ] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  1    wreg      unsigned char 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0
  9624 ;; Tracked objects:
  9625 ;;		On entry : 300/0
  9626 ;;		On exit  : 300/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9629 ;;      Params:         1       0       0       0       0
  9630 ;;      Locals:         0       3       0       0       0
  9631 ;;      Temps:          0       0       0       0       0
  9632 ;;      Totals:         1       3       0       0       0
  9633 ;;Total ram usage:        4 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    1
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_fround
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function ___lbdiv
  9645  1F98                     ___lbdiv:	
  9646                           
  9647                           ;incstack = 0
  9648                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  9649                           ;___lbdiv@dividend stored from wreg
  9650  1F98  00A0               	movwf	___lbdiv@dividend
  9651  1F99  01A2               	clrf	___lbdiv@quotient
  9652  1F9A  0877               	movf	___lbdiv@divisor,w
  9653  1F9B  1903               	btfsc	3,2
  9654  1F9C  2FB1               	goto	l5219
  9655  1F9D  01A1               	clrf	___lbdiv@counter
  9656  1F9E                     l5205:	
  9657  1F9E  0AA1               	incf	___lbdiv@counter,f
  9658  1F9F  1BF7               	btfsc	___lbdiv@divisor,7
  9659  1FA0  2FA4               	goto	l999
  9660  1FA1  1003               	clrc
  9661  1FA2  0DF7               	rlf	___lbdiv@divisor,f
  9662  1FA3  2F9E               	goto	l5205
  9663  1FA4                     l999:	
  9664  1FA4  1003               	clrc
  9665  1FA5  0DA2               	rlf	___lbdiv@quotient,f
  9666  1FA6  0877               	movf	___lbdiv@divisor,w
  9667  1FA7  0220               	subwf	___lbdiv@dividend,w
  9668  1FA8  1C03               	skipc
  9669  1FA9  2FAE               	goto	L23
  9670  1FAA  0877               	movf	___lbdiv@divisor,w
  9671  1FAB  02A0               	subwf	___lbdiv@dividend,f
  9672  1FAC  1422               	bsf	___lbdiv@quotient,0
  9673  1FAD  1003               	clrc
  9674  1FAE                     L23:	
  9675  1FAE  0CF7               	rrf	___lbdiv@divisor,f
  9676  1FAF  0BA1               	decfsz	___lbdiv@counter,f
  9677  1FB0  2FA4               	goto	l999
  9678  1FB1                     l5219:	
  9679  1FB1  0822               	movf	___lbdiv@quotient,w
  9680  1FB2  0008               	return
  9681  1FB3                     __end_of___lbdiv:	
  9682  1FB3                     __ptext46:	
  9683 ;; *************** function ___lbmod *****************
  9684 ;; Defined at:
  9685 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lbmod.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  dividend        1    wreg     unsigned char 
  9688 ;;  divisor         1    2[COMMON] unsigned char 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  dividend        1    4[COMMON] unsigned char 
  9691 ;;  rem             1    6[COMMON] unsigned char 
  9692 ;;  counter         1    5[COMMON] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      unsigned char 
  9695 ;; Registers used:
  9696 ;;		wreg, status,2, status,0
  9697 ;; Tracked objects:
  9698 ;;		On entry : 300/0
  9699 ;;		On exit  : 300/0
  9700 ;;		Unchanged: 300/0
  9701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9702 ;;      Params:         1       0       0       0       0
  9703 ;;      Locals:         3       0       0       0       0
  9704 ;;      Temps:          1       0       0       0       0
  9705 ;;      Totals:         5       0       0       0       0
  9706 ;;Total ram usage:        5 bytes
  9707 ;; Hardware stack levels used:    1
  9708 ;; Hardware stack levels required when called:    1
  9709 ;; This function calls:
  9710 ;;		Nothing
  9711 ;; This function is called by:
  9712 ;;		_fround
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           
  9717                           ;psect for function ___lbmod
  9718  1FB3                     ___lbmod:	
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  9722                           ;___lbmod@dividend stored from wreg
  9723  1FB3  00F4               	movwf	___lbmod@dividend
  9724  1FB4  3008               	movlw	8
  9725  1FB5  00F5               	movwf	___lbmod@counter
  9726  1FB6  01F6               	clrf	___lbmod@rem
  9727  1FB7                     l3413:	
  9728  1FB7  0874               	movf	___lbmod@dividend,w
  9729  1FB8  00F3               	movwf	??___lbmod
  9730  1FB9  3007               	movlw	7
  9731  1FBA  1003               	clrc
  9732  1FBB                     L22:	
  9733  1FBB  0CF3               	rrf	??___lbmod,f
  9734  1FBC  3EFF               	addlw	-1
  9735  1FBD  1003               	clrc
  9736  1FBE  1D03               	skipz
  9737  1FBF  2FBB               	goto	L22
  9738  1FC0  0D76               	rlf	___lbmod@rem,w
  9739  1FC1  0473               	iorwf	??___lbmod,w
  9740  1FC2  00F6               	movwf	___lbmod@rem
  9741  1FC3  1003               	clrc
  9742  1FC4  0DF4               	rlf	___lbmod@dividend,f
  9743  1FC5  0872               	movf	___lbmod@divisor,w
  9744  1FC6  0276               	subwf	___lbmod@rem,w
  9745  1FC7  1C03               	skipc
  9746  1FC8  2FCB               	goto	l3421
  9747  1FC9  0872               	movf	___lbmod@divisor,w
  9748  1FCA  02F6               	subwf	___lbmod@rem,f
  9749  1FCB                     l3421:	
  9750  1FCB  0BF5               	decfsz	___lbmod@counter,f
  9751  1FCC  2FB7               	goto	l3413
  9752  1FCD  0876               	movf	___lbmod@rem,w
  9753  1FCE  0008               	return
  9754  1FCF                     __end_of___lbmod:	
  9755  1FCF                     PL30:	
  9756  1FCF  3E12               	addlw	low (__npowers_| (0+32768))
  9757  1FD0  0084               	movwf	4
  9758  1FD1  3098               	movlw	high (__npowers_| (0+32768))
  9759  1FD2  1803               	skipnc
  9760  1FD3  3E01               	addlw	1
  9761  1FD4  00FF               	movwf	127
  9762  1FD5  0008               	return
  9763  1FD6                     __end_ofPL30:	
  9764  1FD6                     PL52:	
  9765  1FD6  0828               	movf	?___ftmul,w
  9766  1FD7  00B7               	movwf	?_fround
  9767  1FD8  0829               	movf	?___ftmul+1,w
  9768  1FD9  00B8               	movwf	?_fround+1
  9769  1FDA  082A               	movf	?___ftmul+2,w
  9770  1FDB  00B9               	movwf	?_fround+2
  9771  1FDC  0008               	return
  9772  1FDD                     __end_ofPL52:	
  9773  1FDD                     PL56:	
  9774  1FDD  3E2D               	addlw	low ((__npowers_| (0+32768)+27))
  9775  1FDE  0084               	movwf	4
  9776  1FDF  3098               	movlw	high ((__npowers_| (0+32768)+27))
  9777  1FE0  1803               	skipnc
  9778  1FE1  3E01               	addlw	1
  9779  1FE2  00FF               	movwf	127
  9780  1FE3  0008               	return
  9781  1FE4                     __end_ofPL56:	
  9782  1FE4                     PL72:	
  9783  1FE4  00AA               	movwf	___ftmul@f1+2
  9784  1FE5  083E               	movf	_fround$1260,w
  9785  1FE6  00AB               	movwf	___ftmul@f2
  9786  1FE7  083F               	movf	_fround$1260+1,w
  9787  1FE8  00AC               	movwf	___ftmul@f2+1
  9788  1FE9  0840               	movf	_fround$1260+2,w
  9789  1FEA  00AD               	movwf	___ftmul@f2+2
  9790  1FEB  0008               	return
  9791  1FEC                     __end_ofPL72:	
  9792  1FEC                     PL84:	
  9793  1FEC  3E48               	addlw	low ((__npowers_| (0+32768)+54))
  9794  1FED  0084               	movwf	4
  9795  1FEE  3098               	movlw	high ((__npowers_| (0+32768)+54))
  9796  1FEF  1803               	skipnc
  9797  1FF0  3E01               	addlw	1
  9798  1FF1  00FF               	movwf	127
  9799  1FF2  0008               	return
  9800  1FF3                     __end_ofPL84:	
  9801  1FF3                     PL92:	
  9802  1FF3  0828               	movf	?___ftmul,w
  9803  1FF4  00BE               	movwf	_fround$1260
  9804  1FF5  0829               	movf	?___ftmul+1,w
  9805  1FF6  00BF               	movwf	_fround$1260+1
  9806  1FF7  082A               	movf	?___ftmul+2,w
  9807  1FF8  00C0               	movwf	_fround$1260+2
  9808  1FF9  0008               	return
  9809  1FFA                     __end_ofPL92:	
  9810  1FFA                     PL98:	
  9811  1FFA  3003               	movlw	3
  9812  1FFB  00F8               	movwf	___bmul@multiplicand
  9813  1FFC  300A               	movlw	10
  9814  1FFD  00F2               	movwf	___lbmod@divisor
  9815  1FFE  0841               	movf	fround@prec,w
  9816  1FFF  0008               	return
  9817  2000                     __end_ofPL98:	
  9818                           
  9819                           	psect	text51
  9820  1B73                     __ptext51:	
  9821 ;; *************** function __div_to_l_ *****************
  9822 ;; Defined at:
  9823 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fldivl.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  f1              3    2[COMMON] unsigned long 
  9826 ;;  f2              3    5[COMMON] unsigned long 
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;  quot            4    8[BANK0 ] unsigned long 
  9829 ;;  exp1            1   13[BANK0 ] unsigned char 
  9830 ;;  cntr            1   12[BANK0 ] unsigned char 
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  4    2[COMMON] unsigned long 
  9833 ;; Registers used:
  9834 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 300/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9840 ;;      Params:         6       0       0       0       0
  9841 ;;      Locals:         0       6       0       0       0
  9842 ;;      Temps:          0       8       0       0       0
  9843 ;;      Totals:         6      14       0       0       0
  9844 ;;Total ram usage:       20 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    1
  9847 ;; This function calls:
  9848 ;;		Nothing
  9849 ;; This function is called by:
  9850 ;;		_sprintf
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function __div_to_l_
  9856  1B73                     __div_to_l_:	
  9857                           
  9858                           ;incstack = 0
  9859                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  9860  1B73  3072               	movlw	low (__div_to_l_@f1| 0)
  9861  1B74  0084               	movwf	4
  9862  1B75  0800               	movf	0,w
  9863  1B76  1283               	bcf	3,5	;RP0=0, select bank0
  9864  1B77  1303               	bcf	3,6	;RP1=0, select bank0
  9865  1B78  00A0               	movwf	??__div_to_l_
  9866  1B79  0A84               	incf	4,f
  9867  1B7A  0800               	movf	0,w
  9868  1B7B  00A1               	movwf	??__div_to_l_+1
  9869  1B7C  0A84               	incf	4,f
  9870  1B7D  0800               	movf	0,w
  9871  1B7E  00A2               	movwf	??__div_to_l_+2
  9872  1B7F  0A84               	incf	4,f
  9873  1B80  0800               	movf	0,w
  9874  1B81  00A3               	movwf	??__div_to_l_+3
  9875  1B82  1003               	clrc
  9876  1B83  0D22               	rlf	??__div_to_l_+2,w
  9877  1B84  0D23               	rlf	??__div_to_l_+3,w
  9878  1B85  00AD               	movwf	__div_to_l_@exp1
  9879  1B86  082D               	movf	__div_to_l_@exp1,w
  9880  1B87  1D03               	btfss	3,2
  9881  1B88  2B8E               	goto	l3661
  9882  1B89                     l3659:	
  9883  1B89  01F2               	clrf	?__div_to_l_
  9884  1B8A  01F3               	clrf	?__div_to_l_+1
  9885  1B8B  01F4               	clrf	?__div_to_l_+2
  9886  1B8C  01F5               	clrf	?__div_to_l_+3
  9887  1B8D  0008               	return
  9888  1B8E                     l3661:	
  9889  1B8E  3075               	movlw	low (__div_to_l_@f2| 0)
  9890  1B8F  2431  160A  158A   	fcall	PL6	;call to abstracted procedure
  9891  1B92  1003               	clrc
  9892  1B93  0D22               	rlf	??__div_to_l_+2,w
  9893  1B94  0D23               	rlf	??__div_to_l_+3,w
  9894  1B95  00AC               	movwf	__div_to_l_@cntr
  9895  1B96  082C               	movf	__div_to_l_@cntr,w
  9896  1B97  1903               	btfsc	3,2
  9897  1B98  2B89               	goto	l3659
  9898  1B99  3072               	movlw	low (__div_to_l_@f1| 0)
  9899  1B9A  0084               	movwf	4
  9900  1B9B  3080               	movlw	128
  9901  1B9C  0A84               	incf	4,f
  9902  1B9D  0A84               	incf	4,f
  9903  1B9E  0480               	iorwf	0,f
  9904  1B9F  3072               	movlw	low (__div_to_l_@f1| 0)
  9905  1BA0  0A84               	incf	4,f
  9906  1BA1  0084               	movwf	4
  9907  1BA2  3075               	movlw	low (__div_to_l_@f2| 0)
  9908  1BA3  0A84               	incf	4,f
  9909  1BA4  0A84               	incf	4,f
  9910  1BA5  0A84               	incf	4,f
  9911  1BA6  0180               	clrf	0
  9912  1BA7  0084               	movwf	4
  9913  1BA8  3080               	movlw	128
  9914  1BA9  0A84               	incf	4,f
  9915  1BAA  0A84               	incf	4,f
  9916  1BAB  0480               	iorwf	0,f
  9917  1BAC  3075               	movlw	low (__div_to_l_@f2| 0)
  9918  1BAD  0A84               	incf	4,f
  9919  1BAE  0084               	movwf	4
  9920  1BAF  307F               	movlw	127
  9921  1BB0  0A84               	incf	4,f
  9922  1BB1  0A84               	incf	4,f
  9923  1BB2  0A84               	incf	4,f
  9924  1BB3  0180               	clrf	0
  9925  1BB4  01A8               	clrf	__div_to_l_@quot
  9926  1BB5  01A9               	clrf	__div_to_l_@quot+1
  9927  1BB6  01AA               	clrf	__div_to_l_@quot+2
  9928  1BB7  01AB               	clrf	__div_to_l_@quot+3
  9929  1BB8  02AD               	subwf	__div_to_l_@exp1,f
  9930  1BB9  30A0               	movlw	160
  9931  1BBA  072C               	addwf	__div_to_l_@cntr,w
  9932  1BBB  00A0               	movwf	??__div_to_l_
  9933  1BBC  02AD               	subwf	__div_to_l_@exp1,f
  9934  1BBD  3020               	movlw	32
  9935  1BBE  00AC               	movwf	__div_to_l_@cntr
  9936  1BBF                     l3675:	
  9937  1BBF  3075               	movlw	low (__div_to_l_@f2| 0)
  9938  1BC0  1003               	clrc
  9939  1BC1  0DA8               	rlf	__div_to_l_@quot,f
  9940  1BC2  0DA9               	rlf	__div_to_l_@quot+1,f
  9941  1BC3  0DAA               	rlf	__div_to_l_@quot+2,f
  9942  1BC4  0DAB               	rlf	__div_to_l_@quot+3,f
  9943  1BC5  2431  160A  158A   	fcall	PL6	;call to abstracted procedure
  9944  1BC8  3072               	movlw	low (__div_to_l_@f1| 0)
  9945  1BC9  0084               	movwf	4
  9946  1BCA  0800               	movf	0,w
  9947  1BCB  00A4               	movwf	??__div_to_l_+4
  9948  1BCC  0A84               	incf	4,f
  9949  1BCD  0800               	movf	0,w
  9950  1BCE  00A5               	movwf	??__div_to_l_+5
  9951  1BCF  0A84               	incf	4,f
  9952  1BD0  0800               	movf	0,w
  9953  1BD1  00A6               	movwf	??__div_to_l_+6
  9954  1BD2  0A84               	incf	4,f
  9955  1BD3  0800               	movf	0,w
  9956  1BD4  00A7               	movwf	??__div_to_l_+7
  9957  1BD5  0823               	movf	??__div_to_l_+3,w
  9958  1BD6  0227               	subwf	??__div_to_l_+7,w
  9959  1BD7  1D03               	skipz
  9960  1BD8  2BE3               	goto	u3755
  9961  1BD9  0822               	movf	??__div_to_l_+2,w
  9962  1BDA  0226               	subwf	??__div_to_l_+6,w
  9963  1BDB  1D03               	skipz
  9964  1BDC  2BE3               	goto	u3755
  9965  1BDD  0821               	movf	??__div_to_l_+1,w
  9966  1BDE  0225               	subwf	??__div_to_l_+5,w
  9967  1BDF  1D03               	skipz
  9968  1BE0  2BE3               	goto	u3755
  9969  1BE1  0820               	movf	??__div_to_l_,w
  9970  1BE2  0224               	subwf	??__div_to_l_+4,w
  9971  1BE3                     u3755:	
  9972  1BE3  1C03               	skipc
  9973  1BE4  2BFF               	goto	l856
  9974  1BE5  3075               	movlw	low (__div_to_l_@f2| 0)
  9975  1BE6  2431  160A  158A   	fcall	PL6	;call to abstracted procedure
  9976  1BE9  3072               	movlw	low (__div_to_l_@f1| 0)
  9977  1BEA  0084               	movwf	4
  9978  1BEB  0820               	movf	??__div_to_l_,w
  9979  1BEC  0280               	subwf	0,f
  9980  1BED  0A84               	incf	4,f
  9981  1BEE  0821               	movf	??__div_to_l_+1,w
  9982  1BEF  1C03               	skipc
  9983  1BF0  0F21               	incfsz	??__div_to_l_+1,w
  9984  1BF1  0280               	subwf	0,f
  9985  1BF2  0A84               	incf	4,f
  9986  1BF3  0822               	movf	??__div_to_l_+2,w
  9987  1BF4  1C03               	skipc
  9988  1BF5  0F22               	incfsz	??__div_to_l_+2,w
  9989  1BF6  0280               	subwf	0,f
  9990  1BF7  0A84               	incf	4,f
  9991  1BF8  0823               	movf	??__div_to_l_+3,w
  9992  1BF9  1C03               	skipc
  9993  1BFA  0A23               	incf	??__div_to_l_+3,w
  9994  1BFB  0280               	subwf	0,f
  9995  1BFC  3003               	movlw	3
  9996  1BFD  0284               	subwf	4,f
  9997  1BFE  1428               	bsf	__div_to_l_@quot,0
  9998  1BFF                     l856:	
  9999  1BFF  3072               	movlw	low (__div_to_l_@f1| 0)
 10000  1C00  0084               	movwf	4
 10001  1C01  1003               	clrc
 10002  1C02  0D80               	rlf	0,f
 10003  1C03  0A84               	incf	4,f
 10004  1C04  0D80               	rlf	0,f
 10005  1C05  0A84               	incf	4,f
 10006  1C06  0D80               	rlf	0,f
 10007  1C07  0A84               	incf	4,f
 10008  1C08  0D80               	rlf	0,f
 10009  1C09  0BAC               	decfsz	__div_to_l_@cntr,f
 10010  1C0A  2BBF               	goto	l3675
 10011  1C0B  1FAD               	btfss	__div_to_l_@exp1,7
 10012  1C0C  2C1A               	goto	l3693
 10013  1C0D  082D               	movf	__div_to_l_@exp1,w
 10014  1C0E  3A80               	xorlw	128
 10015  1C0F  3E9F               	addlw	159
 10016  1C10  1C03               	btfss	3,0
 10017  1C11  2B89               	goto	l3659
 10018  1C12                     l3689:	
 10019  1C12  1003               	clrc
 10020  1C13  0CAB               	rrf	__div_to_l_@quot+3,f
 10021  1C14  0CAA               	rrf	__div_to_l_@quot+2,f
 10022  1C15  0CA9               	rrf	__div_to_l_@quot+1,f
 10023  1C16  0CA8               	rrf	__div_to_l_@quot,f
 10024  1C17  0FAD               	incfsz	__div_to_l_@exp1,f
 10025  1C18  2C12               	goto	l3689
 10026  1C19  2C28               	goto	l3701
 10027  1C1A                     l3693:	
 10028  1C1A  3020               	movlw	32
 10029  1C1B  022D               	subwf	__div_to_l_@exp1,w
 10030  1C1C  1803               	btfsc	3,0
 10031  1C1D  2B89               	goto	l3659
 10032  1C1E                     l3699:	
 10033  1C1E  082D               	movf	__div_to_l_@exp1,w
 10034  1C1F  1903               	btfsc	3,2
 10035  1C20  2C28               	goto	l3701
 10036  1C21  1003               	clrc
 10037  1C22  0DA8               	rlf	__div_to_l_@quot,f
 10038  1C23  0DA9               	rlf	__div_to_l_@quot+1,f
 10039  1C24  0DAA               	rlf	__div_to_l_@quot+2,f
 10040  1C25  0DAB               	rlf	__div_to_l_@quot+3,f
 10041  1C26  03AD               	decf	__div_to_l_@exp1,f
 10042  1C27  2C1E               	goto	l3699
 10043  1C28                     l3701:	
 10044  1C28  082B               	movf	__div_to_l_@quot+3,w
 10045  1C29  00F5               	movwf	?__div_to_l_+3
 10046  1C2A  082A               	movf	__div_to_l_@quot+2,w
 10047  1C2B  00F4               	movwf	?__div_to_l_+2
 10048  1C2C  0829               	movf	__div_to_l_@quot+1,w
 10049  1C2D  00F3               	movwf	?__div_to_l_+1
 10050  1C2E  0828               	movf	__div_to_l_@quot,w
 10051  1C2F  00F2               	movwf	?__div_to_l_
 10052  1C30  0008               	return
 10053  1C31                     __end_of__div_to_l_:	
 10054  1C31                     PL6:	
 10055  1C31  0084               	movwf	4
 10056  1C32  0800               	movf	0,w
 10057  1C33  00A0               	movwf	??__div_to_l_
 10058  1C34  0A84               	incf	4,f
 10059  1C35  0800               	movf	0,w
 10060  1C36  00A1               	movwf	??__div_to_l_+1
 10061  1C37  0A84               	incf	4,f
 10062  1C38  0800               	movf	0,w
 10063  1C39  00A2               	movwf	??__div_to_l_+2
 10064  1C3A  0A84               	incf	4,f
 10065  1C3B  0800               	movf	0,w
 10066  1C3C  00A3               	movwf	??__div_to_l_+3
 10067  1C3D  0008               	return
 10068  1C3E                     __end_ofPL6:	
 10069                           
 10070                           	psect	text64
 10071  0852                     __ptext64:	
 10072 ;; *************** function _adcInit *****************
 10073 ;; Defined at:
 10074 ;;		line 5 in file "tgs4161.c"
 10075 ;; Parameters:    Size  Location     Type
 10076 ;;		None
 10077 ;; Auto vars:     Size  Location     Type
 10078 ;;		None
 10079 ;; Return value:  Size  Location     Type
 10080 ;;		None               void
 10081 ;; Registers used:
 10082 ;;		status,2
 10083 ;; Tracked objects:
 10084 ;;		On entry : 0/100
 10085 ;;		On exit  : 300/100
 10086 ;;		Unchanged: 0/0
 10087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10088 ;;      Params:         0       0       0       0       0
 10089 ;;      Locals:         0       0       0       0       0
 10090 ;;      Temps:          0       0       0       0       0
 10091 ;;      Totals:         0       0       0       0       0
 10092 ;;Total ram usage:        0 bytes
 10093 ;; Hardware stack levels used:    1
 10094 ;; Hardware stack levels required when called:    1
 10095 ;; This function calls:
 10096 ;;		Nothing
 10097 ;; This function is called by:
 10098 ;;		_main
 10099 ;; This function uses a non-reentrant model
 10100 ;;
 10101                           
 10102                           
 10103                           ;psect for function _adcInit
 10104  0852                     _adcInit:	
 10105                           
 10106                           ;tgs4161.c: 6: TRISA |= 0b00000001;
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in _adcInit: [status,2]
 10110  0852  1683               	bsf	3,5	;RP0=1, select bank1
 10111  0853  1303               	bcf	3,6	;RP1=0, select bank1
 10112  0854  1405               	bsf	5,0	;volatile
 10113                           
 10114                           ;tgs4161.c: 7: ANSEL |= 0b00000001;
 10115  0855  1703               	bsf	3,6	;RP1=1, select bank3
 10116  0856  1408               	bsf	8,0	;volatile
 10117                           
 10118                           ;tgs4161.c: 8: ADCON0 = 0b00000000;
 10119  0857  1283               	bcf	3,5	;RP0=0, select bank0
 10120  0858  1303               	bcf	3,6	;RP1=0, select bank0
 10121  0859  019F               	clrf	31	;volatile
 10122                           
 10123                           ;tgs4161.c: 9: ADCON1 |= 0b10000000;
 10124  085A  1683               	bsf	3,5	;RP0=1, select bank1
 10125  085B  179F               	bsf	31,7	;volatile
 10126                           
 10127                           ;tgs4161.c: 10: PIE1bits.ADIE = 0;
 10128  085C  130C               	bcf	12,6	;volatile
 10129  085D  0008               	return
 10130  085E                     __end_of_adcInit:	
 10131                           
 10132                           	psect	text65
 10133  001C                     __ptext65:	
 10134 ;; *************** function _UARTInit *****************
 10135 ;; Defined at:
 10136 ;;		line 4 in file "uart.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  baud_rate       4    5[BANK0 ] const unsigned long 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  x               2   14[BANK0 ] unsigned int 
 10141 ;;  k               1    0        unsigned char 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;                  1    wreg      unsigned char 
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 300/0
 10148 ;;		On exit  : 200/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10151 ;;      Params:         0       4       0       0       0
 10152 ;;      Locals:         0       7       0       0       0
 10153 ;;      Temps:          0       0       0       0       0
 10154 ;;      Totals:         0      11       0       0       0
 10155 ;;Total ram usage:       11 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    2
 10158 ;; This function calls:
 10159 ;;		___lldiv
 10160 ;; This function is called by:
 10161 ;;		_main
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _UARTInit
 10167  001C                     _UARTInit:	
 10168                           
 10169                           ;uart.c: 6: unsigned int x;
 10170                           ;uart.c: 7: unsigned char k;
 10171                           ;uart.c: 9: TRISCbits.TRISC6 = 0;
 10172                           
 10173                           ;incstack = 0
 10174                           ; Regs used in _UARTInit: [wreg+status,2+status,0+pclath+cstack]
 10175  001C  1683               	bsf	3,5	;RP0=1, select bank1
 10176  001D  1307               	bcf	7,6	;volatile
 10177                           
 10178                           ;uart.c: 10: TRISCbits.TRISC7 = 0;
 10179  001E  1387               	bcf	7,7	;volatile
 10180                           
 10181                           ;uart.c: 11: INTCON |= 0b11000000;
 10182  001F  30C0               	movlw	192
 10183  0020  048B               	iorwf	11,f	;volatile
 10184                           
 10185                           ;uart.c: 12: PIE1bits.RCIE = 1;
 10186  0021  168C               	bsf	12,5	;volatile
 10187                           
 10188                           ;uart.c: 14: if((baud_rate > 115200) || (baud_rate < 300)) return 0;
 10189  0022  1283               	bcf	3,5	;RP0=0, select bank0
 10190  0023  0828               	movf	UARTInit@baud_rate+3,w
 10191  0024  1D03               	btfss	3,2
 10192  0025  0008               	return
 10193  0026  3001               	movlw	1
 10194  0027  0227               	subwf	UARTInit@baud_rate+2,w
 10195  0028  1D03               	skipz
 10196  0029  2830               	goto	u5023
 10197  002A  30C2               	movlw	194
 10198  002B  0226               	subwf	UARTInit@baud_rate+1,w
 10199  002C  1D03               	skipz
 10200  002D  2830               	goto	u5023
 10201  002E  3001               	movlw	1
 10202  002F  0225               	subwf	UARTInit@baud_rate,w
 10203  0030                     u5023:	
 10204  0030  1803               	btfsc	3,0
 10205  0031  0008               	return
 10206  0032  0828               	movf	UARTInit@baud_rate+3,w
 10207  0033  1D03               	btfss	3,2
 10208  0034  2840               	goto	l4757
 10209  0035  0827               	movf	UARTInit@baud_rate+2,w
 10210  0036  1D03               	btfss	3,2
 10211  0037  2840               	goto	l4757
 10212  0038  3001               	movlw	1
 10213  0039  0226               	subwf	UARTInit@baud_rate+1,w
 10214  003A  1D03               	skipz
 10215  003B  283E               	goto	u5033
 10216  003C  302C               	movlw	44
 10217  003D  0225               	subwf	UARTInit@baud_rate,w
 10218  003E                     u5033:	
 10219  003E  1C03               	btfss	3,0
 10220  003F  0008               	return
 10221  0040                     l4757:	
 10222                           
 10223                           ;uart.c: 18: }
 10224                           ;uart.c: 20: if(baud_rate == 9600) x = (8000000 / baud_rate)/k - 1;
 10225  0040  3080               	movlw	128
 10226  0041  0625               	xorwf	UARTInit@baud_rate,w
 10227  0042  3025               	movlw	37
 10228  0043  1903               	skipnz
 10229  0044  0626               	xorwf	UARTInit@baud_rate+1,w
 10230  0045  0427               	iorwf	UARTInit@baud_rate+2,w
 10231  0046  0428               	iorwf	UARTInit@baud_rate+3,w
 10232  0047  1D03               	btfss	3,2
 10233  0048  285F               	goto	l4763
 10234  0049  2097  120A  118A   	fcall	PL16	;call to abstracted procedure
 10235  004C  2551  120A  118A   	fcall	___lldiv
 10236  004F  2081  120A  118A   	fcall	PL4	;call to abstracted procedure
 10237  0052  2551  120A  118A   	fcall	___lldiv
 10238  0055  0873               	movf	?___lldiv+1,w
 10239  0056  00AF               	movwf	UARTInit@x+1
 10240  0057  0872               	movf	?___lldiv,w
 10241  0058  00AE               	movwf	UARTInit@x
 10242  0059  30FF               	movlw	255
 10243  005A  07AE               	addwf	UARTInit@x,f
 10244  005B  1803               	skipnc
 10245  005C  0AAF               	incf	UARTInit@x+1,f
 10246  005D  07AF               	addwf	UARTInit@x+1,f
 10247  005E  286D               	goto	l4765
 10248  005F                     l4763:	
 10249                           
 10250                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 10251  005F  2097  120A  118A   	fcall	PL16	;call to abstracted procedure
 10252  0062  2551  120A  118A   	fcall	___lldiv
 10253                           
 10254                           ;uart.c: 21: else x = (8000000 / baud_rate)/k ;
 10255  0065  2081  120A  118A   	fcall	PL4	;call to abstracted procedure
 10256  0068  2551               	fcall	___lldiv
 10257  0069  0873               	movf	?___lldiv+1,w
 10258  006A  00AF               	movwf	UARTInit@x+1
 10259  006B  0872               	movf	?___lldiv,w
 10260  006C  00AE               	movwf	UARTInit@x
 10261  006D                     l4765:	
 10262                           
 10263                           ;uart.c: 23: BRGH = 1;
 10264  006D  1683               	bsf	3,5	;RP0=1, select bank1
 10265  006E  1518               	bsf	24,2	;volatile
 10266                           
 10267                           ;uart.c: 24: BRG16 = 1;
 10268  006F  1703               	bsf	3,6	;RP1=1, select bank3
 10269  0070  1587               	bsf	7,3	;volatile
 10270                           
 10271                           ;uart.c: 25: SPBRG = x & 0xFF;
 10272  0071  1283               	bcf	3,5	;RP0=0, select bank0
 10273  0072  1303               	bcf	3,6	;RP1=0, select bank0
 10274  0073  082E               	movf	UARTInit@x,w
 10275  0074  1683               	bsf	3,5	;RP0=1, select bank1
 10276  0075  0099               	movwf	25	;volatile
 10277                           
 10278                           ;uart.c: 26: SPBRGH = (x>>8) & 0xFF;
 10279  0076  1283               	bcf	3,5	;RP0=0, select bank0
 10280  0077  082F               	movf	UARTInit@x+1,w
 10281  0078  1683               	bsf	3,5	;RP0=1, select bank1
 10282  0079  009A               	movwf	26	;volatile
 10283                           
 10284                           ;uart.c: 27: SYNC = 0;
 10285  007A  1218               	bcf	24,4	;volatile
 10286                           
 10287                           ;uart.c: 28: SPEN = 1;
 10288  007B  1283               	bcf	3,5	;RP0=0, select bank0
 10289  007C  1798               	bsf	24,7	;volatile
 10290                           
 10291                           ;uart.c: 29: CREN = 1;
 10292  007D  1618               	bsf	24,4	;volatile
 10293                           
 10294                           ;uart.c: 30: TXEN = 1;
 10295  007E  1683               	bsf	3,5	;RP0=1, select bank1
 10296  007F  1698               	bsf	24,5	;volatile
 10297  0080  0008               	return
 10298  0081                     __end_of_UARTInit:	
 10299  0081                     PL4:	
 10300  0081  0875               	movf	?___lldiv+3,w
 10301  0082  00AC               	movwf	_UARTInit$1259+3
 10302  0083  0874               	movf	?___lldiv+2,w
 10303  0084  00AB               	movwf	_UARTInit$1259+2
 10304  0085  0873               	movf	?___lldiv+1,w
 10305  0086  00AA               	movwf	_UARTInit$1259+1
 10306  0087  0872               	movf	?___lldiv,w
 10307  0088  00A9               	movwf	_UARTInit$1259
 10308  0089  3004               	movlw	4
 10309  008A  00F2               	movwf	___lldiv@divisor
 10310  008B  01F3               	clrf	___lldiv@divisor+1
 10311  008C  01F4               	clrf	___lldiv@divisor+2
 10312  008D  01F5               	clrf	___lldiv@divisor+3
 10313  008E  082C               	movf	_UARTInit$1259+3,w
 10314  008F  00F9               	movwf	___lldiv@dividend+3
 10315  0090  082B               	movf	_UARTInit$1259+2,w
 10316  0091  00F8               	movwf	___lldiv@dividend+2
 10317  0092  082A               	movf	_UARTInit$1259+1,w
 10318  0093  00F7               	movwf	___lldiv@dividend+1
 10319  0094  0829               	movf	_UARTInit$1259,w
 10320  0095  00F6               	movwf	___lldiv@dividend
 10321  0096  0008               	return
 10322  0097                     __end_ofPL4:	
 10323  0097                     PL16:	
 10324  0097  0828               	movf	UARTInit@baud_rate+3,w
 10325  0098  00F5               	movwf	___lldiv@divisor+3
 10326  0099  0827               	movf	UARTInit@baud_rate+2,w
 10327  009A  00F4               	movwf	___lldiv@divisor+2
 10328  009B  0826               	movf	UARTInit@baud_rate+1,w
 10329  009C  00F3               	movwf	___lldiv@divisor+1
 10330  009D  0825               	movf	UARTInit@baud_rate,w
 10331  009E  00F2               	movwf	___lldiv@divisor
 10332  009F  307A               	movlw	122
 10333  00A0  01F9               	clrf	___lldiv@dividend+3
 10334  00A1  00F8               	movwf	___lldiv@dividend+2
 10335  00A2  3012               	movlw	18
 10336  00A3  00F7               	movwf	___lldiv@dividend+1
 10337  00A4  01F6               	clrf	___lldiv@dividend
 10338  00A5  0008               	return
 10339  00A6                     __end_ofPL16:	
 10340  00A6                     __ptext40:	
 10341 ;; *************** function _sprintf *****************
 10342 ;; Defined at:
 10343 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;  sp              1    wreg     PTR unsigned char 
 10346 ;;		 -> humidity(5), temperature(5), 
 10347 ;;  f               2   52[BANK0 ] PTR const unsigned char 
 10348 ;;		 -> STR_27(6), STR_26(6), STR_23(6), STR_22(6), 
 10349 ;;		 -> STR_21(6), STR_18(6), STR_12(6), STR_6(6), 
 10350 ;;		 -> STR_3(6), 
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  sp              1   18[BANK1 ] PTR unsigned char 
 10353 ;;		 -> humidity(5), temperature(5), 
 10354 ;;  tmpval          4   10[BANK1 ] struct .
 10355 ;;  val             4    6[BANK1 ] unsigned long 
 10356 ;;  fval            3   19[BANK1 ] unsigned long 
 10357 ;;  prec            2   16[BANK1 ] int 
 10358 ;;  exp             2   14[BANK1 ] int 
 10359 ;;  flag            2    4[BANK1 ] unsigned short 
 10360 ;;  cp              2    0        PTR const unsigned char 
 10361 ;;  len             2    0        unsigned int 
 10362 ;;  width           2    0        int 
 10363 ;;  c               1   22[BANK1 ] char 
 10364 ;;  ap              1    3[BANK1 ] PTR void [1]
 10365 ;;		 -> ?_sprintf(2), 
 10366 ;;  d               1    0        unsigned char 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;                  2   52[BANK0 ] int 
 10369 ;; Registers used:
 10370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 300/0
 10373 ;;		On exit  : B00/100
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10376 ;;      Params:         0       5       0       0       0
 10377 ;;      Locals:         0       0      23       0       0
 10378 ;;      Temps:          0       5       0       0       0
 10379 ;;      Totals:         0      10      23       0       0
 10380 ;;Total ram usage:       33 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    4
 10383 ;; This function calls:
 10384 ;;		___awdiv
 10385 ;;		___ftadd
 10386 ;;		___ftge
 10387 ;;		___ftmul
 10388 ;;		___ftneg
 10389 ;;		___ftsub
 10390 ;;		___fttol
 10391 ;;		___lldiv
 10392 ;;		___llmod
 10393 ;;		___lltoft
 10394 ;;		___wmul
 10395 ;;		__div_to_l_
 10396 ;;		__tdiv_to_l_
 10397 ;;		_fround
 10398 ;;		_isdigit
 10399 ;;		_scale
 10400 ;; This function is called by:
 10401 ;;		_displayAirTemp
 10402 ;;		_displayAirMoist
 10403 ;;		_displaySoilTemp
 10404 ;;		_menuHumi
 10405 ;;		_menu
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _sprintf
 10411  00A6                     _sprintf:	
 10412                           
 10413                           ;incstack = 0
 10414                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
 10415                           ;sprintf@sp stored from wreg
 10416  00A6  1683               	bsf	3,5	;RP0=1, select bank1
 10417  00A7  00D6               	movwf	sprintf@sp^(0+128)
 10418                           
 10419                           ;doprnt.c: 494: va_list ap;
 10420                           ;doprnt.c: 499: signed char c;
 10421                           ;doprnt.c: 501: int width;
 10422                           ;doprnt.c: 504: int prec;
 10423                           ;doprnt.c: 508: unsigned short flag;
 10424                           ;doprnt.c: 515: char d;
 10425                           ;doprnt.c: 516: double fval;
 10426                           ;doprnt.c: 517: int exp;
 10427                           ;doprnt.c: 523: union {
 10428                           ;doprnt.c: 524: unsigned long vd;
 10429                           ;doprnt.c: 525: double integ;
 10430                           ;doprnt.c: 526: } tmpval;
 10431                           ;doprnt.c: 528: unsigned long val;
 10432                           ;doprnt.c: 529: unsigned len;
 10433                           ;doprnt.c: 530: const char * cp;
 10434                           ;doprnt.c: 533: *ap = __va_start();
 10435  00A8  3056               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 10436  00A9  00C7               	movwf	sprintf@ap^(0+128)
 10437  00AA                     l5633:	
 10438                           ;doprnt.c: 536: while(c = *f++) {
 10439                           
 10440  00AA  2793               	fcall	PL40	;call to abstracted procedure
 10441  00AB  160A  158A  2000  120A  118A  	fcall	stringtab
 10442  00B0  1683               	bsf	3,5	;RP0=1, select bank1
 10443  00B1  00DA               	movwf	sprintf@c^(0+128)
 10444  00B2  085A               	movf	sprintf@c^(0+128),w
 10445  00B3  1903               	btfsc	3,2
 10446  00B4  2C86               	goto	l5635
 10447                           
 10448                           ;doprnt.c: 538: if(c != '%')
 10449  00B5  3025               	movlw	37
 10450  00B6  065A               	xorwf	sprintf@c^(0+128),w
 10451  00B7  1903               	btfsc	3,2
 10452  00B8  28BD               	goto	l5437
 10453                           
 10454                           ;doprnt.c: 540: {
 10455                           ;doprnt.c: 541: ((*sp++ = (c)));
 10456  00B9  0856               	movf	sprintf@sp^(0+128),w
 10457  00BA  0084               	movwf	4
 10458  00BB  085A               	movf	sprintf@c^(0+128),w
 10459  00BC  2C82               	goto	L16
 10460  00BD                     l5437:	
 10461                           ;doprnt.c: 542: continue;
 10462                           
 10463                           
 10464                           ;doprnt.c: 543: }
 10465                           ;doprnt.c: 548: flag = 0;
 10466  00BD  01C8               	clrf	sprintf@flag^(0+128)
 10467  00BE  01C9               	clrf	(sprintf@flag+1)^(0+128)
 10468                           
 10469                           ;doprnt.c: 611: if(*f == '.') {
 10470  00BF  27D8               	fcall	PL94	;call to abstracted procedure
 10471  00C0  160A  158A  2000  120A  118A  	fcall	stringtab
 10472  00C5  3A2E               	xorlw	46
 10473  00C6  1D03               	skipz
 10474  00C7  2904               	goto	l5453
 10475                           
 10476                           ;doprnt.c: 612: flag |= 0x4000;
 10477  00C8  1683               	bsf	3,5	;RP0=1, select bank1
 10478  00C9  1749               	bsf	(sprintf@flag^(0+128)+1),6
 10479                           
 10480                           ;doprnt.c: 613: f++;
 10481  00CA  1283               	bcf	3,5	;RP0=0, select bank0
 10482  00CB  0AD4               	incf	sprintf@f,f
 10483  00CC  1903               	skipnz
 10484  00CD  0AD5               	incf	sprintf@f+1,f
 10485                           
 10486                           ;doprnt.c: 620: {
 10487                           ;doprnt.c: 621: prec = 0;
 10488  00CE  1683               	bsf	3,5	;RP0=1, select bank1
 10489  00CF  01D4               	clrf	sprintf@prec^(0+128)
 10490  00D0  01D5               	clrf	(sprintf@prec+1)^(0+128)
 10491  00D1                     l5451:	
 10492                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 10493                           
 10494  00D1  27D8               	fcall	PL94	;call to abstracted procedure
 10495  00D2  160A  158A  2000  120A  118A  	fcall	stringtab
 10496  00D7  2730  120A  118A   	fcall	_isdigit
 10497  00DA  1C03               	btfss	3,0
 10498  00DB  290B               	goto	l5459
 10499                           
 10500                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 10501  00DC  1683               	bsf	3,5	;RP0=1, select bank1
 10502  00DD  0855               	movf	(sprintf@prec+1)^(0+128),w
 10503  00DE  00F3               	movwf	___wmul@multiplier+1
 10504  00DF  0854               	movf	sprintf@prec^(0+128),w
 10505  00E0  00F2               	movwf	___wmul@multiplier
 10506  00E1  300A               	movlw	10
 10507  00E2  00F4               	movwf	___wmul@multiplicand
 10508  00E3  01F5               	clrf	___wmul@multiplicand+1
 10509  00E4  259A  120A  118A   	fcall	___wmul
 10510  00E7  27D8               	fcall	PL94	;call to abstracted procedure
 10511  00E8  160A  158A  2000  120A  118A  	fcall	stringtab
 10512  00ED  0772               	addwf	?___wmul,w
 10513  00EE  00D9               	movwf	??_sprintf
 10514  00EF  3000               	movlw	0
 10515  00F0  1803               	skipnc
 10516  00F1  3001               	movlw	1
 10517  00F2  0773               	addwf	?___wmul+1,w
 10518  00F3  00DA               	movwf	??_sprintf+1
 10519  00F4  0859               	movf	??_sprintf,w
 10520  00F5  3ED0               	addlw	208
 10521  00F6  1683               	bsf	3,5	;RP0=1, select bank1
 10522  00F7  00D4               	movwf	sprintf@prec^(0+128)
 10523  00F8  1283               	bcf	3,5	;RP0=0, select bank0
 10524  00F9  085A               	movf	??_sprintf+1,w
 10525  00FA  1803               	skipnc
 10526  00FB  3E01               	addlw	1
 10527  00FC  3EFF               	addlw	255
 10528  00FD  1683               	bsf	3,5	;RP0=1, select bank1
 10529  00FE  00D5               	movwf	(sprintf@prec+1)^(0+128)
 10530  00FF  1283               	bcf	3,5	;RP0=0, select bank0
 10531  0100  0AD4               	incf	sprintf@f,f
 10532  0101  1903               	skipnz
 10533  0102  0AD5               	incf	sprintf@f+1,f
 10534  0103  28D1               	goto	l5451
 10535  0104                     l5453:	
 10536                           
 10537                           ;doprnt.c: 626: prec = 0;
 10538  0104  1683               	bsf	3,5	;RP0=1, select bank1
 10539  0105  01D4               	clrf	sprintf@prec^(0+128)
 10540  0106  01D5               	clrf	(sprintf@prec+1)^(0+128)
 10541                           
 10542                           ;doprnt.c: 628: flag |= 0x1000;
 10543  0107  1649               	bsf	(sprintf@flag^(0+128)+1),4
 10544  0108  290B               	goto	l5459
 10545  0109                     l567:	
 10546                           ;doprnt.c: 662: case 'f':
 10547                           
 10548                           
 10549                           ;doprnt.c: 663: flag |= 0x400;
 10550  0109  1549               	bsf	(sprintf@flag^(0+128)+1),2
 10551                           
 10552                           ;doprnt.c: 664: break;
 10553  010A  291A               	goto	l5461
 10554  010B                     l5459:	
 10555  010B  2793               	fcall	PL40	;call to abstracted procedure
 10556  010C  160A  158A  2000  120A  118A  	fcall	stringtab
 10557  0111  1683               	bsf	3,5	;RP0=1, select bank1
 10558  0112  00DA               	movwf	sprintf@c^(0+128)
 10559                           
 10560                           ; Switch size 1, requested type "space"
 10561                           ; Number of cases is 2, Range of values is 0 to 102
 10562                           ; switch strategies available:
 10563                           ; Name         Instructions Cycles
 10564                           ; simple_byte            7     4 (average)
 10565                           ; jumptable            260     6 (fixed)
 10566                           ;	Chosen strategy is simple_byte
 10567  0113  3A00               	xorlw	0	; case 0
 10568  0114  1903               	skipnz
 10569  0115  2C86               	goto	l5635
 10570  0116  3A66               	xorlw	102	; case 102
 10571  0117  1903               	skipnz
 10572  0118  2909               	goto	l567
 10573  0119  28AA               	goto	l5633
 10574  011A                     l5461:	
 10575                           
 10576                           ;doprnt.c: 825: if(flag & (0x700)) {
 10577  011A  1283               	bcf	3,5	;RP0=0, select bank0
 10578  011B  3007               	movlw	7
 10579  011C  01D9               	clrf	??_sprintf
 10580  011D  1683               	bsf	3,5	;RP0=1, select bank1
 10581  011E  0549               	andwf	(sprintf@flag+1)^(0+128),w
 10582  011F  1283               	bcf	3,5	;RP0=0, select bank0
 10583  0120  00DA               	movwf	??_sprintf+1
 10584  0121  0459               	iorwf	??_sprintf,w
 10585  0122  1903               	btfsc	3,2
 10586  0123  2C44               	goto	l5613
 10587                           
 10588                           ;doprnt.c: 827: if(flag & 0x1000)
 10589  0124  1683               	bsf	3,5	;RP0=1, select bank1
 10590  0125  1E49               	btfss	(sprintf@flag+1)^(0+128),4
 10591  0126  292A               	goto	l5467
 10592                           
 10593                           ;doprnt.c: 829: prec = 6;
 10594  0127  3006               	movlw	6
 10595  0128  00D4               	movwf	sprintf@prec^(0+128)
 10596  0129  01D5               	clrf	(sprintf@prec+1)^(0+128)
 10597  012A                     l5467:	
 10598                           
 10599                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 10600  012A  0847               	movf	sprintf@ap^(0+128),w
 10601  012B  0084               	movwf	4
 10602  012C  1383               	bcf	3,7	;select IRP bank0
 10603  012D  0800               	movf	0,w
 10604  012E  00D7               	movwf	sprintf@fval^(0+128)
 10605  012F  0A84               	incf	4,f
 10606  0130  0800               	movf	0,w
 10607  0131  00D8               	movwf	(sprintf@fval+1)^(0+128)
 10608  0132  0A84               	incf	4,f
 10609  0133  0800               	movf	0,w
 10610  0134  00D9               	movwf	(sprintf@fval+2)^(0+128)
 10611  0135  3003               	movlw	3
 10612  0136  07C7               	addwf	sprintf@ap^(0+128),f
 10613                           
 10614                           ;doprnt.c: 831: if(fval < 0.0) {
 10615  0137  0857               	movf	sprintf@fval^(0+128),w
 10616  0138  1283               	bcf	3,5	;RP0=0, select bank0
 10617  0139  00CE               	movwf	___ftge@ff1
 10618  013A  1683               	bsf	3,5	;RP0=1, select bank1
 10619  013B  0858               	movf	(sprintf@fval+1)^(0+128),w
 10620  013C  1283               	bcf	3,5	;RP0=0, select bank0
 10621  013D  00CF               	movwf	___ftge@ff1+1
 10622  013E  1683               	bsf	3,5	;RP0=1, select bank1
 10623  013F  0859               	movf	(sprintf@fval+2)^(0+128),w
 10624  0140  1283               	bcf	3,5	;RP0=0, select bank0
 10625  0141  00D0               	movwf	___ftge@ff1+2
 10626  0142  01D1               	clrf	___ftge@ff2
 10627  0143  01D2               	clrf	___ftge@ff2+1
 10628  0144  01D3               	clrf	___ftge@ff2+2
 10629  0145  248B  120A  118A   	fcall	___ftge
 10630  0148  1803               	btfsc	3,0
 10631  0149  295C               	goto	l5477
 10632                           
 10633                           ;doprnt.c: 832: fval = -fval;
 10634  014A  1683               	bsf	3,5	;RP0=1, select bank1
 10635  014B  0857               	movf	sprintf@fval^(0+128),w
 10636  014C  00F2               	movwf	___ftneg@f1
 10637  014D  0858               	movf	(sprintf@fval+1)^(0+128),w
 10638  014E  00F3               	movwf	___ftneg@f1+1
 10639  014F  0859               	movf	(sprintf@fval+2)^(0+128),w
 10640  0150  00F4               	movwf	___ftneg@f1+2
 10641  0151  25B3  120A  118A   	fcall	___ftneg
 10642  0154  0872               	movf	?___ftneg,w
 10643  0155  00D7               	movwf	sprintf@fval^(0+128)
 10644  0156  0873               	movf	?___ftneg+1,w
 10645  0157  00D8               	movwf	(sprintf@fval+1)^(0+128)
 10646  0158  0874               	movf	?___ftneg+2,w
 10647  0159  00D9               	movwf	(sprintf@fval+2)^(0+128)
 10648                           
 10649                           ;doprnt.c: 833: flag |= 0x03;
 10650  015A  3003               	movlw	3
 10651  015B  04C8               	iorwf	sprintf@flag^(0+128),f
 10652  015C                     l5477:	
 10653                           
 10654                           ;doprnt.c: 834: }
 10655                           ;doprnt.c: 835: exp = 0;
 10656  015C  1683               	bsf	3,5	;RP0=1, select bank1
 10657  015D  01D2               	clrf	sprintf@exp^(0+128)
 10658  015E  01D3               	clrf	(sprintf@exp+1)^(0+128)
 10659                           
 10660                           ;doprnt.c: 836: if( fval!=0) {
 10661  015F  0859               	movf	(sprintf@fval+2)^(0+128),w
 10662  0160  0458               	iorwf	(sprintf@fval+1)^(0+128),w
 10663  0161  0457               	iorwf	sprintf@fval^(0+128),w
 10664  0162  1903               	skipnz
 10665  0163  2A03               	goto	l5509
 10666                           
 10667                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 10668  0164  30D7               	movlw	low (sprintf@fval| 0)
 10669  0165  0084               	movwf	4
 10670  0166  1383               	bcf	3,7	;select IRP bank1
 10671  0167  0800               	movf	0,w
 10672  0168  1283               	bcf	3,5	;RP0=0, select bank0
 10673  0169  00D9               	movwf	??_sprintf
 10674  016A  0A84               	incf	4,f
 10675  016B  0800               	movf	0,w
 10676  016C  00DA               	movwf	??_sprintf+1
 10677  016D  0A84               	incf	4,f
 10678  016E  0800               	movf	0,w
 10679  016F  00DB               	movwf	??_sprintf+2
 10680  0170  0A84               	incf	4,f
 10681  0171  0800               	movf	0,w
 10682  0172  00DC               	movwf	??_sprintf+3
 10683  0173  300F               	movlw	15
 10684  0174                     u6165:	
 10685  0174  1003               	clrc
 10686  0175  0CDC               	rrf	??_sprintf+3,f
 10687  0176  0CDB               	rrf	??_sprintf+2,f
 10688  0177  0CDA               	rrf	??_sprintf+1,f
 10689  0178  0CD9               	rrf	??_sprintf,f
 10690  0179  3EFF               	addlw	-1
 10691  017A  1D03               	skipz
 10692  017B  2974               	goto	u6165
 10693  017C  085A               	movf	??_sprintf+1,w
 10694  017D  1683               	bsf	3,5	;RP0=1, select bank1
 10695  017E  00D3               	movwf	(sprintf@exp+1)^(0+128)
 10696  017F  1283               	bcf	3,5	;RP0=0, select bank0
 10697  0180  0859               	movf	??_sprintf,w
 10698  0181  1683               	bsf	3,5	;RP0=1, select bank1
 10699  0182  00D2               	movwf	sprintf@exp^(0+128)
 10700  0183  3082               	movlw	-126
 10701  0184  01D3               	clrf	(sprintf@exp+1)^(0+128)
 10702  0185  07D2               	addwf	sprintf@exp^(0+128),f
 10703  0186  1C03               	skipc
 10704  0187  03D3               	decf	(sprintf@exp+1)^(0+128),f
 10705                           
 10706                           ;doprnt.c: 838: exp--;
 10707  0188  30FF               	movlw	-1
 10708  0189  07D2               	addwf	sprintf@exp^(0+128),f
 10709  018A  1C03               	skipc
 10710  018B  03D3               	decf	(sprintf@exp+1)^(0+128),f
 10711                           
 10712                           ;doprnt.c: 839: exp *= 3;
 10713  018C  3003               	movlw	3
 10714  018D  00F2               	movwf	___wmul@multiplier
 10715  018E  01F3               	clrf	___wmul@multiplier+1
 10716  018F  0853               	movf	(sprintf@exp+1)^(0+128),w
 10717  0190  00F5               	movwf	___wmul@multiplicand+1
 10718  0191  0852               	movf	sprintf@exp^(0+128),w
 10719  0192  00F4               	movwf	___wmul@multiplicand
 10720  0193  259A               	fcall	___wmul
 10721  0194  0873               	movf	?___wmul+1,w
 10722  0195  1683               	bsf	3,5	;RP0=1, select bank1
 10723  0196  00D3               	movwf	(sprintf@exp+1)^(0+128)
 10724  0197  0872               	movf	?___wmul,w
 10725  0198  00D2               	movwf	sprintf@exp^(0+128)
 10726                           
 10727                           ;doprnt.c: 840: exp /= 10;
 10728  0199  300A               	movlw	10
 10729  019A  1283               	bcf	3,5	;RP0=0, select bank0
 10730  019B  00A0               	movwf	___awdiv@divisor
 10731  019C  01A1               	clrf	___awdiv@divisor+1
 10732  019D  1683               	bsf	3,5	;RP0=1, select bank1
 10733  019E  0853               	movf	(sprintf@exp+1)^(0+128),w
 10734  019F  1283               	bcf	3,5	;RP0=0, select bank0
 10735  01A0  00A3               	movwf	___awdiv@dividend+1
 10736  01A1  1683               	bsf	3,5	;RP0=1, select bank1
 10737  01A2  0852               	movf	sprintf@exp^(0+128),w
 10738  01A3  1283               	bcf	3,5	;RP0=0, select bank0
 10739  01A4  00A2               	movwf	___awdiv@dividend
 10740  01A5  160A  118A  2628  120A  118A  	fcall	___awdiv
 10741  01AA  0821               	movf	?___awdiv+1,w
 10742  01AB  1683               	bsf	3,5	;RP0=1, select bank1
 10743  01AC  00D3               	movwf	(sprintf@exp+1)^(0+128)
 10744  01AD  1283               	bcf	3,5	;RP0=0, select bank0
 10745  01AE  0820               	movf	?___awdiv,w
 10746  01AF  1683               	bsf	3,5	;RP0=1, select bank1
 10747  01B0  00D2               	movwf	sprintf@exp^(0+128)
 10748                           
 10749                           ;doprnt.c: 841: if(exp < 0)
 10750  01B1  1FD3               	btfss	(sprintf@exp+1)^(0+128),7
 10751  01B2  29B7               	goto	l5497
 10752                           
 10753                           ;doprnt.c: 842: exp--;
 10754  01B3  30FF               	movlw	-1
 10755  01B4  07D2               	addwf	sprintf@exp^(0+128),f
 10756  01B5  1C03               	skipc
 10757  01B6  03D3               	decf	(sprintf@exp+1)^(0+128),f
 10758  01B7                     l5497:	
 10759                           
 10760                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 10761  01B7  0352               	decf	sprintf@exp^(0+128),w
 10762  01B8  3AFF               	xorlw	255
 10763  01B9  160A  118A  248E  120A  118A  	fcall	_scale
 10764                           
 10765                           ;doprnt.c: 847: tmpval.integ *= fval;
 10766  01BE  277E  120A  118A   	fcall	PL26	;call to abstracted procedure
 10767  01C1  27B7               	fcall	PL50	;call to abstracted procedure
 10768  01C2  1683               	bsf	3,5	;RP0=1, select bank1
 10769  01C3  084E               	movf	sprintf@tmpval^(0+128),w
 10770  01C4  1283               	bcf	3,5	;RP0=0, select bank0
 10771  01C5  00AB               	movwf	___ftmul@f2
 10772  01C6  1683               	bsf	3,5	;RP0=1, select bank1
 10773  01C7  084F               	movf	(sprintf@tmpval+1)^(0+128),w
 10774  01C8  1283               	bcf	3,5	;RP0=0, select bank0
 10775  01C9  00AC               	movwf	___ftmul@f2+1
 10776  01CA  1683               	bsf	3,5	;RP0=1, select bank1
 10777  01CB  0850               	movf	(sprintf@tmpval+2)^(0+128),w
 10778  01CC  1283               	bcf	3,5	;RP0=0, select bank0
 10779  01CD  00AD               	movwf	___ftmul@f2+2
 10780  01CE  160A  118A  26AA  120A  118A  	fcall	___ftmul
 10781  01D3  0828               	movf	?___ftmul,w
 10782  01D4  1683               	bsf	3,5	;RP0=1, select bank1
 10783  01D5  00CE               	movwf	sprintf@tmpval^(0+128)
 10784  01D6  1283               	bcf	3,5	;RP0=0, select bank0
 10785  01D7  0829               	movf	?___ftmul+1,w
 10786  01D8  1683               	bsf	3,5	;RP0=1, select bank1
 10787  01D9  00CF               	movwf	(sprintf@tmpval+1)^(0+128)
 10788  01DA  1283               	bcf	3,5	;RP0=0, select bank0
 10789  01DB  082A               	movf	?___ftmul+2,w
 10790  01DC  1683               	bsf	3,5	;RP0=1, select bank1
 10791  01DD  00D0               	movwf	(sprintf@tmpval+2)^(0+128)
 10792                           
 10793                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 10794  01DE  2755  120A  118A   	fcall	PL8	;call to abstracted procedure
 10795  01E1  3080               	movlw	128
 10796  01E2  01D1               	clrf	___ftge@ff2
 10797  01E3  00D2               	movwf	___ftge@ff2+1
 10798  01E4  303F               	movlw	63
 10799  01E5  00D3               	movwf	___ftge@ff2+2
 10800  01E6  248B  120A  118A   	fcall	___ftge
 10801  01E9  1803               	btfsc	3,0
 10802  01EA  29F1               	goto	l5505
 10803                           
 10804                           ;doprnt.c: 849: exp--;
 10805  01EB  30FF               	movlw	-1
 10806  01EC  1683               	bsf	3,5	;RP0=1, select bank1
 10807  01ED  07D2               	addwf	sprintf@exp^(0+128),f
 10808  01EE  1C03               	skipc
 10809  01EF  03D3               	decf	(sprintf@exp+1)^(0+128),f
 10810  01F0  2A03               	goto	l5509
 10811  01F1                     l5505:	
 10812                           
 10813                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 10814  01F1  1683               	bsf	3,5	;RP0=1, select bank1
 10815  01F2  2755  120A  118A   	fcall	PL8	;call to abstracted procedure
 10816  01F5  3020               	movlw	32
 10817  01F6  01D1               	clrf	___ftge@ff2
 10818  01F7  00D2               	movwf	___ftge@ff2+1
 10819  01F8  3041               	movlw	65
 10820  01F9  00D3               	movwf	___ftge@ff2+2
 10821  01FA  248B  120A  118A   	fcall	___ftge
 10822  01FD  1C03               	btfss	3,0
 10823  01FE  2A03               	goto	l5509
 10824                           
 10825                           ;doprnt.c: 851: exp++;
 10826  01FF  1683               	bsf	3,5	;RP0=1, select bank1
 10827  0200  0AD2               	incf	sprintf@exp^(0+128),f
 10828  0201  1903               	skipnz
 10829  0202  0AD3               	incf	(sprintf@exp+1)^(0+128),f
 10830  0203                     l5509:	
 10831                           
 10832                           ;doprnt.c: 852: }
 10833                           ;doprnt.c: 1112: if(prec <= 12)
 10834  0203  1683               	bsf	3,5	;RP0=1, select bank1
 10835  0204  0855               	movf	(sprintf@prec+1)^(0+128),w
 10836  0205  3A80               	xorlw	128
 10837  0206  00FF               	movwf	127
 10838  0207  3080               	movlw	128
 10839  0208  027F               	subwf	127,w
 10840  0209  1D03               	skipz
 10841  020A  2A0D               	goto	u6205
 10842  020B  300D               	movlw	13
 10843  020C  0254               	subwf	sprintf@prec^(0+128),w
 10844  020D                     u6205:	
 10845  020D  1803               	skipnc
 10846  020E  2A37               	goto	l5513
 10847                           
 10848                           ;doprnt.c: 1113: fval += fround(prec);
 10849  020F  1683               	bsf	3,5	;RP0=1, select bank1
 10850  0210  1303               	bcf	3,6	;RP1=0, select bank1
 10851  0211  0854               	movf	sprintf@prec^(0+128),w
 10852  0212  160A  158A  269D  120A  118A  	fcall	_fround
 10853  0217  0837               	movf	?_fround,w
 10854  0218  00C2               	movwf	___ftadd@f1
 10855  0219  0838               	movf	?_fround+1,w
 10856  021A  00C3               	movwf	___ftadd@f1+1
 10857  021B  0839               	movf	?_fround+2,w
 10858  021C  00C4               	movwf	___ftadd@f1+2
 10859  021D  1683               	bsf	3,5	;RP0=1, select bank1
 10860  021E  0857               	movf	sprintf@fval^(0+128),w
 10861  021F  1283               	bcf	3,5	;RP0=0, select bank0
 10862  0220  00C5               	movwf	___ftadd@f2
 10863  0221  1683               	bsf	3,5	;RP0=1, select bank1
 10864  0222  0858               	movf	(sprintf@fval+1)^(0+128),w
 10865  0223  1283               	bcf	3,5	;RP0=0, select bank0
 10866  0224  00C6               	movwf	___ftadd@f2+1
 10867  0225  1683               	bsf	3,5	;RP0=1, select bank1
 10868  0226  0859               	movf	(sprintf@fval+2)^(0+128),w
 10869  0227  1283               	bcf	3,5	;RP0=0, select bank0
 10870  0228  00C7               	movwf	___ftadd@f2+2
 10871  0229  25BB  120A  118A   	fcall	___ftadd
 10872  022C  0842               	movf	?___ftadd,w
 10873  022D  1683               	bsf	3,5	;RP0=1, select bank1
 10874  022E  00D7               	movwf	sprintf@fval^(0+128)
 10875  022F  1283               	bcf	3,5	;RP0=0, select bank0
 10876  0230  0843               	movf	?___ftadd+1,w
 10877  0231  1683               	bsf	3,5	;RP0=1, select bank1
 10878  0232  00D8               	movwf	(sprintf@fval+1)^(0+128)
 10879  0233  1283               	bcf	3,5	;RP0=0, select bank0
 10880  0234  0844               	movf	?___ftadd+2,w
 10881  0235  1683               	bsf	3,5	;RP0=1, select bank1
 10882  0236  00D9               	movwf	(sprintf@fval+2)^(0+128)
 10883  0237                     l5513:	
 10884                           
 10885                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 10886  0237  1683               	bsf	3,5	;RP0=1, select bank1
 10887  0238  1303               	bcf	3,6	;RP1=0, select bank1
 10888  0239  0853               	movf	(sprintf@exp+1)^(0+128),w
 10889  023A  3A80               	xorlw	128
 10890  023B  00FF               	movwf	127
 10891  023C  3080               	movlw	128
 10892  023D  027F               	subwf	127,w
 10893  023E  1D03               	skipz
 10894  023F  2A42               	goto	u6215
 10895  0240  300A               	movlw	10
 10896  0241  0252               	subwf	sprintf@exp^(0+128),w
 10897  0242                     u6215:	
 10898  0242  1803               	skipnc
 10899  0243  2A63               	goto	l5521
 10900  0244  1683               	bsf	3,5	;RP0=1, select bank1
 10901  0245  1303               	bcf	3,6	;RP1=0, select bank1
 10902  0246  0859               	movf	(sprintf@fval+2)^(0+128),w
 10903  0247  0458               	iorwf	(sprintf@fval+1)^(0+128),w
 10904  0248  0457               	iorwf	sprintf@fval^(0+128),w
 10905  0249  1903               	skipnz
 10906  024A  2A9E               	goto	l5535
 10907  024B  27A0  120A  118A   	fcall	PL42	;call to abstracted procedure
 10908  024E  24B7  120A  118A   	fcall	___fttol
 10909  0251  0845               	movf	?___fttol+3,w
 10910  0252  0444               	iorwf	?___fttol+2,w
 10911  0253  0443               	iorwf	?___fttol+1,w
 10912  0254  0442               	iorwf	?___fttol,w
 10913  0255  1D03               	skipz
 10914  0256  2A9E               	goto	l5535
 10915  0257  1683               	bsf	3,5	;RP0=1, select bank1
 10916  0258  0853               	movf	(sprintf@exp+1)^(0+128),w
 10917  0259  3A80               	xorlw	128
 10918  025A  00FF               	movwf	127
 10919  025B  3080               	movlw	128
 10920  025C  027F               	subwf	127,w
 10921  025D  1D03               	skipz
 10922  025E  2A61               	goto	u6245
 10923  025F  3002               	movlw	2
 10924  0260  0252               	subwf	sprintf@exp^(0+128),w
 10925  0261                     u6245:	
 10926  0261  1C03               	skipc
 10927  0262  2A9E               	goto	l5535
 10928  0263                     l5521:	
 10929                           
 10930                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 10931  0263  1683               	bsf	3,5	;RP0=1, select bank1
 10932  0264  1303               	bcf	3,6	;RP1=0, select bank1
 10933  0265  2755  120A  118A   	fcall	PL8	;call to abstracted procedure
 10934  0268  3070               	movlw	112
 10935  0269  00D1               	movwf	___ftge@ff2
 10936  026A  3089               	movlw	137
 10937  026B  00D2               	movwf	___ftge@ff2+1
 10938  026C  3040               	movlw	64
 10939  026D  00D3               	movwf	___ftge@ff2+2
 10940  026E  248B  120A  118A   	fcall	___ftge
 10941  0271  1803               	btfsc	3,0
 10942  0272  2A75               	goto	l5525
 10943                           
 10944                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 10945  0273  30F7               	movlw	-9
 10946  0274  2A76               	goto	L13
 10947  0275                     l5525:	
 10948                           ;doprnt.c: 1122: }else{
 10949                           
 10950                           
 10951                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 10952  0275  30F8               	movlw	-8
 10953  0276                     L13:	
 10954  0276  1683               	bsf	3,5	;RP0=1, select bank1
 10955  0277  07D2               	addwf	sprintf@exp^(0+128),f
 10956  0278  1C03               	skipc
 10957  0279  03D3               	decf	(sprintf@exp+1)^(0+128),f
 10958                           
 10959                           ;doprnt.c: 1124: }
 10960                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 10961  027A  0852               	movf	sprintf@exp^(0+128),w
 10962  027B  160A  118A  248E  120A  118A  	fcall	_scale
 10963                           
 10964                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 10965  0280  277E  120A  118A   	fcall	PL26	;call to abstracted procedure
 10966  0283  00F2               	movwf	__tdiv_to_l_@f1
 10967  0284  0858               	movf	(sprintf@fval+1)^(0+128),w
 10968  0285  00F3               	movwf	__tdiv_to_l_@f1+1
 10969  0286  0859               	movf	(sprintf@fval+2)^(0+128),w
 10970  0287  00F4               	movwf	__tdiv_to_l_@f1+2
 10971  0288  084E               	movf	sprintf@tmpval^(0+128),w
 10972  0289  00F5               	movwf	__tdiv_to_l_@f2
 10973  028A  084F               	movf	(sprintf@tmpval+1)^(0+128),w
 10974  028B  00F6               	movwf	__tdiv_to_l_@f2+1
 10975  028C  0850               	movf	(sprintf@tmpval+2)^(0+128),w
 10976  028D  00F7               	movwf	__tdiv_to_l_@f2+2
 10977  028E  26B8  120A  118A   	fcall	__tdiv_to_l_
 10978  0291  0875               	movf	?__tdiv_to_l_+3,w
 10979  0292  1683               	bsf	3,5	;RP0=1, select bank1
 10980  0293  00CD               	movwf	(sprintf@val+3)^(0+128)
 10981  0294  0874               	movf	?__tdiv_to_l_+2,w
 10982  0295  00CC               	movwf	(sprintf@val+2)^(0+128)
 10983  0296  0873               	movf	?__tdiv_to_l_+1,w
 10984  0297  00CB               	movwf	(sprintf@val+1)^(0+128)
 10985  0298  0872               	movf	?__tdiv_to_l_,w
 10986  0299  00CA               	movwf	sprintf@val^(0+128)
 10987                           
 10988                           ;doprnt.c: 1129: fval = 0.0;
 10989  029A  01D7               	clrf	sprintf@fval^(0+128)
 10990  029B  01D8               	clrf	(sprintf@fval+1)^(0+128)
 10991  029C  01D9               	clrf	(sprintf@fval+2)^(0+128)
 10992                           
 10993                           ;doprnt.c: 1130: } else {
 10994  029D  2ADE               	goto	l5539
 10995  029E                     l5535:	
 10996                           
 10997                           ;doprnt.c: 1131: val = (unsigned long)fval;
 10998  029E  1683               	bsf	3,5	;RP0=1, select bank1
 10999  029F  1303               	bcf	3,6	;RP1=0, select bank1
 11000  02A0  27A0  120A  118A   	fcall	PL42	;call to abstracted procedure
 11001  02A3  24B7  120A  118A   	fcall	___fttol
 11002  02A6  2761  120A  118A   	fcall	PL14	;call to abstracted procedure
 11003  02A9  00CA               	movwf	sprintf@val^(0+128)
 11004                           
 11005                           ;doprnt.c: 1132: fval -= (double)val;
 11006  02AA  084D               	movf	(sprintf@val+3)^(0+128),w
 11007  02AB  1283               	bcf	3,5	;RP0=0, select bank0
 11008  02AC  00A3               	movwf	___lltoft@c+3
 11009  02AD  1683               	bsf	3,5	;RP0=1, select bank1
 11010  02AE  084C               	movf	(sprintf@val+2)^(0+128),w
 11011  02AF  1283               	bcf	3,5	;RP0=0, select bank0
 11012  02B0  00A2               	movwf	___lltoft@c+2
 11013  02B1  1683               	bsf	3,5	;RP0=1, select bank1
 11014  02B2  084B               	movf	(sprintf@val+1)^(0+128),w
 11015  02B3  1283               	bcf	3,5	;RP0=0, select bank0
 11016  02B4  00A1               	movwf	___lltoft@c+1
 11017  02B5  1683               	bsf	3,5	;RP0=1, select bank1
 11018  02B6  084A               	movf	sprintf@val^(0+128),w
 11019  02B7  1283               	bcf	3,5	;RP0=0, select bank0
 11020  02B8  00A0               	movwf	___lltoft@c
 11021  02B9  2698  120A  118A   	fcall	___lltoft
 11022  02BC  0820               	movf	?___lltoft,w
 11023  02BD  00CE               	movwf	___ftsub@f2
 11024  02BE  0821               	movf	?___lltoft+1,w
 11025  02BF  00CF               	movwf	___ftsub@f2+1
 11026  02C0  0822               	movf	?___lltoft+2,w
 11027  02C1  00D0               	movwf	___ftsub@f2+2
 11028  02C2  1683               	bsf	3,5	;RP0=1, select bank1
 11029  02C3  0857               	movf	sprintf@fval^(0+128),w
 11030  02C4  1283               	bcf	3,5	;RP0=0, select bank0
 11031  02C5  00D1               	movwf	___ftsub@f1
 11032  02C6  1683               	bsf	3,5	;RP0=1, select bank1
 11033  02C7  0858               	movf	(sprintf@fval+1)^(0+128),w
 11034  02C8  1283               	bcf	3,5	;RP0=0, select bank0
 11035  02C9  00D2               	movwf	___ftsub@f1+1
 11036  02CA  1683               	bsf	3,5	;RP0=1, select bank1
 11037  02CB  0859               	movf	(sprintf@fval+2)^(0+128),w
 11038  02CC  1283               	bcf	3,5	;RP0=0, select bank0
 11039  02CD  00D3               	movwf	___ftsub@f1+2
 11040  02CE  267D  120A  118A   	fcall	___ftsub
 11041  02D1  084E               	movf	?___ftsub,w
 11042  02D2  1683               	bsf	3,5	;RP0=1, select bank1
 11043  02D3  00D7               	movwf	sprintf@fval^(0+128)
 11044  02D4  1283               	bcf	3,5	;RP0=0, select bank0
 11045  02D5  084F               	movf	?___ftsub+1,w
 11046  02D6  1683               	bsf	3,5	;RP0=1, select bank1
 11047  02D7  00D8               	movwf	(sprintf@fval+1)^(0+128)
 11048  02D8  1283               	bcf	3,5	;RP0=0, select bank0
 11049  02D9  0850               	movf	?___ftsub+2,w
 11050  02DA  1683               	bsf	3,5	;RP0=1, select bank1
 11051  02DB  00D9               	movwf	(sprintf@fval+2)^(0+128)
 11052                           
 11053                           ;doprnt.c: 1133: exp = 0;
 11054  02DC  01D2               	clrf	sprintf@exp^(0+128)
 11055  02DD  01D3               	clrf	(sprintf@exp+1)^(0+128)
 11056  02DE                     l5539:	
 11057                           
 11058                           ;doprnt.c: 1134: }
 11059                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 11060  02DE  01DA               	clrf	sprintf@c^(0+128)
 11061  02DF  0ADA               	incf	sprintf@c^(0+128),f
 11062  02E0                     l5545:	
 11063                           
 11064                           ;doprnt.c: 1137: if(val < dpowers[c])
 11065  02E0  085A               	movf	sprintf@c^(0+128),w
 11066  02E1  1283               	bcf	3,5	;RP0=0, select bank0
 11067  02E2  00D9               	movwf	??_sprintf
 11068  02E3  3001               	movlw	1
 11069  02E4  1003               	clrc
 11070  02E5                     L9:	
 11071  02E5  0DD9               	rlf	??_sprintf,f
 11072  02E6  3EFF               	addlw	-1
 11073  02E7  1003               	clrc
 11074  02E8  1D03               	skipz
 11075  02E9  2AE5               	goto	L9
 11076  02EA  278B               	fcall	PL38	;call to abstracted procedure
 11077  02EB  160A  158A  2000  120A  118A  	fcall	stringtab
 11078  02F0  00DA               	movwf	??_sprintf+1
 11079  02F1  160A  158A  2000  120A  118A  	fcall	stringtab
 11080  02F6  00DB               	movwf	??_sprintf+2
 11081  02F7  160A  158A  2000  120A  118A  	fcall	stringtab
 11082  02FC  00DC               	movwf	??_sprintf+3
 11083  02FD  160A  158A  2000  120A  118A  	fcall	stringtab
 11084  0302  00DD               	movwf	??_sprintf+4
 11085  0303  1683               	bsf	3,5	;RP0=1, select bank1
 11086  0304  024D               	subwf	(sprintf@val+3)^(0+128),w
 11087  0305  1D03               	skipz
 11088  0306  2B17               	goto	u6275
 11089  0307  1283               	bcf	3,5	;RP0=0, select bank0
 11090  0308  085C               	movf	??_sprintf+3,w
 11091  0309  1683               	bsf	3,5	;RP0=1, select bank1
 11092  030A  024C               	subwf	(sprintf@val+2)^(0+128),w
 11093  030B  1D03               	skipz
 11094  030C  2B17               	goto	u6275
 11095  030D  1283               	bcf	3,5	;RP0=0, select bank0
 11096  030E  085B               	movf	??_sprintf+2,w
 11097  030F  1683               	bsf	3,5	;RP0=1, select bank1
 11098  0310  024B               	subwf	(sprintf@val+1)^(0+128),w
 11099  0311  1D03               	skipz
 11100  0312  2B17               	goto	u6275
 11101  0313  1283               	bcf	3,5	;RP0=0, select bank0
 11102  0314  085A               	movf	??_sprintf+1,w
 11103  0315  1683               	bsf	3,5	;RP0=1, select bank1
 11104  0316  024A               	subwf	sprintf@val^(0+128),w
 11105  0317                     u6275:	
 11106  0317  1C03               	btfss	3,0
 11107  0318  2B1E               	goto	l5553
 11108  0319  300A               	movlw	10
 11109  031A  0ADA               	incf	sprintf@c^(0+128),f
 11110  031B  065A               	xorwf	sprintf@c^(0+128),w
 11111  031C  1D03               	btfss	3,2
 11112  031D  2AE0               	goto	l5545
 11113  031E                     l5553:	
 11114                           
 11115                           ;doprnt.c: 1175: {
 11116                           ;doprnt.c: 1188: if(flag & 0x03)
 11117  031E  0848               	movf	sprintf@flag^(0+128),w
 11118  031F  3903               	andlw	3
 11119  0320  1903               	btfsc	3,2
 11120  0321  2B5A               	goto	l5567
 11121                           
 11122                           ;doprnt.c: 1190: ((*sp++ = ('-')));
 11123  0322  0856               	movf	sprintf@sp^(0+128),w
 11124  0323  0084               	movwf	4
 11125  0324  302D               	movlw	45
 11126  0325  2B57               	goto	L17
 11127  0326                     l5559:	
 11128                           
 11129                           ;doprnt.c: 1200: {
 11130                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 11131  0326  085A               	movf	sprintf@c^(0+128),w
 11132  0327  1283               	bcf	3,5	;RP0=0, select bank0
 11133  0328  00D9               	movwf	??_sprintf
 11134  0329  3001               	movlw	1
 11135  032A  1003               	clrc
 11136  032B                     L10:	
 11137  032B  0DD9               	rlf	??_sprintf,f
 11138  032C  3EFF               	addlw	-1
 11139  032D  1003               	clrc
 11140  032E  1D03               	skipz
 11141  032F  2B2B               	goto	L10
 11142  0330  278B               	fcall	PL38	;call to abstracted procedure
 11143  0331  160A  158A  2000  120A  118A  	fcall	stringtab
 11144  0336  00F2               	movwf	___lldiv@divisor
 11145  0337  160A  158A  2000  120A  118A  	fcall	stringtab
 11146  033C  00F3               	movwf	___lldiv@divisor+1
 11147  033D  160A  158A  2000  120A  118A  	fcall	stringtab
 11148  0342  00F4               	movwf	___lldiv@divisor+2
 11149  0343  160A  158A  2000  120A  118A  	fcall	stringtab
 11150  0348  27AC  120A  118A   	fcall	PL46	;call to abstracted procedure
 11151  034B  2551  120A  118A   	fcall	___lldiv
 11152                           
 11153                           ;doprnt.c: 1202: tmpval.vd %= 10;
 11154  034E  273E  120A  118A   	fcall	PL2	;call to abstracted procedure
 11155  0351  2512  120A  118A   	fcall	___llmod
 11156                           
 11157                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
 11158  0354  2770  120A  118A   	fcall	PL22	;call to abstracted procedure
 11159  0357                     L17:	
 11160  0357  1383               	bcf	3,7	;select IRP bank0
 11161  0358  0080               	movwf	0
 11162  0359  0AD6               	incf	sprintf@sp^(0+128),f
 11163  035A                     l5567:	
 11164  035A  03DA               	decf	sprintf@c^(0+128),f
 11165  035B  0F5A               	incfsz	sprintf@c^(0+128),w
 11166  035C  2B26               	goto	l5559
 11167  035D                     l5575:	
 11168  035D  0853               	movf	(sprintf@exp+1)^(0+128),w
 11169  035E  3A80               	xorlw	128
 11170  035F  00FF               	movwf	127
 11171  0360  3080               	movlw	128
 11172  0361  027F               	subwf	127,w
 11173  0362  1D03               	skipz
 11174  0363  2B66               	goto	u6325
 11175  0364  3001               	movlw	1
 11176  0365  0252               	subwf	sprintf@exp^(0+128),w
 11177  0366                     u6325:	
 11178  0366  1C03               	btfss	3,0
 11179  0367  2B71               	goto	l5577
 11180                           
 11181                           ;doprnt.c: 1208: ((*sp++ = ('0')));
 11182  0368  1683               	bsf	3,5	;RP0=1, select bank1
 11183  0369  1303               	bcf	3,6	;RP1=0, select bank1
 11184  036A  27C2  120A  118A   	fcall	PL66	;call to abstracted procedure
 11185                           
 11186                           ;doprnt.c: 1209: exp--;
 11187  036D  07D2               	addwf	sprintf@exp^(0+128),f
 11188  036E  1C03               	skipc
 11189  036F  03D3               	decf	(sprintf@exp+1)^(0+128),f
 11190  0370  2B5D               	goto	l5575
 11191  0371                     l5577:	
 11192                           
 11193                           ;doprnt.c: 1210: }
 11194                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 11195  0371  1683               	bsf	3,5	;RP0=1, select bank1
 11196  0372  1303               	bcf	3,6	;RP1=0, select bank1
 11197  0373  0855               	movf	(sprintf@prec+1)^(0+128),w
 11198  0374  3A80               	xorlw	128
 11199  0375  00FF               	movwf	127
 11200  0376  3080               	movlw	128
 11201  0377  027F               	subwf	127,w
 11202  0378  1D03               	skipz
 11203  0379  2B7C               	goto	u6335
 11204  037A  3009               	movlw	9
 11205  037B  0254               	subwf	sprintf@prec^(0+128),w
 11206  037C                     u6335:	
 11207  037C  1C03               	skipc
 11208  037D  2B82               	goto	l5581
 11209                           
 11210                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 11211  037E  3008               	movlw	8
 11212  037F  1683               	bsf	3,5	;RP0=1, select bank1
 11213  0380  1303               	bcf	3,6	;RP1=0, select bank1
 11214  0381  2B85               	goto	L14
 11215  0382                     l5581:	
 11216                           
 11217                           ;doprnt.c: 1213: else
 11218                           ;doprnt.c: 1214: c = prec;
 11219  0382  1683               	bsf	3,5	;RP0=1, select bank1
 11220  0383  1303               	bcf	3,6	;RP1=0, select bank1
 11221  0384  0854               	movf	sprintf@prec^(0+128),w
 11222  0385                     L14:	
 11223  0385  00DA               	movwf	sprintf@c^(0+128)
 11224                           
 11225                           ;doprnt.c: 1215: prec -= c;
 11226  0386  27CA  120A  118A   	fcall	PL80	;call to abstracted procedure
 11227  0389  02D4               	subwf	sprintf@prec^(0+128),f
 11228  038A  1283               	bcf	3,5	;RP0=0, select bank0
 11229  038B  085A               	movf	??_sprintf+1,w
 11230  038C  1683               	bsf	3,5	;RP0=1, select bank1
 11231  038D  1C03               	skipc
 11232  038E  03D5               	decf	(sprintf@prec+1)^(0+128),f
 11233  038F  02D5               	subwf	(sprintf@prec+1)^(0+128),f
 11234                           
 11235                           ;doprnt.c: 1219: if(c)
 11236  0390  085A               	movf	sprintf@c^(0+128),w
 11237  0391  1903               	btfsc	3,2
 11238  0392  2B99               	goto	l5589
 11239                           
 11240                           ;doprnt.c: 1221: ((*sp++ = ('.')));
 11241  0393  0856               	movf	sprintf@sp^(0+128),w
 11242  0394  0084               	movwf	4
 11243  0395  302E               	movlw	46
 11244  0396  1383               	bcf	3,7	;select IRP bank0
 11245  0397  0080               	movwf	0
 11246  0398  0AD6               	incf	sprintf@sp^(0+128),f
 11247  0399                     l5589:	
 11248                           
 11249                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11250  0399  085A               	movf	sprintf@c^(0+128),w
 11251  039A  160A  118A  248E  120A  118A  	fcall	_scale
 11252  039F  0837               	movf	?_scale,w
 11253  03A0  1683               	bsf	3,5	;RP0=1, select bank1
 11254  03A1  00C4               	movwf	_sprintf$1263^(0+128)
 11255  03A2  1283               	bcf	3,5	;RP0=0, select bank0
 11256  03A3  0838               	movf	?_scale+1,w
 11257  03A4  1683               	bsf	3,5	;RP0=1, select bank1
 11258  03A5  00C5               	movwf	(_sprintf$1263+1)^(0+128)
 11259  03A6  1283               	bcf	3,5	;RP0=0, select bank0
 11260  03A7  0839               	movf	?_scale+2,w
 11261  03A8  1683               	bsf	3,5	;RP0=1, select bank1
 11262  03A9  00C6               	movwf	(_sprintf$1263+2)^(0+128)
 11263                           
 11264                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 11265  03AA  0844               	movf	_sprintf$1263^(0+128),w
 11266  03AB  1283               	bcf	3,5	;RP0=0, select bank0
 11267  03AC  00AB               	movwf	___ftmul@f2
 11268  03AD  1683               	bsf	3,5	;RP0=1, select bank1
 11269  03AE  0845               	movf	(_sprintf$1263+1)^(0+128),w
 11270  03AF  1283               	bcf	3,5	;RP0=0, select bank0
 11271  03B0  00AC               	movwf	___ftmul@f2+1
 11272  03B1  1683               	bsf	3,5	;RP0=1, select bank1
 11273  03B2  0846               	movf	(_sprintf$1263+2)^(0+128),w
 11274  03B3  1283               	bcf	3,5	;RP0=0, select bank0
 11275  03B4  00AD               	movwf	___ftmul@f2+2
 11276  03B5  1683               	bsf	3,5	;RP0=1, select bank1
 11277  03B6  0857               	movf	sprintf@fval^(0+128),w
 11278  03B7  27B7               	fcall	PL50	;call to abstracted procedure
 11279  03B8  160A  118A  26AA  120A  118A  	fcall	___ftmul
 11280  03BD  0828               	movf	?___ftmul,w
 11281  03BE  00C2               	movwf	___fttol@f1
 11282  03BF  0829               	movf	?___ftmul+1,w
 11283  03C0  00C3               	movwf	___fttol@f1+1
 11284  03C1  082A               	movf	?___ftmul+2,w
 11285  03C2  00C4               	movwf	___fttol@f1+2
 11286  03C3  24B7  120A  118A   	fcall	___fttol
 11287  03C6  2761  120A  118A   	fcall	PL14	;call to abstracted procedure
 11288  03C9  2C35               	goto	L15
 11289  03CA                     l5593:	
 11290                           ;doprnt.c: 1228: while(c--) {
 11291                           
 11292                           
 11293                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 11294  03CA  085A               	movf	sprintf@c^(0+128),w
 11295  03CB  1283               	bcf	3,5	;RP0=0, select bank0
 11296  03CC  00D9               	movwf	??_sprintf
 11297  03CD  3001               	movlw	1
 11298  03CE  1003               	clrc
 11299  03CF                     L11:	
 11300  03CF  0DD9               	rlf	??_sprintf,f
 11301  03D0  3EFF               	addlw	-1
 11302  03D1  1003               	clrc
 11303  03D2  1D03               	skipz
 11304  03D3  2BCF               	goto	L11
 11305  03D4  278B               	fcall	PL38	;call to abstracted procedure
 11306  03D5  160A  158A  2000  120A  118A  	fcall	stringtab
 11307  03DA  00F2               	movwf	___lldiv@divisor
 11308  03DB  160A  158A  2000  120A  118A  	fcall	stringtab
 11309  03E0  00F3               	movwf	___lldiv@divisor+1
 11310  03E1  160A  158A  2000  120A  118A  	fcall	stringtab
 11311  03E6  00F4               	movwf	___lldiv@divisor+2
 11312  03E7  160A  158A  2000  120A  118A  	fcall	stringtab
 11313  03EC  27AC  120A  118A   	fcall	PL46	;call to abstracted procedure
 11314  03EF  2551  120A  118A   	fcall	___lldiv
 11315                           
 11316                           ;doprnt.c: 1230: tmpval.vd %= 10;
 11317  03F2  273E  120A  118A   	fcall	PL2	;call to abstracted procedure
 11318  03F5  2512  120A  118A   	fcall	___llmod
 11319                           
 11320                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
 11321  03F8  2770  120A  118A   	fcall	PL22	;call to abstracted procedure
 11322  03FB  1383               	bcf	3,7	;select IRP bank0
 11323  03FC  0080               	movwf	0
 11324  03FD  0AD6               	incf	sprintf@sp^(0+128),f
 11325                           
 11326                           ;doprnt.c: 1232: val %= dpowers[c];
 11327  03FE  085A               	movf	sprintf@c^(0+128),w
 11328  03FF  1283               	bcf	3,5	;RP0=0, select bank0
 11329  0400  00D9               	movwf	??_sprintf
 11330  0401  3001               	movlw	1
 11331  0402  1003               	clrc
 11332  0403                     L12:	
 11333  0403  0DD9               	rlf	??_sprintf,f
 11334  0404  3EFF               	addlw	-1
 11335  0405  1003               	clrc
 11336  0406  1D03               	skipz
 11337  0407  2C03               	goto	L12
 11338  0408  278B               	fcall	PL38	;call to abstracted procedure
 11339  0409  160A  158A  2000  120A  118A  	fcall	stringtab
 11340  040E  00F2               	movwf	___llmod@divisor
 11341  040F  160A  158A  2000  120A  118A  	fcall	stringtab
 11342  0414  00F3               	movwf	___llmod@divisor+1
 11343  0415  160A  158A  2000  120A  118A  	fcall	stringtab
 11344  041A  00F4               	movwf	___llmod@divisor+2
 11345  041B  160A  158A  2000  120A  118A  	fcall	stringtab
 11346  0420  00F5               	movwf	___llmod@divisor+3
 11347  0421  1683               	bsf	3,5	;RP0=1, select bank1
 11348  0422  084D               	movf	(sprintf@val+3)^(0+128),w
 11349  0423  00F9               	movwf	___llmod@dividend+3
 11350  0424  084C               	movf	(sprintf@val+2)^(0+128),w
 11351  0425  00F8               	movwf	___llmod@dividend+2
 11352  0426  084B               	movf	(sprintf@val+1)^(0+128),w
 11353  0427  00F7               	movwf	___llmod@dividend+1
 11354  0428  084A               	movf	sprintf@val^(0+128),w
 11355  0429  00F6               	movwf	___llmod@dividend
 11356  042A  2512  120A  118A   	fcall	___llmod
 11357  042D  0875               	movf	?___llmod+3,w
 11358  042E  1683               	bsf	3,5	;RP0=1, select bank1
 11359  042F  00CD               	movwf	(sprintf@val+3)^(0+128)
 11360  0430  0874               	movf	?___llmod+2,w
 11361  0431  00CC               	movwf	(sprintf@val+2)^(0+128)
 11362  0432  0873               	movf	?___llmod+1,w
 11363  0433  00CB               	movwf	(sprintf@val+1)^(0+128)
 11364  0434  0872               	movf	?___llmod,w
 11365  0435                     L15:	
 11366  0435  00CA               	movwf	sprintf@val^(0+128)
 11367  0436  03DA               	decf	sprintf@c^(0+128),f
 11368  0437  0F5A               	incfsz	sprintf@c^(0+128),w
 11369  0438  2BCA               	goto	l5593
 11370  0439                     l5611:	
 11371  0439  0854               	movf	sprintf@prec^(0+128),w
 11372  043A  0455               	iorwf	(sprintf@prec+1)^(0+128),w
 11373  043B  1903               	btfsc	3,2
 11374  043C  28AA               	goto	l5633
 11375                           
 11376                           ;doprnt.c: 1236: ((*sp++ = ('0')));
 11377  043D  27C2  120A  118A   	fcall	PL66	;call to abstracted procedure
 11378                           
 11379                           ;doprnt.c: 1237: prec--;
 11380  0440  07D4               	addwf	sprintf@prec^(0+128),f
 11381  0441  1C03               	skipc
 11382  0442  03D5               	decf	(sprintf@prec+1)^(0+128),f
 11383  0443  2C39               	goto	l5611
 11384  0444                     l5613:	
 11385                           
 11386                           ;doprnt.c: 1246: }
 11387                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 11388  0444  1683               	bsf	3,5	;RP0=1, select bank1
 11389  0445  0854               	movf	sprintf@prec^(0+128),w
 11390  0446  0455               	iorwf	(sprintf@prec+1)^(0+128),w
 11391  0447  1D03               	btfss	3,2
 11392  0448  2C51               	goto	l5619
 11393  0449  084D               	movf	(sprintf@val+3)^(0+128),w
 11394  044A  044C               	iorwf	(sprintf@val+2)^(0+128),w
 11395  044B  044B               	iorwf	(sprintf@val+1)^(0+128),w
 11396  044C  044A               	iorwf	sprintf@val^(0+128),w
 11397  044D  1903               	btfsc	3,2
 11398                           
 11399                           ;doprnt.c: 1291: prec++;
 11400  044E  0AD4               	incf	sprintf@prec^(0+128),f
 11401  044F  1903               	skipnz
 11402  0450  0AD5               	incf	(sprintf@prec+1)^(0+128),f
 11403  0451                     l5619:	
 11404                           
 11405                           ;doprnt.c: 1339: if(c < prec)
 11406  0451  085A               	movf	sprintf@c^(0+128),w
 11407  0452  1283               	bcf	3,5	;RP0=0, select bank0
 11408  0453  00D9               	movwf	??_sprintf
 11409  0454  01DA               	clrf	??_sprintf+1
 11410  0455  1BD9               	btfsc	??_sprintf,7
 11411  0456  03DA               	decf	??_sprintf+1,f
 11412  0457  085A               	movf	??_sprintf+1,w
 11413  0458  3A80               	xorlw	128
 11414  0459  00DB               	movwf	??_sprintf+2
 11415  045A  1683               	bsf	3,5	;RP0=1, select bank1
 11416  045B  0855               	movf	(sprintf@prec+1)^(0+128),w
 11417  045C  3A80               	xorlw	128
 11418  045D  1283               	bcf	3,5	;RP0=0, select bank0
 11419  045E  025B               	subwf	??_sprintf+2,w
 11420  045F  1D03               	skipz
 11421  0460  2C65               	goto	u6415
 11422  0461  1683               	bsf	3,5	;RP0=1, select bank1
 11423  0462  0854               	movf	sprintf@prec^(0+128),w
 11424  0463  1283               	bcf	3,5	;RP0=0, select bank0
 11425  0464  0259               	subwf	??_sprintf,w
 11426  0465                     u6415:	
 11427  0465  1C03               	btfss	3,0
 11428  0466  2C79               	goto	l5627
 11429                           
 11430                           ;doprnt.c: 1341: else if(prec < c)
 11431  0467  1683               	bsf	3,5	;RP0=1, select bank1
 11432  0468  1303               	bcf	3,6	;RP1=0, select bank1
 11433  0469  085A               	movf	sprintf@c^(0+128),w
 11434  046A  27CA  120A  118A   	fcall	PL80	;call to abstracted procedure
 11435  046D  0855               	movf	(sprintf@prec+1)^(0+128),w
 11436  046E  3A80               	xorlw	128
 11437  046F  1283               	bcf	3,5	;RP0=0, select bank0
 11438  0470  00DB               	movwf	??_sprintf+2
 11439  0471  085A               	movf	??_sprintf+1,w
 11440  0472  3A80               	xorlw	128
 11441  0473  025B               	subwf	??_sprintf+2,w
 11442  0474  1D03               	skipz
 11443  0475  2C79               	goto	l5627
 11444  0476  0859               	movf	??_sprintf,w
 11445  0477  1683               	bsf	3,5	;RP0=1, select bank1
 11446  0478  0254               	subwf	sprintf@prec^(0+128),w
 11447  0479                     l5627:	
 11448                           
 11449                           ;doprnt.c: 1422: {
 11450                           ;doprnt.c: 1438: if(flag & 0x03)
 11451  0479  1683               	bsf	3,5	;RP0=1, select bank1
 11452  047A  1303               	bcf	3,6	;RP1=0, select bank1
 11453  047B  0848               	movf	sprintf@flag^(0+128),w
 11454  047C  3903               	andlw	3
 11455  047D  1903               	btfsc	3,2
 11456  047E  28AA               	goto	l5633
 11457                           
 11458                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 11459  047F  0856               	movf	sprintf@sp^(0+128),w
 11460  0480  0084               	movwf	4
 11461  0481  302D               	movlw	45
 11462  0482                     L16:	
 11463  0482  1383               	bcf	3,7	;select IRP bank0
 11464  0483  0080               	movwf	0
 11465  0484  0AD6               	incf	sprintf@sp^(0+128),f
 11466  0485  28AA               	goto	l5633
 11467  0486                     l5635:	
 11468                           
 11469                           ;doprnt.c: 1538: *sp = 0;
 11470  0486  0856               	movf	sprintf@sp^(0+128),w
 11471  0487  0084               	movwf	4
 11472  0488  1383               	bcf	3,7	;select IRP bank0
 11473  0489  0180               	clrf	0
 11474  048A  0008               	return
 11475  048B                     __end_of_sprintf:	
 11476  048B                     __ptext60:	
 11477 ;; *************** function ___ftge *****************
 11478 ;; Defined at:
 11479 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftge.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  ff1             3   46[BANK0 ] float 
 11482 ;;  ff2             3   49[BANK0 ] float 
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;		None               void
 11487 ;; Registers used:
 11488 ;;		wreg, status,2, status,0
 11489 ;; Tracked objects:
 11490 ;;		On entry : 300/0
 11491 ;;		On exit  : 300/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11494 ;;      Params:         0       6       0       0       0
 11495 ;;      Locals:         0       0       0       0       0
 11496 ;;      Temps:          0       0       0       0       0
 11497 ;;      Totals:         0       6       0       0       0
 11498 ;;Total ram usage:        6 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    1
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_calcSHT71
 11505 ;;		_regulacija
 11506 ;;		_menuHumi
 11507 ;;		_menu
 11508 ;;		_sprintf
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           
 11513                           ;psect for function ___ftge
 11514  048B                     ___ftge:	
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 11518  048B  1FD0               	btfss	___ftge@ff1+2,7
 11519  048C  2C9A               	goto	l3719
 11520  048D  084E               	movf	___ftge@ff1,w
 11521  048E  3C00               	sublw	0
 11522  048F  00CE               	movwf	___ftge@ff1
 11523  0490  084F               	movf	___ftge@ff1+1,w
 11524  0491  1C03               	skipc
 11525  0492  0F4F               	incfsz	___ftge@ff1+1,w
 11526  0493  3C00               	sublw	0
 11527  0494  00CF               	movwf	___ftge@ff1+1
 11528  0495  0850               	movf	___ftge@ff1+2,w
 11529  0496  1C03               	skipc
 11530  0497  0F50               	incfsz	___ftge@ff1+2,w
 11531  0498  3C80               	sublw	128
 11532  0499  00D0               	movwf	___ftge@ff1+2
 11533  049A                     l3719:	
 11534  049A  1FD3               	btfss	___ftge@ff2+2,7
 11535  049B  2CA9               	goto	l3723
 11536  049C  0851               	movf	___ftge@ff2,w
 11537  049D  3C00               	sublw	0
 11538  049E  00D1               	movwf	___ftge@ff2
 11539  049F  0852               	movf	___ftge@ff2+1,w
 11540  04A0  1C03               	skipc
 11541  04A1  0F52               	incfsz	___ftge@ff2+1,w
 11542  04A2  3C00               	sublw	0
 11543  04A3  00D2               	movwf	___ftge@ff2+1
 11544  04A4  0853               	movf	___ftge@ff2+2,w
 11545  04A5  1C03               	skipc
 11546  04A6  0F53               	incfsz	___ftge@ff2+2,w
 11547  04A7  3C80               	sublw	128
 11548  04A8  00D3               	movwf	___ftge@ff2+2
 11549  04A9                     l3723:	
 11550  04A9  3080               	movlw	128
 11551  04AA  06D0               	xorwf	___ftge@ff1+2,f
 11552  04AB  06D3               	xorwf	___ftge@ff2+2,f
 11553  04AC  0853               	movf	___ftge@ff2+2,w
 11554  04AD  0250               	subwf	___ftge@ff1+2,w
 11555  04AE  1D03               	skipz
 11556  04AF  0008               	return
 11557  04B0  0852               	movf	___ftge@ff2+1,w
 11558  04B1  024F               	subwf	___ftge@ff1+1,w
 11559  04B2  1D03               	skipz
 11560  04B3  0008               	return
 11561  04B4  0851               	movf	___ftge@ff2,w
 11562  04B5  024E               	subwf	___ftge@ff1,w
 11563  04B6  0008               	return
 11564  04B7                     __end_of___ftge:	
 11565  04B7                     __ptext55:	
 11566 ;; *************** function ___fttol *****************
 11567 ;; Defined at:
 11568 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\fttol.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;  f1              3   34[BANK0 ] float 
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;  lval            4   42[BANK0 ] unsigned long 
 11573 ;;  exp1            1   46[BANK0 ] unsigned char 
 11574 ;;  sign1           1   41[BANK0 ] unsigned char 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  4   34[BANK0 ] long 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0
 11579 ;; Tracked objects:
 11580 ;;		On entry : 300/0
 11581 ;;		On exit  : 300/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11584 ;;      Params:         0       4       0       0       0
 11585 ;;      Locals:         0       6       0       0       0
 11586 ;;      Temps:          0       3       0       0       0
 11587 ;;      Totals:         0      13       0       0       0
 11588 ;;Total ram usage:       13 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    1
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_sprintf
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           
 11599                           ;psect for function ___fttol
 11600  04B7                     ___fttol:	
 11601                           
 11602                           ;incstack = 0
 11603                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11604  04B7  27D1  120A  118A   	fcall	PL82	;call to abstracted procedure
 11605  04BA  1003               	clrc
 11606  04BB  0D47               	rlf	??___fttol+1,w
 11607  04BC  0D48               	rlf	??___fttol+2,w
 11608  04BD  00CE               	movwf	___fttol@exp1
 11609  04BE  084E               	movf	___fttol@exp1,w
 11610  04BF  1D03               	btfss	3,2
 11611  04C0  2CC6               	goto	l3755
 11612  04C1                     l3753:	
 11613  04C1  01C2               	clrf	?___fttol
 11614  04C2  01C3               	clrf	?___fttol+1
 11615  04C3  01C4               	clrf	?___fttol+2
 11616  04C4  01C5               	clrf	?___fttol+3
 11617  04C5  0008               	return
 11618  04C6                     l3755:	
 11619  04C6  27D1  120A  118A   	fcall	PL82	;call to abstracted procedure
 11620  04C9  3017               	movlw	23
 11621  04CA                     u3885:	
 11622  04CA  1003               	clrc
 11623  04CB  0CC8               	rrf	??___fttol+2,f
 11624  04CC  0CC7               	rrf	??___fttol+1,f
 11625  04CD  0CC6               	rrf	??___fttol,f
 11626  04CE  3EFF               	addlw	-1
 11627  04CF  1D03               	skipz
 11628  04D0  2CCA               	goto	u3885
 11629  04D1  0846               	movf	??___fttol,w
 11630  04D2  00C9               	movwf	___fttol@sign1
 11631  04D3  17C3               	bsf	___fttol@f1+1,7
 11632  04D4  01C4               	clrf	___fttol@f1+2
 11633  04D5  0842               	movf	___fttol@f1,w
 11634  04D6  00CA               	movwf	___fttol@lval
 11635  04D7  0843               	movf	___fttol@f1+1,w
 11636  04D8  00CB               	movwf	___fttol@lval+1
 11637  04D9  0844               	movf	___fttol@f1+2,w
 11638  04DA  00CC               	movwf	___fttol@lval+2
 11639  04DB  308E               	movlw	142
 11640  04DC  01CD               	clrf	___fttol@lval+3
 11641  04DD  02CE               	subwf	___fttol@exp1,f
 11642  04DE  1FCE               	btfss	___fttol@exp1,7
 11643  04DF  2CED               	goto	l3775
 11644  04E0  084E               	movf	___fttol@exp1,w
 11645  04E1  3A80               	xorlw	128
 11646  04E2  3E8F               	addlw	143
 11647  04E3  1C03               	btfss	3,0
 11648  04E4  2CC1               	goto	l3753
 11649  04E5                     l3771:	
 11650  04E5  1003               	clrc
 11651  04E6  0CCD               	rrf	___fttol@lval+3,f
 11652  04E7  0CCC               	rrf	___fttol@lval+2,f
 11653  04E8  0CCB               	rrf	___fttol@lval+1,f
 11654  04E9  0CCA               	rrf	___fttol@lval,f
 11655  04EA  0FCE               	incfsz	___fttol@exp1,f
 11656  04EB  2CE5               	goto	l3771
 11657  04EC  2CFB               	goto	l3783
 11658  04ED                     l3775:	
 11659  04ED  3018               	movlw	24
 11660  04EE  024E               	subwf	___fttol@exp1,w
 11661  04EF  1803               	btfsc	3,0
 11662  04F0  2CC1               	goto	l3753
 11663  04F1                     l3781:	
 11664  04F1  084E               	movf	___fttol@exp1,w
 11665  04F2  1903               	btfsc	3,2
 11666  04F3  2CFB               	goto	l3783
 11667  04F4  1003               	clrc
 11668  04F5  0DCA               	rlf	___fttol@lval,f
 11669  04F6  0DCB               	rlf	___fttol@lval+1,f
 11670  04F7  0DCC               	rlf	___fttol@lval+2,f
 11671  04F8  0DCD               	rlf	___fttol@lval+3,f
 11672  04F9  03CE               	decf	___fttol@exp1,f
 11673  04FA  2CF1               	goto	l3781
 11674  04FB                     l3783:	
 11675  04FB  0849               	movf	___fttol@sign1,w
 11676  04FC  1903               	btfsc	3,2
 11677  04FD  2D09               	goto	l3787
 11678  04FE  09CA               	comf	___fttol@lval,f
 11679  04FF  09CB               	comf	___fttol@lval+1,f
 11680  0500  09CC               	comf	___fttol@lval+2,f
 11681  0501  09CD               	comf	___fttol@lval+3,f
 11682  0502  0ACA               	incf	___fttol@lval,f
 11683  0503  1903               	skipnz
 11684  0504  0ACB               	incf	___fttol@lval+1,f
 11685  0505  1903               	skipnz
 11686  0506  0ACC               	incf	___fttol@lval+2,f
 11687  0507  1903               	skipnz
 11688  0508  0ACD               	incf	___fttol@lval+3,f
 11689  0509                     l3787:	
 11690  0509  084D               	movf	___fttol@lval+3,w
 11691  050A  00C5               	movwf	?___fttol+3
 11692  050B  084C               	movf	___fttol@lval+2,w
 11693  050C  00C4               	movwf	?___fttol+2
 11694  050D  084B               	movf	___fttol@lval+1,w
 11695  050E  00C3               	movwf	?___fttol+1
 11696  050F  084A               	movf	___fttol@lval,w
 11697  0510  00C2               	movwf	?___fttol
 11698  0511  0008               	return
 11699  0512                     __end_of___fttol:	
 11700  0512                     __ptext54:	
 11701 ;; *************** function ___llmod *****************
 11702 ;; Defined at:
 11703 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\llmod.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;  divisor         4    2[COMMON] unsigned long 
 11706 ;;  dividend        4    6[COMMON] unsigned long 
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  counter         1    0[BANK0 ] unsigned char 
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  4    2[COMMON] unsigned long 
 11711 ;; Registers used:
 11712 ;;		wreg, status,2, status,0
 11713 ;; Tracked objects:
 11714 ;;		On entry : 300/100
 11715 ;;		On exit  : 200/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11718 ;;      Params:         8       0       0       0       0
 11719 ;;      Locals:         0       1       0       0       0
 11720 ;;      Temps:          0       0       0       0       0
 11721 ;;      Totals:         8       1       0       0       0
 11722 ;;Total ram usage:        9 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    1
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_sprintf
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function ___llmod
 11734  0512                     ___llmod:	
 11735                           
 11736                           ;incstack = 0
 11737                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 11738  0512  0875               	movf	___llmod@divisor+3,w
 11739  0513  0474               	iorwf	___llmod@divisor+2,w
 11740  0514  0473               	iorwf	___llmod@divisor+1,w
 11741  0515  0472               	iorwf	___llmod@divisor,w
 11742  0516  1903               	skipnz
 11743  0517  2D48               	goto	l5415
 11744  0518  1283               	bcf	3,5	;RP0=0, select bank0
 11745  0519  01A0               	clrf	___llmod@counter
 11746  051A                     L25:	
 11747  051A  0AA0               	incf	___llmod@counter,f
 11748  051B  1BF5               	btfsc	___llmod@divisor+3,7
 11749  051C  2D23               	goto	l5407
 11750  051D  1003               	clrc
 11751  051E  0DF2               	rlf	___llmod@divisor,f
 11752  051F  0DF3               	rlf	___llmod@divisor+1,f
 11753  0520  0DF4               	rlf	___llmod@divisor+2,f
 11754  0521  0DF5               	rlf	___llmod@divisor+3,f
 11755  0522  2D1A               	goto	L25
 11756  0523                     l5407:	
 11757  0523  0875               	movf	___llmod@divisor+3,w
 11758  0524  0279               	subwf	___llmod@dividend+3,w
 11759  0525  1D03               	skipz
 11760  0526  2D31               	goto	u6065
 11761  0527  0874               	movf	___llmod@divisor+2,w
 11762  0528  0278               	subwf	___llmod@dividend+2,w
 11763  0529  1D03               	skipz
 11764  052A  2D31               	goto	u6065
 11765  052B  0873               	movf	___llmod@divisor+1,w
 11766  052C  0277               	subwf	___llmod@dividend+1,w
 11767  052D  1D03               	skipz
 11768  052E  2D31               	goto	u6065
 11769  052F  0872               	movf	___llmod@divisor,w
 11770  0530  0276               	subwf	___llmod@dividend,w
 11771  0531                     u6065:	
 11772  0531  1C03               	skipc
 11773  0532  2D42               	goto	L26
 11774  0533  0872               	movf	___llmod@divisor,w
 11775  0534  02F6               	subwf	___llmod@dividend,f
 11776  0535  0873               	movf	___llmod@divisor+1,w
 11777  0536  1C03               	skipc
 11778  0537  0F73               	incfsz	___llmod@divisor+1,w
 11779  0538  02F7               	subwf	___llmod@dividend+1,f
 11780  0539  0874               	movf	___llmod@divisor+2,w
 11781  053A  1C03               	skipc
 11782  053B  0F74               	incfsz	___llmod@divisor+2,w
 11783  053C  02F8               	subwf	___llmod@dividend+2,f
 11784  053D  0875               	movf	___llmod@divisor+3,w
 11785  053E  1C03               	skipc
 11786  053F  0F75               	incfsz	___llmod@divisor+3,w
 11787  0540  02F9               	subwf	___llmod@dividend+3,f
 11788  0541  1003               	clrc
 11789  0542                     L26:	
 11790  0542  0CF5               	rrf	___llmod@divisor+3,f
 11791  0543  0CF4               	rrf	___llmod@divisor+2,f
 11792  0544  0CF3               	rrf	___llmod@divisor+1,f
 11793  0545  0CF2               	rrf	___llmod@divisor,f
 11794  0546  0BA0               	decfsz	___llmod@counter,f
 11795  0547  2D23               	goto	l5407
 11796  0548                     l5415:	
 11797  0548  0879               	movf	___llmod@dividend+3,w
 11798  0549  00F5               	movwf	?___llmod+3
 11799  054A  0878               	movf	___llmod@dividend+2,w
 11800  054B  00F4               	movwf	?___llmod+2
 11801  054C  0877               	movf	___llmod@dividend+1,w
 11802  054D  00F3               	movwf	?___llmod+1
 11803  054E  0876               	movf	___llmod@dividend,w
 11804  054F  00F2               	movwf	?___llmod
 11805  0550  0008               	return
 11806  0551                     __end_of___llmod:	
 11807  0551                     __ptext66:	
 11808 ;; *************** function ___lldiv *****************
 11809 ;; Defined at:
 11810 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lldiv.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;  divisor         4    2[COMMON] unsigned long 
 11813 ;;  dividend        4    6[COMMON] unsigned long 
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  quotient        4    0[BANK0 ] unsigned long 
 11816 ;;  counter         1    4[BANK0 ] unsigned char 
 11817 ;; Return value:  Size  Location     Type
 11818 ;;                  4    2[COMMON] unsigned long 
 11819 ;; Registers used:
 11820 ;;		wreg, status,2, status,0
 11821 ;; Tracked objects:
 11822 ;;		On entry : 200/100
 11823 ;;		On exit  : 300/0
 11824 ;;		Unchanged: 0/0
 11825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11826 ;;      Params:         8       0       0       0       0
 11827 ;;      Locals:         0       5       0       0       0
 11828 ;;      Temps:          0       0       0       0       0
 11829 ;;      Totals:         8       5       0       0       0
 11830 ;;Total ram usage:       13 bytes
 11831 ;; Hardware stack levels used:    1
 11832 ;; Hardware stack levels required when called:    1
 11833 ;; This function calls:
 11834 ;;		Nothing
 11835 ;; This function is called by:
 11836 ;;		_UARTInit
 11837 ;;		_sprintf
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           
 11842                           ;psect for function ___lldiv
 11843  0551                     ___lldiv:	
 11844                           
 11845                           ;incstack = 0
 11846                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11847  0551  1283               	bcf	3,5	;RP0=0, select bank0
 11848  0552  01A0               	clrf	___lldiv@quotient
 11849  0553  01A1               	clrf	___lldiv@quotient+1
 11850  0554  01A2               	clrf	___lldiv@quotient+2
 11851  0555  01A3               	clrf	___lldiv@quotient+3
 11852  0556  0875               	movf	___lldiv@divisor+3,w
 11853  0557  0474               	iorwf	___lldiv@divisor+2,w
 11854  0558  0473               	iorwf	___lldiv@divisor+1,w
 11855  0559  0472               	iorwf	___lldiv@divisor,w
 11856  055A  1903               	skipnz
 11857  055B  2D91               	goto	l3813
 11858  055C  01A4               	clrf	___lldiv@counter
 11859  055D                     L29:	
 11860  055D  0AA4               	incf	___lldiv@counter,f
 11861  055E  1BF5               	btfsc	___lldiv@divisor+3,7
 11862  055F  2D66               	goto	l3801
 11863  0560  1003               	clrc
 11864  0561  0DF2               	rlf	___lldiv@divisor,f
 11865  0562  0DF3               	rlf	___lldiv@divisor+1,f
 11866  0563  0DF4               	rlf	___lldiv@divisor+2,f
 11867  0564  0DF5               	rlf	___lldiv@divisor+3,f
 11868  0565  2D5D               	goto	L29
 11869  0566                     l3801:	
 11870  0566  1003               	clrc
 11871  0567  0DA0               	rlf	___lldiv@quotient,f
 11872  0568  0DA1               	rlf	___lldiv@quotient+1,f
 11873  0569  0DA2               	rlf	___lldiv@quotient+2,f
 11874  056A  0DA3               	rlf	___lldiv@quotient+3,f
 11875  056B  0875               	movf	___lldiv@divisor+3,w
 11876  056C  0279               	subwf	___lldiv@dividend+3,w
 11877  056D  1D03               	skipz
 11878  056E  2D79               	goto	u3975
 11879  056F  0874               	movf	___lldiv@divisor+2,w
 11880  0570  0278               	subwf	___lldiv@dividend+2,w
 11881  0571  1D03               	skipz
 11882  0572  2D79               	goto	u3975
 11883  0573  0873               	movf	___lldiv@divisor+1,w
 11884  0574  0277               	subwf	___lldiv@dividend+1,w
 11885  0575  1D03               	skipz
 11886  0576  2D79               	goto	u3975
 11887  0577  0872               	movf	___lldiv@divisor,w
 11888  0578  0276               	subwf	___lldiv@dividend,w
 11889  0579                     u3975:	
 11890  0579  1C03               	skipc
 11891  057A  2D8B               	goto	L30
 11892  057B  0872               	movf	___lldiv@divisor,w
 11893  057C  02F6               	subwf	___lldiv@dividend,f
 11894  057D  0873               	movf	___lldiv@divisor+1,w
 11895  057E  1C03               	skipc
 11896  057F  0F73               	incfsz	___lldiv@divisor+1,w
 11897  0580  02F7               	subwf	___lldiv@dividend+1,f
 11898  0581  0874               	movf	___lldiv@divisor+2,w
 11899  0582  1C03               	skipc
 11900  0583  0F74               	incfsz	___lldiv@divisor+2,w
 11901  0584  02F8               	subwf	___lldiv@dividend+2,f
 11902  0585  0875               	movf	___lldiv@divisor+3,w
 11903  0586  1C03               	skipc
 11904  0587  0F75               	incfsz	___lldiv@divisor+3,w
 11905  0588  02F9               	subwf	___lldiv@dividend+3,f
 11906  0589  1420               	bsf	___lldiv@quotient,0
 11907  058A  1003               	clrc
 11908  058B                     L30:	
 11909  058B  0CF5               	rrf	___lldiv@divisor+3,f
 11910  058C  0CF4               	rrf	___lldiv@divisor+2,f
 11911  058D  0CF3               	rrf	___lldiv@divisor+1,f
 11912  058E  0CF2               	rrf	___lldiv@divisor,f
 11913  058F  0BA4               	decfsz	___lldiv@counter,f
 11914  0590  2D66               	goto	l3801
 11915  0591                     l3813:	
 11916  0591  0823               	movf	___lldiv@quotient+3,w
 11917  0592  00F5               	movwf	?___lldiv+3
 11918  0593  0822               	movf	___lldiv@quotient+2,w
 11919  0594  00F4               	movwf	?___lldiv+2
 11920  0595  0821               	movf	___lldiv@quotient+1,w
 11921  0596  00F3               	movwf	?___lldiv+1
 11922  0597  0820               	movf	___lldiv@quotient,w
 11923  0598  00F2               	movwf	?___lldiv
 11924  0599  0008               	return
 11925  059A                     __end_of___lldiv:	
 11926  059A                     __ptext52:	
 11927 ;; *************** function ___wmul *****************
 11928 ;; Defined at:
 11929 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;  multiplier      2    2[COMMON] unsigned int 
 11932 ;;  multiplicand    2    4[COMMON] unsigned int 
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;  product         2    6[COMMON] unsigned int 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  2    2[COMMON] unsigned int 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2, status,0
 11939 ;; Tracked objects:
 11940 ;;		On entry : 200/0
 11941 ;;		On exit  : 200/0
 11942 ;;		Unchanged: 200/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11944 ;;      Params:         4       0       0       0       0
 11945 ;;      Locals:         2       0       0       0       0
 11946 ;;      Temps:          0       0       0       0       0
 11947 ;;      Totals:         6       0       0       0       0
 11948 ;;Total ram usage:        6 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    1
 11951 ;; This function calls:
 11952 ;;		Nothing
 11953 ;; This function is called by:
 11954 ;;		_LcdWriteInt
 11955 ;;		_measureTGS4161
 11956 ;;		_sprintf
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function ___wmul
 11962  059A                     ___wmul:	
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11966  059A  01F6               	clrf	___wmul@product
 11967  059B  01F7               	clrf	___wmul@product+1
 11968  059C                     l3149:	
 11969  059C  1C72               	btfss	___wmul@multiplier,0
 11970  059D  2DA4               	goto	l3153
 11971  059E  0874               	movf	___wmul@multiplicand,w
 11972  059F  07F6               	addwf	___wmul@product,f
 11973  05A0  1803               	skipnc
 11974  05A1  0AF7               	incf	___wmul@product+1,f
 11975  05A2  0875               	movf	___wmul@multiplicand+1,w
 11976  05A3  07F7               	addwf	___wmul@product+1,f
 11977  05A4                     l3153:	
 11978  05A4  1003               	clrc
 11979  05A5  0DF4               	rlf	___wmul@multiplicand,f
 11980  05A6  0DF5               	rlf	___wmul@multiplicand+1,f
 11981  05A7  1003               	clrc
 11982  05A8  0CF3               	rrf	___wmul@multiplier+1,f
 11983  05A9  0CF2               	rrf	___wmul@multiplier,f
 11984  05AA  0872               	movf	___wmul@multiplier,w
 11985  05AB  0473               	iorwf	___wmul@multiplier+1,w
 11986  05AC  1D03               	btfss	3,2
 11987  05AD  2D9C               	goto	l3149
 11988  05AE  0877               	movf	___wmul@product+1,w
 11989  05AF  00F3               	movwf	?___wmul+1
 11990  05B0  0876               	movf	___wmul@product,w
 11991  05B1  00F2               	movwf	?___wmul
 11992  05B2  0008               	return
 11993  05B3                     __end_of___wmul:	
 11994  05B3                     __ptext59:	
 11995 ;; *************** function ___ftneg *****************
 11996 ;; Defined at:
 11997 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftneg.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;  f1              3    2[COMMON] float 
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;		None
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  3    2[COMMON] float 
 12004 ;; Registers used:
 12005 ;;		wreg
 12006 ;; Tracked objects:
 12007 ;;		On entry : 300/100
 12008 ;;		On exit  : 300/100
 12009 ;;		Unchanged: 300/0
 12010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12011 ;;      Params:         3       0       0       0       0
 12012 ;;      Locals:         0       0       0       0       0
 12013 ;;      Temps:          0       0       0       0       0
 12014 ;;      Totals:         3       0       0       0       0
 12015 ;;Total ram usage:        3 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    1
 12018 ;; This function calls:
 12019 ;;		Nothing
 12020 ;; This function is called by:
 12021 ;;		_sprintf
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           
 12026                           ;psect for function ___ftneg
 12027  05B3                     ___ftneg:	
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in ___ftneg: [wreg]
 12031  05B3  0874               	movf	___ftneg@f1+2,w
 12032  05B4  0473               	iorwf	___ftneg@f1+1,w
 12033  05B5  0472               	iorwf	___ftneg@f1,w
 12034  05B6  1903               	skipnz
 12035  05B7  0008               	return
 12036  05B8  3080               	movlw	128
 12037  05B9  06F4               	xorwf	___ftneg@f1+2,f
 12038  05BA  0008               	return
 12039  05BB                     __end_of___ftneg:	
 12040  05BB                     __ptext57:	
 12041 ;; *************** function ___ftadd *****************
 12042 ;; Defined at:
 12043 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftadd.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  f1              3   34[BANK0 ] float 
 12046 ;;  f2              3   37[BANK0 ] float 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  exp1            1   45[BANK0 ] unsigned char 
 12049 ;;  exp2            1   44[BANK0 ] unsigned char 
 12050 ;;  sign            1   43[BANK0 ] unsigned char 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;                  3   34[BANK0 ] float 
 12053 ;; Registers used:
 12054 ;;		wreg, status,2, status,0, pclath, cstack
 12055 ;; Tracked objects:
 12056 ;;		On entry : 300/0
 12057 ;;		On exit  : 300/0
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12060 ;;      Params:         0       6       0       0       0
 12061 ;;      Locals:         0       3       0       0       0
 12062 ;;      Temps:          0       3       0       0       0
 12063 ;;      Totals:         0      12       0       0       0
 12064 ;;Total ram usage:       12 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:    2
 12067 ;; This function calls:
 12068 ;;		___ftpack
 12069 ;; This function is called by:
 12070 ;;		_getTempDS18B20
 12071 ;;		_calcSHT71
 12072 ;;		_regulacija
 12073 ;;		_menuHumi
 12074 ;;		_menu
 12075 ;;		_sprintf
 12076 ;;		___ftsub
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           
 12081                           ;psect for function ___ftadd
 12082  05BB                     ___ftadd:	
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12086  05BB  0842               	movf	___ftadd@f1,w
 12087  05BC  00C8               	movwf	??___ftadd
 12088  05BD  0843               	movf	___ftadd@f1+1,w
 12089  05BE  00C9               	movwf	??___ftadd+1
 12090  05BF  0844               	movf	___ftadd@f1+2,w
 12091  05C0  00CA               	movwf	??___ftadd+2
 12092  05C1  1003               	clrc
 12093  05C2  0D49               	rlf	??___ftadd+1,w
 12094  05C3  0D4A               	rlf	??___ftadd+2,w
 12095  05C4  00CD               	movwf	___ftadd@exp1
 12096  05C5  0845               	movf	___ftadd@f2,w
 12097  05C6  00C8               	movwf	??___ftadd
 12098  05C7  0846               	movf	___ftadd@f2+1,w
 12099  05C8  00C9               	movwf	??___ftadd+1
 12100  05C9  0847               	movf	___ftadd@f2+2,w
 12101  05CA  00CA               	movwf	??___ftadd+2
 12102  05CB  1003               	clrc
 12103  05CC  0D49               	rlf	??___ftadd+1,w
 12104  05CD  0D4A               	rlf	??___ftadd+2,w
 12105  05CE  00CC               	movwf	___ftadd@exp2
 12106  05CF  084D               	movf	___ftadd@exp1,w
 12107  05D0  1903               	btfsc	3,2
 12108  05D1  2DDE               	goto	l5077
 12109  05D2  084C               	movf	___ftadd@exp2,w
 12110  05D3  024D               	subwf	___ftadd@exp1,w
 12111  05D4  084C               	movf	___ftadd@exp2,w
 12112  05D5  1803               	skipnc
 12113  05D6  2DE6               	goto	L27
 12114  05D7  00C8               	movwf	??___ftadd
 12115  05D8  084D               	movf	___ftadd@exp1,w
 12116  05D9  02C8               	subwf	??___ftadd,f
 12117  05DA  3019               	movlw	25
 12118  05DB  0248               	subwf	??___ftadd,w
 12119  05DC  1C03               	skipc
 12120  05DD  2DE5               	goto	l5081
 12121  05DE                     l5077:	
 12122  05DE  0845               	movf	___ftadd@f2,w
 12123  05DF  00C2               	movwf	?___ftadd
 12124  05E0  0846               	movf	___ftadd@f2+1,w
 12125  05E1  00C3               	movwf	?___ftadd+1
 12126  05E2  0847               	movf	___ftadd@f2+2,w
 12127  05E3  00C4               	movwf	?___ftadd+2
 12128  05E4  0008               	return
 12129  05E5                     l5081:	
 12130  05E5  084C               	movf	___ftadd@exp2,w
 12131  05E6                     L27:	
 12132  05E6  1903               	btfsc	3,2
 12133  05E7  0008               	return
 12134  05E8  084D               	movf	___ftadd@exp1,w
 12135  05E9  024C               	subwf	___ftadd@exp2,w
 12136  05EA  1803               	skipnc
 12137  05EB  2DF4               	goto	l5087
 12138  05EC  084D               	movf	___ftadd@exp1,w
 12139  05ED  00C8               	movwf	??___ftadd
 12140  05EE  084C               	movf	___ftadd@exp2,w
 12141  05EF  02C8               	subwf	??___ftadd,f
 12142  05F0  3019               	movlw	25
 12143  05F1  0248               	subwf	??___ftadd,w
 12144  05F2  1803               	btfsc	3,0
 12145  05F3  0008               	return
 12146  05F4                     l5087:	
 12147  05F4  3006               	movlw	6
 12148  05F5  00CB               	movwf	___ftadd@sign
 12149  05F6  1BC4               	btfsc	___ftadd@f1+2,7
 12150  05F7  17CB               	bsf	___ftadd@sign,7
 12151  05F8  1BC7               	btfsc	___ftadd@f2+2,7
 12152  05F9  174B               	bsf	___ftadd@sign,6
 12153  05FA  17C3               	bsf	___ftadd@f1+1,7
 12154  05FB  01C4               	clrf	___ftadd@f1+2
 12155  05FC  17C6               	bsf	___ftadd@f2+1,7
 12156  05FD  01C7               	clrf	___ftadd@f2+2
 12157  05FE  084C               	movf	___ftadd@exp2,w
 12158  05FF  024D               	subwf	___ftadd@exp1,w
 12159  0600  1803               	skipnc
 12160  0601  2E1B               	goto	l5109
 12161  0602                     l5099:	
 12162  0602  1003               	clrc
 12163  0603  0DC5               	rlf	___ftadd@f2,f
 12164  0604  0DC6               	rlf	___ftadd@f2+1,f
 12165  0605  0DC7               	rlf	___ftadd@f2+2,f
 12166  0606  03CC               	decf	___ftadd@exp2,f
 12167  0607  084C               	movf	___ftadd@exp2,w
 12168  0608  064D               	xorwf	___ftadd@exp1,w
 12169  0609  1903               	skipnz
 12170  060A  2E16               	goto	l5107
 12171  060B  03CB               	decf	___ftadd@sign,f
 12172  060C  084B               	movf	___ftadd@sign,w
 12173  060D  3907               	andlw	7
 12174  060E  1903               	btfsc	3,2
 12175  060F  2E16               	goto	l5107
 12176  0610  2E02               	goto	l5099
 12177  0611                     l5105:	
 12178  0611  1003               	clrc
 12179  0612  0CC4               	rrf	___ftadd@f1+2,f
 12180  0613  0CC3               	rrf	___ftadd@f1+1,f
 12181  0614  0CC2               	rrf	___ftadd@f1,f
 12182  0615  0ACD               	incf	___ftadd@exp1,f
 12183  0616                     l5107:	
 12184  0616  084D               	movf	___ftadd@exp1,w
 12185  0617  064C               	xorwf	___ftadd@exp2,w
 12186  0618  1903               	btfsc	3,2
 12187  0619  2E37               	goto	l907
 12188  061A  2E11               	goto	l5105
 12189  061B                     l5109:	
 12190  061B  084D               	movf	___ftadd@exp1,w
 12191  061C  024C               	subwf	___ftadd@exp2,w
 12192  061D  1803               	skipnc
 12193  061E  2E37               	goto	l907
 12194  061F                     l5111:	
 12195  061F  1003               	clrc
 12196  0620  0DC2               	rlf	___ftadd@f1,f
 12197  0621  0DC3               	rlf	___ftadd@f1+1,f
 12198  0622  0DC4               	rlf	___ftadd@f1+2,f
 12199  0623  03CD               	decf	___ftadd@exp1,f
 12200  0624  084C               	movf	___ftadd@exp2,w
 12201  0625  064D               	xorwf	___ftadd@exp1,w
 12202  0626  1903               	skipnz
 12203  0627  2E33               	goto	l5119
 12204  0628  03CB               	decf	___ftadd@sign,f
 12205  0629  084B               	movf	___ftadd@sign,w
 12206  062A  3907               	andlw	7
 12207  062B  1903               	btfsc	3,2
 12208  062C  2E33               	goto	l5119
 12209  062D  2E1F               	goto	l5111
 12210  062E                     l5117:	
 12211  062E  1003               	clrc
 12212  062F  0CC7               	rrf	___ftadd@f2+2,f
 12213  0630  0CC6               	rrf	___ftadd@f2+1,f
 12214  0631  0CC5               	rrf	___ftadd@f2,f
 12215  0632  0ACC               	incf	___ftadd@exp2,f
 12216  0633                     l5119:	
 12217  0633  084D               	movf	___ftadd@exp1,w
 12218  0634  064C               	xorwf	___ftadd@exp2,w
 12219  0635  1D03               	skipz
 12220  0636  2E2E               	goto	l5117
 12221  0637                     l907:	
 12222  0637  1FCB               	btfss	___ftadd@sign,7
 12223  0638  2E42               	goto	l5125
 12224  0639  30FF               	movlw	255
 12225  063A  06C2               	xorwf	___ftadd@f1,f
 12226  063B  06C3               	xorwf	___ftadd@f1+1,f
 12227  063C  06C4               	xorwf	___ftadd@f1+2,f
 12228  063D  0AC2               	incf	___ftadd@f1,f
 12229  063E  1903               	skipnz
 12230  063F  0AC3               	incf	___ftadd@f1+1,f
 12231  0640  1903               	skipnz
 12232  0641  0AC4               	incf	___ftadd@f1+2,f
 12233  0642                     l5125:	
 12234  0642  1F4B               	btfss	___ftadd@sign,6
 12235  0643  2E4D               	goto	l5131
 12236  0644  30FF               	movlw	255
 12237  0645  06C5               	xorwf	___ftadd@f2,f
 12238  0646  06C6               	xorwf	___ftadd@f2+1,f
 12239  0647  06C7               	xorwf	___ftadd@f2+2,f
 12240  0648  0AC5               	incf	___ftadd@f2,f
 12241  0649  1903               	skipnz
 12242  064A  0AC6               	incf	___ftadd@f2+1,f
 12243  064B  1903               	skipnz
 12244  064C  0AC7               	incf	___ftadd@f2+2,f
 12245  064D                     l5131:	
 12246  064D  01CB               	clrf	___ftadd@sign
 12247  064E  0842               	movf	___ftadd@f1,w
 12248  064F  07C5               	addwf	___ftadd@f2,f
 12249  0650  0843               	movf	___ftadd@f1+1,w
 12250  0651  1103               	clrz
 12251  0652  1803               	skipnc
 12252  0653  0A43               	incf	___ftadd@f1+1,w
 12253  0654  1D03               	btfss	3,2
 12254  0655  07C6               	addwf	___ftadd@f2+1,f
 12255  0656  0844               	movf	___ftadd@f1+2,w
 12256  0657  1103               	clrz
 12257  0658  1803               	skipnc
 12258  0659  0A44               	incf	___ftadd@f1+2,w
 12259  065A  1D03               	btfss	3,2
 12260  065B  07C7               	addwf	___ftadd@f2+2,f
 12261  065C  1FC7               	btfss	___ftadd@f2+2,7
 12262  065D  2E69               	goto	l5143
 12263  065E  30FF               	movlw	255
 12264  065F  06C5               	xorwf	___ftadd@f2,f
 12265  0660  06C6               	xorwf	___ftadd@f2+1,f
 12266  0661  06C7               	xorwf	___ftadd@f2+2,f
 12267  0662  0AC5               	incf	___ftadd@f2,f
 12268  0663  1903               	skipnz
 12269  0664  0AC6               	incf	___ftadd@f2+1,f
 12270  0665  1903               	skipnz
 12271  0666  0AC7               	incf	___ftadd@f2+2,f
 12272  0667  01CB               	clrf	___ftadd@sign
 12273  0668  0ACB               	incf	___ftadd@sign,f
 12274  0669                     l5143:	
 12275  0669  0845               	movf	___ftadd@f2,w
 12276  066A  00F2               	movwf	___ftpack@arg
 12277  066B  0846               	movf	___ftadd@f2+1,w
 12278  066C  00F3               	movwf	___ftpack@arg+1
 12279  066D  0847               	movf	___ftadd@f2+2,w
 12280  066E  00F4               	movwf	___ftpack@arg+2
 12281  066F  084D               	movf	___ftadd@exp1,w
 12282  0670  00F5               	movwf	___ftpack@exp
 12283  0671  084B               	movf	___ftadd@sign,w
 12284  0672  00F6               	movwf	___ftpack@sign
 12285  0673  160A  118A  2725   	fcall	___ftpack
 12286  0676  0872               	movf	?___ftpack,w
 12287  0677  00C2               	movwf	?___ftadd
 12288  0678  0873               	movf	?___ftpack+1,w
 12289  0679  00C3               	movwf	?___ftadd+1
 12290  067A  0874               	movf	?___ftpack+2,w
 12291  067B  00C4               	movwf	?___ftadd+2
 12292  067C  0008               	return
 12293  067D                     __end_of___ftadd:	
 12294  067D                     __ptext56:	
 12295 ;; *************** function ___ftsub *****************
 12296 ;; Defined at:
 12297 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftsub.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;  f2              3   46[BANK0 ] float 
 12300 ;;  f1              3   49[BANK0 ] float 
 12301 ;; Auto vars:     Size  Location     Type
 12302 ;;		None
 12303 ;; Return value:  Size  Location     Type
 12304 ;;                  3   46[BANK0 ] float 
 12305 ;; Registers used:
 12306 ;;		wreg, status,2, status,0, pclath, cstack
 12307 ;; Tracked objects:
 12308 ;;		On entry : 300/0
 12309 ;;		On exit  : 300/0
 12310 ;;		Unchanged: 0/0
 12311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12312 ;;      Params:         0       6       0       0       0
 12313 ;;      Locals:         0       0       0       0       0
 12314 ;;      Temps:          0       0       0       0       0
 12315 ;;      Totals:         0       6       0       0       0
 12316 ;;Total ram usage:        6 bytes
 12317 ;; Hardware stack levels used:    1
 12318 ;; Hardware stack levels required when called:    3
 12319 ;; This function calls:
 12320 ;;		___ftadd
 12321 ;; This function is called by:
 12322 ;;		_sprintf
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           
 12327                           ;psect for function ___ftsub
 12328  067D                     ___ftsub:	
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
 12332  067D  0850               	movf	___ftsub@f2+2,w
 12333  067E  044F               	iorwf	___ftsub@f2+1,w
 12334  067F  044E               	iorwf	___ftsub@f2,w
 12335  0680  1903               	skipnz
 12336  0681  2E84               	goto	l5395
 12337  0682  3080               	movlw	128
 12338  0683  06D0               	xorwf	___ftsub@f2+2,f
 12339  0684                     l5395:	
 12340  0684  0851               	movf	___ftsub@f1,w
 12341  0685  00C2               	movwf	___ftadd@f1
 12342  0686  0852               	movf	___ftsub@f1+1,w
 12343  0687  00C3               	movwf	___ftadd@f1+1
 12344  0688  0853               	movf	___ftsub@f1+2,w
 12345  0689  00C4               	movwf	___ftadd@f1+2
 12346  068A  084E               	movf	___ftsub@f2,w
 12347  068B  00C5               	movwf	___ftadd@f2
 12348  068C  084F               	movf	___ftsub@f2+1,w
 12349  068D  00C6               	movwf	___ftadd@f2+1
 12350  068E  0850               	movf	___ftsub@f2+2,w
 12351  068F  00C7               	movwf	___ftadd@f2+2
 12352  0690  25BB               	fcall	___ftadd
 12353  0691  0842               	movf	?___ftadd,w
 12354  0692  00CE               	movwf	?___ftsub
 12355  0693  0843               	movf	?___ftadd+1,w
 12356  0694  00CF               	movwf	?___ftsub+1
 12357  0695  0844               	movf	?___ftadd+2,w
 12358  0696  00D0               	movwf	?___ftsub+2
 12359  0697  0008               	return
 12360  0698                     __end_of___ftsub:	
 12361  0698                     __ptext53:	
 12362 ;; *************** function ___lltoft *****************
 12363 ;; Defined at:
 12364 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lltoft.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  c               4    0[BANK0 ] unsigned long 
 12367 ;; Auto vars:     Size  Location     Type
 12368 ;;  exp             1    4[BANK0 ] unsigned char 
 12369 ;; Return value:  Size  Location     Type
 12370 ;;                  3    0[BANK0 ] float 
 12371 ;; Registers used:
 12372 ;;		wreg, status,2, status,0, pclath, cstack
 12373 ;; Tracked objects:
 12374 ;;		On entry : 300/0
 12375 ;;		On exit  : 300/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12378 ;;      Params:         0       4       0       0       0
 12379 ;;      Locals:         0       1       0       0       0
 12380 ;;      Temps:          0       0       0       0       0
 12381 ;;      Totals:         0       5       0       0       0
 12382 ;;Total ram usage:        5 bytes
 12383 ;; Hardware stack levels used:    1
 12384 ;; Hardware stack levels required when called:    2
 12385 ;; This function calls:
 12386 ;;		___ftpack
 12387 ;; This function is called by:
 12388 ;;		_sprintf
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           
 12393                           ;psect for function ___lltoft
 12394  0698                     ___lltoft:	
 12395                           
 12396                           ;incstack = 0
 12397                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
 12398  0698  308E               	movlw	142
 12399  0699  00A4               	movwf	___lltoft@exp
 12400  069A                     l5423:	
 12401  069A  30FF               	movlw	255
 12402  069B  0523               	andwf	___lltoft@c+3,w
 12403  069C  1903               	btfsc	3,2
 12404  069D  2EA5               	goto	l5425
 12405  069E  1003               	clrc
 12406  069F  0CA3               	rrf	___lltoft@c+3,f
 12407  06A0  0CA2               	rrf	___lltoft@c+2,f
 12408  06A1  0CA1               	rrf	___lltoft@c+1,f
 12409  06A2  0CA0               	rrf	___lltoft@c,f
 12410  06A3  0AA4               	incf	___lltoft@exp,f
 12411  06A4  2E9A               	goto	l5423
 12412  06A5                     l5425:	
 12413  06A5  0820               	movf	___lltoft@c,w
 12414  06A6  00F2               	movwf	___ftpack@arg
 12415  06A7  0821               	movf	___lltoft@c+1,w
 12416  06A8  00F3               	movwf	___ftpack@arg+1
 12417  06A9  0822               	movf	___lltoft@c+2,w
 12418  06AA  00F4               	movwf	___ftpack@arg+2
 12419  06AB  0824               	movf	___lltoft@exp,w
 12420  06AC  00F5               	movwf	___ftpack@exp
 12421  06AD  01F6               	clrf	___ftpack@sign
 12422  06AE  160A  118A  2725   	fcall	___ftpack
 12423  06B1  0872               	movf	?___ftpack,w
 12424  06B2  00A0               	movwf	?___lltoft
 12425  06B3  0873               	movf	?___ftpack+1,w
 12426  06B4  00A1               	movwf	?___lltoft+1
 12427  06B5  0874               	movf	?___ftpack+2,w
 12428  06B6  00A2               	movwf	?___lltoft+2
 12429  06B7  0008               	return
 12430  06B8                     __end_of___lltoft:	
 12431  06B8                     __ptext50:	
 12432 ;; *************** function __tdiv_to_l_ *****************
 12433 ;; Defined at:
 12434 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\ftdivl.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;  f1              3    2[COMMON] float 
 12437 ;;  f2              3    5[COMMON] float 
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;  quot            4    3[BANK0 ] unsigned long 
 12440 ;;  exp1            1    8[BANK0 ] unsigned char 
 12441 ;;  cntr            1    7[BANK0 ] unsigned char 
 12442 ;; Return value:  Size  Location     Type
 12443 ;;                  4    2[COMMON] unsigned long 
 12444 ;; Registers used:
 12445 ;;		wreg, status,2, status,0
 12446 ;; Tracked objects:
 12447 ;;		On entry : 300/100
 12448 ;;		On exit  : 300/0
 12449 ;;		Unchanged: 0/0
 12450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12451 ;;      Params:         6       0       0       0       0
 12452 ;;      Locals:         0       6       0       0       0
 12453 ;;      Temps:          0       3       0       0       0
 12454 ;;      Totals:         6       9       0       0       0
 12455 ;;Total ram usage:       15 bytes
 12456 ;; Hardware stack levels used:    1
 12457 ;; Hardware stack levels required when called:    1
 12458 ;; This function calls:
 12459 ;;		Nothing
 12460 ;; This function is called by:
 12461 ;;		_sprintf
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function __tdiv_to_l_
 12467  06B8                     __tdiv_to_l_:	
 12468                           
 12469                           ;incstack = 0
 12470                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
 12471  06B8  0872               	movf	__tdiv_to_l_@f1,w
 12472  06B9  1283               	bcf	3,5	;RP0=0, select bank0
 12473  06BA  00A0               	movwf	??__tdiv_to_l_
 12474  06BB  0873               	movf	__tdiv_to_l_@f1+1,w
 12475  06BC  00A1               	movwf	??__tdiv_to_l_+1
 12476  06BD  0874               	movf	__tdiv_to_l_@f1+2,w
 12477  06BE  00A2               	movwf	??__tdiv_to_l_+2
 12478  06BF  1003               	clrc
 12479  06C0  0D21               	rlf	??__tdiv_to_l_+1,w
 12480  06C1  0D22               	rlf	??__tdiv_to_l_+2,w
 12481  06C2  00A8               	movwf	__tdiv_to_l_@exp1
 12482  06C3  0828               	movf	__tdiv_to_l_@exp1,w
 12483  06C4  1D03               	btfss	3,2
 12484  06C5  2ECB               	goto	l5335
 12485  06C6                     l5333:	
 12486  06C6  01F2               	clrf	?__tdiv_to_l_
 12487  06C7  01F3               	clrf	?__tdiv_to_l_+1
 12488  06C8  01F4               	clrf	?__tdiv_to_l_+2
 12489  06C9  01F5               	clrf	?__tdiv_to_l_+3
 12490  06CA  0008               	return
 12491  06CB                     l5335:	
 12492  06CB  0875               	movf	__tdiv_to_l_@f2,w
 12493  06CC  00A0               	movwf	??__tdiv_to_l_
 12494  06CD  0876               	movf	__tdiv_to_l_@f2+1,w
 12495  06CE  00A1               	movwf	??__tdiv_to_l_+1
 12496  06CF  0877               	movf	__tdiv_to_l_@f2+2,w
 12497  06D0  00A2               	movwf	??__tdiv_to_l_+2
 12498  06D1  1003               	clrc
 12499  06D2  0D21               	rlf	??__tdiv_to_l_+1,w
 12500  06D3  0D22               	rlf	??__tdiv_to_l_+2,w
 12501  06D4  00A7               	movwf	__tdiv_to_l_@cntr
 12502  06D5  0827               	movf	__tdiv_to_l_@cntr,w
 12503  06D6  1903               	btfsc	3,2
 12504  06D7  2EC6               	goto	l5333
 12505  06D8  307F               	movlw	127
 12506  06D9  17F3               	bsf	__tdiv_to_l_@f1+1,7
 12507  06DA  01F4               	clrf	__tdiv_to_l_@f1+2
 12508  06DB  17F6               	bsf	__tdiv_to_l_@f2+1,7
 12509  06DC  01F7               	clrf	__tdiv_to_l_@f2+2
 12510  06DD  01A3               	clrf	__tdiv_to_l_@quot
 12511  06DE  01A4               	clrf	__tdiv_to_l_@quot+1
 12512  06DF  01A5               	clrf	__tdiv_to_l_@quot+2
 12513  06E0  01A6               	clrf	__tdiv_to_l_@quot+3
 12514  06E1  02A8               	subwf	__tdiv_to_l_@exp1,f
 12515  06E2  3098               	movlw	152
 12516  06E3  0727               	addwf	__tdiv_to_l_@cntr,w
 12517  06E4  00A0               	movwf	??__tdiv_to_l_
 12518  06E5  02A8               	subwf	__tdiv_to_l_@exp1,f
 12519  06E6  3018               	movlw	24
 12520  06E7  00A7               	movwf	__tdiv_to_l_@cntr
 12521  06E8                     l5349:	
 12522  06E8  1003               	clrc
 12523  06E9  0DA3               	rlf	__tdiv_to_l_@quot,f
 12524  06EA  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12525  06EB  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12526  06EC  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12527  06ED  0877               	movf	__tdiv_to_l_@f2+2,w
 12528  06EE  0274               	subwf	__tdiv_to_l_@f1+2,w
 12529  06EF  1D03               	skipz
 12530  06F0  2EF7               	goto	u5965
 12531  06F1  0876               	movf	__tdiv_to_l_@f2+1,w
 12532  06F2  0273               	subwf	__tdiv_to_l_@f1+1,w
 12533  06F3  1D03               	skipz
 12534  06F4  2EF7               	goto	u5965
 12535  06F5  0875               	movf	__tdiv_to_l_@f2,w
 12536  06F6  0272               	subwf	__tdiv_to_l_@f1,w
 12537  06F7                     u5965:	
 12538  06F7  1C03               	skipc
 12539  06F8  2F05               	goto	L24
 12540  06F9  0875               	movf	__tdiv_to_l_@f2,w
 12541  06FA  02F2               	subwf	__tdiv_to_l_@f1,f
 12542  06FB  0876               	movf	__tdiv_to_l_@f2+1,w
 12543  06FC  1C03               	skipc
 12544  06FD  0F76               	incfsz	__tdiv_to_l_@f2+1,w
 12545  06FE  02F3               	subwf	__tdiv_to_l_@f1+1,f
 12546  06FF  0877               	movf	__tdiv_to_l_@f2+2,w
 12547  0700  1C03               	skipc
 12548  0701  0A77               	incf	__tdiv_to_l_@f2+2,w
 12549  0702  02F4               	subwf	__tdiv_to_l_@f1+2,f
 12550  0703  1423               	bsf	__tdiv_to_l_@quot,0
 12551  0704  1003               	clrc
 12552  0705                     L24:	
 12553  0705  0DF2               	rlf	__tdiv_to_l_@f1,f
 12554  0706  0DF3               	rlf	__tdiv_to_l_@f1+1,f
 12555  0707  0DF4               	rlf	__tdiv_to_l_@f1+2,f
 12556  0708  0BA7               	decfsz	__tdiv_to_l_@cntr,f
 12557  0709  2EE8               	goto	l5349
 12558  070A  1FA8               	btfss	__tdiv_to_l_@exp1,7
 12559  070B  2F19               	goto	l5369
 12560  070C  0828               	movf	__tdiv_to_l_@exp1,w
 12561  070D  3A80               	xorlw	128
 12562  070E  3E97               	addlw	151
 12563  070F  1C03               	btfss	3,0
 12564  0710  2EC6               	goto	l5333
 12565  0711                     l5365:	
 12566  0711  1003               	clrc
 12567  0712  0CA6               	rrf	__tdiv_to_l_@quot+3,f
 12568  0713  0CA5               	rrf	__tdiv_to_l_@quot+2,f
 12569  0714  0CA4               	rrf	__tdiv_to_l_@quot+1,f
 12570  0715  0CA3               	rrf	__tdiv_to_l_@quot,f
 12571  0716  0FA8               	incfsz	__tdiv_to_l_@exp1,f
 12572  0717  2F11               	goto	l5365
 12573  0718  2F27               	goto	l5377
 12574  0719                     l5369:	
 12575  0719  3018               	movlw	24
 12576  071A  0228               	subwf	__tdiv_to_l_@exp1,w
 12577  071B  1803               	btfsc	3,0
 12578  071C  2EC6               	goto	l5333
 12579  071D                     l5375:	
 12580  071D  0828               	movf	__tdiv_to_l_@exp1,w
 12581  071E  1903               	btfsc	3,2
 12582  071F  2F27               	goto	l5377
 12583  0720  1003               	clrc
 12584  0721  0DA3               	rlf	__tdiv_to_l_@quot,f
 12585  0722  0DA4               	rlf	__tdiv_to_l_@quot+1,f
 12586  0723  0DA5               	rlf	__tdiv_to_l_@quot+2,f
 12587  0724  0DA6               	rlf	__tdiv_to_l_@quot+3,f
 12588  0725  03A8               	decf	__tdiv_to_l_@exp1,f
 12589  0726  2F1D               	goto	l5375
 12590  0727                     l5377:	
 12591  0727  0826               	movf	__tdiv_to_l_@quot+3,w
 12592  0728  00F5               	movwf	?__tdiv_to_l_+3
 12593  0729  0825               	movf	__tdiv_to_l_@quot+2,w
 12594  072A  00F4               	movwf	?__tdiv_to_l_+2
 12595  072B  0824               	movf	__tdiv_to_l_@quot+1,w
 12596  072C  00F3               	movwf	?__tdiv_to_l_+1
 12597  072D  0823               	movf	__tdiv_to_l_@quot,w
 12598  072E  00F2               	movwf	?__tdiv_to_l_
 12599  072F  0008               	return
 12600  0730                     __end_of__tdiv_to_l_:	
 12601  0730                     __ptext44:	
 12602 ;; *************** function _isdigit *****************
 12603 ;; Defined at:
 12604 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;  c               1    wreg     unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;  c               1    3[COMMON] unsigned char 
 12609 ;; Return value:  Size  Location     Type
 12610 ;;		None               void
 12611 ;; Registers used:
 12612 ;;		wreg, status,2, status,0
 12613 ;; Tracked objects:
 12614 ;;		On entry : 300/0
 12615 ;;		On exit  : 300/0
 12616 ;;		Unchanged: 300/0
 12617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12618 ;;      Params:         0       0       0       0       0
 12619 ;;      Locals:         2       0       0       0       0
 12620 ;;      Temps:          0       0       0       0       0
 12621 ;;      Totals:         2       0       0       0       0
 12622 ;;Total ram usage:        2 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    1
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		_sprintf
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           
 12633                           ;psect for function _isdigit
 12634  0730                     _isdigit:	
 12635                           
 12636                           ;incstack = 0
 12637                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 12638                           ;isdigit@c stored from wreg
 12639  0730  00F3               	movwf	isdigit@c
 12640  0731  303A               	movlw	58
 12641  0732  01F2               	clrf	_isdigit$961
 12642  0733  0273               	subwf	isdigit@c,w
 12643  0734  1803               	skipnc
 12644  0735  2F3C               	goto	l3603
 12645  0736  3030               	movlw	48
 12646  0737  0273               	subwf	isdigit@c,w
 12647  0738  1C03               	skipc
 12648  0739  2F3C               	goto	l3603
 12649  073A  01F2               	clrf	_isdigit$961
 12650  073B  0AF2               	incf	_isdigit$961,f
 12651  073C                     l3603:	
 12652  073C  0C72               	rrf	_isdigit$961,w
 12653  073D  0008               	return
 12654  073E                     __end_of_isdigit:	
 12655  073E                     PL2:	
 12656  073E  0875               	movf	?___lldiv+3,w
 12657  073F  1683               	bsf	3,5	;RP0=1, select bank1
 12658  0740  00D1               	movwf	(sprintf@tmpval+3)^(0+128)
 12659  0741  0874               	movf	?___lldiv+2,w
 12660  0742  00D0               	movwf	(sprintf@tmpval+2)^(0+128)
 12661  0743  0873               	movf	?___lldiv+1,w
 12662  0744  00CF               	movwf	(sprintf@tmpval+1)^(0+128)
 12663  0745  0872               	movf	?___lldiv,w
 12664  0746  00CE               	movwf	sprintf@tmpval^(0+128)
 12665  0747  300A               	movlw	10
 12666  0748  00F2               	movwf	___llmod@divisor
 12667  0749  01F3               	clrf	___llmod@divisor+1
 12668  074A  01F4               	clrf	___llmod@divisor+2
 12669  074B  01F5               	clrf	___llmod@divisor+3
 12670  074C  0851               	movf	(sprintf@tmpval+3)^(0+128),w
 12671  074D  00F9               	movwf	___llmod@dividend+3
 12672  074E  0850               	movf	(sprintf@tmpval+2)^(0+128),w
 12673  074F  00F8               	movwf	___llmod@dividend+2
 12674  0750  084F               	movf	(sprintf@tmpval+1)^(0+128),w
 12675  0751  00F7               	movwf	___llmod@dividend+1
 12676  0752  084E               	movf	sprintf@tmpval^(0+128),w
 12677  0753  00F6               	movwf	___llmod@dividend
 12678  0754  0008               	return
 12679  0755                     __end_ofPL2:	
 12680  0755                     PL8:	
 12681  0755  084E               	movf	sprintf@tmpval^(0+128),w
 12682  0756  1283               	bcf	3,5	;RP0=0, select bank0
 12683  0757  00CE               	movwf	___ftge@ff1
 12684  0758  1683               	bsf	3,5	;RP0=1, select bank1
 12685  0759  084F               	movf	(sprintf@tmpval+1)^(0+128),w
 12686  075A  1283               	bcf	3,5	;RP0=0, select bank0
 12687  075B  00CF               	movwf	___ftge@ff1+1
 12688  075C  1683               	bsf	3,5	;RP0=1, select bank1
 12689  075D  0850               	movf	(sprintf@tmpval+2)^(0+128),w
 12690  075E  1283               	bcf	3,5	;RP0=0, select bank0
 12691  075F  00D0               	movwf	___ftge@ff1+2
 12692  0760  0008               	return
 12693  0761                     __end_ofPL8:	
 12694  0761                     PL14:	
 12695  0761  0845               	movf	?___fttol+3,w
 12696  0762  1683               	bsf	3,5	;RP0=1, select bank1
 12697  0763  00CD               	movwf	(sprintf@val+3)^(0+128)
 12698  0764  1283               	bcf	3,5	;RP0=0, select bank0
 12699  0765  0844               	movf	?___fttol+2,w
 12700  0766  1683               	bsf	3,5	;RP0=1, select bank1
 12701  0767  00CC               	movwf	(sprintf@val+2)^(0+128)
 12702  0768  1283               	bcf	3,5	;RP0=0, select bank0
 12703  0769  0843               	movf	?___fttol+1,w
 12704  076A  1683               	bsf	3,5	;RP0=1, select bank1
 12705  076B  00CB               	movwf	(sprintf@val+1)^(0+128)
 12706  076C  1283               	bcf	3,5	;RP0=0, select bank0
 12707  076D  0842               	movf	?___fttol,w
 12708  076E  1683               	bsf	3,5	;RP0=1, select bank1
 12709  076F  0008               	return
 12710  0770                     __end_ofPL14:	
 12711  0770                     PL22:	
 12712  0770  0875               	movf	?___llmod+3,w
 12713  0771  1683               	bsf	3,5	;RP0=1, select bank1
 12714  0772  00D1               	movwf	(sprintf@tmpval+3)^(0+128)
 12715  0773  0874               	movf	?___llmod+2,w
 12716  0774  00D0               	movwf	(sprintf@tmpval+2)^(0+128)
 12717  0775  0873               	movf	?___llmod+1,w
 12718  0776  00CF               	movwf	(sprintf@tmpval+1)^(0+128)
 12719  0777  0872               	movf	?___llmod,w
 12720  0778  00CE               	movwf	sprintf@tmpval^(0+128)
 12721  0779  0856               	movf	sprintf@sp^(0+128),w
 12722  077A  0084               	movwf	4
 12723  077B  084E               	movf	sprintf@tmpval^(0+128),w
 12724  077C  3E30               	addlw	48
 12725  077D  0008               	return
 12726  077E                     __end_ofPL22:	
 12727  077E                     PL26:	
 12728  077E  0837               	movf	?_scale,w
 12729  077F  1683               	bsf	3,5	;RP0=1, select bank1
 12730  0780  00CE               	movwf	sprintf@tmpval^(0+128)
 12731  0781  1283               	bcf	3,5	;RP0=0, select bank0
 12732  0782  0838               	movf	?_scale+1,w
 12733  0783  1683               	bsf	3,5	;RP0=1, select bank1
 12734  0784  00CF               	movwf	(sprintf@tmpval+1)^(0+128)
 12735  0785  1283               	bcf	3,5	;RP0=0, select bank0
 12736  0786  0839               	movf	?_scale+2,w
 12737  0787  1683               	bsf	3,5	;RP0=1, select bank1
 12738  0788  00D0               	movwf	(sprintf@tmpval+2)^(0+128)
 12739  0789  0857               	movf	sprintf@fval^(0+128),w
 12740  078A  0008               	return
 12741  078B                     __end_ofPL26:	
 12742  078B                     PL38:	
 12743  078B  0D59               	rlf	??_sprintf,w
 12744  078C  3E60               	addlw	low (_dpowers| (0+32768))
 12745  078D  0084               	movwf	4
 12746  078E  3098               	movlw	high (_dpowers| (0+32768))
 12747  078F  1803               	skipnc
 12748  0790  3E01               	addlw	1
 12749  0791  00FF               	movwf	127
 12750  0792  0008               	return
 12751  0793                     __end_ofPL38:	
 12752  0793                     PL40:	
 12753  0793  1283               	bcf	3,5	;RP0=0, select bank0
 12754  0794  0855               	movf	sprintf@f+1,w
 12755  0795  00DA               	movwf	??_sprintf+1
 12756  0796  0854               	movf	sprintf@f,w
 12757  0797  00D9               	movwf	??_sprintf
 12758  0798  0AD4               	incf	sprintf@f,f
 12759  0799  1903               	skipnz
 12760  079A  0AD5               	incf	sprintf@f+1,f
 12761  079B  085A               	movf	??_sprintf+1,w
 12762  079C  00FF               	movwf	127
 12763  079D  0859               	movf	??_sprintf,w
 12764  079E  0084               	movwf	4
 12765  079F  0008               	return
 12766  07A0                     __end_ofPL40:	
 12767  07A0                     PL42:	
 12768  07A0  0857               	movf	sprintf@fval^(0+128),w
 12769  07A1  1283               	bcf	3,5	;RP0=0, select bank0
 12770  07A2  00C2               	movwf	___fttol@f1
 12771  07A3  1683               	bsf	3,5	;RP0=1, select bank1
 12772  07A4  0858               	movf	(sprintf@fval+1)^(0+128),w
 12773  07A5  1283               	bcf	3,5	;RP0=0, select bank0
 12774  07A6  00C3               	movwf	___fttol@f1+1
 12775  07A7  1683               	bsf	3,5	;RP0=1, select bank1
 12776  07A8  0859               	movf	(sprintf@fval+2)^(0+128),w
 12777  07A9  1283               	bcf	3,5	;RP0=0, select bank0
 12778  07AA  00C4               	movwf	___fttol@f1+2
 12779  07AB  0008               	return
 12780  07AC                     __end_ofPL42:	
 12781  07AC                     PL46:	
 12782  07AC  00F5               	movwf	___lldiv@divisor+3
 12783  07AD  1683               	bsf	3,5	;RP0=1, select bank1
 12784  07AE  084D               	movf	(sprintf@val+3)^(0+128),w
 12785  07AF  00F9               	movwf	___lldiv@dividend+3
 12786  07B0  084C               	movf	(sprintf@val+2)^(0+128),w
 12787  07B1  00F8               	movwf	___lldiv@dividend+2
 12788  07B2  084B               	movf	(sprintf@val+1)^(0+128),w
 12789  07B3  00F7               	movwf	___lldiv@dividend+1
 12790  07B4  084A               	movf	sprintf@val^(0+128),w
 12791  07B5  00F6               	movwf	___lldiv@dividend
 12792  07B6  0008               	return
 12793  07B7                     __end_ofPL46:	
 12794  07B7                     PL50:	
 12795  07B7  1283               	bcf	3,5	;RP0=0, select bank0
 12796  07B8  00A8               	movwf	___ftmul@f1
 12797  07B9  1683               	bsf	3,5	;RP0=1, select bank1
 12798  07BA  0858               	movf	(sprintf@fval+1)^(0+128),w
 12799  07BB  1283               	bcf	3,5	;RP0=0, select bank0
 12800  07BC  00A9               	movwf	___ftmul@f1+1
 12801  07BD  1683               	bsf	3,5	;RP0=1, select bank1
 12802  07BE  0859               	movf	(sprintf@fval+2)^(0+128),w
 12803  07BF  1283               	bcf	3,5	;RP0=0, select bank0
 12804  07C0  00AA               	movwf	___ftmul@f1+2
 12805  07C1  0008               	return
 12806  07C2                     __end_ofPL50:	
 12807  07C2                     PL66:	
 12808  07C2  0856               	movf	sprintf@sp^(0+128),w
 12809  07C3  0084               	movwf	4
 12810  07C4  3030               	movlw	48
 12811  07C5  1383               	bcf	3,7	;select IRP bank0
 12812  07C6  0080               	movwf	0
 12813  07C7  30FF               	movlw	-1
 12814  07C8  0AD6               	incf	sprintf@sp^(0+128),f
 12815  07C9  0008               	return
 12816  07CA                     __end_ofPL66:	
 12817  07CA                     PL80:	
 12818  07CA  1283               	bcf	3,5	;RP0=0, select bank0
 12819  07CB  00D9               	movwf	??_sprintf
 12820  07CC  01DA               	clrf	??_sprintf+1
 12821  07CD  1BD9               	btfsc	??_sprintf,7
 12822  07CE  03DA               	decf	??_sprintf+1,f
 12823  07CF  1683               	bsf	3,5	;RP0=1, select bank1
 12824  07D0  0008               	return
 12825  07D1                     __end_ofPL80:	
 12826  07D1                     PL82:	
 12827  07D1  0842               	movf	___fttol@f1,w
 12828  07D2  00C6               	movwf	??___fttol
 12829  07D3  0843               	movf	___fttol@f1+1,w
 12830  07D4  00C7               	movwf	??___fttol+1
 12831  07D5  0844               	movf	___fttol@f1+2,w
 12832  07D6  00C8               	movwf	??___fttol+2
 12833  07D7  0008               	return
 12834  07D8                     __end_ofPL82:	
 12835  07D8                     PL94:	
 12836  07D8  1283               	bcf	3,5	;RP0=0, select bank0
 12837  07D9  0855               	movf	sprintf@f+1,w
 12838  07DA  00FF               	movwf	127
 12839  07DB  0854               	movf	sprintf@f,w
 12840  07DC  0084               	movwf	4
 12841  07DD  0008               	return
 12842  07DE                     __end_ofPL94:	
 12843                           
 12844                           	psect	text70
 12845  0826                     __ptext70:	
 12846 ;; *************** function _IOPinsInit *****************
 12847 ;; Defined at:
 12848 ;;		line 122 in file "main.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;		None
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;		None
 12853 ;; Return value:  Size  Location     Type
 12854 ;;		None               void
 12855 ;; Registers used:
 12856 ;;		None
 12857 ;; Tracked objects:
 12858 ;;		On entry : 300/100
 12859 ;;		On exit  : 300/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12862 ;;      Params:         0       0       0       0       0
 12863 ;;      Locals:         0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0
 12865 ;;      Totals:         0       0       0       0       0
 12866 ;;Total ram usage:        0 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    1
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_main
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           
 12877                           ;psect for function _IOPinsInit
 12878  0826                     _IOPinsInit:	
 12879                           
 12880                           ;main.c: 123: RC4 = 0;
 12881                           
 12882                           ;incstack = 0
 12883                           ; Regs used in _IOPinsInit: []
 12884  0826  1283               	bcf	3,5	;RP0=0, select bank0
 12885  0827  1207               	bcf	7,4	;volatile
 12886                           
 12887                           ;main.c: 124: RC1 = 0;
 12888  0828  1087               	bcf	7,1	;volatile
 12889                           
 12890                           ;main.c: 125: RC0 = 0;
 12891  0829  1007               	bcf	7,0	;volatile
 12892                           
 12893                           ;main.c: 126: RC3 = 0;
 12894  082A  1187               	bcf	7,3	;volatile
 12895                           
 12896                           ;main.c: 127: RA5 = 0;
 12897  082B  1285               	bcf	5,5	;volatile
 12898  082C  0008               	return
 12899  082D                     __end_of_IOPinsInit:	
 12900                           
 12901                           	psect	text71
 12902  0846                     __ptext71:	
 12903 ;; *************** function _IOPinsConfig *****************
 12904 ;; Defined at:
 12905 ;;		line 114 in file "main.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;		None
 12908 ;; Auto vars:     Size  Location     Type
 12909 ;;		None
 12910 ;; Return value:  Size  Location     Type
 12911 ;;		None               void
 12912 ;; Registers used:
 12913 ;;		wreg, status,2, status,0
 12914 ;; Tracked objects:
 12915 ;;		On entry : 200/100
 12916 ;;		On exit  : 300/100
 12917 ;;		Unchanged: 0/0
 12918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12919 ;;      Params:         0       0       0       0       0
 12920 ;;      Locals:         0       0       0       0       0
 12921 ;;      Temps:          0       0       0       0       0
 12922 ;;      Totals:         0       0       0       0       0
 12923 ;;Total ram usage:        0 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:    1
 12926 ;; This function calls:
 12927 ;;		Nothing
 12928 ;; This function is called by:
 12929 ;;		_main
 12930 ;; This function uses a non-reentrant model
 12931 ;;
 12932                           
 12933                           
 12934                           ;psect for function _IOPinsConfig
 12935  0846                     _IOPinsConfig:	
 12936                           
 12937                           ;main.c: 115: TRISA |= 0b00011110;
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in _IOPinsConfig: [wreg+status,2+status,0]
 12941  0846  301E               	movlw	30
 12942  0847  1683               	bsf	3,5	;RP0=1, select bank1
 12943  0848  0485               	iorwf	5,f	;volatile
 12944                           
 12945                           ;main.c: 116: TRISA &= 0b11011111;
 12946  0849  1285               	bcf	5,5	;volatile
 12947                           
 12948                           ;main.c: 117: ANSEL &= 0b00000001;
 12949  084A  3001               	movlw	1
 12950  084B  1703               	bsf	3,6	;RP1=1, select bank3
 12951  084C  0588               	andwf	8,f	;volatile
 12952                           
 12953                           ;main.c: 118: TRISC &= 0b10000000;
 12954  084D  3080               	movlw	128
 12955  084E  1303               	bcf	3,6	;RP1=0, select bank1
 12956  084F  0587               	andwf	7,f	;volatile
 12957                           
 12958                           ;main.c: 119: TRISC |= 0b10000000;
 12959  0850  1787               	bsf	7,7	;volatile
 12960  0851  0008               	return
 12961  0852                     __end_of_IOPinsConfig:	
 12962                           
 12963                           	psect	text72
 12964  085E                     __ptext72:	
 12965 ;; *************** function _isr *****************
 12966 ;; Defined at:
 12967 ;;		line 70 in file "main.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;		None
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;		None
 12972 ;; Return value:  Size  Location     Type
 12973 ;;		None               void
 12974 ;; Registers used:
 12975 ;;		wreg, status,2, status,0
 12976 ;; Tracked objects:
 12977 ;;		On entry : 0/0
 12978 ;;		On exit  : 300/0
 12979 ;;		Unchanged: 0/0
 12980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12981 ;;      Params:         0       0       0       0       0
 12982 ;;      Locals:         0       0       0       0       0
 12983 ;;      Temps:          2       0       0       0       0
 12984 ;;      Totals:         2       0       0       0       0
 12985 ;;Total ram usage:        2 bytes
 12986 ;; Hardware stack levels used:    1
 12987 ;; This function calls:
 12988 ;;		Nothing
 12989 ;; This function is called by:
 12990 ;;		Interrupt level 1
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           
 12995                           ;psect for function _isr
 12996  085E                     _isr:	
 12997                           
 12998                           ;main.c: 71: if(INTCONbits.T0IF)
 12999  085E  1D0B               	btfss	11,2	;volatile
 13000  085F  2865               	goto	i1l340
 13001                           
 13002                           ;main.c: 72: {
 13003                           ;main.c: 73: INTCONbits.T0IF = 0;
 13004  0860  110B               	bcf	11,2	;volatile
 13005                           
 13006                           ;main.c: 74: TMR0 = 0;
 13007  0861  1283               	bcf	3,5	;RP0=0, select bank0
 13008  0862  1303               	bcf	3,6	;RP1=0, select bank0
 13009  0863  0181               	clrf	1	;volatile
 13010  0864  2884               	goto	i1l341
 13011  0865                     i1l340:	
 13012                           
 13013                           ;main.c: 76: }
 13014                           ;main.c: 79: PIR1bits.TMR1IF = 0;
 13015  0865  1283               	bcf	3,5	;RP0=0, select bank0
 13016  0866  1303               	bcf	3,6	;RP1=0, select bank0
 13017  0867  100C               	bcf	12,0	;volatile
 13018                           
 13019                           ;main.c: 92: if(tmr_count == 300)
 13020  0868  302C               	movlw	44
 13021  0869  1683               	bsf	3,5	;RP0=1, select bank1
 13022  086A  0629               	xorwf	_tmr_count^(0+128),w
 13023  086B  1D03               	skipz
 13024  086C  2875               	goto	i1l4797
 13025  086D  032A               	decf	(_tmr_count+1)^(0+128),w
 13026  086E  1D03               	btfss	3,2
 13027  086F  2875               	goto	i1l4797
 13028                           
 13029                           ;main.c: 93: {
 13030                           ;main.c: 94: tmr_count = 0;
 13031  0870  01A9               	clrf	_tmr_count^(0+128)
 13032  0871  01AA               	clrf	(_tmr_count+1)^(0+128)
 13033                           
 13034                           ;main.c: 95: measure = 1;
 13035  0872  01AD               	clrf	_measure^(0+128)
 13036  0873  0AAD               	incf	_measure^(0+128),f
 13037                           
 13038                           ;main.c: 96: }
 13039  0874  287C               	goto	i1l4801
 13040  0875                     i1l4797:	
 13041                           
 13042                           ;main.c: 97: else if(tmr_count == 200)
 13043  0875  30C8               	movlw	200
 13044  0876  0629               	xorwf	_tmr_count^(0+128),w
 13045  0877  042A               	iorwf	(_tmr_count+1)^(0+128),w
 13046  0878  1D03               	btfss	3,2
 13047  0879  287C               	goto	i1l4801
 13048                           
 13049                           ;main.c: 98: {
 13050                           ;main.c: 99: disp = 1;
 13051  087A  01AB               	clrf	_disp^(0+128)
 13052  087B  0AAB               	incf	_disp^(0+128),f
 13053  087C                     i1l4801:	
 13054                           
 13055                           ;main.c: 100: }
 13056                           ;main.c: 101: tmr_count++;
 13057  087C  0AA9               	incf	_tmr_count^(0+128),f
 13058  087D  1903               	skipnz
 13059  087E  0AAA               	incf	(_tmr_count+1)^(0+128),f
 13060                           
 13061                           ;main.c: 104: TMR1H = 0xD8;
 13062  087F  30D8               	movlw	216
 13063  0880  1283               	bcf	3,5	;RP0=0, select bank0
 13064  0881  008F               	movwf	15	;volatile
 13065                           
 13066                           ;main.c: 105: TMR1L = 0xEF;
 13067  0882  30EF               	movlw	239
 13068  0883  008E               	movwf	14	;volatile
 13069  0884                     i1l341:	
 13070  0884  0871               	movf	??_isr+1,w
 13071  0885  008A               	movwf	10
 13072  0886  0E70               	swapf	??_isr^(0+-128),w
 13073  0887  0083               	movwf	3
 13074  0888  0EFE               	swapf	126,f
 13075  0889  0E7E               	swapf	126,w
 13076  088A  0009               	retfie
 13077  088B                     __end_of_isr:	
 13078  007E                     btemp	set	126	;btemp
 13079  007E                     wtemp	set	126
 13080  007E                     wtemp0	set	126
 13081  0080                     wtemp1	set	128
 13082  0082                     wtemp2	set	130
 13083  0084                     wtemp3	set	132
 13084  0086                     wtemp4	set	134
 13085  0088                     wtemp5	set	136
 13086  007F                     wtemp6	set	127
 13087  007E                     ttemp	set	126
 13088  007E                     ttemp0	set	126
 13089  0081                     ttemp1	set	129
 13090  0084                     ttemp2	set	132
 13091  0087                     ttemp3	set	135
 13092  007F                     ttemp4	set	127
 13093  007E                     ltemp	set	126
 13094  007E                     ltemp0	set	126
 13095  0082                     ltemp1	set	130
 13096  0086                     ltemp2	set	134
 13097  0080                     ltemp3	set	128
 13098                           
 13099                           	psect	intentry
 13100  0004                     __pintentry:	
 13101                           ;incstack = 0
 13102                           ; Regs used in _isr: [wreg+status,2+status,0]
 13103                           
 13104  0004                     interrupt_function:	
 13105  007E                     saved_w	set	btemp
 13106  0004  00FE               	movwf	btemp
 13107  0005  0E03               	swapf	3,w
 13108  0006  00F0               	movwf	??_isr
 13109  0007  080A               	movf	10,w
 13110  0008  00F1               	movwf	??_isr+1
 13111  0009  120A  158A  285E   	ljmp	_isr


Data Sizes:
    Strings     237
    Constant    118
    Data        0
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      78
    BANK1            80     26      62
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    measureSHT71@p_value	PTR unsigned char  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), getResSHT71@humi_val(BANK1[3]), 

    __fttoee@addr	PTR eeprom void  size(1) Largest target is 3
		 -> zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    __eetoft@addr	PTR eeprom void  size(1) Largest target is 3
		 -> zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> zeljena_co2(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> zeljena_co2(EEDATA[2]), 

    memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 3
		 -> zeljena_co2(EEDATA[2]), zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(BANK0[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[3]), __fttoee@data(BANK0[3]), __ltoee@data(COMMON[4]), __mtoee@data(COMMON[3]), 
		 -> __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 3
		 -> zeljena_co2(EEDATA[2]), zeljena_vlaznost(EEDATA[3]), zeljena_temperatura(EEDATA[3]), 

    eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(BANK0[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[3]), __eetoft@data(BANK0[3]), __eetol@data(COMMON[4]), __eetom@data(COMMON[3]), 
		 -> __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[6]), STR_26(CODE[6]), STR_23(CODE[6]), STR_22(CODE[6]), 
		 -> STR_21(CODE[6]), STR_18(CODE[6]), STR_12(CODE[6]), STR_6(CODE[6]), 
		 -> STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> humidity(BANK1[5]), temperature(BANK1[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UARTWriteString@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_30(CODE[9]), STR_29(CODE[10]), STR_28(CODE[10]), STR_2(CODE[13]), 

    getResSHT71@p_humi	PTR float  size(1) Largest target is 3
		 -> humi(BANK1[3]), 

    getResSHT71@p_temp	PTR float  size(1) Largest target is 3
		 -> temp(BANK1[3]), 

    readStatusRegSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    readStatusRegSHT71@p_value	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@inp(BANK1[1]), 

    calcSHT71@p_temperature	PTR float  size(1) Largest target is 3
		 -> getResSHT71@temp_val(BANK1[3]), 

    measureSHT71@p_checksum	PTR unsigned char  size(1) Largest target is 1
		 -> getResSHT71@checksum(BANK1[1]), 

    LcdWriteString@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_25(CODE[10]), STR_24(CODE[17]), STR_20(CODE[9]), STR_19(CODE[17]), 
		 -> STR_17(CODE[9]), STR_16(CODE[11]), STR_15(CODE[17]), STR_14(CODE[13]), 
		 -> STR_13(CODE[17]), STR_11(CODE[17]), STR_10(CODE[13]), STR_9(CODE[17]), 
		 -> STR_8(CODE[13]), STR_7(CODE[17]), humidity(BANK1[5]), STR_5(CODE[13]), 
		 -> STR_4(CODE[17]), temperature(BANK1[5]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    _main->_UARTWriteString
    _regulacija->___eetoft
    _menu->___eetoft
    _menuHumi->___eetoft
    _menuCO2->___itoee
    ___itoee->___eetoi
    ___eetoi->_eecpymem
    ___fttoee->___eetoft
    ___eetoft->_eecpymem
    _adcRead->_UARTWriteString
    _UARTWriteString->_UARTWrite
    _getResSHT71->_measureSHT71
    _readStatusRegSHT71->_readByteSHT71
    _readStatusRegSHT71->_writeByteSHT71
    _measureSHT71->_readByteSHT71
    _measureSHT71->_writeByteSHT71
    ___lwtoft->___ftpack
    _displayCO2->_LcdWriteString
    _LcdWriteInt->___eetoi
    _LcdWriteInt->___lwdiv
    _sprintf->___eetoft
    _sprintf->___lldiv
    _sprintf->___llmod
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    ___ftmul->___ftpack
    ___bmul->___lbdiv
    ___lltoft->___ftpack
    ___ftadd->___eetoft
    ___ftadd->___ftpack
    ___ftge->___eetoft
    _LcdWriteString->_LcdWriteChar
    _LcdWriteChar->_LcdPort
    _LcdSetCursor->_LcdCmd
    _UARTInit->___lldiv
    _LcdInit->_LcdCmd
    _LcdCmd->_LcdPort

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_getResSHT71
    _regulacija->___ftge
    _menu->_sprintf
    _menuHumi->_sprintf
    _menuCO2->_LcdWriteInt
    ___itoee->___eetoi
    ___fttoee->___ftadd
    _measureTGS4161->_adcRead
    _getTempDS18B20->___ftadd
    _getResSHT71->_calcSHT71
    _calcSHT71->___ftge
    _displaySoilTemp->_sprintf
    _displayCO2->_LcdWriteInt
    _LcdWriteInt->_LcdSetCursor
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf
    _sprintf->___ftge
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awdiv
    ___bmul->___lbdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    _UARTInit->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _menu->_sprintf
    _menuHumi->_sprintf
    _displaySoilTemp->_sprintf
    _displayAirTemp->_sprintf
    _displayAirMoist->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  354079
                                             23 BANK1      3     3      0
                       _IOPinsConfig
                         _IOPinsInit
                            _LcdInit
                           _UARTInit
                    _UARTWriteString
                            _adcInit
                    _displayAirMoist
                     _displayAirTemp
                         _displayCO2
                    _displaySoilTemp
                        _getResSHT71
                     _getTempDS18B20
                          _initSHT71
                         _initTimer0
                         _initTimer1
                            _initWDT
                     _measureTGS4161
                               _menu
                         _regulacija
                       _resetDS18B20
                        _resetValues
 ---------------------------------------------------------------------------------
 (1) _resetValues                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _regulacija                                           2     2      0   10263
                                             52 BANK0      2     2      0
                           ___eetoft
                            ___eetoi
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0  137873
                       _LcdSetCursor
                     _LcdWriteString
                           ___eetoft
                            ___ftadd
                             ___ftge
                           ___fttoee
                     _manage_buttons
                           _menuHumi
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _menuHumi                                             0     0      0   76328
                       _LcdSetCursor
                     _LcdWriteString
                           ___eetoft
                            ___ftadd
                             ___ftge
                           ___fttoee
                     _manage_buttons
                            _menuCO2
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _menuCO2                                              0     0      0   14783
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
                            ___eetoi
                            ___itoee
                     _manage_buttons
 ---------------------------------------------------------------------------------
 (4) _manage_buttons                                       3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___itoee                                              3     1      2    1382
                                              9 COMMON     1     1      0
                                              3 BANK0      2     0      2
                            ___eetoi (ARG)
                           _memcpyee
 ---------------------------------------------------------------------------------
 (2) ___eetoi                                              6     3      3    1299
                                              6 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           _eecpymem
 ---------------------------------------------------------------------------------
 (3) ___fttoee                                             4     1      3    1762
                                             46 BANK0      4     1      3
                           ___eetoft (ARG)
                            ___ftadd (ARG)
                           _memcpyee
 ---------------------------------------------------------------------------------
 (5) _memcpyee                                             4     2      2     930
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___eetoft                                             8     4      4    1629
                                              6 COMMON     4     0      4
                                              0 BANK0      4     4      0
                           _eecpymem
 ---------------------------------------------------------------------------------
 (3) _eecpymem                                             4     2      2     930
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _measureTGS4161                                      17    15      2    3321
                                             12 BANK0     17    15      2
                            ___lwdiv
                             ___wmul
                            _adcRead
 ---------------------------------------------------------------------------------
 (2) _adcRead                                             12    10      2     472
                                              0 BANK0     12    10      2
                    _UARTWriteString
 ---------------------------------------------------------------------------------
 (3) _UARTWriteString                                      7     5      2     324
                                              3 COMMON     7     5      2
                          _UARTWrite
 ---------------------------------------------------------------------------------
 (4) _UARTWrite                                            1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initWDT                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSHT71                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTempDS18B20                                      15    12      3   13410
                                             46 BANK0     15    12      3
                            ___ftadd
                            ___ftmul
                           ___lwtoft
                        _readDS18B20
                       _resetDS18B20
                       _writeDS18B20
 ---------------------------------------------------------------------------------
 (2) _writeDS18B20                                         3     3      0      90
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _resetDS18B20                                         1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _readDS18B20                                          3     3      0      92
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getResSHT71                                         14    13      1   22520
                                             77 BANK0      1     0      1
                                              0 BANK1     13    13      0
                       _LcdSetCursor
                     _LcdWriteString
                           ___lwtoft
                          _calcSHT71
               _connectionResetSHT71
                       _measureSHT71
                 _readStatusRegSHT71
 ---------------------------------------------------------------------------------
 (2) _readStatusRegSHT71                                   3     2      1     376
                                              6 COMMON     3     2      1
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (2) _measureSHT71                                        10     8      2     708
                                              6 COMMON     4     2      2
                                              0 BANK0      6     6      0
                      _readByteSHT71
                     _tranStartSHT71
                     _writeByteSHT71
 ---------------------------------------------------------------------------------
 (3) _writeByteSHT71                                       4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _readByteSHT71                                        4     4      0     114
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _connectionResetSHT71                                 1     1      0      46
                                              2 COMMON     1     1      0
                     _tranStartSHT71
 ---------------------------------------------------------------------------------
 (3) _tranStartSHT71                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calcSHT71                                           31    27      4   13484
                                             52 BANK0     25    21      4
                            ___ftadd
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2294
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _displaySoilTemp                                      3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayCO2                                           2     0      2   12198
                                             11 BANK0      2     0      2
                       _LcdSetCursor
                        _LcdWriteInt
                     _LcdWriteString
 ---------------------------------------------------------------------------------
 (4) _LcdWriteInt                                          7     3      4    7131
                                              4 BANK0      7     3      4
                       _LcdSetCursor
                       _LcdWriteChar
                            ___eetoi (ARG)
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     586
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _displayAirTemp                                       3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _displayAirMoist                                      3     0      3   50915
                                             62 BANK0      3     0      3
                       _LcdSetCursor
                     _LcdWriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    35      5   45848
                                             52 BANK0     10     5      5
                                              0 BANK1     23    23      0
                            ___awdiv
                           ___eetoft (ARG)
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               14    11      3    8576
                                             23 BANK0     11     8      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              14    10      4    6764
                                             23 BANK0     11     7      4
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     318
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     436
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5292
                                              8 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     300
                                              8 COMMON     1     0      1
                                              3 BANK0      2     2      0
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1806
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             5     1      4    2235
                                              0 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     622
                                              2 COMMON     8     0      8
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             13     9      4     411
                                             34 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    5729
                                             46 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    5503
                                             34 BANK0     12     6      6
                           ___eetoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6    1832
                                             46 BANK0      6     0      6
                           ___eetoft (ARG)
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) _LcdWriteString                                       7     5      2    2080
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                       _LcdWriteChar
 ---------------------------------------------------------------------------------
 (5) _LcdWriteChar                                         4     4      0     260
                                              3 COMMON     4     4      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (5) _LcdSetCursor                                         5     4      1    2891
                                              6 COMMON     1     0      1
                                              0 BANK0      4     4      0
                             _LcdCmd
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                            15    11      4    1146
                                              5 BANK0     11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     798
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _LcdInit                                              2     2      0     279
                                              6 COMMON     2     2      0
                             _LcdCmd
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdCmd                                               3     3      0     155
                                              3 COMMON     3     3      0
                            _LcdPort
 ---------------------------------------------------------------------------------
 (6) _LcdPort                                              1     1      0     124
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOPinsInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IOPinsConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IOPinsConfig
   _IOPinsInit
   _LcdInit
     _LcdCmd
       _LcdPort
     _LcdPort
   _UARTInit
     ___lldiv
   _UARTWriteString
     _UARTWrite
   _adcInit
   _displayAirMoist
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayAirTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _displayCO2
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteInt
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteChar
         _LcdPort
       ___eetoi (ARG)
         _eecpymem
       ___lwdiv (ARG)
       ___wmul (ARG)
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
   _displaySoilTemp
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _getResSHT71
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___lwtoft
       ___ftpack
     _calcSHT71
       ___ftadd
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _connectionResetSHT71
       _tranStartSHT71
     _measureSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
     _readStatusRegSHT71
       _readByteSHT71
       _tranStartSHT71
       _writeByteSHT71
   _getTempDS18B20
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___bmul (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _readDS18B20
     _resetDS18B20
     _writeDS18B20
   _initSHT71
   _initTimer0
   _initTimer1
   _initWDT
   _measureTGS4161
     ___lwdiv
     ___wmul
     _adcRead
       _UARTWriteString
         _UARTWrite
   _menu
     _LcdSetCursor
       _LcdCmd
         _LcdPort
     _LcdWriteString
       _LcdWriteChar
         _LcdPort
     ___eetoft
       _eecpymem
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
     ___fttoee
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       _memcpyee (ARG)
     _manage_buttons
     _menuHumi
       _LcdSetCursor
         _LcdCmd
           _LcdPort
       _LcdWriteString
         _LcdWriteChar
           _LcdPort
       ___eetoft
         _eecpymem
       ___ftadd
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___fttoee
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         _memcpyee (ARG)
       _manage_buttons
       _menuCO2
         _LcdSetCursor
           _LcdCmd
             _LcdPort
         _LcdWriteInt
           _LcdSetCursor
             _LcdCmd
               _LcdPort
           _LcdWriteChar
             _LcdPort
           ___eetoi (ARG)
             _eecpymem
           ___lwdiv (ARG)
           ___wmul (ARG)
         _LcdWriteString
           _LcdWriteChar
             _LcdPort
         ___eetoi
           _eecpymem
         ___itoee
           ___eetoi (ARG)
             _eecpymem
           _memcpyee (ARG)
         _manage_buttons
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___ftge (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftadd (ARG)
             ___eetoft (ARG)
               _eecpymem
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___eetoft (ARG)
               _eecpymem
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             _fround (ARG)
               ___bmul
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___bmul (ARG)
                   ___lbdiv (ARG)
                     ___lbmod (ARG)
                   ___lbmod (ARG)
                 ___ftpack (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lbdiv
                 ___lbmod (ARG)
               ___lbmod
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lldiv (ARG)
         ___llmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
         _isdigit (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___ftge (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftadd (ARG)
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___eetoft (ARG)
             _eecpymem
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           _fround (ARG)
             ___bmul
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___lbdiv (ARG)
                   ___lbmod (ARG)
                 ___lbmod (ARG)
               ___ftpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___lldiv (ARG)
       ___llmod (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
   _regulacija
     ___eetoft
       _eecpymem
     ___eetoi
       _eecpymem
     ___ftadd
       ___eetoft (ARG)
         _eecpymem
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _fround (ARG)
         ___bmul
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge
       ___eetoft (ARG)
         _eecpymem
       ___ftadd (ARG)
         ___eetoft (ARG)
           _eecpymem
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _fround (ARG)
           ___bmul
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
   _resetDS18B20
   _resetValues

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       8       0        3.1%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      98       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4E       5       97.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1A      3E       7       77.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      98      12        0.0%


Microchip Technology PIC Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Jun 20 20:57:36 2017

            UARTInit@baud_rate 0025                              _t 00A4                              pc 0002  
               ___bmul@product 0023                    __CFG_CP$OFF 0000                             PL2 073E  
                           PL4 0081                             PL6 1C31                             PL8 0755  
                           l20 1136                             l25 114C                             l60 0F8F  
                           l61 0F93                             l55 0F83                             l56 0F85  
                           l57 0F89                             l58 0F8A                             l59 0F8E  
                           _RD 0C60                             _WR 0C61                   ___awdiv@sign 0025  
                           fsr 0004            ___wmul@multiplicand 0074                  ___eetoft@addr 0023  
                ___eetoft@data 0020                _UARTWriteString 1D12                   ___ftadd@exp1 004D  
                 ___ftadd@exp2 004C                            PL10 1D32                            PL20 0FD1  
                          PL12 0FC0                            PL30 1FCF                            PL22 0770  
                          PL14 0761                            PL40 0793                            PL32 177D  
                          PL24 0FDF                            PL16 0097                            PL50 07B7  
                          PL42 07A0                            PL34 178A                            PL26 077E  
                          PL18 1767                            PL60 17C4                            PL52 1FD6  
                          PL44 179E                            PL36 1791                            PL28 1775  
                          PL70 17DB                            PL62 0FEC                            PL54 17B5  
                          PL46 07AC                            PL38 078B                            PL80 07CA  
                          PL72 1FE4                            PL64 17CB                            PL56 1FDD  
                          PL48 17AA                            PL90 0FF9                            PL82 07D1  
                          PL74 17E3                            PL66 07C2                            PL58 17BD  
                          PL92 1FF3                            PL84 1FEC                            PL76 0FF3  
                          PL68 17D3                            PL94 07D8                            PL86 17F3  
                          PL78 17EB                            PL96 1D43                            PL88 17F9  
                          PL98 1FFA                   ___ftadd@sign 004B                            l131 1271  
                          l220 1CC6                            l134 1283                            l208 1CDF  
                          l154 12DF                            l162 1340                            l138 1287  
                          l163 1342                            l219 1CBB                            l405 0ABA  
                          l167 1368        __end_of_displaySoilTemp 08BF                            l509 1D2B  
                          l381 0D97                            l640 0E77                            l385 0DC8  
                          l465 1E7C                            l635 0E6C                            l652 0FA6  
                          l567 0109                            l647 0F98                            l907 0637  
                          l871 172D                            l856 1BFF                            l883 1755  
                          _GIE 005F                            l999 1FA4                            _RA1 0029  
                          _RB0 0030                            _RA2 002A                            _RB1 0031  
                          _RA3 002B                            _RC0 0038                            _RB2 0032  
                          _RA4 002C                            _RC1 0039                            _RB3 0033  
                          _RA5 002D                            _RB4 0034                            _RC3 003B  
                          _RB5 0035                            _RC4 003C                            _RB6 0036  
                          _RC5 003D                            _RB7 0037                   __CFG_CPD$OFF 0000  
                          _co2 00A7                            _isr 085E                            fsr0 0004  
                          indf 0000                   ___awmod@sign 0077                   __CFG_IESO$ON 0000  
                 __CFG_FOSC$HS 0000                   ?_readDS18B20 0070                    _zeljena_co2 0006  
                 __CFG_LVP$OFF 0000                           l3153 05A4                           l3241 168A  
                         l3233 167E                           l3149 059C                           l3165 1719  
                         l3421 1FCB                           l3413 1FB7                           l3253 16A5  
                         l3229 1677                           l4205 118A                           l5111 061F  
                         l5105 0611                           l5041 163B                           l3249 169D  
                         l4241 1162                           l4217 111C                           l5025 0FA2  
                         l6001 0E13                           l5131 064D                           l5107 0616  
                         l3603 073C                           l5051 1649                           l5035 1632  
                         l4227 1141                           l3507 0A7B                           l5125 0642  
                         l5117 062E                           l5109 061B                           l3701 1C28  
                         l5205 1F9E                           l3437 0F00                           l4261 1275  
                         l4253 125F                           l3517 0A9B                           l3509 0A87  
                         l6101 1E09                           l5223 0EAE                           l5143 0669  
                         l5119 0633                           l5151 16BB                           l5063 1660  
                         l5303 1501                           l4255 1261                           l3519 0AA7  
                         l6031 0CD7                           l6111 1E25                           l3801 0566  
                         l5081 05E5                           l5321 15CB                           l5313 155E  
                         l3449 0F17                           l5241 0BBD                           l6009 0E33  
                         l6113 1E36                           l6121 1E62                           l6105 1E0F  
                         l3723 04A9                           l5155 16CC                           l5219 1FB1  
                         l5067 1668                           l5251 0BF6                           l4267 128D  
                         l4259 1269                           l6115 1E43                           l3813 0591  
                         l5229 0EB0                           l5077 05DE                           l3661 1B8E  
                         l5333 06C6                           l5173 16DD                           l5309 1544  
                         l5261 0C2E                           l3901 12FE                           l4293 12C9  
                         l6061 0D62                           l6045 0D38                           l6053 0D5A  
                         l6109 1E14                           l3719 049A                           l5087 05F4  
                         l5407 0523                           l5415 0548                           l5423 069A  
                         l5335 06CB                           l5327 160D                           l4279 12AB  
                         l4295 12D1                           l6039 0CF8                           l6119 1E54  
                         l6127 1E68                           l3753 04C1                           l5425 06A5  
                         l5185 16F2                           l5177 16E6                           l5521 0263  
                         l5513 0237                           l5505 01F1                           l6137 1E89  
                         l5099 0602                           l3771 04E5                           l3755 04C6  
                         l3675 1BBF                           l3659 1B89                           l5611 0439  
                         l5451 00D1                           l6059 0C8E                           l6147 1E96  
                         l6083 1DB1                           l3781 04F1                           l3693 1C1A  
                         l5365 0711                           l5349 06E8                           l5189 16FB  
                         l5525 0275                           l5509 0203                           l5613 0444  
                         l5461 011A                           l5453 0104                           l5437 00BD  
                         l6093 1DE4                           l3783 04FB                           l3775 04ED  
                         l5375 071D                           l5287 1F73                           l5279 1F23  
                         l5535 029E                           l3919 1D14                           l6087 1DB8  
                         l4921 173B                           l3689 1C12                           l5377 0727  
                         l5369 0719                           l5553 031E                           l5545 02E0  
                         l5633 00AA                           l5721 1463                           l5801 0993  
                         l6089 1DCB                           l4763 005F                           l4923 1745  
                         l5395 0684                           l3787 0509                           l3699 1C1E  
                         l5627 0479                           l5619 0451                           l5539 02DE  
                         l5467 012A                           l5635 0486                           l5459 010B  
                         l3859 1339                           l6099 1DFE                           l4765 006D  
                         l4757 0040                           l4917 1731                           l5581 0382  
                         l5477 015C                           l5725 147C                           l4927 1753  
                         l4919 1736                           l5575 035D                           l5559 0326  
                         l5567 035A                           l5663 0B35                           l4929 174A  
                         l5593 03CA                           l5577 0371                           l5497 01B7  
                         l5825 110E                           l5907 1C71                           l5683 0B91  
                         l5771 09DB                           ?_isr 0070                           l4949 0E9A  
                         l5589 0399                           l5749 1CFE                           l5677 0B79  
                         l5669 0B4B                           l5687 0B02                           l5961 094F  
                         l5785 0A3B                           l5793 0A5D                           l4995 0E73  
                         l5779 09FC                           l5981 0D7C                           l5879 11ED  
                         l5899 1C4F                           l5997 0DF0                           l5989 0DAD  
                         STR_1 1910                           STR_2 1945                           STR_3 196F  
                         STR_4 18EE                           STR_5 192B                           STR_6 196F  
                         STR_7 1888                           STR_8 191E                           STR_9 1899  
                         _BRGH 04C2                           _CREN 00C4                           u5023 0030  
                         u4080 12FB                           u5033 003E                           u3365 0F09  
                         u4604 115D                           u6205 020D                           u4605 115B  
                         u6215 0242                           u7007 0A81                           u6065 0531  
                         u7017 0A8F                           u3755 1BE3                           u5435 1652  
                         u7107 113B                           u7027 0AA1                           u4564 1122  
                         u2965 1690                           u6325 0366                           u6245 0261  
                         u6165 0174                           u7117 1173                           u4565 1120  
                         u7037 0AAF                           u7207 0EDE                           u6415 0465  
                         u6335 037C                           u7127 117C                           u7047 0AC0  
                         u7217 0EEB                           u7137 1185                           u7057 1C92  
                         u7227 0F2B                           u6275 0317                           u7147 118C  
                         u7067 1CD7                           u7237 0F38                           u3885 04CA  
                         u7157 1164                           u7077 1CE5                           u7247 0F45  
                         u3975 0579                           u7167 11E5                           u7087 10C1  
                         u7257 0F74                           u7177 127E                           u7097 1132  
                         u6465 0B29                           u7187 1345                           u7197 1301  
                         u6485 0B6D                           u6805 0E48                           u5965 06F7  
                         u6795 0E2E                           u6967 1D90                           u6977 1E70  
                         u6987 1E84                           u6997 0A70                           _TMR0 0001  
                         _SPEN 00C7                           _TRMT 04C1                           _WREN 0C62  
                         _TXEN 04C5                           _SYNC 04C4                   __CFG_WRT$OFF 0000  
                __CFG_FCMEN$ON 0000                ?_tranStartSHT71 0070                           _disp 00AB  
                         _main 1D49                   ___ftpack@arg 0072                           _menu 0C55  
                         _humi 00BE                   ___ftpack@exp 0075                           _temp 00C1  
                         btemp 007E                  __CFG_BOREN$ON 0000                ?_displayAirTemp 005E  
                         ltemp 007E                           start 000C                           ttemp 007E  
                         wtemp 007E            __end_of_LcdWriteInt 0C55                   _sprintf$1263 00C4  
              __end_of_LcdInit 0F67                __end_of_LcdPort 0F95              ___bmul@multiplier 0024  
                __CFG_MCLRE$ON 0000               readByteSHT71@ack 0073                   ___ftmul@cntr 0035  
             ??_writeByteSHT71 0072               readByteSHT71@res 0074                   ___ftmul@sign 0036  
                 ___itoee@addr 0079                   ___itoee@data 0023                   ___fttol@exp1 004E  
          _zeljena_temperatura 0000           __end_of_LcdSetCursor 0EAE                   ___fttol@lval 004A  
                        ??_isr 0070          __size_of_writeDS18B20 0030                    ?_IOPinsInit 0070  
                        ?_main 0070                __end_of___eetoi 0E69                          ?_menu 0070  
              __end_of_adcInit 085E                __end_of_adcRead 1D12                __end_of___awdiv 166D  
              __end_of___lbdiv 1FB3                          _EEADR 010D                __end_of___ftadd 067D  
                        STR_10 1938                          STR_11 18AA                          STR_20 1922  
                        STR_12 196F                          STR_21 196F                          STR_13 18FF  
                        STR_14 192B                          STR_22 196F                          STR_30 1966  
                        STR_23 196F                          STR_15 18DD                          STR_16 1920  
                        STR_24 18BB                          _BRG16 0C3B                          STR_17 1922  
                        STR_25 1921                          STR_26 196F                          STR_18 196F  
                        STR_27 196F                          STR_19 18CC                          STR_28 195C  
              __end_of___awmod 16AA                          STR_29 1952                __end_of___lbmod 1FCF  
                        _CARRY 0018                __end_of___ftneg 05BB                          _ANSEL 0188  
              __end_of___lldiv 059A                __end_of___ftmul 1717                ___awdiv@divisor 0020  
              __end_of___llmod 0551                __end_of___ftsub 0698                __end_of___fttol 0512  
              __end_of___itoee 0BA1                __end_of___lwdiv 0F1C                          i1l340 0865  
                        i1l341 0884                ___awdiv@counter 0024                          _TMR1H 000F  
                        _TMR1L 000E                          _SPBRG 0099                          _TRISA 0085  
                        _TRISB 0086                          _TRISC 0087                          _TXREG 0019  
                 ___lltoft@exp 0024               __end_of_UARTInit 0081             __size_of_UARTWrite 0008  
              __end_of_menuCO2 0B9A                __end_of_initWDT 0834                __end_of_dpowers 1888  
                        _scale 148E                __end_of_isdigit 073E                  ___ftpack@sign 0076  
             ?_displayAirMoist 005E                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F                __end_of_sprintf 048B                ___lbdiv@divisor 0077  
         __end_of_LcdWriteChar 0EF2                ___lbdiv@counter 0021               LcdSetCursor@temp 0023  
                 _writeDS18B20 1117                __initialization 000F                  ?_measureSHT71 0076  
      __end_of_UARTWriteString 1D2A                writeDS18B20@Cmd 0073                   __end_of_main 1E9D  
                 __end_of_menu 0D66               _zeljena_vlaznost 0003         __size_of_readByteSHT71 0030  
               _manage_buttons 0A68                  ___fttoee@addr 0051                  ___fttoee@data 004E  
                       ??_main 00DB                  ___fttol@sign1 0049                   adcRead@tempH 0028  
                       ??_menu 007A                   adcRead@tempL 0026               ?_displaySoilTemp 005E  
         __size_of__tdiv_to_l_ 0078           __size_of_getResSHT71 009D           measureSHT71@loop_cnt 0021  
                       _ADCON0 001F                         _ADCON1 009F               __end_of___eetoft 0E5B  
             ___llmod@dividend 0076                         ?_scale 0037                         _ADRESH 001E  
                       _ADRESL 009E                         _EEDATA 010C                         _EECON1 018C  
                       _EECON2 018D               ___awdiv@dividend 0022               __end_of___ftpack 1767  
                       _ANSELH 0189               __end_of___fttoee 0ECD               __end_of___lltoft 06B8  
             getResSHT71@error 00C9                    _LcdWriteInt 0BA1                         i1l4801 087C  
                       i1l4797 0875                         _INTCON 000B               __end_of___lwtoft 1257  
                    ??_LcdInit 0076                         _SPBRGH 009A                      ??_LcdPort 0072  
                 ?_resetValues 0070            __size_of_IOPinsInit 0007                         _LcdCmd 0F67  
               __CFG_PWRTE$OFF 0000               __end_of_eecpymem 0E85                 ??_measureSHT71 0078  
             __end_of__powers_ 1860                         ___bmul 1717                         ___ftge 048B  
                 readDS18B20@i 0074              __end_of_UARTWrite 1D32                         ___wmul 059A  
                    ??___eetoi 0079                      ??_adcInit 0072                      ??_adcRead 0022  
                    ??___awdiv 0078                      ??___lbdiv 0078                      ??___ftadd 0048  
                    ??___awmod 0076                      ??___lbmod 0073                      ??___ftneg 0075  
                    ??___lldiv 007A                      ??___ftmul 002E                      ??___llmod 007A  
                    ??___ftsub 007A                      ??___fttol 0046                      ??___itoee 0079  
       __end_of_manage_buttons 0AC6                      ??___lwdiv 0076                    memcpyee@ptr 0074  
      __size_of_measureTGS4161 008D               __end_of_memcpyee 0FC0               __end_of_menuHumi 0A68  
                       _fround 1E9D               ___awdiv@quotient 0026                ___awmod@divisor 0072  
              ___awmod@counter 0076          ___ftmul@f3_as_product 0032                      ??_menuCO2 007A  
                    ??_initWDT 0072                      ??_isdigit 0072                  _measure_count 00AF  
             UARTWriteString@i 0078                         saved_w 007E                      ??_sprintf 0059  
             ___lbdiv@dividend 0020           __size_of_readDS18B20 0027                  _readByteSHT71 12D9  
              ___lbmod@divisor 0072        __end_of__initialization 0018        __size_of_LcdWriteString 0018  
              ___lbmod@counter 0075                     ___ftadd@f1 0042                     ___ftadd@f2 0045  
                   ___ftge@ff1 004E                     ___ftge@ff2 0051             __size_of_calcSHT71 0114  
                   ___ftneg@f1 0072          __size_of_LcdSetCursor 0029            ___bmul@multiplicand 0078  
                   ___ftmul@f1 0028                     ___ftmul@f2 002B                     ___ftsub@f1 0051  
                   ___ftsub@f2 004E                     ___fttol@f1 0042                 __pcstackCOMMON 0070  
             ?_UARTWriteString 0073                      ?_UARTInit 0025                     ___lltoft@c 0020  
              ?_manage_buttons 0070                  __end_of_scale 1628                     __end_ofPL2 0755  
                   __end_ofPL4 0097                     __end_ofPL6 1C3E                     __end_ofPL8 0761  
             ___lbdiv@quotient 0022                     ___lwtoft@c 0020                     __div_to_l_ 1B73  
               _OPTION_REGbits 0081               ??_tranStartSHT71 0072                __div_to_l_@exp1 002D  
              __div_to_l_@cntr 002C                        ??_scale 003A                 ?_readByteSHT71 0070  
              __div_to_l_@quot 0028               ??_displayAirTemp 007A          __size_of_LcdWriteChar 0025  
                 calcSHT71@t_C 005E    __size_of_readStatusRegSHT71 0019                   _LcdSetCursor 0E85  
                   __pbssBANK1 00A0             __size_of_initSHT71 0004                  ?_resetDS18B20 0070  
                      ?_LcdCmd 0070                  __div_to_l_@f1 0072                  __div_to_l_@f2 0075  
                   calcSHT71@t 005B                 _calcSHT71$1257 0061                 _calcSHT71$1258 0064  
__size_of_connectionResetSHT71 0017                     __pmaintext 1D49                 displayCO2@co22 002B  
                      ?___bmul 0078                        ?___ftge 004E                        ?___wmul 0072  
                   ??_UARTInit 007A          connectionResetSHT71@i 0072                  ?_IOPinsConfig 0070  
                   __pintentry 0004                      ?___eetoft 0076                        ?_fround 0037  
            LcdWriteInt@column 0027                      ?___ftpack 0072                      ?___fttoee 004E  
                 ??_IOPinsInit 0072                      UARTInit@x 002E                      ?___lltoft 0020  
                    ?___lwtoft 0020              writeByteSHT71@cmd 0073              __end_of_calcSHT71 148E  
            getResSHT71@p_humi 006D                   _LcdWriteChar 0ECD              getResSHT71@p_temp 00C8  
          getTempDS18B20@tempH 0059            getTempDS18B20@tempL 0057                        LcdCmd@a 0075  
      __size_of_getTempDS18B20 006C                     _disp_count 00AC           __end_of_measureSHT71 12D9  
    readStatusRegSHT71@p_value 0077                      ?_eecpymem 0072                     _displayCO2 0927  
                   __stringtab 1800                        _LcdInit 0F1C                        _LcdPort 0F7D  
                    ?_memcpyee 0072                      ?_menuHumi 0070                 ??_resetDS18B20 0072  
              __size_of_LcdCmd 0016             __end_of_IOPinsInit 082D              __end_of__npowers_ 1839  
                   _scale$1262 003E           __size_of_resetValues 0013                 ??_IOPinsConfig 0072  
              __size_of___bmul 000E                __size_of___ftge 002C                        ___eetoi 0E5B  
                      _adcInit 0852                     _initTimer0 083C                        _adcRead 1CCB  
                   _initTimer1 07F1                        ___awdiv 1628                        ___lbdiv 1F98  
                      ___ftadd 05BB                        ___awmod 166D                        ___lbmod 1FB3  
                      ___ftneg 05B3                        ___lldiv 0551                __size_of___wmul 0019  
                      ___ftmul 16AA                        ___llmod 0512                        ___ftsub 067D  
                      ___fttol 04B7                        ___itoee 0B9A            getResSHT71@checksum 00CD  
               _measureTGS4161 1C3E                        ___lwdiv 0EF2                     ??___eetoft 007A  
            __end_of_initSHT71 0826                     ??___ftpack 0077                __size_of_fround 00FB  
                   ??___fttoee 007A                   memcpyee@from 0072                     ??___lltoft 007A  
                      __ptext1 07DE                        __ptext2 0D66                        __ptext3 0C55  
                      __ptext4 095A                        __ptext5 0AC6                        __ptext6 0A68  
                      __ptext7 0B9A                        __ptext8 0E5B                        __ptext9 0EC6  
               LcdWriteInt@row 0026                   memcpyee@size 0073                     ??___lwtoft 007A  
                    _T1CONbits 0010                        _menuCO2 0AC6                    ?__div_to_l_ 0072  
                      _initWDT 082D                        _dpowers 1860                        _measure 00AD  
                      _isdigit 0730                   __size_of_isr 002D                        _ok_flag 007A  
          writeByteSHT71@error 0074               ___awmod@dividend 0074                ??_readByteSHT71 0072  
                   ??_eecpymem 0074            getResSHT71@humi_val 00CA                        _sprintf 00A6  
                      clrloop0 0835           end_of_initialization 0018                     _minus_flag 00B1  
                 ?_LcdWriteInt 0024               measureSHT71@mode 0077            getResSHT71@temp_val 00CE  
             measureSHT71@temp 0024                 _LcdWriteString 0EAE                     _regulacija 0D66  
                   ??_memcpyee 0074                     ??_menuHumi 007A                     eecpymem@cp 0074  
                   eecpymem@to 0075                ___lldiv@divisor 0072                ___lldiv@counter 0024  
          measureTGS4161@krez1 0030            measureTGS4161@krez2 0032       __size_of_displayAirMoist 0034  
       __end_of_measureTGS4161 1CCB                   __pstringtext 1800                 __tdiv_to_l_@f1 0072  
               __tdiv_to_l_@f2 0075                  ??__tdiv_to_l_ 0020                      _UARTWrite 1D2A  
              calcSHT71@rh_lin 0058                  ??_getResSHT71 00C4        __size_of_writeByteSHT71 0030  
             ___lbmod@dividend 0074                      _TRISBbits 0086                      _TRISCbits 0087  
                  ?_displayCO2 002B         __end_of_LcdWriteString 0EC6       __size_of_displaySoilTemp 0034  
                LcdSetCursor@a 0020                  LcdSetCursor@b 0076                  LcdSetCursor@y 0022  
                LcdSetCursor@z 0021                    ___lbmod@rem 0076                 readByteSHT71@i 0075  
          __size_of__div_to_l_ 00BE               ??_manage_buttons 0072                 __end_of_LcdCmd 0F7D  
                  ___ftmul@exp 0031                ?_measureTGS4161 002C                    ?_initTimer0 0070  
                  ?_initTimer1 0070                 __end_of___bmul 1725                 __end_of___ftge 04B7  
               getResSHT71@inp 00C7                 __end_of___wmul 05B3              readDS18B20@result 0073  
            __size_of_UARTInit 0065                     ?_UARTWrite 0070          __size_of_measureSHT71 0082  
               __end_of_fround 1F98           __end_of_resetDS18B20 1191              displaySoilTemp@t2 005E  
                  __end_ofPL10 1D43                    __end_ofPL20 0FDF                    __end_ofPL12 0FD1  
                  __end_ofPL30 1FD6                    __end_ofPL22 077E                    __end_ofPL14 0770  
                  __end_ofPL40 07A0                    __end_ofPL32 178A                    __end_ofPL24 0FEC  
                  __end_ofPL16 00A6                    __end_ofPL50 07C2                    __end_ofPL42 07AC  
                  __end_ofPL34 1791                    __end_ofPL26 078B                    __end_ofPL18 1775  
                  __end_ofPL60 17CB                    __end_ofPL52 1FDD                    __end_ofPL44 17AA  
                  __end_ofPL36 179E                    __end_ofPL28 177D                    __end_ofPL70 17E3  
                  __end_ofPL62 0FF3                    __end_ofPL54 17BD                    __end_ofPL46 07B7  
                  __end_ofPL38 0793                    __end_ofPL80 07D1                    __end_ofPL72 1FEC  
                  __end_ofPL64 17D3                    __end_ofPL56 1FE4                    __end_ofPL48 17B5  
                  __end_ofPL90 1000                    __end_ofPL82 07D8                    __end_ofPL74 17EB  
                  __end_ofPL66 07CA                    __end_ofPL58 17C4                    __end_ofPL92 1FFA  
                  __end_ofPL84 1FF3                    __end_ofPL76 0FF9                    __end_ofPL68 17DB  
                  __end_ofPL94 07DE                    __end_ofPL86 17F9                    __end_ofPL78 17F3  
                  __end_ofPL96 1D49                    __end_ofPL88 1800                    __end_ofPL98 2000  
          start_initialization 000F                 _getTempDS18B20 10AB                  ??_readDS18B20 0072  
          __end_of__tdiv_to_l_ 0730                    __end_of_isr 088B            __end_of_getResSHT71 1247  
              ?_LcdWriteString 0077           __end_of_IOPinsConfig 0852                    adcRead@temp 002A  
          measureSHT71@p_value 0020                    ?_regulacija 0070                ___llmod@divisor 0072  
       measureSHT71@p_checksum 0076                ___llmod@counter 0020                       ??_LcdCmd 0073  
                 _measureSHT71 1257                       ??___bmul 0079                       ??___ftge 007A  
                   memcpyee@to 0075                       ??___wmul 0076            __size_of_displayCO2 0033  
                     ??_fround 007A              ??_displayAirMoist 007A                  sprintf@tmpval 00CE  
       __end_of_getTempDS18B20 1117              __size_of___eetoft 0010       __size_of_UARTWriteString 0018  
                   fround@prec 0041              __size_of___ftpack 0042                    __pbssEEDATA 0000  
            __size_of___fttoee 0007              __size_of___lltoft 0020   __end_of_connectionResetSHT71 137A  
                  __pbssCOMMON 007A                      ___latbits 0002              __size_of___lwtoft 0010  
                __pcstackBANK0 0020                  __pcstackBANK1 00C4               LcdWriteChar@temp 0074  
   __end_of_readStatusRegSHT71 11AA                      _calcSHT71 137A      getTempDS18B20@temperatura 0054  
            __size_of_eecpymem 001C            __size_of_initTimer0 000A            __size_of_initTimer1 000F  
          __end_of_readDS18B20 116E                       ?_LcdInit 0070                    sprintf@flag 00C8  
                     ?_LcdPort 0070                    sprintf@fval 00D7                    sprintf@prec 00D4  
                  calcSHT71@rh 006A           __size_of_LcdWriteInt 00B4                  _UARTInit$1259 0029  
                ?_writeDS18B20 0070              ??_displaySoilTemp 007A              __size_of_memcpyee 002B  
            __size_of_menuHumi 010E               ___lwdiv@dividend 0074           displayAirMoist@humi2 005E  
                     ?___eetoi 0076                       ?_adcInit 0070                       ?_adcRead 0020  
                     ?___awdiv 0020                       ?___lbdiv 0077                       ?___ftadd 0042  
                     ?___awmod 0072                       ?___lbmod 0072                       ?___ftneg 0072  
                     ?___lldiv 0072                       ?___ftmul 0028                       ?___llmod 0072  
                     ?___ftsub 004E                      __npowers_ 1812                       ?___fttol 0042  
                     ?___itoee 0023                       ?___lwdiv 0072                   _ok_flag_humi 00B3  
           getTempDS18B20@temp 005B                    ??_UARTWrite 0072                    __tdiv_to_l_ 06B8  
                  _getResSHT71 11AA            __size_of_regulacija 00E5                   ??__div_to_l_ 0020  
              ?_getTempDS18B20 004E                 _writeByteSHT71 1333                       ?_menuCO2 0070  
                     ?_initWDT 0070                       ?_isdigit 0070                      _initSHT71 0822  
                   ?_calcSHT71 0054                  LcdWriteChar@a 0076                  LcdWriteChar@y 0075  
             ___lwdiv@quotient 0076                       ?_sprintf 0054                 __size_of_scale 019A  
                LcdWriteInt@ch 002A                      _menu_flag 00B0                measureTGS4161@i 0038  
              measureTGS4161@n 0036              interrupt_function 0004                 ___wmul@product 0076  
                ??_resetValues 0072                 ??_writeDS18B20 0072                      clear_ram0 0834  
                     _PIE1bits 008C         measureTGS4161@ppm_temp 0034        __size_of_tranStartSHT71 002A  
                     _PIR1bits 000C             __end_of__div_to_l_ 1C31             measureTGS4161@temp 0039  
      __size_of_displayAirTemp 0034                       LcdPort@a 0072            calcSHT71@p_humidity 0054  
                     _UARTInit 001C          __size_of_resetDS18B20 0023                      _plus_flag 007B  
       __end_of_writeByteSHT71 1363                      _tmr_count 00A9                     _ADCON0bits 001F  
                  __stringbase 1812              ___wmul@multiplier 0072          __size_of_IOPinsConfig 000C  
                   ?_initSHT71 0070                    _readDS18B20 1147                   ??_displayCO2 0079  
                UARTWrite@data 0072              ??_UARTWriteString 0075          __end_of_readByteSHT71 1309  
                writeDS18B20@i 0074               ??_measureTGS4161 002E               __size_of_LcdInit 004B  
             __size_of_LcdPort 0018                   _resetDS18B20 116E           _connectionResetSHT71 1363  
                 ??_initTimer0 0072                   ??_initTimer1 0072                    _measure_co2 00AE  
          __end_of_resetValues 07F1                   _IOPinsConfig 0846             __end_of_displayCO2 095A  
             __size_of___eetoi 000E               __size_of_adcInit 000C               __size_of_adcRead 0047  
             __size_of___awdiv 0045               __size_of___lbdiv 001B               __size_of___ftadd 00C2  
             __size_of___awmod 003D               __size_of___lbmod 001C               __size_of___ftneg 0008  
             __size_of___lldiv 0049               __size_of___ftmul 006D                       ___eetoft 0E4B  
             __size_of___llmod 003F               __size_of___ftsub 001B               __size_of___fttol 005B  
             __size_of___itoee 0007               __size_of___lwdiv 002A                ?_writeByteSHT71 0070  
                     ___ftpack 1725                       ___fttoee 0EC6                    _fround$1260 003E  
                  _fround$1261 003B             __end_of__stringtab 1812                       ___lltoft 0698  
                  _isdigit$961 0072                       ___lwtoft 1247               ??_LcdWriteString 0020  
                   sprintf@exp 00D2                     sprintf@val 00CA               __size_of_menuCO2 00D4  
             __size_of_initWDT 0007               __size_of_isdigit 000E                ___lwdiv@divisor 0072  
                 eecpymem@from 0072                       _eecpymem 0E69                    ??_calcSHT71 007A  
                 eecpymem@size 0073                ___lwdiv@counter 0078                    _ok_flag_co2 00B2  
                     __ptext10 0F95                       __ptext11 0E4B                       __ptext20 0822  
                     __ptext12 0E69                       __ptext21 10AB                       __ptext13 1C3E  
                     __ptext30 1363                       __ptext22 1117                       __ptext14 1CCB  
                     __ptext31 1309                       __ptext23 116E                       __ptext15 1D12  
                     __ptext40 00A6                       __ptext32 137A                       __ptext24 1147  
                     __ptext16 1D2A                       __ptext41 148E                       __ptext33 1247  
                     __ptext25 11AA                       __ptext17 082D                       __ptext50 06B8  
                     __ptext42 166D                       __ptext34 088B                       __ptext26 1191  
                     __ptext18 07F1                       __ptext51 1B73                       __ptext43 1628  
                     __ptext35 0927                       __ptext27 1257                       __ptext19 083C  
                     __ptext60 048B                       __ptext52 059A                       __ptext44 0730  
                     __ptext36 0BA1                       __ptext28 1333                       __ptext61 0EAE  
                     __ptext53 0698                       __ptext45 1E9D                       __ptext37 0EF2  
                     __ptext29 12D9                       __ptext70 0826                       __ptext62 0ECD  
                     __ptext54 0512                       __ptext46 1FB3                       __ptext38 08BF  
                     __ptext71 0846                       __ptext63 0E85                       __ptext55 04B7  
                     __ptext47 1F98                       __ptext39 08F3                       __ptext72 085E  
                     __ptext64 0852                       __ptext56 067D                       __ptext48 16AA  
                     __ptext65 001C                       __ptext57 05BB                       __ptext49 1717  
                     __ptext66 0551                       __ptext58 1725                       __ptext67 0F1C  
                     __ptext59 05B3                       __ptext68 0F67                       __ptext69 0F7D  
            __CFG_BOR4V$BOR40V 0000                writeByteSHT71@i 0075                       __powers_ 1839  
          displayAirTemp@temp2 005E                  ?_LcdSetCursor 0076               __size_of_sprintf 03E5  
           __end_of_initTimer0 0846             __end_of_initTimer1 0800                   ??_regulacija 0054  
                     _memcpyee 0F95                       _menuHumi 095A                  __size_of_main 0154  
 readStatusRegSHT71@p_checksum 0076                  __size_of_menu 0111                   LcdWriteInt@i 0024  
                     _humidity 00B4                _displayAirMoist 08F3          ?_connectionResetSHT71 0070  
            measureTGS4161@ppm 003B                LcdWriteString@a 0077                LcdWriteString@i 0023  
                ?_LcdWriteChar 0070             __end_of_regulacija 0E4B           __end_of_writeDS18B20 1147  
                  ??_initSHT71 0072                     _INTCONbits 000B              measureSHT71@error 0022  
            adcRead@loop_count 0024                       isdigit@c 0073                _displaySoilTemp 088B  
                     scale@scl 0041                 ??_LcdSetCursor 0077                       intlevel1 0000  
                    sprintf@ap 00C7               __tdiv_to_l_@exp1 0028               __tdiv_to_l_@cntr 0027  
                    sprintf@sp 00D6               __tdiv_to_l_@quot 0023               ___lldiv@dividend 0076  
           UARTWriteString@str 0073                    _resetValues 07DE                 _tranStartSHT71 1309  
           _readStatusRegSHT71 1191                      stringcode 180A                 _displayAirTemp 08BF  
     LcdWriteInt@ch_manje_1000 0029               ??_getTempDS18B20 0051            ?_readStatusRegSHT71 0076  
      readStatusRegSHT71@error 0078                   ?__tdiv_to_l_ 0072                 ??_LcdWriteChar 0073  
                   _IOPinsInit 0826        __size_of_manage_buttons 005E                   ?_getResSHT71 006D  
                   _OPTION_REG 0081                    _temperature 00B9                       sprintf@c 00DA  
                     sprintf@f 0054                    _tempervalue 00A0               ___lldiv@quotient 0020  
                     stringtab 1800        LcdWriteInt@ch_manje_100 0028                     _WDTCONbits 0105  
             calcSHT71@rh_true 0067           ??_readStatusRegSHT71 0077                  ??_LcdWriteInt 0079  
      __end_of_displayAirMoist 0927         __end_of_tranStartSHT71 1333         __end_of_displayAirTemp 08F3  
       ??_connectionResetSHT71 0072         calcSHT71@p_temperature 0057                   ___eetoi@addr 0022  
                 ___eetoi@data 0020  
